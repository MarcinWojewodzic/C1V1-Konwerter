
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026f8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080027b0  080027b0  000127b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027f0  080027f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027f0  080027f0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027f0  080027f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027f0  080027f0  000127f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027f4  080027f4  000127f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002804  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002804  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099ee  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f3d  00000000  00000000  00029a22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  0002b960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002c290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014a9f  00000000  00000000  0002caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf88  00000000  00000000  00041547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ec79  00000000  00000000  0004e4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd148  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ec4  00000000  00000000  000cd198  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002798 	.word	0x08002798

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002798 	.word	0x08002798

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <bh1750_TransmitData>:
 *      Author: Marcin
 */
#include "main.h"
#include "bh1750.h"
void bh1750_TransmitData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
 8000218:	b590      	push	{r4, r7, lr}
 800021a:	b087      	sub	sp, #28
 800021c:	af02      	add	r7, sp, #8
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	1dfb      	adds	r3, r7, #7
 8000224:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	6818      	ldr	r0, [r3, #0]
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	791b      	ldrb	r3, [r3, #4]
 800022e:	b29b      	uxth	r3, r3
 8000230:	18db      	adds	r3, r3, r3
 8000232:	b299      	uxth	r1, r3
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	b29c      	uxth	r4, r3
 800023a:	68ba      	ldr	r2, [r7, #8]
 800023c:	23fa      	movs	r3, #250	; 0xfa
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	0023      	movs	r3, r4
 8000244:	f000 fdf4 	bl	8000e30 <HAL_I2C_Master_Transmit>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b005      	add	sp, #20
 800024e:	bd90      	pop	{r4, r7, pc}

08000250 <bh1750_ReceiveData>:
void bh1750_ReceiveData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b087      	sub	sp, #28
 8000254:	af02      	add	r7, sp, #8
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	6818      	ldr	r0, [r3, #0]
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	791b      	ldrb	r3, [r3, #4]
 8000266:	b29b      	uxth	r3, r3
 8000268:	18db      	adds	r3, r3, r3
 800026a:	b299      	uxth	r1, r3
 800026c:	1dfb      	adds	r3, r7, #7
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b29c      	uxth	r4, r3
 8000272:	68ba      	ldr	r2, [r7, #8]
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	009b      	lsls	r3, r3, #2
 8000278:	9300      	str	r3, [sp, #0]
 800027a:	0023      	movs	r3, r4
 800027c:	f000 fee0 	bl	8001040 <HAL_I2C_Master_Receive>
}
 8000280:	46c0      	nop			; (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	b005      	add	sp, #20
 8000286:	bd90      	pop	{r4, r7, pc}

08000288 <bh1750_ChangeState>:
void bh1750_ChangeState(bh1750_t *bh,bh1750State_t s)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	000a      	movs	r2, r1
 8000292:	1cfb      	adds	r3, r7, #3
 8000294:	701a      	strb	r2, [r3, #0]
	if(s==Continuously_H_Resolution_Mode||s==Continuously_H_Resolution_Mode2||s==Continuously_L_Resolution_Mode)
 8000296:	1cfb      	adds	r3, r7, #3
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b10      	cmp	r3, #16
 800029c:	d007      	beq.n	80002ae <bh1750_ChangeState+0x26>
 800029e:	1cfb      	adds	r3, r7, #3
 80002a0:	781b      	ldrb	r3, [r3, #0]
 80002a2:	2b11      	cmp	r3, #17
 80002a4:	d003      	beq.n	80002ae <bh1750_ChangeState+0x26>
 80002a6:	1cfb      	adds	r3, r7, #3
 80002a8:	781b      	ldrb	r3, [r3, #0]
 80002aa:	2b13      	cmp	r3, #19
 80002ac:	d105      	bne.n	80002ba <bh1750_ChangeState+0x32>
	bh1750_TransmitData(bh,&s,1);
 80002ae:	1cf9      	adds	r1, r7, #3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	2201      	movs	r2, #1
 80002b4:	0018      	movs	r0, r3
 80002b6:	f7ff ffaf 	bl	8000218 <bh1750_TransmitData>
	bh->state=s;
 80002ba:	1cfb      	adds	r3, r7, #3
 80002bc:	781a      	ldrb	r2, [r3, #0]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	715a      	strb	r2, [r3, #5]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	b002      	add	sp, #8
 80002c8:	bd80      	pop	{r7, pc}

080002ca <bh1750_SendStartMeasurment>:
void bh1750_SendStartMeasurment(bh1750_t *bh)
{
 80002ca:	b580      	push	{r7, lr}
 80002cc:	b082      	sub	sp, #8
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
	if(bh->state==One_Time_H_Resolution_Mode||bh->state==One_Time_H_Resolution_Mode2||bh->state==One_Time_L_Resolution_Mode)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	795b      	ldrb	r3, [r3, #5]
 80002d6:	2b20      	cmp	r3, #32
 80002d8:	d007      	beq.n	80002ea <bh1750_SendStartMeasurment+0x20>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	795b      	ldrb	r3, [r3, #5]
 80002de:	2b21      	cmp	r3, #33	; 0x21
 80002e0:	d003      	beq.n	80002ea <bh1750_SendStartMeasurment+0x20>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	795b      	ldrb	r3, [r3, #5]
 80002e6:	2b23      	cmp	r3, #35	; 0x23
 80002e8:	d106      	bne.n	80002f8 <bh1750_SendStartMeasurment+0x2e>
	{
		bh1750_TransmitData(bh,&bh->state,1);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	1d59      	adds	r1, r3, #5
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	2201      	movs	r2, #1
 80002f2:	0018      	movs	r0, r3
 80002f4:	f7ff ff90 	bl	8000218 <bh1750_TransmitData>
	}
}
 80002f8:	46c0      	nop			; (mov r8, r8)
 80002fa:	46bd      	mov	sp, r7
 80002fc:	b002      	add	sp, #8
 80002fe:	bd80      	pop	{r7, pc}

08000300 <bh1750_ReadMeasurment>:
uint16_t bh1750_ReadMeasurment(bh1750_t *bh)
{
 8000300:	b590      	push	{r4, r7, lr}
 8000302:	b085      	sub	sp, #20
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	bh1750_ReceiveData(bh, data, 2);
 8000308:	240c      	movs	r4, #12
 800030a:	1939      	adds	r1, r7, r4
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2202      	movs	r2, #2
 8000310:	0018      	movs	r0, r3
 8000312:	f7ff ff9d 	bl	8000250 <bh1750_ReceiveData>
	return ((data[0]<<8)|(data[1]));
 8000316:	0021      	movs	r1, r4
 8000318:	187b      	adds	r3, r7, r1
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	021b      	lsls	r3, r3, #8
 800031e:	b21a      	sxth	r2, r3
 8000320:	187b      	adds	r3, r7, r1
 8000322:	785b      	ldrb	r3, [r3, #1]
 8000324:	b21b      	sxth	r3, r3
 8000326:	4313      	orrs	r3, r2
 8000328:	b21b      	sxth	r3, r3
 800032a:	b29b      	uxth	r3, r3
}
 800032c:	0018      	movs	r0, r3
 800032e:	46bd      	mov	sp, r7
 8000330:	b005      	add	sp, #20
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <bh1750_ReadLuxOneTime>:
uint16_t bh1750_ReadLuxOneTime(bh1750_t *bh)
{
 8000334:	b5b0      	push	{r4, r5, r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
	bh1750_SendStartMeasurment(bh);
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	0018      	movs	r0, r3
 8000340:	f7ff ffc3 	bl	80002ca <bh1750_SendStartMeasurment>
	HAL_Delay(200);
 8000344:	20c8      	movs	r0, #200	; 0xc8
 8000346:	f000 faa1 	bl	800088c <HAL_Delay>
	uint16_t rowMeasurment=bh1750_ReadMeasurment(bh);
 800034a:	250e      	movs	r5, #14
 800034c:	197c      	adds	r4, r7, r5
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	0018      	movs	r0, r3
 8000352:	f7ff ffd5 	bl	8000300 <bh1750_ReadMeasurment>
 8000356:	0003      	movs	r3, r0
 8000358:	8023      	strh	r3, [r4, #0]
	return rowMeasurment;
 800035a:	197b      	adds	r3, r7, r5
 800035c:	881b      	ldrh	r3, [r3, #0]
}
 800035e:	0018      	movs	r0, r3
 8000360:	46bd      	mov	sp, r7
 8000362:	b004      	add	sp, #16
 8000364:	bdb0      	pop	{r4, r5, r7, pc}

08000366 <bh1750_Init>:
void bh1750_Init(bh1750_t *bh,I2C_HandleTypeDef* i2c,uint8_t addres,bh1750State_t s)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	b084      	sub	sp, #16
 800036a:	af00      	add	r7, sp, #0
 800036c:	60f8      	str	r0, [r7, #12]
 800036e:	60b9      	str	r1, [r7, #8]
 8000370:	0019      	movs	r1, r3
 8000372:	1dfb      	adds	r3, r7, #7
 8000374:	701a      	strb	r2, [r3, #0]
 8000376:	1dbb      	adds	r3, r7, #6
 8000378:	1c0a      	adds	r2, r1, #0
 800037a:	701a      	strb	r2, [r3, #0]
	bh->bh_i2c=i2c;
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	68ba      	ldr	r2, [r7, #8]
 8000380:	601a      	str	r2, [r3, #0]
	bh->addr=addres;
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	1dfa      	adds	r2, r7, #7
 8000386:	7812      	ldrb	r2, [r2, #0]
 8000388:	711a      	strb	r2, [r3, #4]
	if(s!=0)
 800038a:	1dbb      	adds	r3, r7, #6
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d006      	beq.n	80003a0 <bh1750_Init+0x3a>
	bh1750_ChangeState(bh, s);
 8000392:	1dbb      	adds	r3, r7, #6
 8000394:	781a      	ldrb	r2, [r3, #0]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	0011      	movs	r1, r2
 800039a:	0018      	movs	r0, r3
 800039c:	f7ff ff74 	bl	8000288 <bh1750_ChangeState>
	bh->state=s;
 80003a0:	68fb      	ldr	r3, [r7, #12]
 80003a2:	1dba      	adds	r2, r7, #6
 80003a4:	7812      	ldrb	r2, [r2, #0]
 80003a6:	715a      	strb	r2, [r3, #5]
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46bd      	mov	sp, r7
 80003ac:	b004      	add	sp, #16
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003b6:	4b08      	ldr	r3, [pc, #32]	; (80003d8 <MX_GPIO_Init+0x28>)
 80003b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80003ba:	4b07      	ldr	r3, [pc, #28]	; (80003d8 <MX_GPIO_Init+0x28>)
 80003bc:	2101      	movs	r1, #1
 80003be:	430a      	orrs	r2, r1
 80003c0:	635a      	str	r2, [r3, #52]	; 0x34
 80003c2:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <MX_GPIO_Init+0x28>)
 80003c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003c6:	2201      	movs	r2, #1
 80003c8:	4013      	ands	r3, r2
 80003ca:	607b      	str	r3, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]

}
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b002      	add	sp, #8
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	46c0      	nop			; (mov r8, r8)
 80003d8:	40021000 	.word	0x40021000

080003dc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_I2C2_Init+0x74>)
 80003e2:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <MX_I2C2_Init+0x78>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <MX_I2C2_Init+0x74>)
 80003e8:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <MX_I2C2_Init+0x7c>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80003ec:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_I2C2_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f2:	4b17      	ldr	r3, [pc, #92]	; (8000450 <MX_I2C2_Init+0x74>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f8:	4b15      	ldr	r3, [pc, #84]	; (8000450 <MX_I2C2_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80003fe:	4b14      	ldr	r3, [pc, #80]	; (8000450 <MX_I2C2_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000404:	4b12      	ldr	r3, [pc, #72]	; (8000450 <MX_I2C2_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040a:	4b11      	ldr	r3, [pc, #68]	; (8000450 <MX_I2C2_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000410:	4b0f      	ldr	r3, [pc, #60]	; (8000450 <MX_I2C2_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000416:	4b0e      	ldr	r3, [pc, #56]	; (8000450 <MX_I2C2_Init+0x74>)
 8000418:	0018      	movs	r0, r3
 800041a:	f000 fc73 	bl	8000d04 <HAL_I2C_Init>
 800041e:	1e03      	subs	r3, r0, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000422:	f000 f8d1 	bl	80005c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000426:	4b0a      	ldr	r3, [pc, #40]	; (8000450 <MX_I2C2_Init+0x74>)
 8000428:	2100      	movs	r1, #0
 800042a:	0018      	movs	r0, r3
 800042c:	f001 f9a0 	bl	8001770 <HAL_I2CEx_ConfigAnalogFilter>
 8000430:	1e03      	subs	r3, r0, #0
 8000432:	d001      	beq.n	8000438 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000434:	f000 f8c8 	bl	80005c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000438:	4b05      	ldr	r3, [pc, #20]	; (8000450 <MX_I2C2_Init+0x74>)
 800043a:	2100      	movs	r1, #0
 800043c:	0018      	movs	r0, r3
 800043e:	f001 f9e3 	bl	8001808 <HAL_I2CEx_ConfigDigitalFilter>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000446:	f000 f8bf 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000028 	.word	0x20000028
 8000454:	40005800 	.word	0x40005800
 8000458:	00303d5b 	.word	0x00303d5b

0800045c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800045c:	b590      	push	{r4, r7, lr}
 800045e:	b08b      	sub	sp, #44	; 0x2c
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000464:	2414      	movs	r4, #20
 8000466:	193b      	adds	r3, r7, r4
 8000468:	0018      	movs	r0, r3
 800046a:	2314      	movs	r3, #20
 800046c:	001a      	movs	r2, r3
 800046e:	2100      	movs	r1, #0
 8000470:	f002 f98a 	bl	8002788 <memset>
  if(i2cHandle->Instance==I2C2)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a1c      	ldr	r2, [pc, #112]	; (80004ec <HAL_I2C_MspInit+0x90>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d131      	bne.n	80004e2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b1c      	ldr	r3, [pc, #112]	; (80004f0 <HAL_I2C_MspInit+0x94>)
 8000480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000482:	4b1b      	ldr	r3, [pc, #108]	; (80004f0 <HAL_I2C_MspInit+0x94>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
 800048a:	4b19      	ldr	r3, [pc, #100]	; (80004f0 <HAL_I2C_MspInit+0x94>)
 800048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	22c0      	movs	r2, #192	; 0xc0
 800049a:	0152      	lsls	r2, r2, #5
 800049c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800049e:	0021      	movs	r1, r4
 80004a0:	187b      	adds	r3, r7, r1
 80004a2:	2212      	movs	r2, #18
 80004a4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2206      	movs	r2, #6
 80004b6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b8:	187a      	adds	r2, r7, r1
 80004ba:	23a0      	movs	r3, #160	; 0xa0
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	0011      	movs	r1, r2
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fabb 	bl	8000a3c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <HAL_I2C_MspInit+0x94>)
 80004c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004ca:	4b09      	ldr	r3, [pc, #36]	; (80004f0 <HAL_I2C_MspInit+0x94>)
 80004cc:	2180      	movs	r1, #128	; 0x80
 80004ce:	03c9      	lsls	r1, r1, #15
 80004d0:	430a      	orrs	r2, r1
 80004d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <HAL_I2C_MspInit+0x94>)
 80004d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	03db      	lsls	r3, r3, #15
 80004dc:	4013      	ands	r3, r2
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b00b      	add	sp, #44	; 0x2c
 80004e8:	bd90      	pop	{r4, r7, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	40005800 	.word	0x40005800
 80004f0:	40021000 	.word	0x40021000

080004f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004fa:	f000 f941 	bl	8000780 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004fe:	f000 f817 	bl	8000530 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000502:	f7ff ff55 	bl	80003b0 <MX_GPIO_Init>
	MX_I2C2_Init();
 8000506:	f7ff ff69 	bl	80003dc <MX_I2C2_Init>
	MX_RTC_Init();
 800050a:	f000 f863 	bl	80005d4 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	bh1750_Init(&bh, &hi2c2, 35, One_Time_H_Resolution_Mode);
 800050e:	4906      	ldr	r1, [pc, #24]	; (8000528 <main+0x34>)
 8000510:	4806      	ldr	r0, [pc, #24]	; (800052c <main+0x38>)
 8000512:	2320      	movs	r3, #32
 8000514:	2223      	movs	r2, #35	; 0x23
 8000516:	f7ff ff26 	bl	8000366 <bh1750_Init>
	int m=bh1750_ReadLuxOneTime(&bh);
 800051a:	4b04      	ldr	r3, [pc, #16]	; (800052c <main+0x38>)
 800051c:	0018      	movs	r0, r3
 800051e:	f7ff ff09 	bl	8000334 <bh1750_ReadLuxOneTime>
 8000522:	0003      	movs	r3, r0
 8000524:	607b      	str	r3, [r7, #4]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000526:	e7fe      	b.n	8000526 <main+0x32>
 8000528:	20000028 	.word	0x20000028
 800052c:	2000007c 	.word	0x2000007c

08000530 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000530:	b590      	push	{r4, r7, lr}
 8000532:	b093      	sub	sp, #76	; 0x4c
 8000534:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000536:	2414      	movs	r4, #20
 8000538:	193b      	adds	r3, r7, r4
 800053a:	0018      	movs	r0, r3
 800053c:	2334      	movs	r3, #52	; 0x34
 800053e:	001a      	movs	r2, r3
 8000540:	2100      	movs	r1, #0
 8000542:	f002 f921 	bl	8002788 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	0018      	movs	r0, r3
 800054a:	2310      	movs	r3, #16
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f002 f91a 	bl	8002788 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	2380      	movs	r3, #128	; 0x80
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	0018      	movs	r0, r3
 800055a:	f001 f9a1 	bl	80018a0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 800055e:	193b      	adds	r3, r7, r4
 8000560:	220a      	movs	r2, #10
 8000562:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	2280      	movs	r2, #128	; 0x80
 8000568:	0052      	lsls	r2, r2, #1
 800056a:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800056c:	0021      	movs	r1, r4
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2240      	movs	r2, #64	; 0x40
 8000578:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	619a      	str	r2, [r3, #24]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2200      	movs	r2, #0
 8000584:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	187b      	adds	r3, r7, r1
 8000588:	0018      	movs	r0, r3
 800058a:	f001 f9c9 	bl	8001920 <HAL_RCC_OscConfig>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <SystemClock_Config+0x66>
	{
		Error_Handler();
 8000592:	f000 f819 	bl	80005c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2207      	movs	r2, #7
 800059a:	601a      	str	r2, [r3, #0]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2100      	movs	r1, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f001 fcc4 	bl	8001f40 <HAL_RCC_ClockConfig>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0x90>
	{
		Error_Handler();
 80005bc:	f000 f804 	bl	80005c8 <Error_Handler>
	}
}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b013      	add	sp, #76	; 0x4c
 80005c6:	bd90      	pop	{r4, r7, pc}

080005c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005cc:	b672      	cpsid	i
}
 80005ce:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80005d0:	e7fe      	b.n	80005d0 <Error_Handler+0x8>
	...

080005d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005d8:	4b13      	ldr	r3, [pc, #76]	; (8000628 <MX_RTC_Init+0x54>)
 80005da:	4a14      	ldr	r2, [pc, #80]	; (800062c <MX_RTC_Init+0x58>)
 80005dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <MX_RTC_Init+0x54>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <MX_RTC_Init+0x54>)
 80005e6:	227f      	movs	r2, #127	; 0x7f
 80005e8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <MX_RTC_Init+0x54>)
 80005ec:	22ff      	movs	r2, #255	; 0xff
 80005ee:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <MX_RTC_Init+0x54>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <MX_RTC_Init+0x54>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005fc:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <MX_RTC_Init+0x54>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000602:	4b09      	ldr	r3, [pc, #36]	; (8000628 <MX_RTC_Init+0x54>)
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	05d2      	lsls	r2, r2, #23
 8000608:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <MX_RTC_Init+0x54>)
 800060c:	2200      	movs	r2, #0
 800060e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <MX_RTC_Init+0x54>)
 8000612:	0018      	movs	r0, r3
 8000614:	f001 ff44 	bl	80024a0 <HAL_RTC_Init>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800061c:	f7ff ffd4 	bl	80005c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	20000084 	.word	0x20000084
 800062c:	40002800 	.word	0x40002800

08000630 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b08b      	sub	sp, #44	; 0x2c
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000638:	2410      	movs	r4, #16
 800063a:	193b      	adds	r3, r7, r4
 800063c:	0018      	movs	r0, r3
 800063e:	2318      	movs	r3, #24
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f002 f8a0 	bl	8002788 <memset>
  if(rtcHandle->Instance==RTC)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <HAL_RTC_MspInit+0x74>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d124      	bne.n	800069c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	0292      	lsls	r2, r2, #10
 8000658:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800065a:	193b      	adds	r3, r7, r4
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	0092      	lsls	r2, r2, #2
 8000660:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000662:	193b      	adds	r3, r7, r4
 8000664:	0018      	movs	r0, r3
 8000666:	f001 fdf5 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800066e:	f7ff ffab 	bl	80005c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_RTC_MspInit+0x78>)
 8000674:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <HAL_RTC_MspInit+0x78>)
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	0209      	lsls	r1, r1, #8
 800067c:	430a      	orrs	r2, r1
 800067e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000680:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <HAL_RTC_MspInit+0x78>)
 8000682:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_RTC_MspInit+0x78>)
 8000686:	2180      	movs	r1, #128	; 0x80
 8000688:	00c9      	lsls	r1, r1, #3
 800068a:	430a      	orrs	r2, r1
 800068c:	63da      	str	r2, [r3, #60]	; 0x3c
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <HAL_RTC_MspInit+0x78>)
 8000690:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000692:	2380      	movs	r3, #128	; 0x80
 8000694:	00db      	lsls	r3, r3, #3
 8000696:	4013      	ands	r3, r2
 8000698:	60fb      	str	r3, [r7, #12]
 800069a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b00b      	add	sp, #44	; 0x2c
 80006a2:	bd90      	pop	{r4, r7, pc}
 80006a4:	40002800 	.word	0x40002800
 80006a8:	40021000 	.word	0x40021000

080006ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <HAL_MspInit+0x44>)
 80006b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006b6:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <HAL_MspInit+0x44>)
 80006b8:	2101      	movs	r1, #1
 80006ba:	430a      	orrs	r2, r1
 80006bc:	641a      	str	r2, [r3, #64]	; 0x40
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <HAL_MspInit+0x44>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2201      	movs	r2, #1
 80006c4:	4013      	ands	r3, r2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <HAL_MspInit+0x44>)
 80006cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <HAL_MspInit+0x44>)
 80006d0:	2180      	movs	r1, #128	; 0x80
 80006d2:	0549      	lsls	r1, r1, #21
 80006d4:	430a      	orrs	r2, r1
 80006d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_MspInit+0x44>)
 80006da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006dc:	2380      	movs	r3, #128	; 0x80
 80006de:	055b      	lsls	r3, r3, #21
 80006e0:	4013      	ands	r3, r2
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	46bd      	mov	sp, r7
 80006ea:	b002      	add	sp, #8
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	46c0      	nop			; (mov r8, r8)
 80006f0:	40021000 	.word	0x40021000

080006f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <NMI_Handler+0x4>

080006fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fe:	e7fe      	b.n	80006fe <HardFault_Handler+0x4>

08000700 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}

0800070a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800070a:	b580      	push	{r7, lr}
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000718:	f000 f89c 	bl	8000854 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800071c:	46c0      	nop			; (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800072e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000730:	f7ff fff7 	bl	8000722 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <LoopForever+0x6>)
  ldr r1, =_edata
 8000736:	490d      	ldr	r1, [pc, #52]	; (800076c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <LoopForever+0xe>)
  movs r3, #0
 800073a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800073c:	e002      	b.n	8000744 <LoopCopyDataInit>

0800073e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800073e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000742:	3304      	adds	r3, #4

08000744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000748:	d3f9      	bcc.n	800073e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <LoopForever+0x12>)
  ldr r4, =_ebss
 800074c:	4c0a      	ldr	r4, [pc, #40]	; (8000778 <LoopForever+0x16>)
  movs r3, #0
 800074e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000750:	e001      	b.n	8000756 <LoopFillZerobss>

08000752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000754:	3204      	adds	r2, #4

08000756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000758:	d3fb      	bcc.n	8000752 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800075a:	f001 fff1 	bl	8002740 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800075e:	f7ff fec9 	bl	80004f4 <main>

08000762 <LoopForever>:

LoopForever:
  b LoopForever
 8000762:	e7fe      	b.n	8000762 <LoopForever>
  ldr   r0, =_estack
 8000764:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000770:	080027f8 	.word	0x080027f8
  ldr r2, =_sbss
 8000774:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000778:	200000b4 	.word	0x200000b4

0800077c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_IRQHandler>
	...

08000780 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000786:	1dfb      	adds	r3, r7, #7
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_Init+0x3c>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_Init+0x3c>)
 8000792:	2180      	movs	r1, #128	; 0x80
 8000794:	0049      	lsls	r1, r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800079a:	2003      	movs	r0, #3
 800079c:	f000 f810 	bl	80007c0 <HAL_InitTick>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d003      	beq.n	80007ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80007a4:	1dfb      	adds	r3, r7, #7
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
 80007aa:	e001      	b.n	80007b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80007ac:	f7ff ff7e 	bl	80006ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40022000 	.word	0x40022000

080007c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80007c8:	230f      	movs	r3, #15
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80007d0:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <HAL_InitTick+0x88>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d02b      	beq.n	8000830 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <HAL_InitTick+0x8c>)
 80007da:	681c      	ldr	r4, [r3, #0]
 80007dc:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <HAL_InitTick+0x88>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	0019      	movs	r1, r3
 80007e2:	23fa      	movs	r3, #250	; 0xfa
 80007e4:	0098      	lsls	r0, r3, #2
 80007e6:	f7ff fc8b 	bl	8000100 <__udivsi3>
 80007ea:	0003      	movs	r3, r0
 80007ec:	0019      	movs	r1, r3
 80007ee:	0020      	movs	r0, r4
 80007f0:	f7ff fc86 	bl	8000100 <__udivsi3>
 80007f4:	0003      	movs	r3, r0
 80007f6:	0018      	movs	r0, r3
 80007f8:	f000 f913 	bl	8000a22 <HAL_SYSTICK_Config>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d112      	bne.n	8000826 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b03      	cmp	r3, #3
 8000804:	d80a      	bhi.n	800081c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000806:	6879      	ldr	r1, [r7, #4]
 8000808:	2301      	movs	r3, #1
 800080a:	425b      	negs	r3, r3
 800080c:	2200      	movs	r2, #0
 800080e:	0018      	movs	r0, r3
 8000810:	f000 f8f2 	bl	80009f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000814:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_InitTick+0x90>)
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	e00d      	b.n	8000838 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800081c:	230f      	movs	r3, #15
 800081e:	18fb      	adds	r3, r7, r3
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
 8000824:	e008      	b.n	8000838 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000826:	230f      	movs	r3, #15
 8000828:	18fb      	adds	r3, r7, r3
 800082a:	2201      	movs	r2, #1
 800082c:	701a      	strb	r2, [r3, #0]
 800082e:	e003      	b.n	8000838 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000830:	230f      	movs	r3, #15
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	2201      	movs	r2, #1
 8000836:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000838:	230f      	movs	r3, #15
 800083a:	18fb      	adds	r3, r7, r3
 800083c:	781b      	ldrb	r3, [r3, #0]
}
 800083e:	0018      	movs	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	b005      	add	sp, #20
 8000844:	bd90      	pop	{r4, r7, pc}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	20000008 	.word	0x20000008
 800084c:	20000000 	.word	0x20000000
 8000850:	20000004 	.word	0x20000004

08000854 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_IncTick+0x1c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
 800085e:	4b05      	ldr	r3, [pc, #20]	; (8000874 <HAL_IncTick+0x20>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	18d2      	adds	r2, r2, r3
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <HAL_IncTick+0x20>)
 8000866:	601a      	str	r2, [r3, #0]
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	20000008 	.word	0x20000008
 8000874:	200000b0 	.word	0x200000b0

08000878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  return uwTick;
 800087c:	4b02      	ldr	r3, [pc, #8]	; (8000888 <HAL_GetTick+0x10>)
 800087e:	681b      	ldr	r3, [r3, #0]
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	200000b0 	.word	0x200000b0

0800088c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000894:	f7ff fff0 	bl	8000878 <HAL_GetTick>
 8000898:	0003      	movs	r3, r0
 800089a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	3301      	adds	r3, #1
 80008a4:	d005      	beq.n	80008b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_Delay+0x44>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	001a      	movs	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	189b      	adds	r3, r3, r2
 80008b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	f7ff ffe0 	bl	8000878 <HAL_GetTick>
 80008b8:	0002      	movs	r2, r0
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	68fa      	ldr	r2, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d8f7      	bhi.n	80008b4 <HAL_Delay+0x28>
  {
  }
}
 80008c4:	46c0      	nop			; (mov r8, r8)
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	20000008 	.word	0x20000008

080008d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	0002      	movs	r2, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b7f      	cmp	r3, #127	; 0x7f
 80008e8:	d828      	bhi.n	800093c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ea:	4a2f      	ldr	r2, [pc, #188]	; (80009a8 <__NVIC_SetPriority+0xd4>)
 80008ec:	1dfb      	adds	r3, r7, #7
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	b25b      	sxtb	r3, r3
 80008f2:	089b      	lsrs	r3, r3, #2
 80008f4:	33c0      	adds	r3, #192	; 0xc0
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	589b      	ldr	r3, [r3, r2]
 80008fa:	1dfa      	adds	r2, r7, #7
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	0011      	movs	r1, r2
 8000900:	2203      	movs	r2, #3
 8000902:	400a      	ands	r2, r1
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	21ff      	movs	r1, #255	; 0xff
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	43d2      	mvns	r2, r2
 800090e:	401a      	ands	r2, r3
 8000910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	22ff      	movs	r2, #255	; 0xff
 8000918:	401a      	ands	r2, r3
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	2303      	movs	r3, #3
 8000922:	4003      	ands	r3, r0
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000928:	481f      	ldr	r0, [pc, #124]	; (80009a8 <__NVIC_SetPriority+0xd4>)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	b25b      	sxtb	r3, r3
 8000930:	089b      	lsrs	r3, r3, #2
 8000932:	430a      	orrs	r2, r1
 8000934:	33c0      	adds	r3, #192	; 0xc0
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800093a:	e031      	b.n	80009a0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <__NVIC_SetPriority+0xd8>)
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	0019      	movs	r1, r3
 8000944:	230f      	movs	r3, #15
 8000946:	400b      	ands	r3, r1
 8000948:	3b08      	subs	r3, #8
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	3306      	adds	r3, #6
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	18d3      	adds	r3, r2, r3
 8000952:	3304      	adds	r3, #4
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	1dfa      	adds	r2, r7, #7
 8000958:	7812      	ldrb	r2, [r2, #0]
 800095a:	0011      	movs	r1, r2
 800095c:	2203      	movs	r2, #3
 800095e:	400a      	ands	r2, r1
 8000960:	00d2      	lsls	r2, r2, #3
 8000962:	21ff      	movs	r1, #255	; 0xff
 8000964:	4091      	lsls	r1, r2
 8000966:	000a      	movs	r2, r1
 8000968:	43d2      	mvns	r2, r2
 800096a:	401a      	ands	r2, r3
 800096c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	019b      	lsls	r3, r3, #6
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	401a      	ands	r2, r3
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	0018      	movs	r0, r3
 800097c:	2303      	movs	r3, #3
 800097e:	4003      	ands	r3, r0
 8000980:	00db      	lsls	r3, r3, #3
 8000982:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000984:	4809      	ldr	r0, [pc, #36]	; (80009ac <__NVIC_SetPriority+0xd8>)
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	001c      	movs	r4, r3
 800098c:	230f      	movs	r3, #15
 800098e:	4023      	ands	r3, r4
 8000990:	3b08      	subs	r3, #8
 8000992:	089b      	lsrs	r3, r3, #2
 8000994:	430a      	orrs	r2, r1
 8000996:	3306      	adds	r3, #6
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	18c3      	adds	r3, r0, r3
 800099c:	3304      	adds	r3, #4
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	46c0      	nop			; (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b003      	add	sp, #12
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	1e5a      	subs	r2, r3, #1
 80009bc:	2380      	movs	r3, #128	; 0x80
 80009be:	045b      	lsls	r3, r3, #17
 80009c0:	429a      	cmp	r2, r3
 80009c2:	d301      	bcc.n	80009c8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009c4:	2301      	movs	r3, #1
 80009c6:	e010      	b.n	80009ea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c8:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <SysTick_Config+0x44>)
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	3a01      	subs	r2, #1
 80009ce:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d0:	2301      	movs	r3, #1
 80009d2:	425b      	negs	r3, r3
 80009d4:	2103      	movs	r1, #3
 80009d6:	0018      	movs	r0, r3
 80009d8:	f7ff ff7c 	bl	80008d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <SysTick_Config+0x44>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e2:	4b04      	ldr	r3, [pc, #16]	; (80009f4 <SysTick_Config+0x44>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	0018      	movs	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	b002      	add	sp, #8
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	46c0      	nop			; (mov r8, r8)
 80009f4:	e000e010 	.word	0xe000e010

080009f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	210f      	movs	r1, #15
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	1c02      	adds	r2, r0, #0
 8000a08:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a0a:	68ba      	ldr	r2, [r7, #8]
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	b25b      	sxtb	r3, r3
 8000a12:	0011      	movs	r1, r2
 8000a14:	0018      	movs	r0, r3
 8000a16:	f7ff ff5d 	bl	80008d4 <__NVIC_SetPriority>
}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b004      	add	sp, #16
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b082      	sub	sp, #8
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f7ff ffbf 	bl	80009b0 <SysTick_Config>
 8000a32:	0003      	movs	r3, r0
}
 8000a34:	0018      	movs	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b002      	add	sp, #8
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a4a:	e147      	b.n	8000cdc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2101      	movs	r1, #1
 8000a52:	697a      	ldr	r2, [r7, #20]
 8000a54:	4091      	lsls	r1, r2
 8000a56:	000a      	movs	r2, r1
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d100      	bne.n	8000a64 <HAL_GPIO_Init+0x28>
 8000a62:	e138      	b.n	8000cd6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2203      	movs	r2, #3
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d005      	beq.n	8000a7c <HAL_GPIO_Init+0x40>
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2203      	movs	r2, #3
 8000a76:	4013      	ands	r3, r2
 8000a78:	2b02      	cmp	r3, #2
 8000a7a:	d130      	bne.n	8000ade <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2203      	movs	r2, #3
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	0013      	movs	r3, r2
 8000a8c:	43da      	mvns	r2, r3
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	43da      	mvns	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2203      	movs	r2, #3
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	2b03      	cmp	r3, #3
 8000ae8:	d017      	beq.n	8000b1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	2203      	movs	r2, #3
 8000af6:	409a      	lsls	r2, r3
 8000af8:	0013      	movs	r3, r2
 8000afa:	43da      	mvns	r2, r3
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	689a      	ldr	r2, [r3, #8]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	409a      	lsls	r2, r3
 8000b0c:	0013      	movs	r3, r2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	4013      	ands	r3, r2
 8000b22:	2b02      	cmp	r3, #2
 8000b24:	d123      	bne.n	8000b6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	08da      	lsrs	r2, r3, #3
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	3208      	adds	r2, #8
 8000b2e:	0092      	lsls	r2, r2, #2
 8000b30:	58d3      	ldr	r3, [r2, r3]
 8000b32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	2207      	movs	r2, #7
 8000b38:	4013      	ands	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	220f      	movs	r2, #15
 8000b3e:	409a      	lsls	r2, r3
 8000b40:	0013      	movs	r3, r2
 8000b42:	43da      	mvns	r2, r3
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	4013      	ands	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	691a      	ldr	r2, [r3, #16]
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	2107      	movs	r1, #7
 8000b52:	400b      	ands	r3, r1
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	409a      	lsls	r2, r3
 8000b58:	0013      	movs	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	08da      	lsrs	r2, r3, #3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3208      	adds	r2, #8
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	6939      	ldr	r1, [r7, #16]
 8000b6c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	005b      	lsls	r3, r3, #1
 8000b78:	2203      	movs	r2, #3
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	43da      	mvns	r2, r3
 8000b80:	693b      	ldr	r3, [r7, #16]
 8000b82:	4013      	ands	r3, r2
 8000b84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	401a      	ands	r2, r3
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	409a      	lsls	r2, r3
 8000b94:	0013      	movs	r3, r2
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	693a      	ldr	r2, [r7, #16]
 8000ba0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	23c0      	movs	r3, #192	; 0xc0
 8000ba8:	029b      	lsls	r3, r3, #10
 8000baa:	4013      	ands	r3, r2
 8000bac:	d100      	bne.n	8000bb0 <HAL_GPIO_Init+0x174>
 8000bae:	e092      	b.n	8000cd6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000bb0:	4a50      	ldr	r2, [pc, #320]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3318      	adds	r3, #24
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	589b      	ldr	r3, [r3, r2]
 8000bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	220f      	movs	r2, #15
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	0013      	movs	r3, r2
 8000bcc:	43da      	mvns	r2, r3
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	23a0      	movs	r3, #160	; 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0x1ca>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a45      	ldr	r2, [pc, #276]	; (8000cf8 <HAL_GPIO_Init+0x2bc>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d00d      	beq.n	8000c02 <HAL_GPIO_Init+0x1c6>
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4a44      	ldr	r2, [pc, #272]	; (8000cfc <HAL_GPIO_Init+0x2c0>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d007      	beq.n	8000bfe <HAL_GPIO_Init+0x1c2>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a43      	ldr	r2, [pc, #268]	; (8000d00 <HAL_GPIO_Init+0x2c4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d101      	bne.n	8000bfa <HAL_GPIO_Init+0x1be>
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x1cc>
 8000bfa:	2305      	movs	r3, #5
 8000bfc:	e004      	b.n	8000c08 <HAL_GPIO_Init+0x1cc>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	e002      	b.n	8000c08 <HAL_GPIO_Init+0x1cc>
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <HAL_GPIO_Init+0x1cc>
 8000c06:	2300      	movs	r3, #0
 8000c08:	697a      	ldr	r2, [r7, #20]
 8000c0a:	2103      	movs	r1, #3
 8000c0c:	400a      	ands	r2, r1
 8000c0e:	00d2      	lsls	r2, r2, #3
 8000c10:	4093      	lsls	r3, r2
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000c18:	4936      	ldr	r1, [pc, #216]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3318      	adds	r3, #24
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c26:	4b33      	ldr	r3, [pc, #204]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	2380      	movs	r3, #128	; 0x80
 8000c3c:	035b      	lsls	r3, r3, #13
 8000c3e:	4013      	ands	r3, r2
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000c4c:	693a      	ldr	r2, [r7, #16]
 8000c4e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000c50:	4b28      	ldr	r3, [pc, #160]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	43da      	mvns	r2, r3
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685a      	ldr	r2, [r3, #4]
 8000c64:	2380      	movs	r3, #128	; 0x80
 8000c66:	039b      	lsls	r3, r3, #14
 8000c68:	4013      	ands	r3, r2
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c7a:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000c7c:	2384      	movs	r3, #132	; 0x84
 8000c7e:	58d3      	ldr	r3, [r2, r3]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43da      	mvns	r2, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	029b      	lsls	r3, r3, #10
 8000c94:	4013      	ands	r3, r2
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ca0:	4914      	ldr	r1, [pc, #80]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000ca2:	2284      	movs	r2, #132	; 0x84
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000ca8:	4a12      	ldr	r2, [pc, #72]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	58d3      	ldr	r3, [r2, r3]
 8000cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	43da      	mvns	r2, r3
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	685a      	ldr	r2, [r3, #4]
 8000cbe:	2380      	movs	r3, #128	; 0x80
 8000cc0:	025b      	lsls	r3, r3, #9
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	d003      	beq.n	8000cce <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cce:	4909      	ldr	r1, [pc, #36]	; (8000cf4 <HAL_GPIO_Init+0x2b8>)
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	40da      	lsrs	r2, r3
 8000ce4:	1e13      	subs	r3, r2, #0
 8000ce6:	d000      	beq.n	8000cea <HAL_GPIO_Init+0x2ae>
 8000ce8:	e6b0      	b.n	8000a4c <HAL_GPIO_Init+0x10>
  }
}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b006      	add	sp, #24
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021800 	.word	0x40021800
 8000cf8:	50000400 	.word	0x50000400
 8000cfc:	50000800 	.word	0x50000800
 8000d00:	50000c00 	.word	0x50000c00

08000d04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e082      	b.n	8000e1c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2241      	movs	r2, #65	; 0x41
 8000d1a:	5c9b      	ldrb	r3, [r3, r2]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d107      	bne.n	8000d32 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2240      	movs	r2, #64	; 0x40
 8000d26:	2100      	movs	r1, #0
 8000d28:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff fb95 	bl	800045c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2241      	movs	r2, #65	; 0x41
 8000d36:	2124      	movs	r1, #36	; 0x24
 8000d38:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	438a      	bics	r2, r1
 8000d48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4934      	ldr	r1, [pc, #208]	; (8000e24 <HAL_I2C_Init+0x120>)
 8000d54:	400a      	ands	r2, r1
 8000d56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4931      	ldr	r1, [pc, #196]	; (8000e28 <HAL_I2C_Init+0x124>)
 8000d64:	400a      	ands	r2, r1
 8000d66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d108      	bne.n	8000d82 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	0209      	lsls	r1, r1, #8
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	e007      	b.n	8000d92 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2184      	movs	r1, #132	; 0x84
 8000d8c:	0209      	lsls	r1, r1, #8
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d104      	bne.n	8000da4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	0112      	lsls	r2, r2, #4
 8000da2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	491f      	ldr	r1, [pc, #124]	; (8000e2c <HAL_I2C_Init+0x128>)
 8000db0:	430a      	orrs	r2, r1
 8000db2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	491a      	ldr	r1, [pc, #104]	; (8000e28 <HAL_I2C_Init+0x124>)
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	695b      	ldr	r3, [r3, #20]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69d9      	ldr	r1, [r3, #28]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6a1a      	ldr	r2, [r3, #32]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	430a      	orrs	r2, r1
 8000dec:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2101      	movs	r1, #1
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2241      	movs	r2, #65	; 0x41
 8000e08:	2120      	movs	r1, #32
 8000e0a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2242      	movs	r2, #66	; 0x42
 8000e16:	2100      	movs	r1, #0
 8000e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	f0ffffff 	.word	0xf0ffffff
 8000e28:	ffff7fff 	.word	0xffff7fff
 8000e2c:	02008000 	.word	0x02008000

08000e30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	0008      	movs	r0, r1
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	230a      	movs	r3, #10
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	1c02      	adds	r2, r0, #0
 8000e44:	801a      	strh	r2, [r3, #0]
 8000e46:	2308      	movs	r3, #8
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	1c0a      	adds	r2, r1, #0
 8000e4c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2241      	movs	r2, #65	; 0x41
 8000e52:	5c9b      	ldrb	r3, [r3, r2]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b20      	cmp	r3, #32
 8000e58:	d000      	beq.n	8000e5c <HAL_I2C_Master_Transmit+0x2c>
 8000e5a:	e0e7      	b.n	800102c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2240      	movs	r2, #64	; 0x40
 8000e60:	5c9b      	ldrb	r3, [r3, r2]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d101      	bne.n	8000e6a <HAL_I2C_Master_Transmit+0x3a>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e0e1      	b.n	800102e <HAL_I2C_Master_Transmit+0x1fe>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2240      	movs	r2, #64	; 0x40
 8000e6e:	2101      	movs	r1, #1
 8000e70:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e72:	f7ff fd01 	bl	8000878 <HAL_GetTick>
 8000e76:	0003      	movs	r3, r0
 8000e78:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	0219      	lsls	r1, r3, #8
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2319      	movs	r3, #25
 8000e86:	2201      	movs	r2, #1
 8000e88:	f000 fa04 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 8000e8c:	1e03      	subs	r3, r0, #0
 8000e8e:	d001      	beq.n	8000e94 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e0cc      	b.n	800102e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	2241      	movs	r2, #65	; 0x41
 8000e98:	2121      	movs	r1, #33	; 0x21
 8000e9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2242      	movs	r2, #66	; 0x42
 8000ea0:	2110      	movs	r1, #16
 8000ea2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2208      	movs	r2, #8
 8000eb4:	18ba      	adds	r2, r7, r2
 8000eb6:	8812      	ldrh	r2, [r2, #0]
 8000eb8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	2bff      	cmp	r3, #255	; 0xff
 8000ec8:	d911      	bls.n	8000eee <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	22ff      	movs	r2, #255	; 0xff
 8000ece:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	045c      	lsls	r4, r3, #17
 8000eda:	230a      	movs	r3, #10
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	8819      	ldrh	r1, [r3, #0]
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	4b55      	ldr	r3, [pc, #340]	; (8001038 <HAL_I2C_Master_Transmit+0x208>)
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	0023      	movs	r3, r4
 8000ee8:	f000 fc08 	bl	80016fc <I2C_TransferConfig>
 8000eec:	e075      	b.n	8000fda <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	2380      	movs	r3, #128	; 0x80
 8000f00:	049c      	lsls	r4, r3, #18
 8000f02:	230a      	movs	r3, #10
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	8819      	ldrh	r1, [r3, #0]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	4b4b      	ldr	r3, [pc, #300]	; (8001038 <HAL_I2C_Master_Transmit+0x208>)
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	0023      	movs	r3, r4
 8000f10:	f000 fbf4 	bl	80016fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8000f14:	e061      	b.n	8000fda <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f000 f9f8 	bl	8001312 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f22:	1e03      	subs	r3, r0, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e081      	b.n	800102e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f2e:	781a      	ldrb	r2, [r3, #0]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	3b01      	subs	r3, #1
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f52:	3b01      	subs	r3, #1
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d03a      	beq.n	8000fda <HAL_I2C_Master_Transmit+0x1aa>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d136      	bne.n	8000fda <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	0013      	movs	r3, r2
 8000f76:	2200      	movs	r2, #0
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	f000 f98b 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	e053      	b.n	800102e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	2bff      	cmp	r3, #255	; 0xff
 8000f8e:	d911      	bls.n	8000fb4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	22ff      	movs	r2, #255	; 0xff
 8000f94:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	2380      	movs	r3, #128	; 0x80
 8000f9e:	045c      	lsls	r4, r3, #17
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	8819      	ldrh	r1, [r3, #0]
 8000fa6:	68f8      	ldr	r0, [r7, #12]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	0023      	movs	r3, r4
 8000fae:	f000 fba5 	bl	80016fc <I2C_TransferConfig>
 8000fb2:	e012      	b.n	8000fda <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	049c      	lsls	r4, r3, #18
 8000fc8:	230a      	movs	r3, #10
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	8819      	ldrh	r1, [r3, #0]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	0023      	movs	r3, r4
 8000fd6:	f000 fb91 	bl	80016fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d198      	bne.n	8000f16 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 f9d0 	bl	8001390 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ff0:	1e03      	subs	r3, r0, #0
 8000ff2:	d001      	beq.n	8000ff8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e01a      	b.n	800102e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	685a      	ldr	r2, [r3, #4]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	490c      	ldr	r1, [pc, #48]	; (800103c <HAL_I2C_Master_Transmit+0x20c>)
 800100c:	400a      	ands	r2, r1
 800100e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2241      	movs	r2, #65	; 0x41
 8001014:	2120      	movs	r1, #32
 8001016:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	2242      	movs	r2, #66	; 0x42
 800101c:	2100      	movs	r1, #0
 800101e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	2240      	movs	r2, #64	; 0x40
 8001024:	2100      	movs	r1, #0
 8001026:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001028:	2300      	movs	r3, #0
 800102a:	e000      	b.n	800102e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800102c:	2302      	movs	r3, #2
  }
}
 800102e:	0018      	movs	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	b007      	add	sp, #28
 8001034:	bd90      	pop	{r4, r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	80002000 	.word	0x80002000
 800103c:	fe00e800 	.word	0xfe00e800

08001040 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001040:	b590      	push	{r4, r7, lr}
 8001042:	b089      	sub	sp, #36	; 0x24
 8001044:	af02      	add	r7, sp, #8
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	0008      	movs	r0, r1
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	0019      	movs	r1, r3
 800104e:	230a      	movs	r3, #10
 8001050:	18fb      	adds	r3, r7, r3
 8001052:	1c02      	adds	r2, r0, #0
 8001054:	801a      	strh	r2, [r3, #0]
 8001056:	2308      	movs	r3, #8
 8001058:	18fb      	adds	r3, r7, r3
 800105a:	1c0a      	adds	r2, r1, #0
 800105c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2241      	movs	r2, #65	; 0x41
 8001062:	5c9b      	ldrb	r3, [r3, r2]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b20      	cmp	r3, #32
 8001068:	d000      	beq.n	800106c <HAL_I2C_Master_Receive+0x2c>
 800106a:	e0e8      	b.n	800123e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2240      	movs	r2, #64	; 0x40
 8001070:	5c9b      	ldrb	r3, [r3, r2]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_I2C_Master_Receive+0x3a>
 8001076:	2302      	movs	r3, #2
 8001078:	e0e2      	b.n	8001240 <HAL_I2C_Master_Receive+0x200>
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2240      	movs	r2, #64	; 0x40
 800107e:	2101      	movs	r1, #1
 8001080:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001082:	f7ff fbf9 	bl	8000878 <HAL_GetTick>
 8001086:	0003      	movs	r3, r0
 8001088:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800108a:	2380      	movs	r3, #128	; 0x80
 800108c:	0219      	lsls	r1, r3, #8
 800108e:	68f8      	ldr	r0, [r7, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2319      	movs	r3, #25
 8001096:	2201      	movs	r2, #1
 8001098:	f000 f8fc 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d001      	beq.n	80010a4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0cd      	b.n	8001240 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2241      	movs	r2, #65	; 0x41
 80010a8:	2122      	movs	r1, #34	; 0x22
 80010aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2242      	movs	r2, #66	; 0x42
 80010b0:	2110      	movs	r1, #16
 80010b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	687a      	ldr	r2, [r7, #4]
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2208      	movs	r2, #8
 80010c4:	18ba      	adds	r2, r7, r2
 80010c6:	8812      	ldrh	r2, [r2, #0]
 80010c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2200      	movs	r2, #0
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010d4:	b29b      	uxth	r3, r3
 80010d6:	2bff      	cmp	r3, #255	; 0xff
 80010d8:	d911      	bls.n	80010fe <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	22ff      	movs	r2, #255	; 0xff
 80010de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010e4:	b2da      	uxtb	r2, r3
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	045c      	lsls	r4, r3, #17
 80010ea:	230a      	movs	r3, #10
 80010ec:	18fb      	adds	r3, r7, r3
 80010ee:	8819      	ldrh	r1, [r3, #0]
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	4b55      	ldr	r3, [pc, #340]	; (8001248 <HAL_I2C_Master_Receive+0x208>)
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	0023      	movs	r3, r4
 80010f8:	f000 fb00 	bl	80016fc <I2C_TransferConfig>
 80010fc:	e076      	b.n	80011ec <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001102:	b29a      	uxth	r2, r3
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800110c:	b2da      	uxtb	r2, r3
 800110e:	2380      	movs	r3, #128	; 0x80
 8001110:	049c      	lsls	r4, r3, #18
 8001112:	230a      	movs	r3, #10
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	8819      	ldrh	r1, [r3, #0]
 8001118:	68f8      	ldr	r0, [r7, #12]
 800111a:	4b4b      	ldr	r3, [pc, #300]	; (8001248 <HAL_I2C_Master_Receive+0x208>)
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	0023      	movs	r3, r4
 8001120:	f000 faec 	bl	80016fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001124:	e062      	b.n	80011ec <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	0018      	movs	r0, r3
 800112e:	f000 f96b 	bl	8001408 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001132:	1e03      	subs	r3, r0, #0
 8001134:	d001      	beq.n	800113a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e082      	b.n	8001240 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114c:	1c5a      	adds	r2, r3, #1
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001156:	3b01      	subs	r3, #1
 8001158:	b29a      	uxth	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001162:	b29b      	uxth	r3, r3
 8001164:	3b01      	subs	r3, #1
 8001166:	b29a      	uxth	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001170:	b29b      	uxth	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d03a      	beq.n	80011ec <HAL_I2C_Master_Receive+0x1ac>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800117a:	2b00      	cmp	r3, #0
 800117c:	d136      	bne.n	80011ec <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800117e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	0013      	movs	r3, r2
 8001188:	2200      	movs	r2, #0
 800118a:	2180      	movs	r1, #128	; 0x80
 800118c:	f000 f882 	bl	8001294 <I2C_WaitOnFlagUntilTimeout>
 8001190:	1e03      	subs	r3, r0, #0
 8001192:	d001      	beq.n	8001198 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001194:	2301      	movs	r3, #1
 8001196:	e053      	b.n	8001240 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800119c:	b29b      	uxth	r3, r3
 800119e:	2bff      	cmp	r3, #255	; 0xff
 80011a0:	d911      	bls.n	80011c6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	22ff      	movs	r2, #255	; 0xff
 80011a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011ac:	b2da      	uxtb	r2, r3
 80011ae:	2380      	movs	r3, #128	; 0x80
 80011b0:	045c      	lsls	r4, r3, #17
 80011b2:	230a      	movs	r3, #10
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	8819      	ldrh	r1, [r3, #0]
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	2300      	movs	r3, #0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	0023      	movs	r3, r4
 80011c0:	f000 fa9c 	bl	80016fc <I2C_TransferConfig>
 80011c4:	e012      	b.n	80011ec <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	049c      	lsls	r4, r3, #18
 80011da:	230a      	movs	r3, #10
 80011dc:	18fb      	adds	r3, r7, r3
 80011de:	8819      	ldrh	r1, [r3, #0]
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	2300      	movs	r3, #0
 80011e4:	9300      	str	r3, [sp, #0]
 80011e6:	0023      	movs	r3, r4
 80011e8:	f000 fa88 	bl	80016fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d197      	bne.n	8001126 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	0018      	movs	r0, r3
 80011fe:	f000 f8c7 	bl	8001390 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001202:	1e03      	subs	r3, r0, #0
 8001204:	d001      	beq.n	800120a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e01a      	b.n	8001240 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2220      	movs	r2, #32
 8001210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	685a      	ldr	r2, [r3, #4]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	490b      	ldr	r1, [pc, #44]	; (800124c <HAL_I2C_Master_Receive+0x20c>)
 800121e:	400a      	ands	r2, r1
 8001220:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2241      	movs	r2, #65	; 0x41
 8001226:	2120      	movs	r1, #32
 8001228:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2242      	movs	r2, #66	; 0x42
 800122e:	2100      	movs	r1, #0
 8001230:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	2100      	movs	r1, #0
 8001238:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800123a:	2300      	movs	r3, #0
 800123c:	e000      	b.n	8001240 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800123e:	2302      	movs	r3, #2
  }
}
 8001240:	0018      	movs	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	b007      	add	sp, #28
 8001246:	bd90      	pop	{r4, r7, pc}
 8001248:	80002400 	.word	0x80002400
 800124c:	fe00e800 	.word	0xfe00e800

08001250 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2202      	movs	r2, #2
 8001260:	4013      	ands	r3, r2
 8001262:	2b02      	cmp	r3, #2
 8001264:	d103      	bne.n	800126e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2200      	movs	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	2201      	movs	r2, #1
 8001276:	4013      	ands	r3, r2
 8001278:	2b01      	cmp	r3, #1
 800127a:	d007      	beq.n	800128c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	699a      	ldr	r2, [r3, #24]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2101      	movs	r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	619a      	str	r2, [r3, #24]
  }
}
 800128c:	46c0      	nop			; (mov r8, r8)
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}

08001294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	1dfb      	adds	r3, r7, #7
 80012a2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012a4:	e021      	b.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	3301      	adds	r3, #1
 80012aa:	d01e      	beq.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ac:	f7ff fae4 	bl	8000878 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d302      	bcc.n	80012c2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d113      	bne.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	2220      	movs	r2, #32
 80012c8:	431a      	orrs	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2241      	movs	r2, #65	; 0x41
 80012d2:	2120      	movs	r1, #32
 80012d4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2242      	movs	r2, #66	; 0x42
 80012da:	2100      	movs	r1, #0
 80012dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	2100      	movs	r1, #0
 80012e4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	4013      	ands	r3, r2
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	425a      	negs	r2, r3
 80012fa:	4153      	adcs	r3, r2
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	001a      	movs	r2, r3
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d0ce      	beq.n	80012a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b004      	add	sp, #16
 8001310:	bd80      	pop	{r7, pc}

08001312 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800131e:	e02b      	b.n	8001378 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	0018      	movs	r0, r3
 8001328:	f000 f8e8 	bl	80014fc <I2C_IsErrorOccurred>
 800132c:	1e03      	subs	r3, r0, #0
 800132e:	d001      	beq.n	8001334 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e029      	b.n	8001388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	3301      	adds	r3, #1
 8001338:	d01e      	beq.n	8001378 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800133a:	f7ff fa9d 	bl	8000878 <HAL_GetTick>
 800133e:	0002      	movs	r2, r0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	68ba      	ldr	r2, [r7, #8]
 8001346:	429a      	cmp	r2, r3
 8001348:	d302      	bcc.n	8001350 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d113      	bne.n	8001378 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001354:	2220      	movs	r2, #32
 8001356:	431a      	orrs	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2241      	movs	r2, #65	; 0x41
 8001360:	2120      	movs	r1, #32
 8001362:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	2242      	movs	r2, #66	; 0x42
 8001368:	2100      	movs	r1, #0
 800136a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	2240      	movs	r2, #64	; 0x40
 8001370:	2100      	movs	r1, #0
 8001372:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e007      	b.n	8001388 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699b      	ldr	r3, [r3, #24]
 800137e:	2202      	movs	r2, #2
 8001380:	4013      	ands	r3, r2
 8001382:	2b02      	cmp	r3, #2
 8001384:	d1cc      	bne.n	8001320 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b004      	add	sp, #16
 800138e:	bd80      	pop	{r7, pc}

08001390 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800139c:	e028      	b.n	80013f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 f8a9 	bl	80014fc <I2C_IsErrorOccurred>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d001      	beq.n	80013b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e026      	b.n	8001400 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013b2:	f7ff fa61 	bl	8000878 <HAL_GetTick>
 80013b6:	0002      	movs	r2, r0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	68ba      	ldr	r2, [r7, #8]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d302      	bcc.n	80013c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d113      	bne.n	80013f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013cc:	2220      	movs	r2, #32
 80013ce:	431a      	orrs	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2241      	movs	r2, #65	; 0x41
 80013d8:	2120      	movs	r1, #32
 80013da:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2242      	movs	r2, #66	; 0x42
 80013e0:	2100      	movs	r1, #0
 80013e2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	2100      	movs	r1, #0
 80013ea:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e007      	b.n	8001400 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2220      	movs	r2, #32
 80013f8:	4013      	ands	r3, r2
 80013fa:	2b20      	cmp	r3, #32
 80013fc:	d1cf      	bne.n	800139e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b004      	add	sp, #16
 8001406:	bd80      	pop	{r7, pc}

08001408 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001414:	e064      	b.n	80014e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	0018      	movs	r0, r3
 800141e:	f000 f86d 	bl	80014fc <I2C_IsErrorOccurred>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d001      	beq.n	800142a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e062      	b.n	80014f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	2220      	movs	r2, #32
 8001432:	4013      	ands	r3, r2
 8001434:	2b20      	cmp	r3, #32
 8001436:	d138      	bne.n	80014aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	699b      	ldr	r3, [r3, #24]
 800143e:	2204      	movs	r2, #4
 8001440:	4013      	ands	r3, r2
 8001442:	2b04      	cmp	r3, #4
 8001444:	d105      	bne.n	8001452 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	e04e      	b.n	80014f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	2210      	movs	r2, #16
 800145a:	4013      	ands	r3, r2
 800145c:	2b10      	cmp	r3, #16
 800145e:	d107      	bne.n	8001470 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2210      	movs	r2, #16
 8001466:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2204      	movs	r2, #4
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
 800146e:	e002      	b.n	8001476 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2200      	movs	r2, #0
 8001474:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2220      	movs	r2, #32
 800147c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	685a      	ldr	r2, [r3, #4]
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	491b      	ldr	r1, [pc, #108]	; (80014f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800148a:	400a      	ands	r2, r1
 800148c:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2241      	movs	r2, #65	; 0x41
 8001492:	2120      	movs	r1, #32
 8001494:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2242      	movs	r2, #66	; 0x42
 800149a:	2100      	movs	r1, #0
 800149c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2240      	movs	r2, #64	; 0x40
 80014a2:	2100      	movs	r1, #0
 80014a4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e022      	b.n	80014f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014aa:	f7ff f9e5 	bl	8000878 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d302      	bcc.n	80014c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10f      	bne.n	80014e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c4:	2220      	movs	r2, #32
 80014c6:	431a      	orrs	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2241      	movs	r2, #65	; 0x41
 80014d0:	2120      	movs	r1, #32
 80014d2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2240      	movs	r2, #64	; 0x40
 80014d8:	2100      	movs	r1, #0
 80014da:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e007      	b.n	80014f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	699b      	ldr	r3, [r3, #24]
 80014e6:	2204      	movs	r2, #4
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d193      	bne.n	8001416 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	0018      	movs	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	b004      	add	sp, #16
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	fe00e800 	.word	0xfe00e800

080014fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014fc:	b590      	push	{r4, r7, lr}
 80014fe:	b08b      	sub	sp, #44	; 0x2c
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001508:	2327      	movs	r3, #39	; 0x27
 800150a:	18fb      	adds	r3, r7, r3
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	2210      	movs	r2, #16
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <I2C_IsErrorOccurred+0x2e>
 8001528:	e082      	b.n	8001630 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2210      	movs	r2, #16
 8001530:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001532:	e060      	b.n	80015f6 <I2C_IsErrorOccurred+0xfa>
 8001534:	2427      	movs	r4, #39	; 0x27
 8001536:	193b      	adds	r3, r7, r4
 8001538:	193a      	adds	r2, r7, r4
 800153a:	7812      	ldrb	r2, [r2, #0]
 800153c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	3301      	adds	r3, #1
 8001542:	d058      	beq.n	80015f6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001544:	f7ff f998 	bl	8000878 <HAL_GetTick>
 8001548:	0002      	movs	r2, r0
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	429a      	cmp	r2, r3
 8001552:	d306      	bcc.n	8001562 <I2C_IsErrorOccurred+0x66>
 8001554:	193b      	adds	r3, r7, r4
 8001556:	193a      	adds	r2, r7, r4
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d149      	bne.n	80015f6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	2380      	movs	r3, #128	; 0x80
 800156a:	01db      	lsls	r3, r3, #7
 800156c:	4013      	ands	r3, r2
 800156e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001570:	2013      	movs	r0, #19
 8001572:	183b      	adds	r3, r7, r0
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	2142      	movs	r1, #66	; 0x42
 8001578:	5c52      	ldrb	r2, [r2, r1]
 800157a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	2380      	movs	r3, #128	; 0x80
 8001584:	021b      	lsls	r3, r3, #8
 8001586:	401a      	ands	r2, r3
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	021b      	lsls	r3, r3, #8
 800158c:	429a      	cmp	r2, r3
 800158e:	d126      	bne.n	80015de <I2C_IsErrorOccurred+0xe2>
 8001590:	697a      	ldr	r2, [r7, #20]
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	01db      	lsls	r3, r3, #7
 8001596:	429a      	cmp	r2, r3
 8001598:	d021      	beq.n	80015de <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800159a:	183b      	adds	r3, r7, r0
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d01d      	beq.n	80015de <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	01c9      	lsls	r1, r1, #7
 80015b0:	430a      	orrs	r2, r1
 80015b2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80015b4:	f7ff f960 	bl	8000878 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015bc:	e00f      	b.n	80015de <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80015be:	f7ff f95b 	bl	8000878 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b19      	cmp	r3, #25
 80015ca:	d908      	bls.n	80015de <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	2220      	movs	r2, #32
 80015d0:	4313      	orrs	r3, r2
 80015d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80015d4:	2327      	movs	r3, #39	; 0x27
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]

              break;
 80015dc:	e00b      	b.n	80015f6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2220      	movs	r2, #32
 80015e6:	4013      	ands	r3, r2
 80015e8:	2127      	movs	r1, #39	; 0x27
 80015ea:	187a      	adds	r2, r7, r1
 80015ec:	1879      	adds	r1, r7, r1
 80015ee:	7809      	ldrb	r1, [r1, #0]
 80015f0:	7011      	strb	r1, [r2, #0]
 80015f2:	2b20      	cmp	r3, #32
 80015f4:	d1e3      	bne.n	80015be <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	2220      	movs	r2, #32
 80015fe:	4013      	ands	r3, r2
 8001600:	2b20      	cmp	r3, #32
 8001602:	d004      	beq.n	800160e <I2C_IsErrorOccurred+0x112>
 8001604:	2327      	movs	r3, #39	; 0x27
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d092      	beq.n	8001534 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800160e:	2327      	movs	r3, #39	; 0x27
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d103      	bne.n	8001620 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2220      	movs	r2, #32
 800161e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	2204      	movs	r2, #4
 8001624:	4313      	orrs	r3, r2
 8001626:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001628:	2327      	movs	r3, #39	; 0x27
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	2201      	movs	r2, #1
 800162e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4013      	ands	r3, r2
 8001640:	d00c      	beq.n	800165c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001642:	6a3b      	ldr	r3, [r7, #32]
 8001644:	2201      	movs	r2, #1
 8001646:	4313      	orrs	r3, r2
 8001648:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	0052      	lsls	r2, r2, #1
 8001652:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001654:	2327      	movs	r3, #39	; 0x27
 8001656:	18fb      	adds	r3, r7, r3
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	4013      	ands	r3, r2
 8001664:	d00c      	beq.n	8001680 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	2208      	movs	r2, #8
 800166a:	4313      	orrs	r3, r2
 800166c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2280      	movs	r2, #128	; 0x80
 8001674:	00d2      	lsls	r2, r2, #3
 8001676:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001678:	2327      	movs	r3, #39	; 0x27
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d00c      	beq.n	80016a4 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	2202      	movs	r2, #2
 800168e:	4313      	orrs	r3, r2
 8001690:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2280      	movs	r2, #128	; 0x80
 8001698:	0092      	lsls	r2, r2, #2
 800169a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800169c:	2327      	movs	r3, #39	; 0x27
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	2201      	movs	r2, #1
 80016a2:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80016a4:	2327      	movs	r3, #39	; 0x27
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d01d      	beq.n	80016ea <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	0018      	movs	r0, r3
 80016b2:	f7ff fdcd 	bl	8001250 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	490d      	ldr	r1, [pc, #52]	; (80016f8 <I2C_IsErrorOccurred+0x1fc>)
 80016c2:	400a      	ands	r2, r1
 80016c4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2241      	movs	r2, #65	; 0x41
 80016d6:	2120      	movs	r1, #32
 80016d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2242      	movs	r2, #66	; 0x42
 80016de:	2100      	movs	r1, #0
 80016e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80016ea:	2327      	movs	r3, #39	; 0x27
 80016ec:	18fb      	adds	r3, r7, r3
 80016ee:	781b      	ldrb	r3, [r3, #0]
}
 80016f0:	0018      	movs	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	b00b      	add	sp, #44	; 0x2c
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	fe00e800 	.word	0xfe00e800

080016fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b087      	sub	sp, #28
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	0008      	movs	r0, r1
 8001706:	0011      	movs	r1, r2
 8001708:	607b      	str	r3, [r7, #4]
 800170a:	240a      	movs	r4, #10
 800170c:	193b      	adds	r3, r7, r4
 800170e:	1c02      	adds	r2, r0, #0
 8001710:	801a      	strh	r2, [r3, #0]
 8001712:	2009      	movs	r0, #9
 8001714:	183b      	adds	r3, r7, r0
 8001716:	1c0a      	adds	r2, r1, #0
 8001718:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800171a:	193b      	adds	r3, r7, r4
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	059b      	lsls	r3, r3, #22
 8001720:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001722:	183b      	adds	r3, r7, r0
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	0419      	lsls	r1, r3, #16
 8001728:	23ff      	movs	r3, #255	; 0xff
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800172e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001736:	4313      	orrs	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001746:	0d51      	lsrs	r1, r2, #21
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	00d2      	lsls	r2, r2, #3
 800174c:	400a      	ands	r2, r1
 800174e:	4907      	ldr	r1, [pc, #28]	; (800176c <I2C_TransferConfig+0x70>)
 8001750:	430a      	orrs	r2, r1
 8001752:	43d2      	mvns	r2, r2
 8001754:	401a      	ands	r2, r3
 8001756:	0011      	movs	r1, r2
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	430a      	orrs	r2, r1
 8001760:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b007      	add	sp, #28
 8001768:	bd90      	pop	{r4, r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	03ff63ff 	.word	0x03ff63ff

08001770 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2241      	movs	r2, #65	; 0x41
 800177e:	5c9b      	ldrb	r3, [r3, r2]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b20      	cmp	r3, #32
 8001784:	d138      	bne.n	80017f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2240      	movs	r2, #64	; 0x40
 800178a:	5c9b      	ldrb	r3, [r3, r2]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001790:	2302      	movs	r3, #2
 8001792:	e032      	b.n	80017fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2240      	movs	r2, #64	; 0x40
 8001798:	2101      	movs	r1, #1
 800179a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2241      	movs	r2, #65	; 0x41
 80017a0:	2124      	movs	r1, #36	; 0x24
 80017a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2101      	movs	r1, #1
 80017b0:	438a      	bics	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4911      	ldr	r1, [pc, #68]	; (8001804 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6819      	ldr	r1, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2101      	movs	r1, #1
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2241      	movs	r2, #65	; 0x41
 80017e8:	2120      	movs	r1, #32
 80017ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2240      	movs	r2, #64	; 0x40
 80017f0:	2100      	movs	r1, #0
 80017f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017f4:	2300      	movs	r3, #0
 80017f6:	e000      	b.n	80017fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80017f8:	2302      	movs	r3, #2
  }
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b002      	add	sp, #8
 8001800:	bd80      	pop	{r7, pc}
 8001802:	46c0      	nop			; (mov r8, r8)
 8001804:	ffffefff 	.word	0xffffefff

08001808 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2241      	movs	r2, #65	; 0x41
 8001816:	5c9b      	ldrb	r3, [r3, r2]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b20      	cmp	r3, #32
 800181c:	d139      	bne.n	8001892 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	5c9b      	ldrb	r3, [r3, r2]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d101      	bne.n	800182c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001828:	2302      	movs	r3, #2
 800182a:	e033      	b.n	8001894 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2240      	movs	r2, #64	; 0x40
 8001830:	2101      	movs	r1, #1
 8001832:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2241      	movs	r2, #65	; 0x41
 8001838:	2124      	movs	r1, #36	; 0x24
 800183a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2101      	movs	r1, #1
 8001848:	438a      	bics	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001858:	4013      	ands	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4313      	orrs	r3, r2
 8001864:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2101      	movs	r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2241      	movs	r2, #65	; 0x41
 8001882:	2120      	movs	r1, #32
 8001884:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2240      	movs	r2, #64	; 0x40
 800188a:	2100      	movs	r1, #0
 800188c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800188e:	2300      	movs	r3, #0
 8001890:	e000      	b.n	8001894 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001892:	2302      	movs	r3, #2
  }
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b004      	add	sp, #16
 800189a:	bd80      	pop	{r7, pc}
 800189c:	fffff0ff 	.word	0xfffff0ff

080018a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80018a8:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	0019      	movs	r1, r3
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d11f      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	0013      	movs	r3, r2
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	189b      	adds	r3, r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4912      	ldr	r1, [pc, #72]	; (800191c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80018d2:	0018      	movs	r0, r3
 80018d4:	f7fe fc14 	bl	8000100 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	3301      	adds	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018de:	e008      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	e001      	b.n	80018f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e009      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018f2:	4b07      	ldr	r3, [pc, #28]	; (8001910 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80018f4:	695a      	ldr	r2, [r3, #20]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	401a      	ands	r2, r3
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	429a      	cmp	r2, r3
 8001902:	d0ed      	beq.n	80018e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40007000 	.word	0x40007000
 8001914:	fffff9ff 	.word	0xfffff9ff
 8001918:	20000000 	.word	0x20000000
 800191c:	000f4240 	.word	0x000f4240

08001920 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e2f3      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2201      	movs	r2, #1
 8001938:	4013      	ands	r3, r2
 800193a:	d100      	bne.n	800193e <HAL_RCC_OscConfig+0x1e>
 800193c:	e07c      	b.n	8001a38 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800193e:	4bc3      	ldr	r3, [pc, #780]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	2238      	movs	r2, #56	; 0x38
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001948:	4bc0      	ldr	r3, [pc, #768]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	2203      	movs	r2, #3
 800194e:	4013      	ands	r3, r2
 8001950:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	2b10      	cmp	r3, #16
 8001956:	d102      	bne.n	800195e <HAL_RCC_OscConfig+0x3e>
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b03      	cmp	r3, #3
 800195c:	d002      	beq.n	8001964 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d10b      	bne.n	800197c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	4bb9      	ldr	r3, [pc, #740]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	d062      	beq.n	8001a36 <HAL_RCC_OscConfig+0x116>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d15e      	bne.n	8001a36 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e2ce      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	2380      	movs	r3, #128	; 0x80
 8001982:	025b      	lsls	r3, r3, #9
 8001984:	429a      	cmp	r2, r3
 8001986:	d107      	bne.n	8001998 <HAL_RCC_OscConfig+0x78>
 8001988:	4bb0      	ldr	r3, [pc, #704]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4baf      	ldr	r3, [pc, #700]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	0249      	lsls	r1, r1, #9
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e020      	b.n	80019da <HAL_RCC_OscConfig+0xba>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	23a0      	movs	r3, #160	; 0xa0
 800199e:	02db      	lsls	r3, r3, #11
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d10e      	bne.n	80019c2 <HAL_RCC_OscConfig+0xa2>
 80019a4:	4ba9      	ldr	r3, [pc, #676]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4ba8      	ldr	r3, [pc, #672]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	02c9      	lsls	r1, r1, #11
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	4ba6      	ldr	r3, [pc, #664]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4ba5      	ldr	r3, [pc, #660]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 80019b8:	2180      	movs	r1, #128	; 0x80
 80019ba:	0249      	lsls	r1, r1, #9
 80019bc:	430a      	orrs	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	e00b      	b.n	80019da <HAL_RCC_OscConfig+0xba>
 80019c2:	4ba2      	ldr	r3, [pc, #648]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	4ba1      	ldr	r3, [pc, #644]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 80019c8:	49a1      	ldr	r1, [pc, #644]	; (8001c50 <HAL_RCC_OscConfig+0x330>)
 80019ca:	400a      	ands	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	4b9f      	ldr	r3, [pc, #636]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b9e      	ldr	r3, [pc, #632]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 80019d4:	499f      	ldr	r1, [pc, #636]	; (8001c54 <HAL_RCC_OscConfig+0x334>)
 80019d6:	400a      	ands	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d014      	beq.n	8001a0c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e2:	f7fe ff49 	bl	8000878 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ec:	f7fe ff44 	bl	8000878 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b64      	cmp	r3, #100	; 0x64
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e28d      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fe:	4b93      	ldr	r3, [pc, #588]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	029b      	lsls	r3, r3, #10
 8001a06:	4013      	ands	r3, r2
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0xcc>
 8001a0a:	e015      	b.n	8001a38 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0c:	f7fe ff34 	bl	8000878 <HAL_GetTick>
 8001a10:	0003      	movs	r3, r0
 8001a12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a16:	f7fe ff2f 	bl	8000878 <HAL_GetTick>
 8001a1a:	0002      	movs	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b64      	cmp	r3, #100	; 0x64
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e278      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a28:	4b88      	ldr	r3, [pc, #544]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	2380      	movs	r3, #128	; 0x80
 8001a2e:	029b      	lsls	r3, r3, #10
 8001a30:	4013      	ands	r3, r2
 8001a32:	d1f0      	bne.n	8001a16 <HAL_RCC_OscConfig+0xf6>
 8001a34:	e000      	b.n	8001a38 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a36:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2202      	movs	r2, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d100      	bne.n	8001a44 <HAL_RCC_OscConfig+0x124>
 8001a42:	e099      	b.n	8001b78 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a44:	4b81      	ldr	r3, [pc, #516]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2238      	movs	r2, #56	; 0x38
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a4e:	4b7f      	ldr	r3, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2203      	movs	r2, #3
 8001a54:	4013      	ands	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d102      	bne.n	8001a64 <HAL_RCC_OscConfig+0x144>
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d002      	beq.n	8001a6a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d135      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a6a:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4013      	ands	r3, r2
 8001a74:	d005      	beq.n	8001a82 <HAL_RCC_OscConfig+0x162>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d101      	bne.n	8001a82 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e24b      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a82:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a74      	ldr	r2, [pc, #464]	; (8001c58 <HAL_RCC_OscConfig+0x338>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	021a      	lsls	r2, r3, #8
 8001a92:	4b6e      	ldr	r3, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001a94:	430a      	orrs	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d112      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a9e:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x33c>)
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	0019      	movs	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	4b67      	ldr	r3, [pc, #412]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001ab2:	4b66      	ldr	r3, [pc, #408]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0adb      	lsrs	r3, r3, #11
 8001ab8:	2207      	movs	r2, #7
 8001aba:	4013      	ands	r3, r2
 8001abc:	4a68      	ldr	r2, [pc, #416]	; (8001c60 <HAL_RCC_OscConfig+0x340>)
 8001abe:	40da      	lsrs	r2, r3
 8001ac0:	4b68      	ldr	r3, [pc, #416]	; (8001c64 <HAL_RCC_OscConfig+0x344>)
 8001ac2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001ac4:	4b68      	ldr	r3, [pc, #416]	; (8001c68 <HAL_RCC_OscConfig+0x348>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f7fe fe79 	bl	80007c0 <HAL_InitTick>
 8001ace:	1e03      	subs	r3, r0, #0
 8001ad0:	d051      	beq.n	8001b76 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e221      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d030      	beq.n	8001b40 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ade:	4b5b      	ldr	r3, [pc, #364]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a5e      	ldr	r2, [pc, #376]	; (8001c5c <HAL_RCC_OscConfig+0x33c>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	4b57      	ldr	r3, [pc, #348]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001af2:	4b56      	ldr	r3, [pc, #344]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	4b55      	ldr	r3, [pc, #340]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	0049      	lsls	r1, r1, #1
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7fe feba 	bl	8000878 <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7fe feb5 	bl	8000878 <HAL_GetTick>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e1fe      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1c:	4b4b      	ldr	r3, [pc, #300]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	; 0x80
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4013      	ands	r3, r2
 8001b26:	d0f0      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b28:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	4a4a      	ldr	r2, [pc, #296]	; (8001c58 <HAL_RCC_OscConfig+0x338>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	021a      	lsls	r2, r3, #8
 8001b38:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	e01b      	b.n	8001b78 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001b40:	4b42      	ldr	r3, [pc, #264]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b41      	ldr	r3, [pc, #260]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001b46:	4949      	ldr	r1, [pc, #292]	; (8001c6c <HAL_RCC_OscConfig+0x34c>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7fe fe94 	bl	8000878 <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b56:	f7fe fe8f 	bl	8000878 <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e1d8      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b68:	4b38      	ldr	r3, [pc, #224]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4013      	ands	r3, r2
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x236>
 8001b74:	e000      	b.n	8001b78 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b76:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2208      	movs	r2, #8
 8001b7e:	4013      	ands	r3, r2
 8001b80:	d047      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2238      	movs	r2, #56	; 0x38
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b18      	cmp	r3, #24
 8001b8c:	d10a      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	2202      	movs	r2, #2
 8001b94:	4013      	ands	r3, r2
 8001b96:	d03c      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d138      	bne.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e1ba      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d019      	beq.n	8001be0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001bae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bb0:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb8:	f7fe fe5e 	bl	8000878 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc2:	f7fe fe59 	bl	8000878 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e1a2      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd8:	2202      	movs	r2, #2
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d0f1      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2a2>
 8001bde:	e018      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001be2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	438a      	bics	r2, r1
 8001bea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe fe44 	bl	8000878 <HAL_GetTick>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bf4:	e008      	b.n	8001c08 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf6:	f7fe fe3f 	bl	8000878 <HAL_GetTick>
 8001bfa:	0002      	movs	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d901      	bls.n	8001c08 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e188      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	4013      	ands	r3, r2
 8001c10:	d1f1      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2204      	movs	r2, #4
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2fe>
 8001c1c:	e0c6      	b.n	8001dac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	231f      	movs	r3, #31
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c26:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2238      	movs	r2, #56	; 0x38
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	d11e      	bne.n	8001c70 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_OscConfig+0x32c>)
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	2202      	movs	r2, #2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d100      	bne.n	8001c3e <HAL_RCC_OscConfig+0x31e>
 8001c3c:	e0b6      	b.n	8001dac <HAL_RCC_OscConfig+0x48c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d000      	beq.n	8001c48 <HAL_RCC_OscConfig+0x328>
 8001c46:	e0b1      	b.n	8001dac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e166      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	fffeffff 	.word	0xfffeffff
 8001c54:	fffbffff 	.word	0xfffbffff
 8001c58:	ffff80ff 	.word	0xffff80ff
 8001c5c:	ffffc7ff 	.word	0xffffc7ff
 8001c60:	00f42400 	.word	0x00f42400
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c70:	4bac      	ldr	r3, [pc, #688]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001c72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	055b      	lsls	r3, r3, #21
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_RCC_OscConfig+0x360>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x362>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d011      	beq.n	8001caa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4ba7      	ldr	r3, [pc, #668]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001c88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c8a:	4ba6      	ldr	r3, [pc, #664]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001c8c:	2180      	movs	r1, #128	; 0x80
 8001c8e:	0549      	lsls	r1, r1, #21
 8001c90:	430a      	orrs	r2, r1
 8001c92:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c94:	4ba3      	ldr	r3, [pc, #652]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	055b      	lsls	r3, r3, #21
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ca2:	231f      	movs	r3, #31
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001caa:	4b9f      	ldr	r3, [pc, #636]	; (8001f28 <HAL_RCC_OscConfig+0x608>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d11a      	bne.n	8001cec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cb6:	4b9c      	ldr	r3, [pc, #624]	; (8001f28 <HAL_RCC_OscConfig+0x608>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b9b      	ldr	r3, [pc, #620]	; (8001f28 <HAL_RCC_OscConfig+0x608>)
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	0049      	lsls	r1, r1, #1
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001cc4:	f7fe fdd8 	bl	8000878 <HAL_GetTick>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cce:	f7fe fdd3 	bl	8000878 <HAL_GetTick>
 8001cd2:	0002      	movs	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e11c      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ce0:	4b91      	ldr	r3, [pc, #580]	; (8001f28 <HAL_RCC_OscConfig+0x608>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x3e2>
 8001cf4:	4b8b      	ldr	r3, [pc, #556]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001cf6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cf8:	4b8a      	ldr	r3, [pc, #552]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d00:	e01c      	b.n	8001d3c <HAL_RCC_OscConfig+0x41c>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b05      	cmp	r3, #5
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x404>
 8001d0a:	4b86      	ldr	r3, [pc, #536]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d0e:	4b85      	ldr	r3, [pc, #532]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d10:	2104      	movs	r1, #4
 8001d12:	430a      	orrs	r2, r1
 8001d14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d16:	4b83      	ldr	r3, [pc, #524]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d1a:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d22:	e00b      	b.n	8001d3c <HAL_RCC_OscConfig+0x41c>
 8001d24:	4b7f      	ldr	r3, [pc, #508]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d28:	4b7e      	ldr	r3, [pc, #504]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	438a      	bics	r2, r1
 8001d2e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d30:	4b7c      	ldr	r3, [pc, #496]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d34:	4b7b      	ldr	r3, [pc, #492]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d36:	2104      	movs	r1, #4
 8001d38:	438a      	bics	r2, r1
 8001d3a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d014      	beq.n	8001d6e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7fe fd98 	bl	8000878 <HAL_GetTick>
 8001d48:	0003      	movs	r3, r0
 8001d4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4c:	e009      	b.n	8001d62 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7fe fd93 	bl	8000878 <HAL_GetTick>
 8001d52:	0002      	movs	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	4a74      	ldr	r2, [pc, #464]	; (8001f2c <HAL_RCC_OscConfig+0x60c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e0db      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d62:	4b70      	ldr	r3, [pc, #448]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	2202      	movs	r2, #2
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x42e>
 8001d6c:	e013      	b.n	8001d96 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fd83 	bl	8000878 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d76:	e009      	b.n	8001d8c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d78:	f7fe fd7e 	bl	8000878 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	4a6a      	ldr	r2, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x60c>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e0c6      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d8c:	4b65      	ldr	r3, [pc, #404]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d90:	2202      	movs	r2, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001d96:	231f      	movs	r3, #31
 8001d98:	18fb      	adds	r3, r7, r3
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d105      	bne.n	8001dac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001da0:	4b60      	ldr	r3, [pc, #384]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da4:	4b5f      	ldr	r3, [pc, #380]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001da6:	4962      	ldr	r1, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x610>)
 8001da8:	400a      	ands	r2, r1
 8001daa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d100      	bne.n	8001db6 <HAL_RCC_OscConfig+0x496>
 8001db4:	e0b0      	b.n	8001f18 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db6:	4b5b      	ldr	r3, [pc, #364]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	2238      	movs	r2, #56	; 0x38
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b10      	cmp	r3, #16
 8001dc0:	d100      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x4a4>
 8001dc2:	e078      	b.n	8001eb6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d153      	bne.n	8001e74 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dcc:	4b55      	ldr	r3, [pc, #340]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001dd2:	4958      	ldr	r1, [pc, #352]	; (8001f34 <HAL_RCC_OscConfig+0x614>)
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7fe fd4e 	bl	8000878 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7fe fd49 	bl	8000878 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e092      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df4:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	049b      	lsls	r3, r3, #18
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e00:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	; (8001f38 <HAL_RCC_OscConfig+0x618>)
 8001e06:	4013      	ands	r3, r2
 8001e08:	0019      	movs	r1, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e20:	431a      	orrs	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	431a      	orrs	r2, r3
 8001e28:	4b3e      	ldr	r3, [pc, #248]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e2e:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	0449      	lsls	r1, r1, #17
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e3c:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4b38      	ldr	r3, [pc, #224]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e42:	2180      	movs	r1, #128	; 0x80
 8001e44:	0549      	lsls	r1, r1, #21
 8001e46:	430a      	orrs	r2, r1
 8001e48:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7fe fd15 	bl	8000878 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e54:	f7fe fd10 	bl	8000878 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e059      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	2380      	movs	r3, #128	; 0x80
 8001e6c:	049b      	lsls	r3, r3, #18
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x534>
 8001e72:	e051      	b.n	8001f18 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e7a:	492e      	ldr	r1, [pc, #184]	; (8001f34 <HAL_RCC_OscConfig+0x614>)
 8001e7c:	400a      	ands	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe fcfa 	bl	8000878 <HAL_GetTick>
 8001e84:	0003      	movs	r3, r0
 8001e86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8a:	f7fe fcf5 	bl	8000878 <HAL_GetTick>
 8001e8e:	0002      	movs	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e03e      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	049b      	lsls	r3, r3, #18
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001eaa:	68da      	ldr	r2, [r3, #12]
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001eae:	4923      	ldr	r1, [pc, #140]	; (8001f3c <HAL_RCC_OscConfig+0x61c>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	60da      	str	r2, [r3, #12]
 8001eb4:	e030      	b.n	8001f18 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e02b      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ec2:	4b18      	ldr	r3, [pc, #96]	; (8001f24 <HAL_RCC_OscConfig+0x604>)
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	401a      	ands	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d11e      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2270      	movs	r2, #112	; 0x70
 8001eda:	401a      	ands	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d117      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	23fe      	movs	r3, #254	; 0xfe
 8001ee8:	01db      	lsls	r3, r3, #7
 8001eea:	401a      	ands	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d10e      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	23f8      	movs	r3, #248	; 0xf8
 8001efa:	039b      	lsls	r3, r3, #14
 8001efc:	401a      	ands	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	0f5b      	lsrs	r3, r3, #29
 8001f0a:	075a      	lsls	r2, r3, #29
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	b008      	add	sp, #32
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40007000 	.word	0x40007000
 8001f2c:	00001388 	.word	0x00001388
 8001f30:	efffffff 	.word	0xefffffff
 8001f34:	feffffff 	.word	0xfeffffff
 8001f38:	1fc1808c 	.word	0x1fc1808c
 8001f3c:	effefffc 	.word	0xeffefffc

08001f40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0e9      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f54:	4b76      	ldr	r3, [pc, #472]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2207      	movs	r2, #7
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	683a      	ldr	r2, [r7, #0]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d91e      	bls.n	8001fa0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f62:	4b73      	ldr	r3, [pc, #460]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2207      	movs	r2, #7
 8001f68:	4393      	bics	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	4b70      	ldr	r3, [pc, #448]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fc80 	bl	8000878 <HAL_GetTick>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f7c:	e009      	b.n	8001f92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7e:	f7fe fc7b 	bl	8000878 <HAL_GetTick>
 8001f82:	0002      	movs	r2, r0
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a6a      	ldr	r2, [pc, #424]	; (8002134 <HAL_RCC_ClockConfig+0x1f4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e0ca      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f92:	4b67      	ldr	r3, [pc, #412]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2207      	movs	r2, #7
 8001f98:	4013      	ands	r3, r2
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d1ee      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d015      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d006      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fb4:	4b60      	ldr	r3, [pc, #384]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	4b5f      	ldr	r3, [pc, #380]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fba:	21e0      	movs	r1, #224	; 0xe0
 8001fbc:	01c9      	lsls	r1, r1, #7
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	4a5d      	ldr	r2, [pc, #372]	; (800213c <HAL_RCC_ClockConfig+0x1fc>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	0019      	movs	r1, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d057      	beq.n	8002090 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d12b      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e097      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	049b      	lsls	r3, r3, #18
 8002008:	4013      	ands	r3, r2
 800200a:	d11f      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e08b      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d107      	bne.n	8002028 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	4013      	ands	r3, r2
 8002022:	d113      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e07f      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d106      	bne.n	800203e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002030:	4b41      	ldr	r3, [pc, #260]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002034:	2202      	movs	r2, #2
 8002036:	4013      	ands	r3, r2
 8002038:	d108      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e074      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002042:	2202      	movs	r2, #2
 8002044:	4013      	ands	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e06d      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800204c:	4b3a      	ldr	r3, [pc, #232]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2207      	movs	r2, #7
 8002052:	4393      	bics	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685a      	ldr	r2, [r3, #4]
 800205a:	4b37      	ldr	r3, [pc, #220]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 800205c:	430a      	orrs	r2, r1
 800205e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002060:	f7fe fc0a 	bl	8000878 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002068:	e009      	b.n	800207e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800206a:	f7fe fc05 	bl	8000878 <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	4a2f      	ldr	r2, [pc, #188]	; (8002134 <HAL_RCC_ClockConfig+0x1f4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e054      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2238      	movs	r2, #56	; 0x38
 8002084:	401a      	ands	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	429a      	cmp	r2, r3
 800208e:	d1ec      	bne.n	800206a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2207      	movs	r2, #7
 8002096:	4013      	ands	r3, r2
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d21e      	bcs.n	80020dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2207      	movs	r2, #7
 80020a4:	4393      	bics	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020b0:	f7fe fbe2 	bl	8000878 <HAL_GetTick>
 80020b4:	0003      	movs	r3, r0
 80020b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b8:	e009      	b.n	80020ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ba:	f7fe fbdd 	bl	8000878 <HAL_GetTick>
 80020be:	0002      	movs	r2, r0
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	4a1b      	ldr	r2, [pc, #108]	; (8002134 <HAL_RCC_ClockConfig+0x1f4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e02c      	b.n	8002128 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_RCC_ClockConfig+0x1f0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2207      	movs	r2, #7
 80020d4:	4013      	ands	r3, r2
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1ee      	bne.n	80020ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2204      	movs	r2, #4
 80020e2:	4013      	ands	r3, r2
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020e6:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	4a15      	ldr	r2, [pc, #84]	; (8002140 <HAL_RCC_ClockConfig+0x200>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	0019      	movs	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68da      	ldr	r2, [r3, #12]
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020fa:	f000 f829 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 80020fe:	0001      	movs	r1, r0
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <HAL_RCC_ClockConfig+0x1f8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	0a1b      	lsrs	r3, r3, #8
 8002106:	220f      	movs	r2, #15
 8002108:	401a      	ands	r2, r3
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x204>)
 800210c:	0092      	lsls	r2, r2, #2
 800210e:	58d3      	ldr	r3, [r2, r3]
 8002110:	221f      	movs	r2, #31
 8002112:	4013      	ands	r3, r2
 8002114:	000a      	movs	r2, r1
 8002116:	40da      	lsrs	r2, r3
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_RCC_ClockConfig+0x208>)
 800211a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <HAL_RCC_ClockConfig+0x20c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	0018      	movs	r0, r3
 8002122:	f7fe fb4d 	bl	80007c0 <HAL_InitTick>
 8002126:	0003      	movs	r3, r0
}
 8002128:	0018      	movs	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	b004      	add	sp, #16
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40022000 	.word	0x40022000
 8002134:	00001388 	.word	0x00001388
 8002138:	40021000 	.word	0x40021000
 800213c:	fffff0ff 	.word	0xfffff0ff
 8002140:	ffff8fff 	.word	0xffff8fff
 8002144:	080027b0 	.word	0x080027b0
 8002148:	20000000 	.word	0x20000000
 800214c:	20000004 	.word	0x20000004

08002150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002156:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2238      	movs	r2, #56	; 0x38
 800215c:	4013      	ands	r3, r2
 800215e:	d10f      	bne.n	8002180 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002160:	4b39      	ldr	r3, [pc, #228]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	0adb      	lsrs	r3, r3, #11
 8002166:	2207      	movs	r2, #7
 8002168:	4013      	ands	r3, r2
 800216a:	2201      	movs	r2, #1
 800216c:	409a      	lsls	r2, r3
 800216e:	0013      	movs	r3, r2
 8002170:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002172:	6839      	ldr	r1, [r7, #0]
 8002174:	4835      	ldr	r0, [pc, #212]	; (800224c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002176:	f7fd ffc3 	bl	8000100 <__udivsi3>
 800217a:	0003      	movs	r3, r0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	e05d      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002180:	4b31      	ldr	r3, [pc, #196]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2238      	movs	r2, #56	; 0x38
 8002186:	4013      	ands	r3, r2
 8002188:	2b08      	cmp	r3, #8
 800218a:	d102      	bne.n	8002192 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_RCC_GetSysClockFreq+0x100>)
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	e054      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002192:	4b2d      	ldr	r3, [pc, #180]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2238      	movs	r2, #56	; 0x38
 8002198:	4013      	ands	r3, r2
 800219a:	2b10      	cmp	r3, #16
 800219c:	d138      	bne.n	8002210 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800219e:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2203      	movs	r2, #3
 80021a4:	4013      	ands	r3, r2
 80021a6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021a8:	4b27      	ldr	r3, [pc, #156]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	2207      	movs	r2, #7
 80021b0:	4013      	ands	r3, r2
 80021b2:	3301      	adds	r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d10d      	bne.n	80021d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	4824      	ldr	r0, [pc, #144]	; (8002250 <HAL_RCC_GetSysClockFreq+0x100>)
 80021c0:	f7fd ff9e 	bl	8000100 <__udivsi3>
 80021c4:	0003      	movs	r3, r0
 80021c6:	0019      	movs	r1, r3
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	227f      	movs	r2, #127	; 0x7f
 80021d0:	4013      	ands	r3, r2
 80021d2:	434b      	muls	r3, r1
 80021d4:	617b      	str	r3, [r7, #20]
        break;
 80021d6:	e00d      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80021d8:	68b9      	ldr	r1, [r7, #8]
 80021da:	481c      	ldr	r0, [pc, #112]	; (800224c <HAL_RCC_GetSysClockFreq+0xfc>)
 80021dc:	f7fd ff90 	bl	8000100 <__udivsi3>
 80021e0:	0003      	movs	r3, r0
 80021e2:	0019      	movs	r1, r3
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	0a1b      	lsrs	r3, r3, #8
 80021ea:	227f      	movs	r2, #127	; 0x7f
 80021ec:	4013      	ands	r3, r2
 80021ee:	434b      	muls	r3, r1
 80021f0:	617b      	str	r3, [r7, #20]
        break;
 80021f2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80021f4:	4b14      	ldr	r3, [pc, #80]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	0f5b      	lsrs	r3, r3, #29
 80021fa:	2207      	movs	r2, #7
 80021fc:	4013      	ands	r3, r2
 80021fe:	3301      	adds	r3, #1
 8002200:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	6978      	ldr	r0, [r7, #20]
 8002206:	f7fd ff7b 	bl	8000100 <__udivsi3>
 800220a:	0003      	movs	r3, r0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e015      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2238      	movs	r2, #56	; 0x38
 8002216:	4013      	ands	r3, r2
 8002218:	2b20      	cmp	r3, #32
 800221a:	d103      	bne.n	8002224 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e00b      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2238      	movs	r2, #56	; 0x38
 800222a:	4013      	ands	r3, r2
 800222c:	2b18      	cmp	r3, #24
 800222e:	d103      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002230:	23fa      	movs	r3, #250	; 0xfa
 8002232:	01db      	lsls	r3, r3, #7
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	e001      	b.n	800223c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800223c:	693b      	ldr	r3, [r7, #16]
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b006      	add	sp, #24
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	40021000 	.word	0x40021000
 800224c:	00f42400 	.word	0x00f42400
 8002250:	007a1200 	.word	0x007a1200

08002254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800225c:	2313      	movs	r3, #19
 800225e:	18fb      	adds	r3, r7, r3
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002264:	2312      	movs	r3, #18
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	d100      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002278:	e0a3      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2011      	movs	r0, #17
 800227c:	183b      	adds	r3, r7, r0
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002282:	4b7f      	ldr	r3, [pc, #508]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002284:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002286:	2380      	movs	r3, #128	; 0x80
 8002288:	055b      	lsls	r3, r3, #21
 800228a:	4013      	ands	r3, r2
 800228c:	d110      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	4b7c      	ldr	r3, [pc, #496]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002290:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002292:	4b7b      	ldr	r3, [pc, #492]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002294:	2180      	movs	r1, #128	; 0x80
 8002296:	0549      	lsls	r1, r1, #21
 8002298:	430a      	orrs	r2, r1
 800229a:	63da      	str	r2, [r3, #60]	; 0x3c
 800229c:	4b78      	ldr	r3, [pc, #480]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800229e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022a0:	2380      	movs	r3, #128	; 0x80
 80022a2:	055b      	lsls	r3, r3, #21
 80022a4:	4013      	ands	r3, r2
 80022a6:	60bb      	str	r3, [r7, #8]
 80022a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022aa:	183b      	adds	r3, r7, r0
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022b0:	4b74      	ldr	r3, [pc, #464]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022b6:	2180      	movs	r1, #128	; 0x80
 80022b8:	0049      	lsls	r1, r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022be:	f7fe fadb 	bl	8000878 <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022c6:	e00b      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe fad6 	bl	8000878 <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d904      	bls.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80022d6:	2313      	movs	r3, #19
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	2203      	movs	r2, #3
 80022dc:	701a      	strb	r2, [r3, #0]
        break;
 80022de:	e005      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022e0:	4b68      	ldr	r3, [pc, #416]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4013      	ands	r3, r2
 80022ea:	d0ed      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80022ec:	2313      	movs	r3, #19
 80022ee:	18fb      	adds	r3, r7, r3
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d154      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022f6:	4b62      	ldr	r3, [pc, #392]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80022f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022fa:	23c0      	movs	r3, #192	; 0xc0
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d019      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	429a      	cmp	r2, r3
 8002310:	d014      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002312:	4b5b      	ldr	r3, [pc, #364]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002316:	4a5c      	ldr	r2, [pc, #368]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002318:	4013      	ands	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800231c:	4b58      	ldr	r3, [pc, #352]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800231e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002320:	4b57      	ldr	r3, [pc, #348]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002322:	2180      	movs	r1, #128	; 0x80
 8002324:	0249      	lsls	r1, r1, #9
 8002326:	430a      	orrs	r2, r1
 8002328:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800232a:	4b55      	ldr	r3, [pc, #340]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800232c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800232e:	4b54      	ldr	r3, [pc, #336]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002330:	4956      	ldr	r1, [pc, #344]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002332:	400a      	ands	r2, r1
 8002334:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002336:	4b52      	ldr	r3, [pc, #328]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	2201      	movs	r2, #1
 8002340:	4013      	ands	r3, r2
 8002342:	d016      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fa98 	bl	8000878 <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234c:	e00c      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234e:	f7fe fa93 	bl	8000878 <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	4a4d      	ldr	r2, [pc, #308]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d904      	bls.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800235e:	2313      	movs	r3, #19
 8002360:	18fb      	adds	r3, r7, r3
 8002362:	2203      	movs	r2, #3
 8002364:	701a      	strb	r2, [r3, #0]
            break;
 8002366:	e004      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002368:	4b45      	ldr	r3, [pc, #276]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800236a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236c:	2202      	movs	r2, #2
 800236e:	4013      	ands	r3, r2
 8002370:	d0ed      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002372:	2313      	movs	r3, #19
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800237c:	4b40      	ldr	r3, [pc, #256]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800237e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002380:	4a41      	ldr	r2, [pc, #260]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002382:	4013      	ands	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800238c:	430a      	orrs	r2, r1
 800238e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002390:	e00c      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002392:	2312      	movs	r3, #18
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2213      	movs	r2, #19
 8002398:	18ba      	adds	r2, r7, r2
 800239a:	7812      	ldrb	r2, [r2, #0]
 800239c:	701a      	strb	r2, [r3, #0]
 800239e:	e005      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023a0:	2312      	movs	r3, #18
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2213      	movs	r2, #19
 80023a6:	18ba      	adds	r2, r7, r2
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ac:	2311      	movs	r3, #17
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ba:	4b31      	ldr	r3, [pc, #196]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023bc:	4935      	ldr	r1, [pc, #212]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80023be:	400a      	ands	r2, r1
 80023c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2201      	movs	r2, #1
 80023c8:	4013      	ands	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023cc:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d0:	2203      	movs	r2, #3
 80023d2:	4393      	bics	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685a      	ldr	r2, [r3, #4]
 80023da:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2220      	movs	r2, #32
 80023e6:	4013      	ands	r3, r2
 80023e8:	d009      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ea:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ee:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80023f0:	4013      	ands	r3, r2
 80023f2:	0019      	movs	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80023fa:	430a      	orrs	r2, r1
 80023fc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	01db      	lsls	r3, r3, #7
 8002406:	4013      	ands	r3, r2
 8002408:	d015      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	0899      	lsrs	r1, r3, #2
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691a      	ldr	r2, [r3, #16]
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002418:	430a      	orrs	r2, r1
 800241a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691a      	ldr	r2, [r3, #16]
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	05db      	lsls	r3, r3, #23
 8002424:	429a      	cmp	r2, r3
 8002426:	d106      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002428:	4b15      	ldr	r3, [pc, #84]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	0249      	lsls	r1, r1, #9
 8002432:	430a      	orrs	r2, r1
 8002434:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4013      	ands	r3, r2
 8002440:	d016      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002442:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	4a15      	ldr	r2, [pc, #84]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002448:	4013      	ands	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	4b0b      	ldr	r3, [pc, #44]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002452:	430a      	orrs	r2, r1
 8002454:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	01db      	lsls	r3, r3, #7
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002468:	2180      	movs	r1, #128	; 0x80
 800246a:	0249      	lsls	r1, r1, #9
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002470:	2312      	movs	r3, #18
 8002472:	18fb      	adds	r3, r7, r3
 8002474:	781b      	ldrb	r3, [r3, #0]
}
 8002476:	0018      	movs	r0, r3
 8002478:	46bd      	mov	sp, r7
 800247a:	b006      	add	sp, #24
 800247c:	bd80      	pop	{r7, pc}
 800247e:	46c0      	nop			; (mov r8, r8)
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
 8002488:	fffffcff 	.word	0xfffffcff
 800248c:	fffeffff 	.word	0xfffeffff
 8002490:	00001388 	.word	0x00001388
 8002494:	efffffff 	.word	0xefffffff
 8002498:	ffffcfff 	.word	0xffffcfff
 800249c:	ffff3fff 	.word	0xffff3fff

080024a0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024a8:	230f      	movs	r3, #15
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d100      	bne.n	80024b8 <HAL_RTC_Init+0x18>
 80024b6:	e08c      	b.n	80025d2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2229      	movs	r2, #41	; 0x29
 80024bc:	5c9b      	ldrb	r3, [r3, r2]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2228      	movs	r2, #40	; 0x28
 80024c8:	2100      	movs	r1, #0
 80024ca:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2288      	movs	r2, #136	; 0x88
 80024d0:	0212      	lsls	r2, r2, #8
 80024d2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f7fe f8aa 	bl	8000630 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2229      	movs	r2, #41	; 0x29
 80024e0:	2102      	movs	r1, #2
 80024e2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2210      	movs	r2, #16
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b10      	cmp	r3, #16
 80024f0:	d062      	beq.n	80025b8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	22ca      	movs	r2, #202	; 0xca
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2253      	movs	r2, #83	; 0x53
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002502:	250f      	movs	r5, #15
 8002504:	197c      	adds	r4, r7, r5
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f892 	bl	8002632 <RTC_EnterInitMode>
 800250e:	0003      	movs	r3, r0
 8002510:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002512:	0028      	movs	r0, r5
 8002514:	183b      	adds	r3, r7, r0
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d12c      	bne.n	8002576 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699a      	ldr	r2, [r3, #24]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	492e      	ldr	r1, [pc, #184]	; (80025e0 <HAL_RTC_Init+0x140>)
 8002528:	400a      	ands	r2, r1
 800252a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6999      	ldr	r1, [r3, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	431a      	orrs	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	430a      	orrs	r2, r1
 8002548:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6912      	ldr	r2, [r2, #16]
 8002552:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6919      	ldr	r1, [r3, #16]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	041a      	lsls	r2, r3, #16
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002568:	183c      	adds	r4, r7, r0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f8a3 	bl	80026b8 <RTC_ExitInitMode>
 8002572:	0003      	movs	r3, r0
 8002574:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002576:	230f      	movs	r3, #15
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d116      	bne.n	80025ae <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	699a      	ldr	r2, [r3, #24]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	00d2      	lsls	r2, r2, #3
 800258c:	08d2      	lsrs	r2, r2, #3
 800258e:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6999      	ldr	r1, [r3, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	22ff      	movs	r2, #255	; 0xff
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
 80025b6:	e003      	b.n	80025c0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80025b8:	230f      	movs	r3, #15
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80025c0:	230f      	movs	r3, #15
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d103      	bne.n	80025d2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2229      	movs	r2, #41	; 0x29
 80025ce:	2101      	movs	r1, #1
 80025d0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80025d2:	230f      	movs	r3, #15
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	781b      	ldrb	r3, [r3, #0]
}
 80025d8:	0018      	movs	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	b004      	add	sp, #16
 80025de:	bdb0      	pop	{r4, r5, r7, pc}
 80025e0:	fb8fffbf 	.word	0xfb8fffbf

080025e4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	21a0      	movs	r1, #160	; 0xa0
 80025f8:	438a      	bics	r2, r1
 80025fa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80025fc:	f7fe f93c 	bl	8000878 <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002604:	e00a      	b.n	800261c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002606:	f7fe f937 	bl	8000878 <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad2      	subs	r2, r2, r3
 8002610:	23fa      	movs	r3, #250	; 0xfa
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d901      	bls.n	800261c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e006      	b.n	800262a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	4013      	ands	r3, r2
 8002626:	d0ee      	beq.n	8002606 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b004      	add	sp, #16
 8002630:	bd80      	pop	{r7, pc}

08002632 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800263a:	230f      	movs	r3, #15
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2240      	movs	r2, #64	; 0x40
 800264a:	4013      	ands	r3, r2
 800264c:	d12c      	bne.n	80026a8 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68da      	ldr	r2, [r3, #12]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2180      	movs	r1, #128	; 0x80
 800265a:	430a      	orrs	r2, r1
 800265c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800265e:	f7fe f90b 	bl	8000878 <HAL_GetTick>
 8002662:	0003      	movs	r3, r0
 8002664:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002666:	e014      	b.n	8002692 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002668:	f7fe f906 	bl	8000878 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad2      	subs	r2, r2, r3
 8002672:	200f      	movs	r0, #15
 8002674:	183b      	adds	r3, r7, r0
 8002676:	1839      	adds	r1, r7, r0
 8002678:	7809      	ldrb	r1, [r1, #0]
 800267a:	7019      	strb	r1, [r3, #0]
 800267c:	23fa      	movs	r3, #250	; 0xfa
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	429a      	cmp	r2, r3
 8002682:	d906      	bls.n	8002692 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002684:	183b      	adds	r3, r7, r0
 8002686:	2203      	movs	r2, #3
 8002688:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2229      	movs	r2, #41	; 0x29
 800268e:	2103      	movs	r1, #3
 8002690:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	2240      	movs	r2, #64	; 0x40
 800269a:	4013      	ands	r3, r2
 800269c:	d104      	bne.n	80026a8 <RTC_EnterInitMode+0x76>
 800269e:	230f      	movs	r3, #15
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d1df      	bne.n	8002668 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80026a8:	230f      	movs	r3, #15
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	781b      	ldrb	r3, [r3, #0]
}
 80026ae:	0018      	movs	r0, r3
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b004      	add	sp, #16
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80026b8:	b590      	push	{r4, r7, lr}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026c0:	240f      	movs	r4, #15
 80026c2:	193b      	adds	r3, r7, r4
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80026c8:	4b1c      	ldr	r3, [pc, #112]	; (800273c <RTC_ExitInitMode+0x84>)
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <RTC_ExitInitMode+0x84>)
 80026ce:	2180      	movs	r1, #128	; 0x80
 80026d0:	438a      	bics	r2, r1
 80026d2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <RTC_ExitInitMode+0x84>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2220      	movs	r2, #32
 80026da:	4013      	ands	r3, r2
 80026dc:	d10d      	bne.n	80026fa <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff ff7f 	bl	80025e4 <HAL_RTC_WaitForSynchro>
 80026e6:	1e03      	subs	r3, r0, #0
 80026e8:	d021      	beq.n	800272e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2229      	movs	r2, #41	; 0x29
 80026ee:	2103      	movs	r1, #3
 80026f0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80026f2:	193b      	adds	r3, r7, r4
 80026f4:	2203      	movs	r2, #3
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e019      	b.n	800272e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80026fa:	4b10      	ldr	r3, [pc, #64]	; (800273c <RTC_ExitInitMode+0x84>)
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <RTC_ExitInitMode+0x84>)
 8002700:	2120      	movs	r1, #32
 8002702:	438a      	bics	r2, r1
 8002704:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	0018      	movs	r0, r3
 800270a:	f7ff ff6b 	bl	80025e4 <HAL_RTC_WaitForSynchro>
 800270e:	1e03      	subs	r3, r0, #0
 8002710:	d007      	beq.n	8002722 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2229      	movs	r2, #41	; 0x29
 8002716:	2103      	movs	r1, #3
 8002718:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800271a:	230f      	movs	r3, #15
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2203      	movs	r2, #3
 8002720:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <RTC_ExitInitMode+0x84>)
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <RTC_ExitInitMode+0x84>)
 8002728:	2120      	movs	r1, #32
 800272a:	430a      	orrs	r2, r1
 800272c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800272e:	230f      	movs	r3, #15
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b005      	add	sp, #20
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	40002800 	.word	0x40002800

08002740 <__libc_init_array>:
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	2600      	movs	r6, #0
 8002744:	4d0c      	ldr	r5, [pc, #48]	; (8002778 <__libc_init_array+0x38>)
 8002746:	4c0d      	ldr	r4, [pc, #52]	; (800277c <__libc_init_array+0x3c>)
 8002748:	1b64      	subs	r4, r4, r5
 800274a:	10a4      	asrs	r4, r4, #2
 800274c:	42a6      	cmp	r6, r4
 800274e:	d109      	bne.n	8002764 <__libc_init_array+0x24>
 8002750:	2600      	movs	r6, #0
 8002752:	f000 f821 	bl	8002798 <_init>
 8002756:	4d0a      	ldr	r5, [pc, #40]	; (8002780 <__libc_init_array+0x40>)
 8002758:	4c0a      	ldr	r4, [pc, #40]	; (8002784 <__libc_init_array+0x44>)
 800275a:	1b64      	subs	r4, r4, r5
 800275c:	10a4      	asrs	r4, r4, #2
 800275e:	42a6      	cmp	r6, r4
 8002760:	d105      	bne.n	800276e <__libc_init_array+0x2e>
 8002762:	bd70      	pop	{r4, r5, r6, pc}
 8002764:	00b3      	lsls	r3, r6, #2
 8002766:	58eb      	ldr	r3, [r5, r3]
 8002768:	4798      	blx	r3
 800276a:	3601      	adds	r6, #1
 800276c:	e7ee      	b.n	800274c <__libc_init_array+0xc>
 800276e:	00b3      	lsls	r3, r6, #2
 8002770:	58eb      	ldr	r3, [r5, r3]
 8002772:	4798      	blx	r3
 8002774:	3601      	adds	r6, #1
 8002776:	e7f2      	b.n	800275e <__libc_init_array+0x1e>
 8002778:	080027f0 	.word	0x080027f0
 800277c:	080027f0 	.word	0x080027f0
 8002780:	080027f0 	.word	0x080027f0
 8002784:	080027f4 	.word	0x080027f4

08002788 <memset>:
 8002788:	0003      	movs	r3, r0
 800278a:	1882      	adds	r2, r0, r2
 800278c:	4293      	cmp	r3, r2
 800278e:	d100      	bne.n	8002792 <memset+0xa>
 8002790:	4770      	bx	lr
 8002792:	7019      	strb	r1, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	e7f9      	b.n	800278c <memset+0x4>

08002798 <_init>:
 8002798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800279e:	bc08      	pop	{r3}
 80027a0:	469e      	mov	lr, r3
 80027a2:	4770      	bx	lr

080027a4 <_fini>:
 80027a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027aa:	bc08      	pop	{r3}
 80027ac:	469e      	mov	lr, r3
 80027ae:	4770      	bx	lr
