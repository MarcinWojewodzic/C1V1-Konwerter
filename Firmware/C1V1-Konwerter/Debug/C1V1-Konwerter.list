
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048ec  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080049a4  080049a4  000149a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a2c  08004a2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a2c  08004a2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a2c  08004a2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a30  08004a30  00014a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  2000000c  08004a40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000264  08004a40  00020264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015eb8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031a7  00000000  00000000  00035eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00039098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  0003a208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000171b9  00000000  00000000  0003b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018063  00000000  00000000  000523c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ec45  00000000  00000000  0006a42c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f9071  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d6c  00000000  00000000  000f90c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800498c 	.word	0x0800498c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	0800498c 	.word	0x0800498c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <Max485_SetStateListening>:
 *      Author: Marcin
 */
#include "main.h"
#include "MAX485.h"
void Max485_SetStateListening(Max485_Typedef *Max)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Max->Max485SelectorPort, Max->Max485SelectorPin, MAX485_LISTENING);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6898      	ldr	r0, [r3, #8]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	899b      	ldrh	r3, [r3, #12]
 80003fc:	2200      	movs	r2, #0
 80003fe:	0019      	movs	r1, r3
 8000400:	f001 fa5c 	bl	80018bc <HAL_GPIO_WritePin>
	Max->State = MAX485_LISTENING;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}

08000412 <Max485_SetStateSending>:
void Max485_SetStateSending(Max485_Typedef *Max)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(Max->Max485SelectorPort, Max->Max485SelectorPin, MAX485_SENDING);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6898      	ldr	r0, [r3, #8]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	899b      	ldrh	r3, [r3, #12]
 8000422:	2201      	movs	r2, #1
 8000424:	0019      	movs	r1, r3
 8000426:	f001 fa49 	bl	80018bc <HAL_GPIO_WritePin>
	Max->State = MAX485_SENDING;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b002      	add	sp, #8
 8000436:	bd80      	pop	{r7, pc}

08000438 <Max485_StartListening>:
void Max485_StartListening(Max485_Typedef *Max, uint8_t *DataToRecive, uint16_t NumberDataToRecive)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	801a      	strh	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(Max->Max485Uart, DataToRecive, NumberDataToRecive);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6858      	ldr	r0, [r3, #4]
 800044a:	1dbb      	adds	r3, r7, #6
 800044c:	881a      	ldrh	r2, [r3, #0]
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	0019      	movs	r1, r3
 8000452:	f004 f9a9 	bl	80047a8 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b004      	add	sp, #16
 800045c:	bd80      	pop	{r7, pc}

0800045e <Max485_StartSending>:
void Max485_StartSending(Max485_Typedef *Max, uint8_t *DataToSend, uint16_t NumberDataToSend)
{
 800045e:	b590      	push	{r4, r7, lr}
 8000460:	b085      	sub	sp, #20
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	1dbb      	adds	r3, r7, #6
 800046a:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(Max->Max485Uart, DataToSend, NumberDataToSend, MAX485_MAX_TIMEOUT);
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	6858      	ldr	r0, [r3, #4]
 8000470:	23fa      	movs	r3, #250	; 0xfa
 8000472:	009c      	lsls	r4, r3, #2
 8000474:	1dbb      	adds	r3, r7, #6
 8000476:	881a      	ldrh	r2, [r3, #0]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	0023      	movs	r3, r4
 800047c:	f002 ff1e 	bl	80032bc <HAL_UART_Transmit>
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b005      	add	sp, #20
 8000486:	bd90      	pop	{r4, r7, pc}

08000488 <Max485_Init>:
void Max485_Init(Max485_Typedef *Max, UART_HandleTypeDef *Uart, GPIO_TypeDef *MaxSelectorPort, uint16_t MaxSelectorPin)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	607a      	str	r2, [r7, #4]
 8000494:	001a      	movs	r2, r3
 8000496:	1cbb      	adds	r3, r7, #2
 8000498:	801a      	strh	r2, [r3, #0]
	Max->Max485Uart = Uart;
 800049a:	68fb      	ldr	r3, [r7, #12]
 800049c:	68ba      	ldr	r2, [r7, #8]
 800049e:	605a      	str	r2, [r3, #4]
	Max->Max485SelectorPin = MaxSelectorPin;
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	1cba      	adds	r2, r7, #2
 80004a4:	8812      	ldrh	r2, [r2, #0]
 80004a6:	819a      	strh	r2, [r3, #12]
	Max->Max485SelectorPort = MaxSelectorPort;
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	687a      	ldr	r2, [r7, #4]
 80004ac:	609a      	str	r2, [r3, #8]
	Max485_SetStateListening(Max);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ff9b 	bl	80003ec <Max485_SetStateListening>
}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b004      	add	sp, #16
 80004bc:	bd80      	pop	{r7, pc}

080004be <bh1750_TransmitData>:
 *      Author: Marcin
 */
#include "main.h"
#include "bh1750.h"
void bh1750_TransmitData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
 80004be:	b590      	push	{r4, r7, lr}
 80004c0:	b087      	sub	sp, #28
 80004c2:	af02      	add	r7, sp, #8
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	6818      	ldr	r0, [r3, #0]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	18db      	adds	r3, r3, r3
 80004d8:	b299      	uxth	r1, r3
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	b29c      	uxth	r4, r3
 80004e0:	68ba      	ldr	r2, [r7, #8]
 80004e2:	23fa      	movs	r3, #250	; 0xfa
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	0023      	movs	r3, r4
 80004ea:	f001 fa9b 	bl	8001a24 <HAL_I2C_Master_Transmit>
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b005      	add	sp, #20
 80004f4:	bd90      	pop	{r4, r7, pc}

080004f6 <bh1750_ChangeState>:
void bh1750_ReceiveData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
	HAL_I2C_Master_Receive(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
}
void bh1750_ChangeState(bh1750_t *bh,bh1750State_t s)
{
 80004f6:	b580      	push	{r7, lr}
 80004f8:	b082      	sub	sp, #8
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
 80004fe:	000a      	movs	r2, r1
 8000500:	1cfb      	adds	r3, r7, #3
 8000502:	701a      	strb	r2, [r3, #0]
	if(s==Continuously_H_Resolution_Mode||s==Continuously_H_Resolution_Mode2||s==Continuously_L_Resolution_Mode)
 8000504:	1cfb      	adds	r3, r7, #3
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	2b10      	cmp	r3, #16
 800050a:	d007      	beq.n	800051c <bh1750_ChangeState+0x26>
 800050c:	1cfb      	adds	r3, r7, #3
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b11      	cmp	r3, #17
 8000512:	d003      	beq.n	800051c <bh1750_ChangeState+0x26>
 8000514:	1cfb      	adds	r3, r7, #3
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b13      	cmp	r3, #19
 800051a:	d105      	bne.n	8000528 <bh1750_ChangeState+0x32>
	bh1750_TransmitData(bh,&s,1);
 800051c:	1cf9      	adds	r1, r7, #3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2201      	movs	r2, #1
 8000522:	0018      	movs	r0, r3
 8000524:	f7ff ffcb 	bl	80004be <bh1750_TransmitData>
	bh->state=s;
 8000528:	1cfb      	adds	r3, r7, #3
 800052a:	781a      	ldrb	r2, [r3, #0]
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	715a      	strb	r2, [r3, #5]
}
 8000530:	46c0      	nop			; (mov r8, r8)
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}

08000538 <bh1750_Init>:
	HAL_Delay(200);
	uint16_t rowMeasurment=bh1750_ReadMeasurment(bh);
	return rowMeasurment;
}
void bh1750_Init(bh1750_t *bh,I2C_HandleTypeDef* i2c,uint8_t addres,bh1750State_t s)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b084      	sub	sp, #16
 800053c:	af00      	add	r7, sp, #0
 800053e:	60f8      	str	r0, [r7, #12]
 8000540:	60b9      	str	r1, [r7, #8]
 8000542:	0019      	movs	r1, r3
 8000544:	1dfb      	adds	r3, r7, #7
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	1dbb      	adds	r3, r7, #6
 800054a:	1c0a      	adds	r2, r1, #0
 800054c:	701a      	strb	r2, [r3, #0]
	bh->bh_i2c=i2c;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	68ba      	ldr	r2, [r7, #8]
 8000552:	601a      	str	r2, [r3, #0]
	bh->addr=addres;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	1dfa      	adds	r2, r7, #7
 8000558:	7812      	ldrb	r2, [r2, #0]
 800055a:	711a      	strb	r2, [r3, #4]
	if(s!=0)
 800055c:	1dbb      	adds	r3, r7, #6
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d006      	beq.n	8000572 <bh1750_Init+0x3a>
	bh1750_ChangeState(bh, s);
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	781a      	ldrb	r2, [r3, #0]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff ffc2 	bl	80004f6 <bh1750_ChangeState>
	bh->state=s;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	1dba      	adds	r2, r7, #6
 8000576:	7812      	ldrb	r2, [r2, #0]
 8000578:	715a      	strb	r2, [r3, #5]
}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	b004      	add	sp, #16
 8000580:	bd80      	pop	{r7, pc}
	...

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <MX_DMA_Init+0x28>)
 800058c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <MX_DMA_Init+0x28>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	639a      	str	r2, [r3, #56]	; 0x38
 8000596:	4b05      	ldr	r3, [pc, #20]	; (80005ac <MX_DMA_Init+0x28>)
 8000598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800059a:	2201      	movs	r2, #1
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40021000 	.word	0x40021000

080005b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b089      	sub	sp, #36	; 0x24
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	240c      	movs	r4, #12
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2314      	movs	r3, #20
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f004 f9db 	bl	800497c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_GPIO_Init+0x88>)
 80005c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_GPIO_Init+0x88>)
 80005cc:	2102      	movs	r1, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	635a      	str	r2, [r3, #52]	; 0x34
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <MX_GPIO_Init+0x88>)
 80005d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d6:	2202      	movs	r2, #2
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_GPIO_Init+0x88>)
 80005e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_GPIO_Init+0x88>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	430a      	orrs	r2, r1
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_GPIO_Init+0x88>)
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	2201      	movs	r2, #1
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	0199      	lsls	r1, r3, #6
 80005fa:	23a0      	movs	r3, #160	; 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2200      	movs	r2, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f001 f95b 	bl	80018bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_Selector_Pin;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	0192      	lsls	r2, r2, #6
 800060c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2201      	movs	r2, #1
 8000612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2203      	movs	r2, #3
 800061e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MAX485_Selector_GPIO_Port, &GPIO_InitStruct);
 8000620:	193a      	adds	r2, r7, r4
 8000622:	23a0      	movs	r3, #160	; 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 ffe3 	bl	80015f4 <HAL_GPIO_Init>

}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b009      	add	sp, #36	; 0x24
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	40021000 	.word	0x40021000

0800063c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <MX_I2C2_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <MX_I2C2_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_I2C2_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_I2C2_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_I2C2_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000678:	0018      	movs	r0, r3
 800067a:	f001 f93d 	bl	80018f8 <HAL_I2C_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 f919 	bl	80008b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000688:	2100      	movs	r1, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f001 fce8 	bl	8002060 <HAL_I2CEx_ConfigAnalogFilter>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 f910 	bl	80008b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MX_I2C2_Init+0x74>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f001 fd2b 	bl	80020f8 <HAL_I2CEx_ConfigDigitalFilter>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 f907 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40005800 	.word	0x40005800
 80006b8:	00303d5b 	.word	0x00303d5b

080006bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b08b      	sub	sp, #44	; 0x2c
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	2414      	movs	r4, #20
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	0018      	movs	r0, r3
 80006ca:	2314      	movs	r3, #20
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f004 f954 	bl	800497c <memset>
  if(i2cHandle->Instance==I2C2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a1c      	ldr	r2, [pc, #112]	; (800074c <HAL_I2C_MspInit+0x90>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d131      	bne.n	8000742 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <HAL_I2C_MspInit+0x94>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <HAL_I2C_MspInit+0x94>)
 80006e4:	2101      	movs	r1, #1
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <HAL_I2C_MspInit+0x94>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ee:	2201      	movs	r2, #1
 80006f0:	4013      	ands	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	22c0      	movs	r2, #192	; 0xc0
 80006fa:	0152      	lsls	r2, r2, #5
 80006fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fe:	0021      	movs	r1, r4
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2212      	movs	r2, #18
 8000704:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2206      	movs	r2, #6
 8000716:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	187a      	adds	r2, r7, r1
 800071a:	23a0      	movs	r3, #160	; 0xa0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f000 ff67 	bl	80015f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_I2C_MspInit+0x94>)
 8000728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_I2C_MspInit+0x94>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	03c9      	lsls	r1, r1, #15
 8000730:	430a      	orrs	r2, r1
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_I2C_MspInit+0x94>)
 8000736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	03db      	lsls	r3, r3, #15
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b00b      	add	sp, #44	; 0x2c
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40005800 	.word	0x40005800
 8000750:	40021000 	.word	0x40021000

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 faca 	bl	8000cf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800075c:	f000 f826 	bl	80007ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000760:	f7ff ff26 	bl	80005b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000764:	f7ff ff0e 	bl	8000584 <MX_DMA_Init>
  MX_I2C2_Init();
 8000768:	f7ff ff68 	bl	800063c <MX_I2C2_Init>
  MX_RTC_Init();
 800076c:	f000 f8aa 	bl	80008c4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000770:	f000 f9b6 	bl	8000ae0 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 8000774:	f000 f96c 	bl	8000a50 <MX_TIM17_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000778:	f000 f864 	bl	8000844 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	bh1750_Init(&Bh, &hi2c2, 35, One_Time_H_Resolution_Mode);
 800077c:	4907      	ldr	r1, [pc, #28]	; (800079c <main+0x48>)
 800077e:	4808      	ldr	r0, [pc, #32]	; (80007a0 <main+0x4c>)
 8000780:	2320      	movs	r3, #32
 8000782:	2223      	movs	r2, #35	; 0x23
 8000784:	f7ff fed8 	bl	8000538 <bh1750_Init>
	Max485_Init(&Max, &huart1, MAX485_Selector_GPIO_Port, MAX485_Selector_Pin);
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	019b      	lsls	r3, r3, #6
 800078c:	22a0      	movs	r2, #160	; 0xa0
 800078e:	05d2      	lsls	r2, r2, #23
 8000790:	4904      	ldr	r1, [pc, #16]	; (80007a4 <main+0x50>)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <main+0x54>)
 8000794:	f7ff fe78 	bl	8000488 <Max485_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000798:	e7fe      	b.n	8000798 <main+0x44>
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000028 	.word	0x20000028
 80007a0:	2000007c 	.word	0x2000007c
 80007a4:	20000170 	.word	0x20000170
 80007a8:	20000084 	.word	0x20000084

080007ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ac:	b590      	push	{r4, r7, lr}
 80007ae:	b093      	sub	sp, #76	; 0x4c
 80007b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007b2:	2414      	movs	r4, #20
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	0018      	movs	r0, r3
 80007b8:	2334      	movs	r3, #52	; 0x34
 80007ba:	001a      	movs	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	f004 f8dd 	bl	800497c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	0018      	movs	r0, r3
 80007c6:	2310      	movs	r3, #16
 80007c8:	001a      	movs	r2, r3
 80007ca:	2100      	movs	r1, #0
 80007cc:	f004 f8d6 	bl	800497c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f001 fcdb 	bl	8002190 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007da:	193b      	adds	r3, r7, r4
 80007dc:	220a      	movs	r2, #10
 80007de:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	0052      	lsls	r2, r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80007e8:	0021      	movs	r1, r4
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2240      	movs	r2, #64	; 0x40
 80007f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2201      	movs	r2, #1
 80007fa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000802:	187b      	adds	r3, r7, r1
 8000804:	0018      	movs	r0, r3
 8000806:	f001 fd0f 	bl	8002228 <HAL_RCC_OscConfig>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800080e:	f000 f853 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2207      	movs	r2, #7
 8000816:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	2100      	movs	r1, #0
 800082e:	0018      	movs	r0, r3
 8000830:	f002 f80a 	bl	8002848 <HAL_RCC_ClockConfig>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000838:	f000 f83e 	bl	80008b8 <Error_Handler>
  }
}
 800083c:	46c0      	nop			; (mov r8, r8)
 800083e:	46bd      	mov	sp, r7
 8000840:	b013      	add	sp, #76	; 0x4c
 8000842:	bd90      	pop	{r4, r7, pc}

08000844 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000848:	2200      	movs	r2, #0
 800084a:	2100      	movs	r1, #0
 800084c:	2009      	movs	r0, #9
 800084e:	f000 fb81 	bl	8000f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000852:	2009      	movs	r0, #9
 8000854:	f000 fb93 	bl	8000f7e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000858:	2200      	movs	r2, #0
 800085a:	2100      	movs	r1, #0
 800085c:	201b      	movs	r0, #27
 800085e:	f000 fb79 	bl	8000f54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000862:	201b      	movs	r0, #27
 8000864:	f000 fb8b 	bl	8000f7e <HAL_NVIC_EnableIRQ>
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	000a      	movs	r2, r1
 800087a:	1cbb      	adds	r3, r7, #2
 800087c:	801a      	strh	r2, [r3, #0]
	Max485_SetStateSending(&Max);
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <HAL_UARTEx_RxEventCallback+0x40>)
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff fdc6 	bl	8000412 <Max485_SetStateSending>
	Max485_StartSending(&Max, data, Size);
 8000886:	1cbb      	adds	r3, r7, #2
 8000888:	881a      	ldrh	r2, [r3, #0]
 800088a:	490a      	ldr	r1, [pc, #40]	; (80008b4 <HAL_UARTEx_RxEventCallback+0x44>)
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <HAL_UARTEx_RxEventCallback+0x40>)
 800088e:	0018      	movs	r0, r3
 8000890:	f7ff fde5 	bl	800045e <Max485_StartSending>
	Max485_SetStateListening(&Max);
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <HAL_UARTEx_RxEventCallback+0x40>)
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff fda8 	bl	80003ec <Max485_SetStateListening>
	Max485_StartListening(&Max, data, 100);
 800089c:	4905      	ldr	r1, [pc, #20]	; (80008b4 <HAL_UARTEx_RxEventCallback+0x44>)
 800089e:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <HAL_UARTEx_RxEventCallback+0x40>)
 80008a0:	2264      	movs	r2, #100	; 0x64
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff fdc8 	bl	8000438 <Max485_StartListening>
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b002      	add	sp, #8
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000084 	.word	0x20000084
 80008b4:	20000094 	.word	0x20000094

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c8:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_RTC_Init+0x54>)
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <MX_RTC_Init+0x58>)
 80008cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_RTC_Init+0x54>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_RTC_Init+0x54>)
 80008d6:	227f      	movs	r2, #127	; 0x7f
 80008d8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_RTC_Init+0x54>)
 80008dc:	22ff      	movs	r2, #255	; 0xff
 80008de:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008e0:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <MX_RTC_Init+0x54>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008e6:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_RTC_Init+0x54>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008ec:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <MX_RTC_Init+0x54>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008f2:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_RTC_Init+0x54>)
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	05d2      	lsls	r2, r2, #23
 80008f8:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008fa:	4b07      	ldr	r3, [pc, #28]	; (8000918 <MX_RTC_Init+0x54>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <MX_RTC_Init+0x54>)
 8000902:	0018      	movs	r0, r3
 8000904:	f002 fa70 	bl	8002de8 <HAL_RTC_Init>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 800090c:	f7ff ffd4 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000910:	46c0      	nop			; (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	200000f8 	.word	0x200000f8
 800091c:	40002800 	.word	0x40002800

08000920 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b08b      	sub	sp, #44	; 0x2c
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	2410      	movs	r4, #16
 800092a:	193b      	adds	r3, r7, r4
 800092c:	0018      	movs	r0, r3
 800092e:	2318      	movs	r3, #24
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f004 f822 	bl	800497c <memset>
  if(rtcHandle->Instance==RTC)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a15      	ldr	r2, [pc, #84]	; (8000994 <HAL_RTC_MspInit+0x74>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d124      	bne.n	800098c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2280      	movs	r2, #128	; 0x80
 8000946:	0292      	lsls	r2, r2, #10
 8000948:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	0092      	lsls	r2, r2, #2
 8000950:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000952:	193b      	adds	r3, r7, r4
 8000954:	0018      	movs	r0, r3
 8000956:	f002 f921 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800095e:	f7ff ffab 	bl	80008b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000962:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <HAL_RTC_MspInit+0x78>)
 8000964:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_RTC_MspInit+0x78>)
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	0209      	lsls	r1, r1, #8
 800096c:	430a      	orrs	r2, r1
 800096e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_RTC_MspInit+0x78>)
 8000972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_RTC_MspInit+0x78>)
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	00c9      	lsls	r1, r1, #3
 800097a:	430a      	orrs	r2, r1
 800097c:	63da      	str	r2, [r3, #60]	; 0x3c
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_RTC_MspInit+0x78>)
 8000980:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	4013      	ands	r3, r2
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	b00b      	add	sp, #44	; 0x2c
 8000992:	bd90      	pop	{r4, r7, pc}
 8000994:	40002800 	.word	0x40002800
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <HAL_MspInit+0x44>)
 80009a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_MspInit+0x44>)
 80009a8:	2101      	movs	r1, #1
 80009aa:	430a      	orrs	r2, r1
 80009ac:	641a      	str	r2, [r3, #64]	; 0x40
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <HAL_MspInit+0x44>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	2201      	movs	r2, #1
 80009b4:	4013      	ands	r3, r2
 80009b6:	607b      	str	r3, [r7, #4]
 80009b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_MspInit+0x44>)
 80009bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_MspInit+0x44>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0549      	lsls	r1, r1, #21
 80009c4:	430a      	orrs	r2, r1
 80009c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <HAL_MspInit+0x44>)
 80009ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	055b      	lsls	r3, r3, #21
 80009d0:	4013      	ands	r3, r2
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b002      	add	sp, #8
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	40021000 	.word	0x40021000

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a08:	f000 f9dc 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <DMA1_Channel1_IRQHandler+0x14>)
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 fca8 	bl	8001370 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000204 	.word	0x20000204

08000a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <USART1_IRQHandler+0x14>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f002 fcde 	bl	80033f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000170 	.word	0x20000170

08000a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_TIM17_Init+0x44>)
 8000a56:	4a10      	ldr	r2, [pc, #64]	; (8000a98 <MX_TIM17_Init+0x48>)
 8000a58:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_TIM17_Init+0x44>)
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_TIM17_Init+0x44>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_TIM17_Init+0x44>)
 8000a68:	4a0c      	ldr	r2, [pc, #48]	; (8000a9c <MX_TIM17_Init+0x4c>)
 8000a6a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_TIM17_Init+0x44>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_TIM17_Init+0x44>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_TIM17_Init+0x44>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <MX_TIM17_Init+0x44>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f002 fb01 	bl	8003088 <HAL_TIM_Base_Init>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000a8a:	f7ff ff15 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000124 	.word	0x20000124
 8000a98:	40014800 	.word	0x40014800
 8000a9c:	0000ffff 	.word	0x0000ffff

08000aa0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	; (8000ad8 <HAL_TIM_Base_MspInit+0x38>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d10d      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_TIM_Base_MspInit+0x3c>)
 8000ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ab6:	4b09      	ldr	r3, [pc, #36]	; (8000adc <HAL_TIM_Base_MspInit+0x3c>)
 8000ab8:	2180      	movs	r1, #128	; 0x80
 8000aba:	02c9      	lsls	r1, r1, #11
 8000abc:	430a      	orrs	r2, r1
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <HAL_TIM_Base_MspInit+0x3c>)
 8000ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac4:	2380      	movs	r3, #128	; 0x80
 8000ac6:	02db      	lsls	r3, r3, #11
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	b004      	add	sp, #16
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40014800 	.word	0x40014800
 8000adc:	40021000 	.word	0x40021000

08000ae0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae4:	4b23      	ldr	r3, [pc, #140]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000ae6:	4a24      	ldr	r2, [pc, #144]	; (8000b78 <MX_USART1_UART_Init+0x98>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aea:	4b22      	ldr	r3, [pc, #136]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000aec:	22e1      	movs	r2, #225	; 0xe1
 8000aee:	0252      	lsls	r2, r2, #9
 8000af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b20      	ldr	r3, [pc, #128]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b1e      	ldr	r3, [pc, #120]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b1b      	ldr	r3, [pc, #108]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b18      	ldr	r3, [pc, #96]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f002 fb70 	bl	8003210 <HAL_UART_Init>
 8000b30:	1e03      	subs	r3, r0, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b34:	f7ff fec0 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f003 fdb1 	bl	80046a4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b46:	f7ff feb7 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f003 fde8 	bl	8004724 <HAL_UARTEx_SetRxFifoThreshold>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b58:	f7ff feae 	bl	80008b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b5c:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <MX_USART1_UART_Init+0x94>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f003 fd66 	bl	8004630 <HAL_UARTEx_DisableFifoMode>
 8000b64:	1e03      	subs	r3, r0, #0
 8000b66:	d001      	beq.n	8000b6c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b68:	f7ff fea6 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6c:	46c0      	nop			; (mov r8, r8)
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	20000170 	.word	0x20000170
 8000b78:	40013800 	.word	0x40013800

08000b7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b091      	sub	sp, #68	; 0x44
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	232c      	movs	r3, #44	; 0x2c
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2314      	movs	r3, #20
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f003 fef4 	bl	800497c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	2414      	movs	r4, #20
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	0018      	movs	r0, r3
 8000b9a:	2318      	movs	r3, #24
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f003 feec 	bl	800497c <memset>
  if(uartHandle->Instance==USART1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a37      	ldr	r2, [pc, #220]	; (8000c88 <HAL_UART_MspInit+0x10c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d167      	bne.n	8000c7e <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000bae:	193b      	adds	r3, r7, r4
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 ffed 	bl	8002b9c <HAL_RCCEx_PeriphCLKConfig>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000bc6:	f7ff fe77 	bl	80008b8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bca:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <HAL_UART_MspInit+0x110>)
 8000bcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <HAL_UART_MspInit+0x110>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	01c9      	lsls	r1, r1, #7
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	641a      	str	r2, [r3, #64]	; 0x40
 8000bd8:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <HAL_UART_MspInit+0x110>)
 8000bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bdc:	2380      	movs	r3, #128	; 0x80
 8000bde:	01db      	lsls	r3, r3, #7
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <HAL_UART_MspInit+0x110>)
 8000be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bea:	4b28      	ldr	r3, [pc, #160]	; (8000c8c <HAL_UART_MspInit+0x110>)
 8000bec:	2102      	movs	r1, #2
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <HAL_UART_MspInit+0x110>)
 8000bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000bfe:	212c      	movs	r1, #44	; 0x2c
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	22c0      	movs	r2, #192	; 0xc0
 8000c04:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2202      	movs	r2, #2
 8000c0a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <HAL_UART_MspInit+0x114>)
 8000c22:	0019      	movs	r1, r3
 8000c24:	0010      	movs	r0, r2
 8000c26:	f000 fce5 	bl	80015f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000c2a:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c2c:	4a1a      	ldr	r2, [pc, #104]	; (8000c98 <HAL_UART_MspInit+0x11c>)
 8000c2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000c30:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c32:	2232      	movs	r2, #50	; 0x32
 8000c34:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c36:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c3c:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c42:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c44:	2280      	movs	r2, #128	; 0x80
 8000c46:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f000 f9a8 	bl	8000fb8 <HAL_DMA_Init>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000c6c:	f7ff fe24 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2180      	movs	r1, #128	; 0x80
 8000c74:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c76:	505a      	str	r2, [r3, r1]
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_UART_MspInit+0x118>)
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b011      	add	sp, #68	; 0x44
 8000c84:	bd90      	pop	{r4, r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	50000400 	.word	0x50000400
 8000c94:	20000204 	.word	0x20000204
 8000c98:	40020008 	.word	0x40020008

08000c9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c9c:	480d      	ldr	r0, [pc, #52]	; (8000cd4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ca0:	f7ff fed0 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ca6:	490d      	ldr	r1, [pc, #52]	; (8000cdc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	; (8000ce0 <LoopForever+0xe>)
  movs r3, #0
 8000caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cac:	e002      	b.n	8000cb4 <LoopCopyDataInit>

08000cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb2:	3304      	adds	r3, #4

08000cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb8:	d3f9      	bcc.n	8000cae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cbc:	4c0a      	ldr	r4, [pc, #40]	; (8000ce8 <LoopForever+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc0:	e001      	b.n	8000cc6 <LoopFillZerobss>

08000cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc4:	3204      	adds	r2, #4

08000cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc8:	d3fb      	bcc.n	8000cc2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cca:	f003 fe33 	bl	8004934 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cce:	f7ff fd41 	bl	8000754 <main>

08000cd2 <LoopForever>:

LoopForever:
  b LoopForever
 8000cd2:	e7fe      	b.n	8000cd2 <LoopForever>
  ldr   r0, =_estack
 8000cd4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cdc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ce0:	08004a34 	.word	0x08004a34
  ldr r2, =_sbss
 8000ce4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ce8:	20000264 	.word	0x20000264

08000cec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_IRQHandler>
	...

08000cf0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf6:	1dfb      	adds	r3, r7, #7
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_Init+0x3c>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <HAL_Init+0x3c>)
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	0049      	lsls	r1, r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d0a:	2003      	movs	r0, #3
 8000d0c:	f000 f810 	bl	8000d30 <HAL_InitTick>
 8000d10:	1e03      	subs	r3, r0, #0
 8000d12:	d003      	beq.n	8000d1c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
 8000d1a:	e001      	b.n	8000d20 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fe3e 	bl	800099c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40022000 	.word	0x40022000

08000d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d38:	230f      	movs	r3, #15
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d40:	4b1d      	ldr	r3, [pc, #116]	; (8000db8 <HAL_InitTick+0x88>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d02b      	beq.n	8000da0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <HAL_InitTick+0x8c>)
 8000d4a:	681c      	ldr	r4, [r3, #0]
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <HAL_InitTick+0x88>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	0019      	movs	r1, r3
 8000d52:	23fa      	movs	r3, #250	; 0xfa
 8000d54:	0098      	lsls	r0, r3, #2
 8000d56:	f7ff f9d3 	bl	8000100 <__udivsi3>
 8000d5a:	0003      	movs	r3, r0
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	0020      	movs	r0, r4
 8000d60:	f7ff f9ce 	bl	8000100 <__udivsi3>
 8000d64:	0003      	movs	r3, r0
 8000d66:	0018      	movs	r0, r3
 8000d68:	f000 f919 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d112      	bne.n	8000d96 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b03      	cmp	r3, #3
 8000d74:	d80a      	bhi.n	8000d8c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	425b      	negs	r3, r3
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f000 f8e8 	bl	8000f54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_InitTick+0x90>)
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	e00d      	b.n	8000da8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	18fb      	adds	r3, r7, r3
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
 8000d94:	e008      	b.n	8000da8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d96:	230f      	movs	r3, #15
 8000d98:	18fb      	adds	r3, r7, r3
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
 8000d9e:	e003      	b.n	8000da8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	2201      	movs	r2, #1
 8000da6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000da8:	230f      	movs	r3, #15
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	781b      	ldrb	r3, [r3, #0]
}
 8000dae:	0018      	movs	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	b005      	add	sp, #20
 8000db4:	bd90      	pop	{r4, r7, pc}
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <HAL_IncTick+0x1c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	001a      	movs	r2, r3
 8000dce:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	18d2      	adds	r2, r2, r3
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_IncTick+0x20>)
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	46c0      	nop			; (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000260 	.word	0x20000260

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b02      	ldr	r3, [pc, #8]	; (8000df8 <HAL_GetTick+0x10>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	0018      	movs	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	20000260 	.word	0x20000260

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	0002      	movs	r2, r0
 8000e04:	1dfb      	adds	r3, r7, #7
 8000e06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e08:	1dfb      	adds	r3, r7, #7
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8000e0e:	d809      	bhi.n	8000e24 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e10:	1dfb      	adds	r3, r7, #7
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	001a      	movs	r2, r3
 8000e16:	231f      	movs	r3, #31
 8000e18:	401a      	ands	r2, r3
 8000e1a:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_EnableIRQ+0x30>)
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4091      	lsls	r1, r2
 8000e20:	000a      	movs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	e000e100 	.word	0xe000e100

08000e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	0002      	movs	r2, r0
 8000e38:	6039      	str	r1, [r7, #0]
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b7f      	cmp	r3, #127	; 0x7f
 8000e44:	d828      	bhi.n	8000e98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e46:	4a2f      	ldr	r2, [pc, #188]	; (8000f04 <__NVIC_SetPriority+0xd4>)
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	33c0      	adds	r3, #192	; 0xc0
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	589b      	ldr	r3, [r3, r2]
 8000e56:	1dfa      	adds	r2, r7, #7
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	400a      	ands	r2, r1
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	21ff      	movs	r1, #255	; 0xff
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	43d2      	mvns	r2, r2
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	22ff      	movs	r2, #255	; 0xff
 8000e74:	401a      	ands	r2, r3
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	4003      	ands	r3, r0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	481f      	ldr	r0, [pc, #124]	; (8000f04 <__NVIC_SetPriority+0xd4>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	b25b      	sxtb	r3, r3
 8000e8c:	089b      	lsrs	r3, r3, #2
 8000e8e:	430a      	orrs	r2, r1
 8000e90:	33c0      	adds	r3, #192	; 0xc0
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e96:	e031      	b.n	8000efc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e98:	4a1b      	ldr	r2, [pc, #108]	; (8000f08 <__NVIC_SetPriority+0xd8>)
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0019      	movs	r1, r3
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	400b      	ands	r3, r1
 8000ea4:	3b08      	subs	r3, #8
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3306      	adds	r3, #6
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	18d3      	adds	r3, r2, r3
 8000eae:	3304      	adds	r3, #4
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	1dfa      	adds	r2, r7, #7
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	2203      	movs	r2, #3
 8000eba:	400a      	ands	r2, r1
 8000ebc:	00d2      	lsls	r2, r2, #3
 8000ebe:	21ff      	movs	r1, #255	; 0xff
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	000a      	movs	r2, r1
 8000ec4:	43d2      	mvns	r2, r2
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	019b      	lsls	r3, r3, #6
 8000ece:	22ff      	movs	r2, #255	; 0xff
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	2303      	movs	r3, #3
 8000eda:	4003      	ands	r3, r0
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee0:	4809      	ldr	r0, [pc, #36]	; (8000f08 <__NVIC_SetPriority+0xd8>)
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	001c      	movs	r4, r3
 8000ee8:	230f      	movs	r3, #15
 8000eea:	4023      	ands	r3, r4
 8000eec:	3b08      	subs	r3, #8
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	3306      	adds	r3, #6
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	18c3      	adds	r3, r0, r3
 8000ef8:	3304      	adds	r3, #4
 8000efa:	601a      	str	r2, [r3, #0]
}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b003      	add	sp, #12
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	1e5a      	subs	r2, r3, #1
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	045b      	lsls	r3, r3, #17
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d301      	bcc.n	8000f24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f20:	2301      	movs	r3, #1
 8000f22:	e010      	b.n	8000f46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f24:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <SysTick_Config+0x44>)
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	3a01      	subs	r2, #1
 8000f2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	425b      	negs	r3, r3
 8000f30:	2103      	movs	r1, #3
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff ff7c 	bl	8000e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <SysTick_Config+0x44>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3e:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <SysTick_Config+0x44>)
 8000f40:	2207      	movs	r2, #7
 8000f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	0018      	movs	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	e000e010 	.word	0xe000e010

08000f54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	210f      	movs	r1, #15
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	1c02      	adds	r2, r0, #0
 8000f64:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b25b      	sxtb	r3, r3
 8000f6e:	0011      	movs	r1, r2
 8000f70:	0018      	movs	r0, r3
 8000f72:	f7ff ff5d 	bl	8000e30 <__NVIC_SetPriority>
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b004      	add	sp, #16
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	0002      	movs	r2, r0
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	b25b      	sxtb	r3, r3
 8000f90:	0018      	movs	r0, r3
 8000f92:	f7ff ff33 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b002      	add	sp, #8
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ffaf 	bl	8000f0c <SysTick_Config>
 8000fae:	0003      	movs	r3, r0
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e077      	b.n	80010ba <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a3d      	ldr	r2, [pc, #244]	; (80010c4 <HAL_DMA_Init+0x10c>)
 8000fd0:	4694      	mov	ip, r2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	2114      	movs	r1, #20
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f7ff f892 	bl	8000100 <__udivsi3>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	009a      	lsls	r2, r3, #2
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2225      	movs	r2, #37	; 0x25
 8000fe8:	2102      	movs	r1, #2
 8000fea:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4934      	ldr	r1, [pc, #208]	; (80010c8 <HAL_DMA_Init+0x110>)
 8000ff8:	400a      	ands	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6819      	ldr	r1, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	691b      	ldr	r3, [r3, #16]
 8001010:	431a      	orrs	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	431a      	orrs	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a1b      	ldr	r3, [r3, #32]
 8001028:	431a      	orrs	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	430a      	orrs	r2, r1
 8001030:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	0018      	movs	r0, r3
 8001036:	f000 fa8d 	bl	8001554 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	01db      	lsls	r3, r3, #7
 8001042:	429a      	cmp	r2, r3
 8001044:	d102      	bne.n	800104c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	213f      	movs	r1, #63	; 0x3f
 8001056:	400a      	ands	r2, r1
 8001058:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105e:	687a      	ldr	r2, [r7, #4]
 8001060:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001062:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d011      	beq.n	8001090 <HAL_DMA_Init+0xd8>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	2b04      	cmp	r3, #4
 8001072:	d80d      	bhi.n	8001090 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fa98 	bl	80015ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	e008      	b.n	80010a2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2200      	movs	r2, #0
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2225      	movs	r2, #37	; 0x25
 80010ac:	2101      	movs	r1, #1
 80010ae:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2224      	movs	r2, #36	; 0x24
 80010b4:	2100      	movs	r1, #0
 80010b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	0018      	movs	r0, r3
 80010bc:	46bd      	mov	sp, r7
 80010be:	b002      	add	sp, #8
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	bffdfff8 	.word	0xbffdfff8
 80010c8:	ffff800f 	.word	0xffff800f

080010cc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010da:	2317      	movs	r3, #23
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2224      	movs	r2, #36	; 0x24
 80010e6:	5c9b      	ldrb	r3, [r3, r2]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d101      	bne.n	80010f0 <HAL_DMA_Start_IT+0x24>
 80010ec:	2302      	movs	r3, #2
 80010ee:	e06f      	b.n	80011d0 <HAL_DMA_Start_IT+0x104>
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2224      	movs	r2, #36	; 0x24
 80010f4:	2101      	movs	r1, #1
 80010f6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2225      	movs	r2, #37	; 0x25
 80010fc:	5c9b      	ldrb	r3, [r3, r2]
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	2b01      	cmp	r3, #1
 8001102:	d157      	bne.n	80011b4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2225      	movs	r2, #37	; 0x25
 8001108:	2102      	movs	r1, #2
 800110a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2200      	movs	r2, #0
 8001110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	438a      	bics	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	68b9      	ldr	r1, [r7, #8]
 8001128:	68f8      	ldr	r0, [r7, #12]
 800112a:	f000 f9d3 	bl	80014d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	2b00      	cmp	r3, #0
 8001134:	d008      	beq.n	8001148 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	210e      	movs	r1, #14
 8001142:	430a      	orrs	r2, r1
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	e00f      	b.n	8001168 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2104      	movs	r1, #4
 8001154:	438a      	bics	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	210a      	movs	r1, #10
 8001164:	430a      	orrs	r2, r1
 8001166:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	025b      	lsls	r3, r3, #9
 8001172:	4013      	ands	r3, r2
 8001174:	d008      	beq.n	8001188 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	0049      	lsls	r1, r1, #1
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800118c:	2b00      	cmp	r3, #0
 800118e:	d008      	beq.n	80011a2 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0049      	lsls	r1, r1, #1
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2101      	movs	r1, #1
 80011ae:	430a      	orrs	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	e00a      	b.n	80011ca <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2224      	movs	r2, #36	; 0x24
 80011be:	2100      	movs	r1, #0
 80011c0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80011c2:	2317      	movs	r3, #23
 80011c4:	18fb      	adds	r3, r7, r3
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80011ca:	2317      	movs	r3, #23
 80011cc:	18fb      	adds	r3, r7, r3
 80011ce:	781b      	ldrb	r3, [r3, #0]
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b006      	add	sp, #24
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d101      	bne.n	80011ea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	e050      	b.n	800128c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2225      	movs	r2, #37	; 0x25
 80011ee:	5c9b      	ldrb	r3, [r3, r2]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d008      	beq.n	8001208 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2204      	movs	r2, #4
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2224      	movs	r2, #36	; 0x24
 8001200:	2100      	movs	r1, #0
 8001202:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e041      	b.n	800128c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	210e      	movs	r1, #14
 8001214:	438a      	bics	r2, r1
 8001216:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	491c      	ldr	r1, [pc, #112]	; (8001294 <HAL_DMA_Abort+0xbc>)
 8001224:	400a      	ands	r2, r1
 8001226:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2101      	movs	r1, #1
 8001234:	438a      	bics	r2, r1
 8001236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001238:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_DMA_Abort+0xc0>)
 800123a:	6859      	ldr	r1, [r3, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	221c      	movs	r2, #28
 8001242:	4013      	ands	r3, r2
 8001244:	2201      	movs	r2, #1
 8001246:	409a      	lsls	r2, r3
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <HAL_DMA_Abort+0xc0>)
 800124a:	430a      	orrs	r2, r1
 800124c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001256:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00c      	beq.n	800127a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800126a:	490a      	ldr	r1, [pc, #40]	; (8001294 <HAL_DMA_Abort+0xbc>)
 800126c:	400a      	ands	r2, r1
 800126e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001278:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2225      	movs	r2, #37	; 0x25
 800127e:	2101      	movs	r1, #1
 8001280:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2224      	movs	r2, #36	; 0x24
 8001286:	2100      	movs	r1, #0
 8001288:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}
 8001294:	fffffeff 	.word	0xfffffeff
 8001298:	40020000 	.word	0x40020000

0800129c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a4:	210f      	movs	r1, #15
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2225      	movs	r2, #37	; 0x25
 80012b0:	5c9b      	ldrb	r3, [r3, r2]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d006      	beq.n	80012c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2204      	movs	r2, #4
 80012bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2201      	movs	r2, #1
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e049      	b.n	800135a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	210e      	movs	r1, #14
 80012d2:	438a      	bics	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2101      	movs	r1, #1
 80012e2:	438a      	bics	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f0:	491d      	ldr	r1, [pc, #116]	; (8001368 <HAL_DMA_Abort_IT+0xcc>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_DMA_Abort_IT+0xd0>)
 80012f8:	6859      	ldr	r1, [r3, #4]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	221c      	movs	r2, #28
 8001300:	4013      	ands	r3, r2
 8001302:	2201      	movs	r2, #1
 8001304:	409a      	lsls	r2, r3
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_DMA_Abort_IT+0xd0>)
 8001308:	430a      	orrs	r2, r1
 800130a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001314:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800131a:	2b00      	cmp	r3, #0
 800131c:	d00c      	beq.n	8001338 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001328:	490f      	ldr	r1, [pc, #60]	; (8001368 <HAL_DMA_Abort_IT+0xcc>)
 800132a:	400a      	ands	r2, r1
 800132c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001336:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2225      	movs	r2, #37	; 0x25
 800133c:	2101      	movs	r1, #1
 800133e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2224      	movs	r2, #36	; 0x24
 8001344:	2100      	movs	r1, #0
 8001346:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134c:	2b00      	cmp	r3, #0
 800134e:	d004      	beq.n	800135a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	0010      	movs	r0, r2
 8001358:	4798      	blx	r3
    }
  }
  return status;
 800135a:	230f      	movs	r3, #15
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	781b      	ldrb	r3, [r3, #0]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b004      	add	sp, #16
 8001366:	bd80      	pop	{r7, pc}
 8001368:	fffffeff 	.word	0xfffffeff
 800136c:	40020000 	.word	0x40020000

08001370 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001378:	4b55      	ldr	r3, [pc, #340]	; (80014d0 <HAL_DMA_IRQHandler+0x160>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	221c      	movs	r2, #28
 800138c:	4013      	ands	r3, r2
 800138e:	2204      	movs	r2, #4
 8001390:	409a      	lsls	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	68fa      	ldr	r2, [r7, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	d027      	beq.n	80013ea <HAL_DMA_IRQHandler+0x7a>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	2204      	movs	r2, #4
 800139e:	4013      	ands	r3, r2
 80013a0:	d023      	beq.n	80013ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2220      	movs	r2, #32
 80013aa:	4013      	ands	r3, r2
 80013ac:	d107      	bne.n	80013be <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2104      	movs	r1, #4
 80013ba:	438a      	bics	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80013be:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <HAL_DMA_IRQHandler+0x160>)
 80013c0:	6859      	ldr	r1, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	221c      	movs	r2, #28
 80013c8:	4013      	ands	r3, r2
 80013ca:	2204      	movs	r2, #4
 80013cc:	409a      	lsls	r2, r3
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <HAL_DMA_IRQHandler+0x160>)
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d100      	bne.n	80013de <HAL_DMA_IRQHandler+0x6e>
 80013dc:	e073      	b.n	80014c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	0010      	movs	r0, r2
 80013e6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80013e8:	e06d      	b.n	80014c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	221c      	movs	r2, #28
 80013f0:	4013      	ands	r3, r2
 80013f2:	2202      	movs	r2, #2
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4013      	ands	r3, r2
 80013fc:	d02e      	beq.n	800145c <HAL_DMA_IRQHandler+0xec>
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d02a      	beq.n	800145c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2220      	movs	r2, #32
 800140e:	4013      	ands	r3, r2
 8001410:	d10b      	bne.n	800142a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	210a      	movs	r1, #10
 800141e:	438a      	bics	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2225      	movs	r2, #37	; 0x25
 8001426:	2101      	movs	r1, #1
 8001428:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800142a:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <HAL_DMA_IRQHandler+0x160>)
 800142c:	6859      	ldr	r1, [r3, #4]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	221c      	movs	r2, #28
 8001434:	4013      	ands	r3, r2
 8001436:	2202      	movs	r2, #2
 8001438:	409a      	lsls	r2, r3
 800143a:	4b25      	ldr	r3, [pc, #148]	; (80014d0 <HAL_DMA_IRQHandler+0x160>)
 800143c:	430a      	orrs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	; 0x24
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d03a      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	0010      	movs	r0, r2
 8001458:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800145a:	e034      	b.n	80014c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	221c      	movs	r2, #28
 8001462:	4013      	ands	r3, r2
 8001464:	2208      	movs	r2, #8
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	d02b      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x158>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2208      	movs	r2, #8
 8001474:	4013      	ands	r3, r2
 8001476:	d027      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	210e      	movs	r1, #14
 8001484:	438a      	bics	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_DMA_IRQHandler+0x160>)
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	221c      	movs	r2, #28
 8001492:	4013      	ands	r3, r2
 8001494:	2201      	movs	r2, #1
 8001496:	409a      	lsls	r2, r3
 8001498:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <HAL_DMA_IRQHandler+0x160>)
 800149a:	430a      	orrs	r2, r1
 800149c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2225      	movs	r2, #37	; 0x25
 80014a8:	2101      	movs	r1, #1
 80014aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2224      	movs	r2, #36	; 0x24
 80014b0:	2100      	movs	r1, #0
 80014b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	0010      	movs	r0, r2
 80014c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014c6:	46c0      	nop			; (mov r8, r8)
 80014c8:	46c0      	nop			; (mov r8, r8)
}
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b004      	add	sp, #16
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40020000 	.word	0x40020000

080014d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80014ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014fc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <DMA_SetConfig+0x7c>)
 8001500:	6859      	ldr	r1, [r3, #4]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	221c      	movs	r2, #28
 8001508:	4013      	ands	r3, r2
 800150a:	2201      	movs	r2, #1
 800150c:	409a      	lsls	r2, r3
 800150e:	4b10      	ldr	r3, [pc, #64]	; (8001550 <DMA_SetConfig+0x7c>)
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b10      	cmp	r3, #16
 8001522:	d108      	bne.n	8001536 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001534:	e007      	b.n	8001546 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	60da      	str	r2, [r3, #12]
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b004      	add	sp, #16
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40020000 	.word	0x40020000

08001554 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	4a10      	ldr	r2, [pc, #64]	; (80015a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001564:	4694      	mov	ip, r2
 8001566:	4463      	add	r3, ip
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	001a      	movs	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	001a      	movs	r2, r3
 8001576:	23ff      	movs	r3, #255	; 0xff
 8001578:	4013      	ands	r3, r2
 800157a:	3b08      	subs	r3, #8
 800157c:	2114      	movs	r1, #20
 800157e:	0018      	movs	r0, r3
 8001580:	f7fe fdbe 	bl	8000100 <__udivsi3>
 8001584:	0003      	movs	r3, r0
 8001586:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800158c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	221f      	movs	r2, #31
 8001592:	4013      	ands	r3, r2
 8001594:	2201      	movs	r2, #1
 8001596:	409a      	lsls	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800159c:	46c0      	nop			; (mov r8, r8)
 800159e:	46bd      	mov	sp, r7
 80015a0:	b004      	add	sp, #16
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	10008200 	.word	0x10008200
 80015a8:	40020880 	.word	0x40020880

080015ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	223f      	movs	r2, #63	; 0x3f
 80015ba:	4013      	ands	r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80015c2:	4694      	mov	ip, r2
 80015c4:	4463      	add	r3, ip
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	001a      	movs	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80015d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	2203      	movs	r2, #3
 80015da:	4013      	ands	r3, r2
 80015dc:	2201      	movs	r2, #1
 80015de:	409a      	lsls	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80015e4:	46c0      	nop			; (mov r8, r8)
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b004      	add	sp, #16
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	1000823f 	.word	0x1000823f
 80015f0:	40020940 	.word	0x40020940

080015f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001602:	e147      	b.n	8001894 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2101      	movs	r1, #1
 800160a:	697a      	ldr	r2, [r7, #20]
 800160c:	4091      	lsls	r1, r2
 800160e:	000a      	movs	r2, r1
 8001610:	4013      	ands	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d100      	bne.n	800161c <HAL_GPIO_Init+0x28>
 800161a:	e138      	b.n	800188e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	2203      	movs	r2, #3
 8001622:	4013      	ands	r3, r2
 8001624:	2b01      	cmp	r3, #1
 8001626:	d005      	beq.n	8001634 <HAL_GPIO_Init+0x40>
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2203      	movs	r2, #3
 800162e:	4013      	ands	r3, r2
 8001630:	2b02      	cmp	r3, #2
 8001632:	d130      	bne.n	8001696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	2203      	movs	r2, #3
 8001640:	409a      	lsls	r2, r3
 8001642:	0013      	movs	r3, r2
 8001644:	43da      	mvns	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	68da      	ldr	r2, [r3, #12]
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	409a      	lsls	r2, r3
 8001656:	0013      	movs	r3, r2
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800166a:	2201      	movs	r2, #1
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	43da      	mvns	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	091b      	lsrs	r3, r3, #4
 8001680:	2201      	movs	r2, #1
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
 8001688:	0013      	movs	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2203      	movs	r2, #3
 800169c:	4013      	ands	r3, r2
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d017      	beq.n	80016d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	2203      	movs	r2, #3
 80016ae:	409a      	lsls	r2, r3
 80016b0:	0013      	movs	r3, r2
 80016b2:	43da      	mvns	r2, r3
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	4013      	ands	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	409a      	lsls	r2, r3
 80016c4:	0013      	movs	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2203      	movs	r2, #3
 80016d8:	4013      	ands	r3, r2
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d123      	bne.n	8001726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	58d3      	ldr	r3, [r2, r3]
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	2207      	movs	r2, #7
 80016f0:	4013      	ands	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	220f      	movs	r2, #15
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	43da      	mvns	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	691a      	ldr	r2, [r3, #16]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2107      	movs	r1, #7
 800170a:	400b      	ands	r3, r1
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	409a      	lsls	r2, r3
 8001710:	0013      	movs	r3, r2
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	08da      	lsrs	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3208      	adds	r2, #8
 8001720:	0092      	lsls	r2, r2, #2
 8001722:	6939      	ldr	r1, [r7, #16]
 8001724:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	2203      	movs	r2, #3
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2203      	movs	r2, #3
 8001744:	401a      	ands	r2, r3
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	409a      	lsls	r2, r3
 800174c:	0013      	movs	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	23c0      	movs	r3, #192	; 0xc0
 8001760:	029b      	lsls	r3, r3, #10
 8001762:	4013      	ands	r3, r2
 8001764:	d100      	bne.n	8001768 <HAL_GPIO_Init+0x174>
 8001766:	e092      	b.n	800188e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001768:	4a50      	ldr	r2, [pc, #320]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	3318      	adds	r3, #24
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	589b      	ldr	r3, [r3, r2]
 8001774:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	2203      	movs	r2, #3
 800177a:	4013      	ands	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	220f      	movs	r2, #15
 8001780:	409a      	lsls	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	43da      	mvns	r2, r3
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	23a0      	movs	r3, #160	; 0xa0
 8001790:	05db      	lsls	r3, r3, #23
 8001792:	429a      	cmp	r2, r3
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0x1ca>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a45      	ldr	r2, [pc, #276]	; (80018b0 <HAL_GPIO_Init+0x2bc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_GPIO_Init+0x1c6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a44      	ldr	r2, [pc, #272]	; (80018b4 <HAL_GPIO_Init+0x2c0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x1c2>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a43      	ldr	r2, [pc, #268]	; (80018b8 <HAL_GPIO_Init+0x2c4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_GPIO_Init+0x1be>
 80017ae:	2303      	movs	r3, #3
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x1cc>
 80017b2:	2305      	movs	r3, #5
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x1cc>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x1cc>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x1cc>
 80017be:	2300      	movs	r3, #0
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	2103      	movs	r1, #3
 80017c4:	400a      	ands	r2, r1
 80017c6:	00d2      	lsls	r2, r2, #3
 80017c8:	4093      	lsls	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80017d0:	4936      	ldr	r1, [pc, #216]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3318      	adds	r3, #24
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017de:	4b33      	ldr	r3, [pc, #204]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	035b      	lsls	r3, r3, #13
 80017f6:	4013      	ands	r3, r2
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43da      	mvns	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	039b      	lsls	r3, r3, #14
 8001820:	4013      	ands	r3, r2
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800182c:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001832:	4a1e      	ldr	r2, [pc, #120]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 8001834:	2384      	movs	r3, #132	; 0x84
 8001836:	58d3      	ldr	r3, [r2, r3]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	43da      	mvns	r2, r3
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	029b      	lsls	r3, r3, #10
 800184c:	4013      	ands	r3, r2
 800184e:	d003      	beq.n	8001858 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4313      	orrs	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001858:	4914      	ldr	r1, [pc, #80]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 800185a:	2284      	movs	r2, #132	; 0x84
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001860:	4a12      	ldr	r2, [pc, #72]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	58d3      	ldr	r3, [r2, r3]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43da      	mvns	r2, r3
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4013      	ands	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	2380      	movs	r3, #128	; 0x80
 8001878:	025b      	lsls	r3, r3, #9
 800187a:	4013      	ands	r3, r2
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001886:	4909      	ldr	r1, [pc, #36]	; (80018ac <HAL_GPIO_Init+0x2b8>)
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	3301      	adds	r3, #1
 8001892:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	40da      	lsrs	r2, r3
 800189c:	1e13      	subs	r3, r2, #0
 800189e:	d000      	beq.n	80018a2 <HAL_GPIO_Init+0x2ae>
 80018a0:	e6b0      	b.n	8001604 <HAL_GPIO_Init+0x10>
  }
}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46c0      	nop			; (mov r8, r8)
 80018a6:	46bd      	mov	sp, r7
 80018a8:	b006      	add	sp, #24
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021800 	.word	0x40021800
 80018b0:	50000400 	.word	0x50000400
 80018b4:	50000800 	.word	0x50000800
 80018b8:	50000c00 	.word	0x50000c00

080018bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
 80018c4:	0008      	movs	r0, r1
 80018c6:	0011      	movs	r1, r2
 80018c8:	1cbb      	adds	r3, r7, #2
 80018ca:	1c02      	adds	r2, r0, #0
 80018cc:	801a      	strh	r2, [r3, #0]
 80018ce:	1c7b      	adds	r3, r7, #1
 80018d0:	1c0a      	adds	r2, r1, #0
 80018d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018d4:	1c7b      	adds	r3, r7, #1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d004      	beq.n	80018e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018dc:	1cbb      	adds	r3, r7, #2
 80018de:	881a      	ldrh	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018e4:	e003      	b.n	80018ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018e6:	1cbb      	adds	r3, r7, #2
 80018e8:	881a      	ldrh	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018ee:	46c0      	nop			; (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
	...

080018f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e082      	b.n	8001a10 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2241      	movs	r2, #65	; 0x41
 800190e:	5c9b      	ldrb	r3, [r3, r2]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d107      	bne.n	8001926 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2240      	movs	r2, #64	; 0x40
 800191a:	2100      	movs	r1, #0
 800191c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	0018      	movs	r0, r3
 8001922:	f7fe fecb 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2241      	movs	r2, #65	; 0x41
 800192a:	2124      	movs	r1, #36	; 0x24
 800192c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2101      	movs	r1, #1
 800193a:	438a      	bics	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4934      	ldr	r1, [pc, #208]	; (8001a18 <HAL_I2C_Init+0x120>)
 8001948:	400a      	ands	r2, r1
 800194a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4931      	ldr	r1, [pc, #196]	; (8001a1c <HAL_I2C_Init+0x124>)
 8001958:	400a      	ands	r2, r1
 800195a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d108      	bne.n	8001976 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	0209      	lsls	r1, r1, #8
 8001970:	430a      	orrs	r2, r1
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	e007      	b.n	8001986 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2184      	movs	r1, #132	; 0x84
 8001980:	0209      	lsls	r1, r1, #8
 8001982:	430a      	orrs	r2, r1
 8001984:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d104      	bne.n	8001998 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2280      	movs	r2, #128	; 0x80
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	491f      	ldr	r1, [pc, #124]	; (8001a20 <HAL_I2C_Init+0x128>)
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	491a      	ldr	r1, [pc, #104]	; (8001a1c <HAL_I2C_Init+0x124>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	431a      	orrs	r2, r3
 80019c2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69d9      	ldr	r1, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1a      	ldr	r2, [r3, #32]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2241      	movs	r2, #65	; 0x41
 80019fc:	2120      	movs	r1, #32
 80019fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2242      	movs	r2, #66	; 0x42
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	0018      	movs	r0, r3
 8001a12:	46bd      	mov	sp, r7
 8001a14:	b002      	add	sp, #8
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	f0ffffff 	.word	0xf0ffffff
 8001a1c:	ffff7fff 	.word	0xffff7fff
 8001a20:	02008000 	.word	0x02008000

08001a24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001a24:	b590      	push	{r4, r7, lr}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	0008      	movs	r0, r1
 8001a2e:	607a      	str	r2, [r7, #4]
 8001a30:	0019      	movs	r1, r3
 8001a32:	230a      	movs	r3, #10
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	1c02      	adds	r2, r0, #0
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	1c0a      	adds	r2, r1, #0
 8001a40:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2241      	movs	r2, #65	; 0x41
 8001a46:	5c9b      	ldrb	r3, [r3, r2]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b20      	cmp	r3, #32
 8001a4c:	d000      	beq.n	8001a50 <HAL_I2C_Master_Transmit+0x2c>
 8001a4e:	e0e7      	b.n	8001c20 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2240      	movs	r2, #64	; 0x40
 8001a54:	5c9b      	ldrb	r3, [r3, r2]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d101      	bne.n	8001a5e <HAL_I2C_Master_Transmit+0x3a>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e0e1      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2240      	movs	r2, #64	; 0x40
 8001a62:	2101      	movs	r1, #1
 8001a64:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a66:	f7ff f9bf 	bl	8000de8 <HAL_GetTick>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	0219      	lsls	r1, r3, #8
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	2319      	movs	r3, #25
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f000 f8fc 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d001      	beq.n	8001a88 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0cc      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2241      	movs	r2, #65	; 0x41
 8001a8c:	2121      	movs	r1, #33	; 0x21
 8001a8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2242      	movs	r2, #66	; 0x42
 8001a94:	2110      	movs	r1, #16
 8001a96:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2208      	movs	r2, #8
 8001aa8:	18ba      	adds	r2, r7, r2
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2bff      	cmp	r3, #255	; 0xff
 8001abc:	d911      	bls.n	8001ae2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	22ff      	movs	r2, #255	; 0xff
 8001ac2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	045c      	lsls	r4, r3, #17
 8001ace:	230a      	movs	r3, #10
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	8819      	ldrh	r1, [r3, #0]
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	4b55      	ldr	r3, [pc, #340]	; (8001c2c <HAL_I2C_Master_Transmit+0x208>)
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	0023      	movs	r3, r4
 8001adc:	f000 fa86 	bl	8001fec <I2C_TransferConfig>
 8001ae0:	e075      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	2380      	movs	r3, #128	; 0x80
 8001af4:	049c      	lsls	r4, r3, #18
 8001af6:	230a      	movs	r3, #10
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	8819      	ldrh	r1, [r3, #0]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_I2C_Master_Transmit+0x208>)
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	0023      	movs	r3, r4
 8001b04:	f000 fa72 	bl	8001fec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001b08:	e061      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 f8f0 	bl	8001cf6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b16:	1e03      	subs	r3, r0, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e081      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b46:	3b01      	subs	r3, #1
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d03a      	beq.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d136      	bne.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	0013      	movs	r3, r2
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2180      	movs	r1, #128	; 0x80
 8001b6e:	f000 f883 	bl	8001c78 <I2C_WaitOnFlagUntilTimeout>
 8001b72:	1e03      	subs	r3, r0, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e053      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	2bff      	cmp	r3, #255	; 0xff
 8001b82:	d911      	bls.n	8001ba8 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	22ff      	movs	r2, #255	; 0xff
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	045c      	lsls	r4, r3, #17
 8001b94:	230a      	movs	r3, #10
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	8819      	ldrh	r1, [r3, #0]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	f000 fa23 	bl	8001fec <I2C_TransferConfig>
 8001ba6:	e012      	b.n	8001bce <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	2380      	movs	r3, #128	; 0x80
 8001bba:	049c      	lsls	r4, r3, #18
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	8819      	ldrh	r1, [r3, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	0023      	movs	r3, r4
 8001bca:	f000 fa0f 	bl	8001fec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d198      	bne.n	8001b0a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f000 f8c8 	bl	8001d74 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001be4:	1e03      	subs	r3, r0, #0
 8001be6:	d001      	beq.n	8001bec <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e01a      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	490c      	ldr	r1, [pc, #48]	; (8001c30 <HAL_I2C_Master_Transmit+0x20c>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2241      	movs	r2, #65	; 0x41
 8001c08:	2120      	movs	r1, #32
 8001c0a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2242      	movs	r2, #66	; 0x42
 8001c10:	2100      	movs	r1, #0
 8001c12:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2240      	movs	r2, #64	; 0x40
 8001c18:	2100      	movs	r1, #0
 8001c1a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	0018      	movs	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b007      	add	sp, #28
 8001c28:	bd90      	pop	{r4, r7, pc}
 8001c2a:	46c0      	nop			; (mov r8, r8)
 8001c2c:	80002000 	.word	0x80002000
 8001c30:	fe00e800 	.word	0xfe00e800

08001c34 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	2202      	movs	r2, #2
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d103      	bne.n	8001c52 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d007      	beq.n	8001c70 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	619a      	str	r2, [r3, #24]
  }
}
 8001c70:	46c0      	nop			; (mov r8, r8)
 8001c72:	46bd      	mov	sp, r7
 8001c74:	b002      	add	sp, #8
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	1dfb      	adds	r3, r7, #7
 8001c86:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c88:	e021      	b.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	d01e      	beq.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c90:	f7ff f8aa 	bl	8000de8 <HAL_GetTick>
 8001c94:	0002      	movs	r2, r0
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d302      	bcc.n	8001ca6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d113      	bne.n	8001cce <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	2220      	movs	r2, #32
 8001cac:	431a      	orrs	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2241      	movs	r2, #65	; 0x41
 8001cb6:	2120      	movs	r1, #32
 8001cb8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2242      	movs	r2, #66	; 0x42
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2240      	movs	r2, #64	; 0x40
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00f      	b.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	425a      	negs	r2, r3
 8001cde:	4153      	adcs	r3, r2
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	001a      	movs	r2, r3
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d0ce      	beq.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	0018      	movs	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	b004      	add	sp, #16
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b084      	sub	sp, #16
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d02:	e02b      	b.n	8001d5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	68b9      	ldr	r1, [r7, #8]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 f86e 	bl	8001dec <I2C_IsErrorOccurred>
 8001d10:	1e03      	subs	r3, r0, #0
 8001d12:	d001      	beq.n	8001d18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e029      	b.n	8001d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	d01e      	beq.n	8001d5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1e:	f7ff f863 	bl	8000de8 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	68ba      	ldr	r2, [r7, #8]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d302      	bcc.n	8001d34 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d113      	bne.n	8001d5c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	2220      	movs	r2, #32
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2241      	movs	r2, #65	; 0x41
 8001d44:	2120      	movs	r1, #32
 8001d46:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2242      	movs	r2, #66	; 0x42
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2240      	movs	r2, #64	; 0x40
 8001d54:	2100      	movs	r1, #0
 8001d56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e007      	b.n	8001d6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d1cc      	bne.n	8001d04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b004      	add	sp, #16
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d80:	e028      	b.n	8001dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f000 f82f 	bl	8001dec <I2C_IsErrorOccurred>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d001      	beq.n	8001d96 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e026      	b.n	8001de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d96:	f7ff f827 	bl	8000de8 <HAL_GetTick>
 8001d9a:	0002      	movs	r2, r0
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d302      	bcc.n	8001dac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d113      	bne.n	8001dd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db0:	2220      	movs	r2, #32
 8001db2:	431a      	orrs	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2241      	movs	r2, #65	; 0x41
 8001dbc:	2120      	movs	r1, #32
 8001dbe:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2242      	movs	r2, #66	; 0x42
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2240      	movs	r2, #64	; 0x40
 8001dcc:	2100      	movs	r1, #0
 8001dce:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e007      	b.n	8001de4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d1cf      	bne.n	8001d82 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b004      	add	sp, #16
 8001dea:	bd80      	pop	{r7, pc}

08001dec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b08b      	sub	sp, #44	; 0x2c
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001df8:	2327      	movs	r3, #39	; 0x27
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2210      	movs	r2, #16
 8001e14:	4013      	ands	r3, r2
 8001e16:	d100      	bne.n	8001e1a <I2C_IsErrorOccurred+0x2e>
 8001e18:	e082      	b.n	8001f20 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2210      	movs	r2, #16
 8001e20:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e22:	e060      	b.n	8001ee6 <I2C_IsErrorOccurred+0xfa>
 8001e24:	2427      	movs	r4, #39	; 0x27
 8001e26:	193b      	adds	r3, r7, r4
 8001e28:	193a      	adds	r2, r7, r4
 8001e2a:	7812      	ldrb	r2, [r2, #0]
 8001e2c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	3301      	adds	r3, #1
 8001e32:	d058      	beq.n	8001ee6 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e34:	f7fe ffd8 	bl	8000de8 <HAL_GetTick>
 8001e38:	0002      	movs	r2, r0
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d306      	bcc.n	8001e52 <I2C_IsErrorOccurred+0x66>
 8001e44:	193b      	adds	r3, r7, r4
 8001e46:	193a      	adds	r2, r7, r4
 8001e48:	7812      	ldrb	r2, [r2, #0]
 8001e4a:	701a      	strb	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d149      	bne.n	8001ee6 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	01db      	lsls	r3, r3, #7
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001e60:	2013      	movs	r0, #19
 8001e62:	183b      	adds	r3, r7, r0
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	2142      	movs	r1, #66	; 0x42
 8001e68:	5c52      	ldrb	r2, [r2, r1]
 8001e6a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	021b      	lsls	r3, r3, #8
 8001e76:	401a      	ands	r2, r3
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	021b      	lsls	r3, r3, #8
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d126      	bne.n	8001ece <I2C_IsErrorOccurred+0xe2>
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	2380      	movs	r3, #128	; 0x80
 8001e84:	01db      	lsls	r3, r3, #7
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d021      	beq.n	8001ece <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001e8a:	183b      	adds	r3, r7, r0
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b20      	cmp	r3, #32
 8001e90:	d01d      	beq.n	8001ece <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2180      	movs	r1, #128	; 0x80
 8001e9e:	01c9      	lsls	r1, r1, #7
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ea4:	f7fe ffa0 	bl	8000de8 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001eac:	e00f      	b.n	8001ece <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001eae:	f7fe ff9b 	bl	8000de8 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b19      	cmp	r3, #25
 8001eba:	d908      	bls.n	8001ece <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001ebc:	6a3b      	ldr	r3, [r7, #32]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001ec4:	2327      	movs	r3, #39	; 0x27
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2201      	movs	r2, #1
 8001eca:	701a      	strb	r2, [r3, #0]

              break;
 8001ecc:	e00b      	b.n	8001ee6 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2127      	movs	r1, #39	; 0x27
 8001eda:	187a      	adds	r2, r7, r1
 8001edc:	1879      	adds	r1, r7, r1
 8001ede:	7809      	ldrb	r1, [r1, #0]
 8001ee0:	7011      	strb	r1, [r2, #0]
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	d1e3      	bne.n	8001eae <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2220      	movs	r2, #32
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d004      	beq.n	8001efe <I2C_IsErrorOccurred+0x112>
 8001ef4:	2327      	movs	r3, #39	; 0x27
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d092      	beq.n	8001e24 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001efe:	2327      	movs	r3, #39	; 0x27
 8001f00:	18fb      	adds	r3, r7, r3
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d103      	bne.n	8001f10 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2220      	movs	r2, #32
 8001f0e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f10:	6a3b      	ldr	r3, [r7, #32]
 8001f12:	2204      	movs	r2, #4
 8001f14:	4313      	orrs	r3, r2
 8001f16:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f18:	2327      	movs	r3, #39	; 0x27
 8001f1a:	18fb      	adds	r3, r7, r3
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	2380      	movs	r3, #128	; 0x80
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d00c      	beq.n	8001f4c <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f32:	6a3b      	ldr	r3, [r7, #32]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4313      	orrs	r3, r2
 8001f38:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2280      	movs	r2, #128	; 0x80
 8001f40:	0052      	lsls	r2, r2, #1
 8001f42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f44:	2327      	movs	r3, #39	; 0x27
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4013      	ands	r3, r2
 8001f54:	d00c      	beq.n	8001f70 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	2208      	movs	r2, #8
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2280      	movs	r2, #128	; 0x80
 8001f64:	00d2      	lsls	r2, r2, #3
 8001f66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f68:	2327      	movs	r3, #39	; 0x27
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	2380      	movs	r3, #128	; 0x80
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4013      	ands	r3, r2
 8001f78:	d00c      	beq.n	8001f94 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	2202      	movs	r2, #2
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2280      	movs	r2, #128	; 0x80
 8001f88:	0092      	lsls	r2, r2, #2
 8001f8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001f8c:	2327      	movs	r3, #39	; 0x27
 8001f8e:	18fb      	adds	r3, r7, r3
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001f94:	2327      	movs	r3, #39	; 0x27
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d01d      	beq.n	8001fda <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f7ff fe47 	bl	8001c34 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	685a      	ldr	r2, [r3, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	490d      	ldr	r1, [pc, #52]	; (8001fe8 <I2C_IsErrorOccurred+0x1fc>)
 8001fb2:	400a      	ands	r2, r1
 8001fb4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fba:	6a3b      	ldr	r3, [r7, #32]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2241      	movs	r2, #65	; 0x41
 8001fc6:	2120      	movs	r1, #32
 8001fc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2242      	movs	r2, #66	; 0x42
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001fda:	2327      	movs	r3, #39	; 0x27
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	781b      	ldrb	r3, [r3, #0]
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b00b      	add	sp, #44	; 0x2c
 8001fe6:	bd90      	pop	{r4, r7, pc}
 8001fe8:	fe00e800 	.word	0xfe00e800

08001fec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	0008      	movs	r0, r1
 8001ff6:	0011      	movs	r1, r2
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	240a      	movs	r4, #10
 8001ffc:	193b      	adds	r3, r7, r4
 8001ffe:	1c02      	adds	r2, r0, #0
 8002000:	801a      	strh	r2, [r3, #0]
 8002002:	2009      	movs	r0, #9
 8002004:	183b      	adds	r3, r7, r0
 8002006:	1c0a      	adds	r2, r1, #0
 8002008:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800200a:	193b      	adds	r3, r7, r4
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	059b      	lsls	r3, r3, #22
 8002010:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002012:	183b      	adds	r3, r7, r0
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	0419      	lsls	r1, r3, #16
 8002018:	23ff      	movs	r3, #255	; 0xff
 800201a:	041b      	lsls	r3, r3, #16
 800201c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800201e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	4313      	orrs	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002036:	0d51      	lsrs	r1, r2, #21
 8002038:	2280      	movs	r2, #128	; 0x80
 800203a:	00d2      	lsls	r2, r2, #3
 800203c:	400a      	ands	r2, r1
 800203e:	4907      	ldr	r1, [pc, #28]	; (800205c <I2C_TransferConfig+0x70>)
 8002040:	430a      	orrs	r2, r1
 8002042:	43d2      	mvns	r2, r2
 8002044:	401a      	ands	r2, r3
 8002046:	0011      	movs	r1, r2
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	697a      	ldr	r2, [r7, #20]
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b007      	add	sp, #28
 8002058:	bd90      	pop	{r4, r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	03ff63ff 	.word	0x03ff63ff

08002060 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2241      	movs	r2, #65	; 0x41
 800206e:	5c9b      	ldrb	r3, [r3, r2]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b20      	cmp	r3, #32
 8002074:	d138      	bne.n	80020e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2240      	movs	r2, #64	; 0x40
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002080:	2302      	movs	r3, #2
 8002082:	e032      	b.n	80020ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2240      	movs	r2, #64	; 0x40
 8002088:	2101      	movs	r1, #1
 800208a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2241      	movs	r2, #65	; 0x41
 8002090:	2124      	movs	r1, #36	; 0x24
 8002092:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	438a      	bics	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4911      	ldr	r1, [pc, #68]	; (80020f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2101      	movs	r1, #1
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2241      	movs	r2, #65	; 0x41
 80020d8:	2120      	movs	r1, #32
 80020da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	2100      	movs	r1, #0
 80020e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020e8:	2302      	movs	r3, #2
  }
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b002      	add	sp, #8
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	ffffefff 	.word	0xffffefff

080020f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2241      	movs	r2, #65	; 0x41
 8002106:	5c9b      	ldrb	r3, [r3, r2]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	d139      	bne.n	8002182 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	5c9b      	ldrb	r3, [r3, r2]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002118:	2302      	movs	r3, #2
 800211a:	e033      	b.n	8002184 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	2101      	movs	r1, #1
 8002122:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2241      	movs	r2, #65	; 0x41
 8002128:	2124      	movs	r1, #36	; 0x24
 800212a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2101      	movs	r1, #1
 8002138:	438a      	bics	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002148:	4013      	ands	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2101      	movs	r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2241      	movs	r2, #65	; 0x41
 8002172:	2120      	movs	r1, #32
 8002174:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
  }
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}
 800218c:	fffff0ff 	.word	0xfffff0ff

08002190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	; (8002204 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800219e:	4013      	ands	r3, r2
 80021a0:	0019      	movs	r1, r3
 80021a2:	4b17      	ldr	r3, [pc, #92]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d11f      	bne.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	0013      	movs	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	189b      	adds	r3, r3, r2
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4912      	ldr	r1, [pc, #72]	; (800220c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021c2:	0018      	movs	r0, r3
 80021c4:	f7fd ff9c 	bl	8000100 <__udivsi3>
 80021c8:	0003      	movs	r3, r0
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ce:	e008      	b.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	3b01      	subs	r3, #1
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e001      	b.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e009      	b.n	80021f6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021e2:	4b07      	ldr	r3, [pc, #28]	; (8002200 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80021e4:	695a      	ldr	r2, [r3, #20]
 80021e6:	2380      	movs	r3, #128	; 0x80
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	401a      	ands	r2, r3
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d0ed      	beq.n	80021d0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	0018      	movs	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	b004      	add	sp, #16
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	46c0      	nop			; (mov r8, r8)
 8002200:	40007000 	.word	0x40007000
 8002204:	fffff9ff 	.word	0xfffff9ff
 8002208:	20000000 	.word	0x20000000
 800220c:	000f4240 	.word	0x000f4240

08002210 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002214:	4b03      	ldr	r3, [pc, #12]	; (8002224 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	23e0      	movs	r3, #224	; 0xe0
 800221a:	01db      	lsls	r3, r3, #7
 800221c:	4013      	ands	r3, r2
}
 800221e:	0018      	movs	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b088      	sub	sp, #32
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e2f3      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2201      	movs	r2, #1
 8002240:	4013      	ands	r3, r2
 8002242:	d100      	bne.n	8002246 <HAL_RCC_OscConfig+0x1e>
 8002244:	e07c      	b.n	8002340 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002246:	4bc3      	ldr	r3, [pc, #780]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2238      	movs	r2, #56	; 0x38
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002250:	4bc0      	ldr	r3, [pc, #768]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2203      	movs	r2, #3
 8002256:	4013      	ands	r3, r2
 8002258:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b10      	cmp	r3, #16
 800225e:	d102      	bne.n	8002266 <HAL_RCC_OscConfig+0x3e>
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b03      	cmp	r3, #3
 8002264:	d002      	beq.n	800226c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d10b      	bne.n	8002284 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800226c:	4bb9      	ldr	r3, [pc, #740]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	d062      	beq.n	800233e <HAL_RCC_OscConfig+0x116>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d15e      	bne.n	800233e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e2ce      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	025b      	lsls	r3, r3, #9
 800228c:	429a      	cmp	r2, r3
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x78>
 8002290:	4bb0      	ldr	r3, [pc, #704]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	4baf      	ldr	r3, [pc, #700]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	0249      	lsls	r1, r1, #9
 800229a:	430a      	orrs	r2, r1
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e020      	b.n	80022e2 <HAL_RCC_OscConfig+0xba>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	23a0      	movs	r3, #160	; 0xa0
 80022a6:	02db      	lsls	r3, r3, #11
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d10e      	bne.n	80022ca <HAL_RCC_OscConfig+0xa2>
 80022ac:	4ba9      	ldr	r3, [pc, #676]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4ba8      	ldr	r3, [pc, #672]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80022b2:	2180      	movs	r1, #128	; 0x80
 80022b4:	02c9      	lsls	r1, r1, #11
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	4ba6      	ldr	r3, [pc, #664]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	4ba5      	ldr	r3, [pc, #660]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	0249      	lsls	r1, r1, #9
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0xba>
 80022ca:	4ba2      	ldr	r3, [pc, #648]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	4ba1      	ldr	r3, [pc, #644]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80022d0:	49a1      	ldr	r1, [pc, #644]	; (8002558 <HAL_RCC_OscConfig+0x330>)
 80022d2:	400a      	ands	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	4b9f      	ldr	r3, [pc, #636]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b9e      	ldr	r3, [pc, #632]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80022dc:	499f      	ldr	r1, [pc, #636]	; (800255c <HAL_RCC_OscConfig+0x334>)
 80022de:	400a      	ands	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d014      	beq.n	8002314 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe fd7d 	bl	8000de8 <HAL_GetTick>
 80022ee:	0003      	movs	r3, r0
 80022f0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f4:	f7fe fd78 	bl	8000de8 <HAL_GetTick>
 80022f8:	0002      	movs	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b64      	cmp	r3, #100	; 0x64
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e28d      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002306:	4b93      	ldr	r3, [pc, #588]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	029b      	lsls	r3, r3, #10
 800230e:	4013      	ands	r3, r2
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0xcc>
 8002312:	e015      	b.n	8002340 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fd68 	bl	8000de8 <HAL_GetTick>
 8002318:	0003      	movs	r3, r0
 800231a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231e:	f7fe fd63 	bl	8000de8 <HAL_GetTick>
 8002322:	0002      	movs	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b64      	cmp	r3, #100	; 0x64
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e278      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002330:	4b88      	ldr	r3, [pc, #544]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	2380      	movs	r3, #128	; 0x80
 8002336:	029b      	lsls	r3, r3, #10
 8002338:	4013      	ands	r3, r2
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0xf6>
 800233c:	e000      	b.n	8002340 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800233e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2202      	movs	r2, #2
 8002346:	4013      	ands	r3, r2
 8002348:	d100      	bne.n	800234c <HAL_RCC_OscConfig+0x124>
 800234a:	e099      	b.n	8002480 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800234c:	4b81      	ldr	r3, [pc, #516]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2238      	movs	r2, #56	; 0x38
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002356:	4b7f      	ldr	r3, [pc, #508]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2203      	movs	r2, #3
 800235c:	4013      	ands	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2b10      	cmp	r3, #16
 8002364:	d102      	bne.n	800236c <HAL_RCC_OscConfig+0x144>
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d002      	beq.n	8002372 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d135      	bne.n	80023de <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002372:	4b78      	ldr	r3, [pc, #480]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	; 0x80
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4013      	ands	r3, r2
 800237c:	d005      	beq.n	800238a <HAL_RCC_OscConfig+0x162>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e24b      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b72      	ldr	r3, [pc, #456]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a74      	ldr	r2, [pc, #464]	; (8002560 <HAL_RCC_OscConfig+0x338>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	021a      	lsls	r2, r3, #8
 800239a:	4b6e      	ldr	r3, [pc, #440]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 800239c:	430a      	orrs	r2, r1
 800239e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d112      	bne.n	80023cc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023a6:	4b6b      	ldr	r3, [pc, #428]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a6e      	ldr	r2, [pc, #440]	; (8002564 <HAL_RCC_OscConfig+0x33c>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	0019      	movs	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	4b67      	ldr	r3, [pc, #412]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80023b6:	430a      	orrs	r2, r1
 80023b8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80023ba:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	0adb      	lsrs	r3, r3, #11
 80023c0:	2207      	movs	r2, #7
 80023c2:	4013      	ands	r3, r2
 80023c4:	4a68      	ldr	r2, [pc, #416]	; (8002568 <HAL_RCC_OscConfig+0x340>)
 80023c6:	40da      	lsrs	r2, r3
 80023c8:	4b68      	ldr	r3, [pc, #416]	; (800256c <HAL_RCC_OscConfig+0x344>)
 80023ca:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023cc:	4b68      	ldr	r3, [pc, #416]	; (8002570 <HAL_RCC_OscConfig+0x348>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0018      	movs	r0, r3
 80023d2:	f7fe fcad 	bl	8000d30 <HAL_InitTick>
 80023d6:	1e03      	subs	r3, r0, #0
 80023d8:	d051      	beq.n	800247e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e221      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d030      	beq.n	8002448 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80023e6:	4b5b      	ldr	r3, [pc, #364]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a5e      	ldr	r2, [pc, #376]	; (8002564 <HAL_RCC_OscConfig+0x33c>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	4b57      	ldr	r3, [pc, #348]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80023fa:	4b56      	ldr	r3, [pc, #344]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4b55      	ldr	r3, [pc, #340]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0049      	lsls	r1, r1, #1
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7fe fcee 	bl	8000de8 <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002412:	f7fe fce9 	bl	8000de8 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e1fe      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002424:	4b4b      	ldr	r3, [pc, #300]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4013      	ands	r3, r2
 800242e:	d0f0      	beq.n	8002412 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b48      	ldr	r3, [pc, #288]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	4a4a      	ldr	r2, [pc, #296]	; (8002560 <HAL_RCC_OscConfig+0x338>)
 8002436:	4013      	ands	r3, r2
 8002438:	0019      	movs	r1, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	021a      	lsls	r2, r3, #8
 8002440:	4b44      	ldr	r3, [pc, #272]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
 8002446:	e01b      	b.n	8002480 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b41      	ldr	r3, [pc, #260]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 800244e:	4949      	ldr	r1, [pc, #292]	; (8002574 <HAL_RCC_OscConfig+0x34c>)
 8002450:	400a      	ands	r2, r1
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fcc8 	bl	8000de8 <HAL_GetTick>
 8002458:	0003      	movs	r3, r0
 800245a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800245c:	e008      	b.n	8002470 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800245e:	f7fe fcc3 	bl	8000de8 <HAL_GetTick>
 8002462:	0002      	movs	r2, r0
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b02      	cmp	r3, #2
 800246a:	d901      	bls.n	8002470 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800246c:	2303      	movs	r3, #3
 800246e:	e1d8      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002470:	4b38      	ldr	r3, [pc, #224]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4013      	ands	r3, r2
 800247a:	d1f0      	bne.n	800245e <HAL_RCC_OscConfig+0x236>
 800247c:	e000      	b.n	8002480 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800247e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2208      	movs	r2, #8
 8002486:	4013      	ands	r3, r2
 8002488:	d047      	beq.n	800251a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800248a:	4b32      	ldr	r3, [pc, #200]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2238      	movs	r2, #56	; 0x38
 8002490:	4013      	ands	r3, r2
 8002492:	2b18      	cmp	r3, #24
 8002494:	d10a      	bne.n	80024ac <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002496:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249a:	2202      	movs	r2, #2
 800249c:	4013      	ands	r3, r2
 800249e:	d03c      	beq.n	800251a <HAL_RCC_OscConfig+0x2f2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d138      	bne.n	800251a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e1ba      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d019      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80024b6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80024ba:	2101      	movs	r1, #1
 80024bc:	430a      	orrs	r2, r1
 80024be:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fc92 	bl	8000de8 <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ca:	f7fe fc8d 	bl	8000de8 <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e1a2      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80024de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e0:	2202      	movs	r2, #2
 80024e2:	4013      	ands	r3, r2
 80024e4:	d0f1      	beq.n	80024ca <HAL_RCC_OscConfig+0x2a2>
 80024e6:	e018      	b.n	800251a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80024ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 80024ee:	2101      	movs	r1, #1
 80024f0:	438a      	bics	r2, r1
 80024f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f4:	f7fe fc78 	bl	8000de8 <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024fe:	f7fe fc73 	bl	8000de8 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e188      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002510:	4b10      	ldr	r3, [pc, #64]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002512:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002514:	2202      	movs	r2, #2
 8002516:	4013      	ands	r3, r2
 8002518:	d1f1      	bne.n	80024fe <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2204      	movs	r2, #4
 8002520:	4013      	ands	r3, r2
 8002522:	d100      	bne.n	8002526 <HAL_RCC_OscConfig+0x2fe>
 8002524:	e0c6      	b.n	80026b4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	231f      	movs	r3, #31
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2238      	movs	r2, #56	; 0x38
 8002534:	4013      	ands	r3, r2
 8002536:	2b20      	cmp	r3, #32
 8002538:	d11e      	bne.n	8002578 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <HAL_RCC_OscConfig+0x32c>)
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	2202      	movs	r2, #2
 8002540:	4013      	ands	r3, r2
 8002542:	d100      	bne.n	8002546 <HAL_RCC_OscConfig+0x31e>
 8002544:	e0b6      	b.n	80026b4 <HAL_RCC_OscConfig+0x48c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d000      	beq.n	8002550 <HAL_RCC_OscConfig+0x328>
 800254e:	e0b1      	b.n	80026b4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e166      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
 8002554:	40021000 	.word	0x40021000
 8002558:	fffeffff 	.word	0xfffeffff
 800255c:	fffbffff 	.word	0xfffbffff
 8002560:	ffff80ff 	.word	0xffff80ff
 8002564:	ffffc7ff 	.word	0xffffc7ff
 8002568:	00f42400 	.word	0x00f42400
 800256c:	20000000 	.word	0x20000000
 8002570:	20000004 	.word	0x20000004
 8002574:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002578:	4bac      	ldr	r3, [pc, #688]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800257a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	055b      	lsls	r3, r3, #21
 8002580:	4013      	ands	r3, r2
 8002582:	d101      	bne.n	8002588 <HAL_RCC_OscConfig+0x360>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <HAL_RCC_OscConfig+0x362>
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d011      	beq.n	80025b2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	4ba7      	ldr	r3, [pc, #668]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002590:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002592:	4ba6      	ldr	r3, [pc, #664]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	0549      	lsls	r1, r1, #21
 8002598:	430a      	orrs	r2, r1
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
 800259c:	4ba3      	ldr	r3, [pc, #652]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800259e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a0:	2380      	movs	r3, #128	; 0x80
 80025a2:	055b      	lsls	r3, r3, #21
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80025aa:	231f      	movs	r3, #31
 80025ac:	18fb      	adds	r3, r7, r3
 80025ae:	2201      	movs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b2:	4b9f      	ldr	r3, [pc, #636]	; (8002830 <HAL_RCC_OscConfig+0x608>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	4013      	ands	r3, r2
 80025bc:	d11a      	bne.n	80025f4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025be:	4b9c      	ldr	r3, [pc, #624]	; (8002830 <HAL_RCC_OscConfig+0x608>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	4b9b      	ldr	r3, [pc, #620]	; (8002830 <HAL_RCC_OscConfig+0x608>)
 80025c4:	2180      	movs	r1, #128	; 0x80
 80025c6:	0049      	lsls	r1, r1, #1
 80025c8:	430a      	orrs	r2, r1
 80025ca:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80025cc:	f7fe fc0c 	bl	8000de8 <HAL_GetTick>
 80025d0:	0003      	movs	r3, r0
 80025d2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d6:	f7fe fc07 	bl	8000de8 <HAL_GetTick>
 80025da:	0002      	movs	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e11c      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e8:	4b91      	ldr	r3, [pc, #580]	; (8002830 <HAL_RCC_OscConfig+0x608>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2380      	movs	r3, #128	; 0x80
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4013      	ands	r3, r2
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d106      	bne.n	800260a <HAL_RCC_OscConfig+0x3e2>
 80025fc:	4b8b      	ldr	r3, [pc, #556]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80025fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002600:	4b8a      	ldr	r3, [pc, #552]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002602:	2101      	movs	r1, #1
 8002604:	430a      	orrs	r2, r1
 8002606:	65da      	str	r2, [r3, #92]	; 0x5c
 8002608:	e01c      	b.n	8002644 <HAL_RCC_OscConfig+0x41c>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b05      	cmp	r3, #5
 8002610:	d10c      	bne.n	800262c <HAL_RCC_OscConfig+0x404>
 8002612:	4b86      	ldr	r3, [pc, #536]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002614:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002616:	4b85      	ldr	r3, [pc, #532]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002618:	2104      	movs	r1, #4
 800261a:	430a      	orrs	r2, r1
 800261c:	65da      	str	r2, [r3, #92]	; 0x5c
 800261e:	4b83      	ldr	r3, [pc, #524]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002620:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002622:	4b82      	ldr	r3, [pc, #520]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002624:	2101      	movs	r1, #1
 8002626:	430a      	orrs	r2, r1
 8002628:	65da      	str	r2, [r3, #92]	; 0x5c
 800262a:	e00b      	b.n	8002644 <HAL_RCC_OscConfig+0x41c>
 800262c:	4b7f      	ldr	r3, [pc, #508]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800262e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002630:	4b7e      	ldr	r3, [pc, #504]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002632:	2101      	movs	r1, #1
 8002634:	438a      	bics	r2, r1
 8002636:	65da      	str	r2, [r3, #92]	; 0x5c
 8002638:	4b7c      	ldr	r3, [pc, #496]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800263a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800263c:	4b7b      	ldr	r3, [pc, #492]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800263e:	2104      	movs	r1, #4
 8002640:	438a      	bics	r2, r1
 8002642:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d014      	beq.n	8002676 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fbcc 	bl	8000de8 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002654:	e009      	b.n	800266a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002656:	f7fe fbc7 	bl	8000de8 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	4a74      	ldr	r2, [pc, #464]	; (8002834 <HAL_RCC_OscConfig+0x60c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e0db      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266a:	4b70      	ldr	r3, [pc, #448]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	2202      	movs	r2, #2
 8002670:	4013      	ands	r3, r2
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x42e>
 8002674:	e013      	b.n	800269e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe fbb7 	bl	8000de8 <HAL_GetTick>
 800267a:	0003      	movs	r3, r0
 800267c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800267e:	e009      	b.n	8002694 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f7fe fbb2 	bl	8000de8 <HAL_GetTick>
 8002684:	0002      	movs	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	4a6a      	ldr	r2, [pc, #424]	; (8002834 <HAL_RCC_OscConfig+0x60c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e0c6      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002694:	4b65      	ldr	r3, [pc, #404]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2202      	movs	r2, #2
 800269a:	4013      	ands	r3, r2
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800269e:	231f      	movs	r3, #31
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80026a8:	4b60      	ldr	r3, [pc, #384]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80026aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026ac:	4b5f      	ldr	r3, [pc, #380]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80026ae:	4962      	ldr	r1, [pc, #392]	; (8002838 <HAL_RCC_OscConfig+0x610>)
 80026b0:	400a      	ands	r2, r1
 80026b2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d100      	bne.n	80026be <HAL_RCC_OscConfig+0x496>
 80026bc:	e0b0      	b.n	8002820 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026be:	4b5b      	ldr	r3, [pc, #364]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	2238      	movs	r2, #56	; 0x38
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b10      	cmp	r3, #16
 80026c8:	d100      	bne.n	80026cc <HAL_RCC_OscConfig+0x4a4>
 80026ca:	e078      	b.n	80027be <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d153      	bne.n	800277c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d4:	4b55      	ldr	r3, [pc, #340]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b54      	ldr	r3, [pc, #336]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80026da:	4958      	ldr	r1, [pc, #352]	; (800283c <HAL_RCC_OscConfig+0x614>)
 80026dc:	400a      	ands	r2, r1
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fb82 	bl	8000de8 <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fb7d 	bl	8000de8 <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e092      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026fc:	4b4b      	ldr	r3, [pc, #300]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	049b      	lsls	r3, r3, #18
 8002704:	4013      	ands	r3, r2
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002708:	4b48      	ldr	r3, [pc, #288]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a4c      	ldr	r2, [pc, #304]	; (8002840 <HAL_RCC_OscConfig+0x618>)
 800270e:	4013      	ands	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1a      	ldr	r2, [r3, #32]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	431a      	orrs	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	431a      	orrs	r2, r3
 8002730:	4b3e      	ldr	r3, [pc, #248]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002732:	430a      	orrs	r2, r1
 8002734:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002736:	4b3d      	ldr	r3, [pc, #244]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	4b3c      	ldr	r3, [pc, #240]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	0449      	lsls	r1, r1, #17
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002744:	4b39      	ldr	r3, [pc, #228]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	4b38      	ldr	r3, [pc, #224]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800274a:	2180      	movs	r1, #128	; 0x80
 800274c:	0549      	lsls	r1, r1, #21
 800274e:	430a      	orrs	r2, r1
 8002750:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fb49 	bl	8000de8 <HAL_GetTick>
 8002756:	0003      	movs	r3, r0
 8002758:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7fe fb44 	bl	8000de8 <HAL_GetTick>
 8002760:	0002      	movs	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e059      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	049b      	lsls	r3, r3, #18
 8002776:	4013      	ands	r3, r2
 8002778:	d0f0      	beq.n	800275c <HAL_RCC_OscConfig+0x534>
 800277a:	e051      	b.n	8002820 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	4b2b      	ldr	r3, [pc, #172]	; (800282c <HAL_RCC_OscConfig+0x604>)
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b2a      	ldr	r3, [pc, #168]	; (800282c <HAL_RCC_OscConfig+0x604>)
 8002782:	492e      	ldr	r1, [pc, #184]	; (800283c <HAL_RCC_OscConfig+0x614>)
 8002784:	400a      	ands	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fb2e 	bl	8000de8 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe fb29 	bl	8000de8 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e03e      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	049b      	lsls	r3, r3, #18
 80027ac:	4013      	ands	r3, r2
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	4b1d      	ldr	r3, [pc, #116]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80027b6:	4923      	ldr	r1, [pc, #140]	; (8002844 <HAL_RCC_OscConfig+0x61c>)
 80027b8:	400a      	ands	r2, r1
 80027ba:	60da      	str	r2, [r3, #12]
 80027bc:	e030      	b.n	8002820 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e02b      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_RCC_OscConfig+0x604>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	2203      	movs	r2, #3
 80027d4:	401a      	ands	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d11e      	bne.n	800281c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2270      	movs	r2, #112	; 0x70
 80027e2:	401a      	ands	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d117      	bne.n	800281c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	23fe      	movs	r3, #254	; 0xfe
 80027f0:	01db      	lsls	r3, r3, #7
 80027f2:	401a      	ands	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d10e      	bne.n	800281c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	23f8      	movs	r3, #248	; 0xf8
 8002802:	039b      	lsls	r3, r3, #14
 8002804:	401a      	ands	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	0f5b      	lsrs	r3, r3, #29
 8002812:	075a      	lsls	r2, r3, #29
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	0018      	movs	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	b008      	add	sp, #32
 8002828:	bd80      	pop	{r7, pc}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	40021000 	.word	0x40021000
 8002830:	40007000 	.word	0x40007000
 8002834:	00001388 	.word	0x00001388
 8002838:	efffffff 	.word	0xefffffff
 800283c:	feffffff 	.word	0xfeffffff
 8002840:	1fc1808c 	.word	0x1fc1808c
 8002844:	effefffc 	.word	0xeffefffc

08002848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0e9      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800285c:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2207      	movs	r2, #7
 8002862:	4013      	ands	r3, r2
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d91e      	bls.n	80028a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b73      	ldr	r3, [pc, #460]	; (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2207      	movs	r2, #7
 8002870:	4393      	bics	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	430a      	orrs	r2, r1
 800287a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800287c:	f7fe fab4 	bl	8000de8 <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002884:	e009      	b.n	800289a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002886:	f7fe faaf 	bl	8000de8 <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	4a6a      	ldr	r2, [pc, #424]	; (8002a3c <HAL_RCC_ClockConfig+0x1f4>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d901      	bls.n	800289a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e0ca      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800289a:	4b67      	ldr	r3, [pc, #412]	; (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2207      	movs	r2, #7
 80028a0:	4013      	ands	r3, r2
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2202      	movs	r2, #2
 80028ae:	4013      	ands	r3, r2
 80028b0:	d015      	beq.n	80028de <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2204      	movs	r2, #4
 80028b8:	4013      	ands	r3, r2
 80028ba:	d006      	beq.n	80028ca <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80028bc:	4b60      	ldr	r3, [pc, #384]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	4b5f      	ldr	r3, [pc, #380]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028c2:	21e0      	movs	r1, #224	; 0xe0
 80028c4:	01c9      	lsls	r1, r1, #7
 80028c6:	430a      	orrs	r2, r1
 80028c8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ca:	4b5d      	ldr	r3, [pc, #372]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	4a5d      	ldr	r2, [pc, #372]	; (8002a44 <HAL_RCC_ClockConfig+0x1fc>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	0019      	movs	r1, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	4b59      	ldr	r3, [pc, #356]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2201      	movs	r2, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	d057      	beq.n	8002998 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d107      	bne.n	8002900 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f0:	4b53      	ldr	r3, [pc, #332]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	4013      	ands	r3, r2
 80028fa:	d12b      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e097      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d107      	bne.n	8002918 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002908:	4b4d      	ldr	r3, [pc, #308]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	2380      	movs	r3, #128	; 0x80
 800290e:	049b      	lsls	r3, r3, #18
 8002910:	4013      	ands	r3, r2
 8002912:	d11f      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e08b      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d107      	bne.n	8002930 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002920:	4b47      	ldr	r3, [pc, #284]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4013      	ands	r3, r2
 800292a:	d113      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e07f      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d106      	bne.n	8002946 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002938:	4b41      	ldr	r3, [pc, #260]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 800293a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800293c:	2202      	movs	r2, #2
 800293e:	4013      	ands	r3, r2
 8002940:	d108      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e074      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002946:	4b3e      	ldr	r3, [pc, #248]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294a:	2202      	movs	r2, #2
 800294c:	4013      	ands	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e06d      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002954:	4b3a      	ldr	r3, [pc, #232]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2207      	movs	r2, #7
 800295a:	4393      	bics	r3, r2
 800295c:	0019      	movs	r1, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002968:	f7fe fa3e 	bl	8000de8 <HAL_GetTick>
 800296c:	0003      	movs	r3, r0
 800296e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002970:	e009      	b.n	8002986 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002972:	f7fe fa39 	bl	8000de8 <HAL_GetTick>
 8002976:	0002      	movs	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	4a2f      	ldr	r2, [pc, #188]	; (8002a3c <HAL_RCC_ClockConfig+0x1f4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e054      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	2238      	movs	r2, #56	; 0x38
 800298c:	401a      	ands	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	429a      	cmp	r2, r3
 8002996:	d1ec      	bne.n	8002972 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2207      	movs	r2, #7
 800299e:	4013      	ands	r3, r2
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d21e      	bcs.n	80029e4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2207      	movs	r2, #7
 80029ac:	4393      	bics	r3, r2
 80029ae:	0019      	movs	r1, r3
 80029b0:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fa16 	bl	8000de8 <HAL_GetTick>
 80029bc:	0003      	movs	r3, r0
 80029be:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029c0:	e009      	b.n	80029d6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7fe fa11 	bl	8000de8 <HAL_GetTick>
 80029c6:	0002      	movs	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <HAL_RCC_ClockConfig+0x1f4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e02c      	b.n	8002a30 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_RCC_ClockConfig+0x1f0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2207      	movs	r2, #7
 80029dc:	4013      	ands	r3, r2
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1ee      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2204      	movs	r2, #4
 80029ea:	4013      	ands	r3, r2
 80029ec:	d009      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <HAL_RCC_ClockConfig+0x200>)
 80029f4:	4013      	ands	r3, r2
 80029f6:	0019      	movs	r1, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	68da      	ldr	r2, [r3, #12]
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002a02:	f000 f829 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a06:	0001      	movs	r1, r0
 8002a08:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_RCC_ClockConfig+0x1f8>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	220f      	movs	r2, #15
 8002a10:	401a      	ands	r2, r3
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_RCC_ClockConfig+0x204>)
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	58d3      	ldr	r3, [r2, r3]
 8002a18:	221f      	movs	r2, #31
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	000a      	movs	r2, r1
 8002a1e:	40da      	lsrs	r2, r3
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x208>)
 8002a22:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_ClockConfig+0x20c>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f7fe f981 	bl	8000d30 <HAL_InitTick>
 8002a2e:	0003      	movs	r3, r0
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40022000 	.word	0x40022000
 8002a3c:	00001388 	.word	0x00001388
 8002a40:	40021000 	.word	0x40021000
 8002a44:	fffff0ff 	.word	0xfffff0ff
 8002a48:	ffff8fff 	.word	0xffff8fff
 8002a4c:	080049a4 	.word	0x080049a4
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a5e:	4b3c      	ldr	r3, [pc, #240]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	2238      	movs	r2, #56	; 0x38
 8002a64:	4013      	ands	r3, r2
 8002a66:	d10f      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0adb      	lsrs	r3, r3, #11
 8002a6e:	2207      	movs	r2, #7
 8002a70:	4013      	ands	r3, r2
 8002a72:	2201      	movs	r2, #1
 8002a74:	409a      	lsls	r2, r3
 8002a76:	0013      	movs	r3, r2
 8002a78:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a7a:	6839      	ldr	r1, [r7, #0]
 8002a7c:	4835      	ldr	r0, [pc, #212]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a7e:	f7fd fb3f 	bl	8000100 <__udivsi3>
 8002a82:	0003      	movs	r3, r0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	e05d      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a88:	4b31      	ldr	r3, [pc, #196]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2238      	movs	r2, #56	; 0x38
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d102      	bne.n	8002a9a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a94:	4b30      	ldr	r3, [pc, #192]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	e054      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2238      	movs	r2, #56	; 0x38
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b10      	cmp	r3, #16
 8002aa4:	d138      	bne.n	8002b18 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2203      	movs	r2, #3
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	4013      	ands	r3, r2
 8002aba:	3301      	adds	r3, #1
 8002abc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d10d      	bne.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	4824      	ldr	r0, [pc, #144]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x100>)
 8002ac8:	f7fd fb1a 	bl	8000100 <__udivsi3>
 8002acc:	0003      	movs	r3, r0
 8002ace:	0019      	movs	r1, r3
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	227f      	movs	r2, #127	; 0x7f
 8002ad8:	4013      	ands	r3, r2
 8002ada:	434b      	muls	r3, r1
 8002adc:	617b      	str	r3, [r7, #20]
        break;
 8002ade:	e00d      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	481c      	ldr	r0, [pc, #112]	; (8002b54 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ae4:	f7fd fb0c 	bl	8000100 <__udivsi3>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	0019      	movs	r1, r3
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	0a1b      	lsrs	r3, r3, #8
 8002af2:	227f      	movs	r2, #127	; 0x7f
 8002af4:	4013      	ands	r3, r2
 8002af6:	434b      	muls	r3, r1
 8002af8:	617b      	str	r3, [r7, #20]
        break;
 8002afa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0f5b      	lsrs	r3, r3, #29
 8002b02:	2207      	movs	r2, #7
 8002b04:	4013      	ands	r3, r2
 8002b06:	3301      	adds	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	6978      	ldr	r0, [r7, #20]
 8002b0e:	f7fd faf7 	bl	8000100 <__udivsi3>
 8002b12:	0003      	movs	r3, r0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	e015      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002b18:	4b0d      	ldr	r3, [pc, #52]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2238      	movs	r2, #56	; 0x38
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d103      	bne.n	8002b2c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002b24:	2380      	movs	r3, #128	; 0x80
 8002b26:	021b      	lsls	r3, r3, #8
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	2238      	movs	r2, #56	; 0x38
 8002b32:	4013      	ands	r3, r2
 8002b34:	2b18      	cmp	r3, #24
 8002b36:	d103      	bne.n	8002b40 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002b38:	23fa      	movs	r3, #250	; 0xfa
 8002b3a:	01db      	lsls	r3, r3, #7
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	e001      	b.n	8002b44 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002b40:	2300      	movs	r3, #0
 8002b42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b44:	693b      	ldr	r3, [r7, #16]
}
 8002b46:	0018      	movs	r0, r3
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b006      	add	sp, #24
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	40021000 	.word	0x40021000
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b02      	ldr	r3, [pc, #8]	; (8002b6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	46c0      	nop			; (mov r8, r8)
 8002b6c:	20000000 	.word	0x20000000

08002b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b70:	b5b0      	push	{r4, r5, r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b74:	f7ff fff2 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b78:	0004      	movs	r4, r0
 8002b7a:	f7ff fb49 	bl	8002210 <LL_RCC_GetAPB1Prescaler>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	0b1a      	lsrs	r2, r3, #12
 8002b82:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b84:	0092      	lsls	r2, r2, #2
 8002b86:	58d3      	ldr	r3, [r2, r3]
 8002b88:	221f      	movs	r2, #31
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	40dc      	lsrs	r4, r3
 8002b8e:	0023      	movs	r3, r4
}
 8002b90:	0018      	movs	r0, r3
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bdb0      	pop	{r4, r5, r7, pc}
 8002b96:	46c0      	nop			; (mov r8, r8)
 8002b98:	080049e4 	.word	0x080049e4

08002b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ba4:	2313      	movs	r3, #19
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bac:	2312      	movs	r3, #18
 8002bae:	18fb      	adds	r3, r7, r3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	029b      	lsls	r3, r3, #10
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002bc0:	e0a3      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc2:	2011      	movs	r0, #17
 8002bc4:	183b      	adds	r3, r7, r0
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b7f      	ldr	r3, [pc, #508]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	055b      	lsls	r3, r3, #21
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d110      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	4b7c      	ldr	r3, [pc, #496]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bda:	4b7b      	ldr	r3, [pc, #492]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002bdc:	2180      	movs	r1, #128	; 0x80
 8002bde:	0549      	lsls	r1, r1, #21
 8002be0:	430a      	orrs	r2, r1
 8002be2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002be4:	4b78      	ldr	r3, [pc, #480]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	055b      	lsls	r3, r3, #21
 8002bec:	4013      	ands	r3, r2
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	183b      	adds	r3, r7, r0
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf8:	4b74      	ldr	r3, [pc, #464]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b73      	ldr	r3, [pc, #460]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002bfe:	2180      	movs	r1, #128	; 0x80
 8002c00:	0049      	lsls	r1, r1, #1
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c06:	f7fe f8ef 	bl	8000de8 <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c0e:	e00b      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c10:	f7fe f8ea 	bl	8000de8 <HAL_GetTick>
 8002c14:	0002      	movs	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d904      	bls.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002c1e:	2313      	movs	r3, #19
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	2203      	movs	r2, #3
 8002c24:	701a      	strb	r2, [r3, #0]
        break;
 8002c26:	e005      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c28:	4b68      	ldr	r3, [pc, #416]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	2380      	movs	r3, #128	; 0x80
 8002c2e:	005b      	lsls	r3, r3, #1
 8002c30:	4013      	ands	r3, r2
 8002c32:	d0ed      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002c34:	2313      	movs	r3, #19
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d154      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c3e:	4b62      	ldr	r3, [pc, #392]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c40:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c42:	23c0      	movs	r3, #192	; 0xc0
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4013      	ands	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d019      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d014      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c5a:	4b5b      	ldr	r3, [pc, #364]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5e:	4a5c      	ldr	r2, [pc, #368]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c64:	4b58      	ldr	r3, [pc, #352]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c68:	4b57      	ldr	r3, [pc, #348]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c6a:	2180      	movs	r1, #128	; 0x80
 8002c6c:	0249      	lsls	r1, r1, #9
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c72:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c76:	4b54      	ldr	r3, [pc, #336]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c78:	4956      	ldr	r1, [pc, #344]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c7e:	4b52      	ldr	r3, [pc, #328]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2201      	movs	r2, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	d016      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f8ac 	bl	8000de8 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c94:	e00c      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe f8a7 	bl	8000de8 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	4a4d      	ldr	r2, [pc, #308]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d904      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002ca6:	2313      	movs	r3, #19
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2203      	movs	r2, #3
 8002cac:	701a      	strb	r2, [r3, #0]
            break;
 8002cae:	e004      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb0:	4b45      	ldr	r3, [pc, #276]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d0ed      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002cba:	2313      	movs	r3, #19
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc4:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	4a41      	ldr	r2, [pc, #260]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	0019      	movs	r1, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695a      	ldr	r2, [r3, #20]
 8002cd2:	4b3d      	ldr	r3, [pc, #244]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cd8:	e00c      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cda:	2312      	movs	r3, #18
 8002cdc:	18fb      	adds	r3, r7, r3
 8002cde:	2213      	movs	r2, #19
 8002ce0:	18ba      	adds	r2, r7, r2
 8002ce2:	7812      	ldrb	r2, [r2, #0]
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce8:	2312      	movs	r3, #18
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	2213      	movs	r2, #19
 8002cee:	18ba      	adds	r2, r7, r2
 8002cf0:	7812      	ldrb	r2, [r2, #0]
 8002cf2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf4:	2311      	movs	r3, #17
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d105      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cfe:	4b32      	ldr	r3, [pc, #200]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d02:	4b31      	ldr	r3, [pc, #196]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d04:	4935      	ldr	r1, [pc, #212]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	d009      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d14:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	2203      	movs	r2, #3
 8002d1a:	4393      	bics	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	4b29      	ldr	r3, [pc, #164]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d32:	4b25      	ldr	r3, [pc, #148]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d36:	4a2a      	ldr	r2, [pc, #168]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	4b21      	ldr	r3, [pc, #132]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	01db      	lsls	r3, r3, #7
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d015      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d52:	4b1d      	ldr	r3, [pc, #116]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	0899      	lsrs	r1, r3, #2
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	4b1a      	ldr	r3, [pc, #104]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d60:	430a      	orrs	r2, r1
 8002d62:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	2380      	movs	r3, #128	; 0x80
 8002d6a:	05db      	lsls	r3, r3, #23
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d106      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d70:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d76:	2180      	movs	r1, #128	; 0x80
 8002d78:	0249      	lsls	r1, r1, #9
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4013      	ands	r3, r2
 8002d88:	d016      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8e:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	01db      	lsls	r3, r3, #7
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d106      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002daa:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002db0:	2180      	movs	r1, #128	; 0x80
 8002db2:	0249      	lsls	r1, r1, #9
 8002db4:	430a      	orrs	r2, r1
 8002db6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002db8:	2312      	movs	r3, #18
 8002dba:	18fb      	adds	r3, r7, r3
 8002dbc:	781b      	ldrb	r3, [r3, #0]
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b006      	add	sp, #24
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	40007000 	.word	0x40007000
 8002dd0:	fffffcff 	.word	0xfffffcff
 8002dd4:	fffeffff 	.word	0xfffeffff
 8002dd8:	00001388 	.word	0x00001388
 8002ddc:	efffffff 	.word	0xefffffff
 8002de0:	ffffcfff 	.word	0xffffcfff
 8002de4:	ffff3fff 	.word	0xffff3fff

08002de8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002de8:	b5b0      	push	{r4, r5, r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002df0:	230f      	movs	r3, #15
 8002df2:	18fb      	adds	r3, r7, r3
 8002df4:	2201      	movs	r2, #1
 8002df6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d100      	bne.n	8002e00 <HAL_RTC_Init+0x18>
 8002dfe:	e08c      	b.n	8002f1a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2229      	movs	r2, #41	; 0x29
 8002e04:	5c9b      	ldrb	r3, [r3, r2]
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d10b      	bne.n	8002e24 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2228      	movs	r2, #40	; 0x28
 8002e10:	2100      	movs	r1, #0
 8002e12:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2288      	movs	r2, #136	; 0x88
 8002e18:	0212      	lsls	r2, r2, #8
 8002e1a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7fd fd7e 	bl	8000920 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2229      	movs	r2, #41	; 0x29
 8002e28:	2102      	movs	r1, #2
 8002e2a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	2210      	movs	r2, #16
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d062      	beq.n	8002f00 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	22ca      	movs	r2, #202	; 0xca
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2253      	movs	r2, #83	; 0x53
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002e4a:	250f      	movs	r5, #15
 8002e4c:	197c      	adds	r4, r7, r5
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 f892 	bl	8002f7a <RTC_EnterInitMode>
 8002e56:	0003      	movs	r3, r0
 8002e58:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002e5a:	0028      	movs	r0, r5
 8002e5c:	183b      	adds	r3, r7, r0
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d12c      	bne.n	8002ebe <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	492e      	ldr	r1, [pc, #184]	; (8002f28 <HAL_RTC_Init+0x140>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6999      	ldr	r1, [r3, #24]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	431a      	orrs	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	6912      	ldr	r2, [r2, #16]
 8002e9a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6919      	ldr	r1, [r3, #16]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	041a      	lsls	r2, r3, #16
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002eb0:	183c      	adds	r4, r7, r0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 f8a3 	bl	8003000 <RTC_ExitInitMode>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002ebe:	230f      	movs	r3, #15
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d116      	bne.n	8002ef6 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699a      	ldr	r2, [r3, #24]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	00d2      	lsls	r2, r2, #3
 8002ed4:	08d2      	lsrs	r2, r2, #3
 8002ed6:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6999      	ldr	r1, [r3, #24]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	22ff      	movs	r2, #255	; 0xff
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
 8002efe:	e003      	b.n	8002f08 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002f00:	230f      	movs	r3, #15
 8002f02:	18fb      	adds	r3, r7, r3
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002f08:	230f      	movs	r3, #15
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d103      	bne.n	8002f1a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2229      	movs	r2, #41	; 0x29
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002f1a:	230f      	movs	r3, #15
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	781b      	ldrb	r3, [r3, #0]
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b004      	add	sp, #16
 8002f26:	bdb0      	pop	{r4, r5, r7, pc}
 8002f28:	fb8fffbf 	.word	0xfb8fffbf

08002f2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	21a0      	movs	r1, #160	; 0xa0
 8002f40:	438a      	bics	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002f44:	f7fd ff50 	bl	8000de8 <HAL_GetTick>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002f4c:	e00a      	b.n	8002f64 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002f4e:	f7fd ff4b 	bl	8000de8 <HAL_GetTick>
 8002f52:	0002      	movs	r2, r0
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	1ad2      	subs	r2, r2, r3
 8002f58:	23fa      	movs	r3, #250	; 0xfa
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d901      	bls.n	8002f64 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e006      	b.n	8002f72 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d0ee      	beq.n	8002f4e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b004      	add	sp, #16
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002f82:	230f      	movs	r3, #15
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	2200      	movs	r2, #0
 8002f88:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2240      	movs	r2, #64	; 0x40
 8002f92:	4013      	ands	r3, r2
 8002f94:	d12c      	bne.n	8002ff0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002fa6:	f7fd ff1f 	bl	8000de8 <HAL_GetTick>
 8002faa:	0003      	movs	r3, r0
 8002fac:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002fae:	e014      	b.n	8002fda <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002fb0:	f7fd ff1a 	bl	8000de8 <HAL_GetTick>
 8002fb4:	0002      	movs	r2, r0
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	1ad2      	subs	r2, r2, r3
 8002fba:	200f      	movs	r0, #15
 8002fbc:	183b      	adds	r3, r7, r0
 8002fbe:	1839      	adds	r1, r7, r0
 8002fc0:	7809      	ldrb	r1, [r1, #0]
 8002fc2:	7019      	strb	r1, [r3, #0]
 8002fc4:	23fa      	movs	r3, #250	; 0xfa
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d906      	bls.n	8002fda <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002fcc:	183b      	adds	r3, r7, r0
 8002fce:	2203      	movs	r2, #3
 8002fd0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2229      	movs	r2, #41	; 0x29
 8002fd6:	2103      	movs	r1, #3
 8002fd8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	2240      	movs	r2, #64	; 0x40
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d104      	bne.n	8002ff0 <RTC_EnterInitMode+0x76>
 8002fe6:	230f      	movs	r3, #15
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d1df      	bne.n	8002fb0 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002ff0:	230f      	movs	r3, #15
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	781b      	ldrb	r3, [r3, #0]
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b004      	add	sp, #16
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003008:	240f      	movs	r4, #15
 800300a:	193b      	adds	r3, r7, r4
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003010:	4b1c      	ldr	r3, [pc, #112]	; (8003084 <RTC_ExitInitMode+0x84>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <RTC_ExitInitMode+0x84>)
 8003016:	2180      	movs	r1, #128	; 0x80
 8003018:	438a      	bics	r2, r1
 800301a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <RTC_ExitInitMode+0x84>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2220      	movs	r2, #32
 8003022:	4013      	ands	r3, r2
 8003024:	d10d      	bne.n	8003042 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f7ff ff7f 	bl	8002f2c <HAL_RTC_WaitForSynchro>
 800302e:	1e03      	subs	r3, r0, #0
 8003030:	d021      	beq.n	8003076 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2229      	movs	r2, #41	; 0x29
 8003036:	2103      	movs	r1, #3
 8003038:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800303a:	193b      	adds	r3, r7, r4
 800303c:	2203      	movs	r2, #3
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e019      	b.n	8003076 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <RTC_ExitInitMode+0x84>)
 8003044:	699a      	ldr	r2, [r3, #24]
 8003046:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <RTC_ExitInitMode+0x84>)
 8003048:	2120      	movs	r1, #32
 800304a:	438a      	bics	r2, r1
 800304c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0018      	movs	r0, r3
 8003052:	f7ff ff6b 	bl	8002f2c <HAL_RTC_WaitForSynchro>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d007      	beq.n	800306a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2229      	movs	r2, #41	; 0x29
 800305e:	2103      	movs	r1, #3
 8003060:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003062:	230f      	movs	r3, #15
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2203      	movs	r2, #3
 8003068:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800306a:	4b06      	ldr	r3, [pc, #24]	; (8003084 <RTC_ExitInitMode+0x84>)
 800306c:	699a      	ldr	r2, [r3, #24]
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <RTC_ExitInitMode+0x84>)
 8003070:	2120      	movs	r1, #32
 8003072:	430a      	orrs	r2, r1
 8003074:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003076:	230f      	movs	r3, #15
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	781b      	ldrb	r3, [r3, #0]
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b005      	add	sp, #20
 8003082:	bd90      	pop	{r4, r7, pc}
 8003084:	40002800 	.word	0x40002800

08003088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e04a      	b.n	8003130 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	223d      	movs	r2, #61	; 0x3d
 800309e:	5c9b      	ldrb	r3, [r3, r2]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d107      	bne.n	80030b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	223c      	movs	r2, #60	; 0x3c
 80030aa:	2100      	movs	r1, #0
 80030ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7fd fcf5 	bl	8000aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	223d      	movs	r2, #61	; 0x3d
 80030ba:	2102      	movs	r1, #2
 80030bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	3304      	adds	r3, #4
 80030c6:	0019      	movs	r1, r3
 80030c8:	0010      	movs	r0, r2
 80030ca:	f000 f835 	bl	8003138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2248      	movs	r2, #72	; 0x48
 80030d2:	2101      	movs	r1, #1
 80030d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	223e      	movs	r2, #62	; 0x3e
 80030da:	2101      	movs	r1, #1
 80030dc:	5499      	strb	r1, [r3, r2]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	223f      	movs	r2, #63	; 0x3f
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2240      	movs	r2, #64	; 0x40
 80030ea:	2101      	movs	r1, #1
 80030ec:	5499      	strb	r1, [r3, r2]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2241      	movs	r2, #65	; 0x41
 80030f2:	2101      	movs	r1, #1
 80030f4:	5499      	strb	r1, [r3, r2]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2242      	movs	r2, #66	; 0x42
 80030fa:	2101      	movs	r1, #1
 80030fc:	5499      	strb	r1, [r3, r2]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2243      	movs	r2, #67	; 0x43
 8003102:	2101      	movs	r1, #1
 8003104:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2244      	movs	r2, #68	; 0x44
 800310a:	2101      	movs	r1, #1
 800310c:	5499      	strb	r1, [r3, r2]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2245      	movs	r2, #69	; 0x45
 8003112:	2101      	movs	r1, #1
 8003114:	5499      	strb	r1, [r3, r2]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2246      	movs	r2, #70	; 0x46
 800311a:	2101      	movs	r1, #1
 800311c:	5499      	strb	r1, [r3, r2]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2247      	movs	r2, #71	; 0x47
 8003122:	2101      	movs	r1, #1
 8003124:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	223d      	movs	r2, #61	; 0x3d
 800312a:	2101      	movs	r1, #1
 800312c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	0018      	movs	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	b002      	add	sp, #8
 8003136:	bd80      	pop	{r7, pc}

08003138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a2b      	ldr	r2, [pc, #172]	; (80031f8 <TIM_Base_SetConfig+0xc0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d003      	beq.n	8003158 <TIM_Base_SetConfig+0x20>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a2a      	ldr	r2, [pc, #168]	; (80031fc <TIM_Base_SetConfig+0xc4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d108      	bne.n	800316a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2270      	movs	r2, #112	; 0x70
 800315c:	4393      	bics	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a22      	ldr	r2, [pc, #136]	; (80031f8 <TIM_Base_SetConfig+0xc0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00f      	beq.n	8003192 <TIM_Base_SetConfig+0x5a>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a21      	ldr	r2, [pc, #132]	; (80031fc <TIM_Base_SetConfig+0xc4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00b      	beq.n	8003192 <TIM_Base_SetConfig+0x5a>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a20      	ldr	r2, [pc, #128]	; (8003200 <TIM_Base_SetConfig+0xc8>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d007      	beq.n	8003192 <TIM_Base_SetConfig+0x5a>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1f      	ldr	r2, [pc, #124]	; (8003204 <TIM_Base_SetConfig+0xcc>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d003      	beq.n	8003192 <TIM_Base_SetConfig+0x5a>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <TIM_Base_SetConfig+0xd0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d108      	bne.n	80031a4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4a1d      	ldr	r2, [pc, #116]	; (800320c <TIM_Base_SetConfig+0xd4>)
 8003196:	4013      	ands	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	4393      	bics	r3, r2
 80031aa:	001a      	movs	r2, r3
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a0a      	ldr	r2, [pc, #40]	; (80031f8 <TIM_Base_SetConfig+0xc0>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <TIM_Base_SetConfig+0xcc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d003      	beq.n	80031e2 <TIM_Base_SetConfig+0xaa>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a0a      	ldr	r2, [pc, #40]	; (8003208 <TIM_Base_SetConfig+0xd0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d103      	bne.n	80031ea <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	691a      	ldr	r2, [r3, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	615a      	str	r2, [r3, #20]
}
 80031f0:	46c0      	nop			; (mov r8, r8)
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40000400 	.word	0x40000400
 8003200:	40002000 	.word	0x40002000
 8003204:	40014400 	.word	0x40014400
 8003208:	40014800 	.word	0x40014800
 800320c:	fffffcff 	.word	0xfffffcff

08003210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e046      	b.n	80032b0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2288      	movs	r2, #136	; 0x88
 8003226:	589b      	ldr	r3, [r3, r2]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d107      	bne.n	800323c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2284      	movs	r2, #132	; 0x84
 8003230:	2100      	movs	r1, #0
 8003232:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	0018      	movs	r0, r3
 8003238:	f7fd fca0 	bl	8000b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2288      	movs	r2, #136	; 0x88
 8003240:	2124      	movs	r1, #36	; 0x24
 8003242:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2101      	movs	r1, #1
 8003250:	438a      	bics	r2, r1
 8003252:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	0018      	movs	r0, r3
 8003258:	f000 fc12 	bl	8003a80 <UART_SetConfig>
 800325c:	0003      	movs	r3, r0
 800325e:	2b01      	cmp	r3, #1
 8003260:	d101      	bne.n	8003266 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e024      	b.n	80032b0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	0018      	movs	r0, r3
 8003272:	f000 fd6f 	bl	8003d54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	490d      	ldr	r1, [pc, #52]	; (80032b8 <HAL_UART_Init+0xa8>)
 8003282:	400a      	ands	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	212a      	movs	r1, #42	; 0x2a
 8003292:	438a      	bics	r2, r1
 8003294:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	430a      	orrs	r2, r1
 80032a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	0018      	movs	r0, r3
 80032aa:	f000 fe07 	bl	8003ebc <UART_CheckIdleState>
 80032ae:	0003      	movs	r3, r0
}
 80032b0:	0018      	movs	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	b002      	add	sp, #8
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	ffffb7ff 	.word	0xffffb7ff

080032bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	1dbb      	adds	r3, r7, #6
 80032ca:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2288      	movs	r2, #136	; 0x88
 80032d0:	589b      	ldr	r3, [r3, r2]
 80032d2:	2b20      	cmp	r3, #32
 80032d4:	d000      	beq.n	80032d8 <HAL_UART_Transmit+0x1c>
 80032d6:	e088      	b.n	80033ea <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_UART_Transmit+0x2a>
 80032de:	1dbb      	adds	r3, r7, #6
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e080      	b.n	80033ec <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	015b      	lsls	r3, r3, #5
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d109      	bne.n	800330a <HAL_UART_Transmit+0x4e>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d105      	bne.n	800330a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2201      	movs	r2, #1
 8003302:	4013      	ands	r3, r2
 8003304:	d001      	beq.n	800330a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e070      	b.n	80033ec <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2290      	movs	r2, #144	; 0x90
 800330e:	2100      	movs	r1, #0
 8003310:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2288      	movs	r2, #136	; 0x88
 8003316:	2121      	movs	r1, #33	; 0x21
 8003318:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800331a:	f7fd fd65 	bl	8000de8 <HAL_GetTick>
 800331e:	0003      	movs	r3, r0
 8003320:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1dba      	adds	r2, r7, #6
 8003326:	2154      	movs	r1, #84	; 0x54
 8003328:	8812      	ldrh	r2, [r2, #0]
 800332a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1dba      	adds	r2, r7, #6
 8003330:	2156      	movs	r1, #86	; 0x56
 8003332:	8812      	ldrh	r2, [r2, #0]
 8003334:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	689a      	ldr	r2, [r3, #8]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	015b      	lsls	r3, r3, #5
 800333e:	429a      	cmp	r2, r3
 8003340:	d108      	bne.n	8003354 <HAL_UART_Transmit+0x98>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d104      	bne.n	8003354 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e003      	b.n	800335c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003358:	2300      	movs	r3, #0
 800335a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800335c:	e02c      	b.n	80033b8 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	68f8      	ldr	r0, [r7, #12]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	0013      	movs	r3, r2
 8003368:	2200      	movs	r2, #0
 800336a:	2180      	movs	r1, #128	; 0x80
 800336c:	f000 fdf4 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d001      	beq.n	8003378 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e039      	b.n	80033ec <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10b      	bne.n	8003396 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	001a      	movs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	05d2      	lsls	r2, r2, #23
 800338a:	0dd2      	lsrs	r2, r2, #23
 800338c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	3302      	adds	r3, #2
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	e007      	b.n	80033a6 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	781a      	ldrb	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	3301      	adds	r3, #1
 80033a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2256      	movs	r2, #86	; 0x56
 80033aa:	5a9b      	ldrh	r3, [r3, r2]
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	3b01      	subs	r3, #1
 80033b0:	b299      	uxth	r1, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2256      	movs	r2, #86	; 0x56
 80033b6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2256      	movs	r2, #86	; 0x56
 80033bc:	5a9b      	ldrh	r3, [r3, r2]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1cc      	bne.n	800335e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	0013      	movs	r3, r2
 80033ce:	2200      	movs	r2, #0
 80033d0:	2140      	movs	r1, #64	; 0x40
 80033d2:	f000 fdc1 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 80033d6:	1e03      	subs	r3, r0, #0
 80033d8:	d001      	beq.n	80033de <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e006      	b.n	80033ec <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2288      	movs	r2, #136	; 0x88
 80033e2:	2120      	movs	r1, #32
 80033e4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e000      	b.n	80033ec <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80033ea:	2302      	movs	r3, #2
  }
}
 80033ec:	0018      	movs	r0, r3
 80033ee:	46bd      	mov	sp, r7
 80033f0:	b008      	add	sp, #32
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033f4:	b5b0      	push	{r4, r5, r7, lr}
 80033f6:	b0aa      	sub	sp, #168	; 0xa8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	22a4      	movs	r2, #164	; 0xa4
 8003404:	18b9      	adds	r1, r7, r2
 8003406:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	20a0      	movs	r0, #160	; 0xa0
 8003410:	1839      	adds	r1, r7, r0
 8003412:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	249c      	movs	r4, #156	; 0x9c
 800341c:	1939      	adds	r1, r7, r4
 800341e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003420:	0011      	movs	r1, r2
 8003422:	18bb      	adds	r3, r7, r2
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4aa2      	ldr	r2, [pc, #648]	; (80036b0 <HAL_UART_IRQHandler+0x2bc>)
 8003428:	4013      	ands	r3, r2
 800342a:	2298      	movs	r2, #152	; 0x98
 800342c:	18bd      	adds	r5, r7, r2
 800342e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003430:	18bb      	adds	r3, r7, r2
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d11a      	bne.n	800346e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003438:	187b      	adds	r3, r7, r1
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2220      	movs	r2, #32
 800343e:	4013      	ands	r3, r2
 8003440:	d015      	beq.n	800346e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003442:	183b      	adds	r3, r7, r0
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2220      	movs	r2, #32
 8003448:	4013      	ands	r3, r2
 800344a:	d105      	bne.n	8003458 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800344c:	193b      	adds	r3, r7, r4
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	055b      	lsls	r3, r3, #21
 8003454:	4013      	ands	r3, r2
 8003456:	d00a      	beq.n	800346e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345c:	2b00      	cmp	r3, #0
 800345e:	d100      	bne.n	8003462 <HAL_UART_IRQHandler+0x6e>
 8003460:	e2dc      	b.n	8003a1c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	0010      	movs	r0, r2
 800346a:	4798      	blx	r3
      }
      return;
 800346c:	e2d6      	b.n	8003a1c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800346e:	2398      	movs	r3, #152	; 0x98
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d100      	bne.n	800347a <HAL_UART_IRQHandler+0x86>
 8003478:	e122      	b.n	80036c0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800347a:	239c      	movs	r3, #156	; 0x9c
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a8c      	ldr	r2, [pc, #560]	; (80036b4 <HAL_UART_IRQHandler+0x2c0>)
 8003482:	4013      	ands	r3, r2
 8003484:	d106      	bne.n	8003494 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003486:	23a0      	movs	r3, #160	; 0xa0
 8003488:	18fb      	adds	r3, r7, r3
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a8a      	ldr	r2, [pc, #552]	; (80036b8 <HAL_UART_IRQHandler+0x2c4>)
 800348e:	4013      	ands	r3, r2
 8003490:	d100      	bne.n	8003494 <HAL_UART_IRQHandler+0xa0>
 8003492:	e115      	b.n	80036c0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003494:	23a4      	movs	r3, #164	; 0xa4
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	4013      	ands	r3, r2
 800349e:	d012      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
 80034a0:	23a0      	movs	r3, #160	; 0xa0
 80034a2:	18fb      	adds	r3, r7, r3
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	2380      	movs	r3, #128	; 0x80
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4013      	ands	r3, r2
 80034ac:	d00b      	beq.n	80034c6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2201      	movs	r2, #1
 80034b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2290      	movs	r2, #144	; 0x90
 80034ba:	589b      	ldr	r3, [r3, r2]
 80034bc:	2201      	movs	r2, #1
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2190      	movs	r1, #144	; 0x90
 80034c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034c6:	23a4      	movs	r3, #164	; 0xa4
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2202      	movs	r2, #2
 80034ce:	4013      	ands	r3, r2
 80034d0:	d011      	beq.n	80034f6 <HAL_UART_IRQHandler+0x102>
 80034d2:	239c      	movs	r3, #156	; 0x9c
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2201      	movs	r2, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2202      	movs	r2, #2
 80034e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2290      	movs	r2, #144	; 0x90
 80034ea:	589b      	ldr	r3, [r3, r2]
 80034ec:	2204      	movs	r2, #4
 80034ee:	431a      	orrs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2190      	movs	r1, #144	; 0x90
 80034f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034f6:	23a4      	movs	r3, #164	; 0xa4
 80034f8:	18fb      	adds	r3, r7, r3
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2204      	movs	r2, #4
 80034fe:	4013      	ands	r3, r2
 8003500:	d011      	beq.n	8003526 <HAL_UART_IRQHandler+0x132>
 8003502:	239c      	movs	r3, #156	; 0x9c
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2201      	movs	r2, #1
 800350a:	4013      	ands	r3, r2
 800350c:	d00b      	beq.n	8003526 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2204      	movs	r2, #4
 8003514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2290      	movs	r2, #144	; 0x90
 800351a:	589b      	ldr	r3, [r3, r2]
 800351c:	2202      	movs	r2, #2
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2190      	movs	r1, #144	; 0x90
 8003524:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003526:	23a4      	movs	r3, #164	; 0xa4
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2208      	movs	r2, #8
 800352e:	4013      	ands	r3, r2
 8003530:	d017      	beq.n	8003562 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003532:	23a0      	movs	r3, #160	; 0xa0
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2220      	movs	r2, #32
 800353a:	4013      	ands	r3, r2
 800353c:	d105      	bne.n	800354a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800353e:	239c      	movs	r3, #156	; 0x9c
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a5b      	ldr	r2, [pc, #364]	; (80036b4 <HAL_UART_IRQHandler+0x2c0>)
 8003546:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003548:	d00b      	beq.n	8003562 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2208      	movs	r2, #8
 8003550:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2290      	movs	r2, #144	; 0x90
 8003556:	589b      	ldr	r3, [r3, r2]
 8003558:	2208      	movs	r2, #8
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2190      	movs	r1, #144	; 0x90
 8003560:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003562:	23a4      	movs	r3, #164	; 0xa4
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	4013      	ands	r3, r2
 800356e:	d013      	beq.n	8003598 <HAL_UART_IRQHandler+0x1a4>
 8003570:	23a0      	movs	r3, #160	; 0xa0
 8003572:	18fb      	adds	r3, r7, r3
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	2380      	movs	r3, #128	; 0x80
 8003578:	04db      	lsls	r3, r3, #19
 800357a:	4013      	ands	r3, r2
 800357c:	d00c      	beq.n	8003598 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	0112      	lsls	r2, r2, #4
 8003586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2290      	movs	r2, #144	; 0x90
 800358c:	589b      	ldr	r3, [r3, r2]
 800358e:	2220      	movs	r2, #32
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2190      	movs	r1, #144	; 0x90
 8003596:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2290      	movs	r2, #144	; 0x90
 800359c:	589b      	ldr	r3, [r3, r2]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d100      	bne.n	80035a4 <HAL_UART_IRQHandler+0x1b0>
 80035a2:	e23d      	b.n	8003a20 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80035a4:	23a4      	movs	r3, #164	; 0xa4
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2220      	movs	r2, #32
 80035ac:	4013      	ands	r3, r2
 80035ae:	d015      	beq.n	80035dc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80035b0:	23a0      	movs	r3, #160	; 0xa0
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2220      	movs	r2, #32
 80035b8:	4013      	ands	r3, r2
 80035ba:	d106      	bne.n	80035ca <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80035bc:	239c      	movs	r3, #156	; 0x9c
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	055b      	lsls	r3, r3, #21
 80035c6:	4013      	ands	r3, r2
 80035c8:	d008      	beq.n	80035dc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d004      	beq.n	80035dc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	0010      	movs	r0, r2
 80035da:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2290      	movs	r2, #144	; 0x90
 80035e0:	589b      	ldr	r3, [r3, r2]
 80035e2:	2194      	movs	r1, #148	; 0x94
 80035e4:	187a      	adds	r2, r7, r1
 80035e6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2240      	movs	r2, #64	; 0x40
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b40      	cmp	r3, #64	; 0x40
 80035f4:	d004      	beq.n	8003600 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2228      	movs	r2, #40	; 0x28
 80035fc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035fe:	d04c      	beq.n	800369a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 fe56 	bl	80042b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	2240      	movs	r2, #64	; 0x40
 8003610:	4013      	ands	r3, r2
 8003612:	2b40      	cmp	r3, #64	; 0x40
 8003614:	d13c      	bne.n	8003690 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003616:	f3ef 8310 	mrs	r3, PRIMASK
 800361a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800361c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800361e:	2090      	movs	r0, #144	; 0x90
 8003620:	183a      	adds	r2, r7, r0
 8003622:	6013      	str	r3, [r2, #0]
 8003624:	2301      	movs	r3, #1
 8003626:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2140      	movs	r1, #64	; 0x40
 800363c:	438a      	bics	r2, r1
 800363e:	609a      	str	r2, [r3, #8]
 8003640:	183b      	adds	r3, r7, r0
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003648:	f383 8810 	msr	PRIMASK, r3
}
 800364c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2280      	movs	r2, #128	; 0x80
 8003652:	589b      	ldr	r3, [r3, r2]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d016      	beq.n	8003686 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2280      	movs	r2, #128	; 0x80
 800365c:	589b      	ldr	r3, [r3, r2]
 800365e:	4a17      	ldr	r2, [pc, #92]	; (80036bc <HAL_UART_IRQHandler+0x2c8>)
 8003660:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2280      	movs	r2, #128	; 0x80
 8003666:	589b      	ldr	r3, [r3, r2]
 8003668:	0018      	movs	r0, r3
 800366a:	f7fd fe17 	bl	800129c <HAL_DMA_Abort_IT>
 800366e:	1e03      	subs	r3, r0, #0
 8003670:	d01c      	beq.n	80036ac <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	589b      	ldr	r3, [r3, r2]
 8003678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	2180      	movs	r1, #128	; 0x80
 800367e:	5852      	ldr	r2, [r2, r1]
 8003680:	0010      	movs	r0, r2
 8003682:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	e012      	b.n	80036ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	0018      	movs	r0, r3
 800368a:	f000 f9f1 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368e:	e00d      	b.n	80036ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0018      	movs	r0, r3
 8003694:	f000 f9ec 	bl	8003a70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e008      	b.n	80036ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	0018      	movs	r0, r3
 800369e:	f000 f9e7 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2290      	movs	r2, #144	; 0x90
 80036a6:	2100      	movs	r1, #0
 80036a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80036aa:	e1b9      	b.n	8003a20 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ac:	46c0      	nop			; (mov r8, r8)
    return;
 80036ae:	e1b7      	b.n	8003a20 <HAL_UART_IRQHandler+0x62c>
 80036b0:	0000080f 	.word	0x0000080f
 80036b4:	10000001 	.word	0x10000001
 80036b8:	04000120 	.word	0x04000120
 80036bc:	08004579 	.word	0x08004579

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d000      	beq.n	80036ca <HAL_UART_IRQHandler+0x2d6>
 80036c8:	e13e      	b.n	8003948 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036ca:	23a4      	movs	r3, #164	; 0xa4
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2210      	movs	r2, #16
 80036d2:	4013      	ands	r3, r2
 80036d4:	d100      	bne.n	80036d8 <HAL_UART_IRQHandler+0x2e4>
 80036d6:	e137      	b.n	8003948 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036d8:	23a0      	movs	r3, #160	; 0xa0
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2210      	movs	r2, #16
 80036e0:	4013      	ands	r3, r2
 80036e2:	d100      	bne.n	80036e6 <HAL_UART_IRQHandler+0x2f2>
 80036e4:	e130      	b.n	8003948 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2210      	movs	r2, #16
 80036ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2240      	movs	r2, #64	; 0x40
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d000      	beq.n	80036fe <HAL_UART_IRQHandler+0x30a>
 80036fc:	e0a4      	b.n	8003848 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	589b      	ldr	r3, [r3, r2]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	217e      	movs	r1, #126	; 0x7e
 800370a:	187b      	adds	r3, r7, r1
 800370c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800370e:	187b      	adds	r3, r7, r1
 8003710:	881b      	ldrh	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d100      	bne.n	8003718 <HAL_UART_IRQHandler+0x324>
 8003716:	e185      	b.n	8003a24 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	225c      	movs	r2, #92	; 0x5c
 800371c:	5a9b      	ldrh	r3, [r3, r2]
 800371e:	187a      	adds	r2, r7, r1
 8003720:	8812      	ldrh	r2, [r2, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d300      	bcc.n	8003728 <HAL_UART_IRQHandler+0x334>
 8003726:	e17d      	b.n	8003a24 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	187a      	adds	r2, r7, r1
 800372c:	215e      	movs	r1, #94	; 0x5e
 800372e:	8812      	ldrh	r2, [r2, #0]
 8003730:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2280      	movs	r2, #128	; 0x80
 8003736:	589b      	ldr	r3, [r3, r2]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2220      	movs	r2, #32
 800373e:	4013      	ands	r3, r2
 8003740:	d170      	bne.n	8003824 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003742:	f3ef 8310 	mrs	r3, PRIMASK
 8003746:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800374a:	67bb      	str	r3, [r7, #120]	; 0x78
 800374c:	2301      	movs	r3, #1
 800374e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003752:	f383 8810 	msr	PRIMASK, r3
}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	49b4      	ldr	r1, [pc, #720]	; (8003a34 <HAL_UART_IRQHandler+0x640>)
 8003764:	400a      	ands	r2, r1
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800376a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003774:	f3ef 8310 	mrs	r3, PRIMASK
 8003778:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800377a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	677b      	str	r3, [r7, #116]	; 0x74
 800377e:	2301      	movs	r3, #1
 8003780:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003784:	f383 8810 	msr	PRIMASK, r3
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	438a      	bics	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
 800379a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800379c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037a0:	f383 8810 	msr	PRIMASK, r3
}
 80037a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037a6:	f3ef 8310 	mrs	r3, PRIMASK
 80037aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80037ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ae:	673b      	str	r3, [r7, #112]	; 0x70
 80037b0:	2301      	movs	r3, #1
 80037b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2140      	movs	r1, #64	; 0x40
 80037c8:	438a      	bics	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d2:	f383 8810 	msr	PRIMASK, r3
}
 80037d6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	228c      	movs	r2, #140	; 0x8c
 80037dc:	2120      	movs	r1, #32
 80037de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e6:	f3ef 8310 	mrs	r3, PRIMASK
 80037ea:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80037ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037f0:	2301      	movs	r3, #1
 80037f2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80037f6:	f383 8810 	msr	PRIMASK, r3
}
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2110      	movs	r1, #16
 8003808:	438a      	bics	r2, r1
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800380e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003810:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003812:	f383 8810 	msr	PRIMASK, r3
}
 8003816:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2280      	movs	r2, #128	; 0x80
 800381c:	589b      	ldr	r3, [r3, r2]
 800381e:	0018      	movs	r0, r3
 8003820:	f7fd fcda 	bl	80011d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	225c      	movs	r2, #92	; 0x5c
 800382e:	5a9a      	ldrh	r2, [r3, r2]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	215e      	movs	r1, #94	; 0x5e
 8003834:	5a5b      	ldrh	r3, [r3, r1]
 8003836:	b29b      	uxth	r3, r3
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	b29a      	uxth	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	0011      	movs	r1, r2
 8003840:	0018      	movs	r0, r3
 8003842:	f7fd f815 	bl	8000870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003846:	e0ed      	b.n	8003a24 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	225c      	movs	r2, #92	; 0x5c
 800384c:	5a99      	ldrh	r1, [r3, r2]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	225e      	movs	r2, #94	; 0x5e
 8003852:	5a9b      	ldrh	r3, [r3, r2]
 8003854:	b29a      	uxth	r2, r3
 8003856:	208e      	movs	r0, #142	; 0x8e
 8003858:	183b      	adds	r3, r7, r0
 800385a:	1a8a      	subs	r2, r1, r2
 800385c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	225e      	movs	r2, #94	; 0x5e
 8003862:	5a9b      	ldrh	r3, [r3, r2]
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d100      	bne.n	800386c <HAL_UART_IRQHandler+0x478>
 800386a:	e0dd      	b.n	8003a28 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800386c:	183b      	adds	r3, r7, r0
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d100      	bne.n	8003876 <HAL_UART_IRQHandler+0x482>
 8003874:	e0d8      	b.n	8003a28 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003876:	f3ef 8310 	mrs	r3, PRIMASK
 800387a:	60fb      	str	r3, [r7, #12]
  return(result);
 800387c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800387e:	2488      	movs	r4, #136	; 0x88
 8003880:	193a      	adds	r2, r7, r4
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	2301      	movs	r3, #1
 8003886:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f383 8810 	msr	PRIMASK, r3
}
 800388e:	46c0      	nop			; (mov r8, r8)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4967      	ldr	r1, [pc, #412]	; (8003a38 <HAL_UART_IRQHandler+0x644>)
 800389c:	400a      	ands	r2, r1
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	193b      	adds	r3, r7, r4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f383 8810 	msr	PRIMASK, r3
}
 80038ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ae:	f3ef 8310 	mrs	r3, PRIMASK
 80038b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80038b4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80038b6:	2484      	movs	r4, #132	; 0x84
 80038b8:	193a      	adds	r2, r7, r4
 80038ba:	6013      	str	r3, [r2, #0]
 80038bc:	2301      	movs	r3, #1
 80038be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f383 8810 	msr	PRIMASK, r3
}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	495a      	ldr	r1, [pc, #360]	; (8003a3c <HAL_UART_IRQHandler+0x648>)
 80038d4:	400a      	ands	r2, r1
 80038d6:	609a      	str	r2, [r3, #8]
 80038d8:	193b      	adds	r3, r7, r4
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	f383 8810 	msr	PRIMASK, r3
}
 80038e4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	228c      	movs	r2, #140	; 0x8c
 80038ea:	2120      	movs	r1, #32
 80038ec:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fa:	f3ef 8310 	mrs	r3, PRIMASK
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003902:	2480      	movs	r4, #128	; 0x80
 8003904:	193a      	adds	r2, r7, r4
 8003906:	6013      	str	r3, [r2, #0]
 8003908:	2301      	movs	r3, #1
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	f383 8810 	msr	PRIMASK, r3
}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2110      	movs	r1, #16
 8003920:	438a      	bics	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	193b      	adds	r3, r7, r4
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	f383 8810 	msr	PRIMASK, r3
}
 8003930:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003938:	183b      	adds	r3, r7, r0
 800393a:	881a      	ldrh	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	0011      	movs	r1, r2
 8003940:	0018      	movs	r0, r3
 8003942:	f7fc ff95 	bl	8000870 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003946:	e06f      	b.n	8003a28 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003948:	23a4      	movs	r3, #164	; 0xa4
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	035b      	lsls	r3, r3, #13
 8003952:	4013      	ands	r3, r2
 8003954:	d010      	beq.n	8003978 <HAL_UART_IRQHandler+0x584>
 8003956:	239c      	movs	r3, #156	; 0x9c
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	03db      	lsls	r3, r3, #15
 8003960:	4013      	ands	r3, r2
 8003962:	d009      	beq.n	8003978 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	2280      	movs	r2, #128	; 0x80
 800396a:	0352      	lsls	r2, r2, #13
 800396c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	0018      	movs	r0, r3
 8003972:	f000 fe44 	bl	80045fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003976:	e05a      	b.n	8003a2e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003978:	23a4      	movs	r3, #164	; 0xa4
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	4013      	ands	r3, r2
 8003982:	d016      	beq.n	80039b2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003984:	23a0      	movs	r3, #160	; 0xa0
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2280      	movs	r2, #128	; 0x80
 800398c:	4013      	ands	r3, r2
 800398e:	d106      	bne.n	800399e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003990:	239c      	movs	r3, #156	; 0x9c
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	4013      	ands	r3, r2
 800399c:	d009      	beq.n	80039b2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d042      	beq.n	8003a2c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	0010      	movs	r0, r2
 80039ae:	4798      	blx	r3
    }
    return;
 80039b0:	e03c      	b.n	8003a2c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039b2:	23a4      	movs	r3, #164	; 0xa4
 80039b4:	18fb      	adds	r3, r7, r3
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2240      	movs	r2, #64	; 0x40
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00a      	beq.n	80039d4 <HAL_UART_IRQHandler+0x5e0>
 80039be:	23a0      	movs	r3, #160	; 0xa0
 80039c0:	18fb      	adds	r3, r7, r3
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2240      	movs	r2, #64	; 0x40
 80039c6:	4013      	ands	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f000 fdea 	bl	80045a6 <UART_EndTransmit_IT>
    return;
 80039d2:	e02c      	b.n	8003a2e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80039d4:	23a4      	movs	r3, #164	; 0xa4
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	2380      	movs	r3, #128	; 0x80
 80039dc:	041b      	lsls	r3, r3, #16
 80039de:	4013      	ands	r3, r2
 80039e0:	d00b      	beq.n	80039fa <HAL_UART_IRQHandler+0x606>
 80039e2:	23a0      	movs	r3, #160	; 0xa0
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	05db      	lsls	r3, r3, #23
 80039ec:	4013      	ands	r3, r2
 80039ee:	d004      	beq.n	80039fa <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	0018      	movs	r0, r3
 80039f4:	f000 fe13 	bl	800461e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039f8:	e019      	b.n	8003a2e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80039fa:	23a4      	movs	r3, #164	; 0xa4
 80039fc:	18fb      	adds	r3, r7, r3
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	045b      	lsls	r3, r3, #17
 8003a04:	4013      	ands	r3, r2
 8003a06:	d012      	beq.n	8003a2e <HAL_UART_IRQHandler+0x63a>
 8003a08:	23a0      	movs	r3, #160	; 0xa0
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	da0d      	bge.n	8003a2e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	0018      	movs	r0, r3
 8003a16:	f000 fdfa 	bl	800460e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a1a:	e008      	b.n	8003a2e <HAL_UART_IRQHandler+0x63a>
      return;
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	e006      	b.n	8003a2e <HAL_UART_IRQHandler+0x63a>
    return;
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	e004      	b.n	8003a2e <HAL_UART_IRQHandler+0x63a>
      return;
 8003a24:	46c0      	nop			; (mov r8, r8)
 8003a26:	e002      	b.n	8003a2e <HAL_UART_IRQHandler+0x63a>
      return;
 8003a28:	46c0      	nop			; (mov r8, r8)
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_IRQHandler+0x63a>
    return;
 8003a2c:	46c0      	nop			; (mov r8, r8)
  }
}
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b02a      	add	sp, #168	; 0xa8
 8003a32:	bdb0      	pop	{r4, r5, r7, pc}
 8003a34:	fffffeff 	.word	0xfffffeff
 8003a38:	fffffedf 	.word	0xfffffedf
 8003a3c:	effffffe 	.word	0xeffffffe

08003a40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a88:	231a      	movs	r3, #26
 8003a8a:	18fb      	adds	r3, r7, r3
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4aa1      	ldr	r2, [pc, #644]	; (8003d34 <UART_SetConfig+0x2b4>)
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	0019      	movs	r1, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	430a      	orrs	r2, r1
 8003abc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a9c      	ldr	r2, [pc, #624]	; (8003d38 <UART_SetConfig+0x2b8>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	0019      	movs	r1, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a93      	ldr	r2, [pc, #588]	; (8003d3c <UART_SetConfig+0x2bc>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	220f      	movs	r2, #15
 8003b04:	4393      	bics	r3, r2
 8003b06:	0019      	movs	r1, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a89      	ldr	r2, [pc, #548]	; (8003d40 <UART_SetConfig+0x2c0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d127      	bne.n	8003b6e <UART_SetConfig+0xee>
 8003b1e:	4b89      	ldr	r3, [pc, #548]	; (8003d44 <UART_SetConfig+0x2c4>)
 8003b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b22:	2203      	movs	r2, #3
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d017      	beq.n	8003b5a <UART_SetConfig+0xda>
 8003b2a:	d81b      	bhi.n	8003b64 <UART_SetConfig+0xe4>
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d00a      	beq.n	8003b46 <UART_SetConfig+0xc6>
 8003b30:	d818      	bhi.n	8003b64 <UART_SetConfig+0xe4>
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <UART_SetConfig+0xbc>
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d00a      	beq.n	8003b50 <UART_SetConfig+0xd0>
 8003b3a:	e013      	b.n	8003b64 <UART_SetConfig+0xe4>
 8003b3c:	231b      	movs	r3, #27
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	2200      	movs	r2, #0
 8003b42:	701a      	strb	r2, [r3, #0]
 8003b44:	e021      	b.n	8003b8a <UART_SetConfig+0x10a>
 8003b46:	231b      	movs	r3, #27
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e01c      	b.n	8003b8a <UART_SetConfig+0x10a>
 8003b50:	231b      	movs	r3, #27
 8003b52:	18fb      	adds	r3, r7, r3
 8003b54:	2204      	movs	r2, #4
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e017      	b.n	8003b8a <UART_SetConfig+0x10a>
 8003b5a:	231b      	movs	r3, #27
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	2208      	movs	r2, #8
 8003b60:	701a      	strb	r2, [r3, #0]
 8003b62:	e012      	b.n	8003b8a <UART_SetConfig+0x10a>
 8003b64:	231b      	movs	r3, #27
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	2210      	movs	r2, #16
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	e00d      	b.n	8003b8a <UART_SetConfig+0x10a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a75      	ldr	r2, [pc, #468]	; (8003d48 <UART_SetConfig+0x2c8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d104      	bne.n	8003b82 <UART_SetConfig+0x102>
 8003b78:	231b      	movs	r3, #27
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	e003      	b.n	8003b8a <UART_SetConfig+0x10a>
 8003b82:	231b      	movs	r3, #27
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	2210      	movs	r2, #16
 8003b88:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	2380      	movs	r3, #128	; 0x80
 8003b90:	021b      	lsls	r3, r3, #8
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d000      	beq.n	8003b98 <UART_SetConfig+0x118>
 8003b96:	e065      	b.n	8003c64 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003b98:	231b      	movs	r3, #27
 8003b9a:	18fb      	adds	r3, r7, r3
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d015      	beq.n	8003bce <UART_SetConfig+0x14e>
 8003ba2:	dc18      	bgt.n	8003bd6 <UART_SetConfig+0x156>
 8003ba4:	2b04      	cmp	r3, #4
 8003ba6:	d00d      	beq.n	8003bc4 <UART_SetConfig+0x144>
 8003ba8:	dc15      	bgt.n	8003bd6 <UART_SetConfig+0x156>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d002      	beq.n	8003bb4 <UART_SetConfig+0x134>
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d005      	beq.n	8003bbe <UART_SetConfig+0x13e>
 8003bb2:	e010      	b.n	8003bd6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb4:	f7fe ffdc 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	617b      	str	r3, [r7, #20]
        break;
 8003bbc:	e012      	b.n	8003be4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bbe:	4b63      	ldr	r3, [pc, #396]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003bc0:	617b      	str	r3, [r7, #20]
        break;
 8003bc2:	e00f      	b.n	8003be4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc4:	f7fe ff48 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	617b      	str	r3, [r7, #20]
        break;
 8003bcc:	e00a      	b.n	8003be4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	021b      	lsls	r3, r3, #8
 8003bd2:	617b      	str	r3, [r7, #20]
        break;
 8003bd4:	e006      	b.n	8003be4 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bda:	231a      	movs	r3, #26
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	2201      	movs	r2, #1
 8003be0:	701a      	strb	r2, [r3, #0]
        break;
 8003be2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d100      	bne.n	8003bec <UART_SetConfig+0x16c>
 8003bea:	e08d      	b.n	8003d08 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bf0:	4b57      	ldr	r3, [pc, #348]	; (8003d50 <UART_SetConfig+0x2d0>)
 8003bf2:	0052      	lsls	r2, r2, #1
 8003bf4:	5ad3      	ldrh	r3, [r2, r3]
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	6978      	ldr	r0, [r7, #20]
 8003bfa:	f7fc fa81 	bl	8000100 <__udivsi3>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	005a      	lsls	r2, r3, #1
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	18d2      	adds	r2, r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	0019      	movs	r1, r3
 8003c10:	0010      	movs	r0, r2
 8003c12:	f7fc fa75 	bl	8000100 <__udivsi3>
 8003c16:	0003      	movs	r3, r0
 8003c18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b0f      	cmp	r3, #15
 8003c1e:	d91c      	bls.n	8003c5a <UART_SetConfig+0x1da>
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	025b      	lsls	r3, r3, #9
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d217      	bcs.n	8003c5a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	200e      	movs	r0, #14
 8003c30:	183b      	adds	r3, r7, r0
 8003c32:	210f      	movs	r1, #15
 8003c34:	438a      	bics	r2, r1
 8003c36:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	085b      	lsrs	r3, r3, #1
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	2207      	movs	r2, #7
 8003c40:	4013      	ands	r3, r2
 8003c42:	b299      	uxth	r1, r3
 8003c44:	183b      	adds	r3, r7, r0
 8003c46:	183a      	adds	r2, r7, r0
 8003c48:	8812      	ldrh	r2, [r2, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	183a      	adds	r2, r7, r0
 8003c54:	8812      	ldrh	r2, [r2, #0]
 8003c56:	60da      	str	r2, [r3, #12]
 8003c58:	e056      	b.n	8003d08 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003c5a:	231a      	movs	r3, #26
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	2201      	movs	r2, #1
 8003c60:	701a      	strb	r2, [r3, #0]
 8003c62:	e051      	b.n	8003d08 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c64:	231b      	movs	r3, #27
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d015      	beq.n	8003c9a <UART_SetConfig+0x21a>
 8003c6e:	dc18      	bgt.n	8003ca2 <UART_SetConfig+0x222>
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d00d      	beq.n	8003c90 <UART_SetConfig+0x210>
 8003c74:	dc15      	bgt.n	8003ca2 <UART_SetConfig+0x222>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d002      	beq.n	8003c80 <UART_SetConfig+0x200>
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d005      	beq.n	8003c8a <UART_SetConfig+0x20a>
 8003c7e:	e010      	b.n	8003ca2 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c80:	f7fe ff76 	bl	8002b70 <HAL_RCC_GetPCLK1Freq>
 8003c84:	0003      	movs	r3, r0
 8003c86:	617b      	str	r3, [r7, #20]
        break;
 8003c88:	e012      	b.n	8003cb0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c8a:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <UART_SetConfig+0x2cc>)
 8003c8c:	617b      	str	r3, [r7, #20]
        break;
 8003c8e:	e00f      	b.n	8003cb0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c90:	f7fe fee2 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8003c94:	0003      	movs	r3, r0
 8003c96:	617b      	str	r3, [r7, #20]
        break;
 8003c98:	e00a      	b.n	8003cb0 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	617b      	str	r3, [r7, #20]
        break;
 8003ca0:	e006      	b.n	8003cb0 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ca6:	231a      	movs	r3, #26
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
        break;
 8003cae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d028      	beq.n	8003d08 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cba:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <UART_SetConfig+0x2d0>)
 8003cbc:	0052      	lsls	r2, r2, #1
 8003cbe:	5ad3      	ldrh	r3, [r2, r3]
 8003cc0:	0019      	movs	r1, r3
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7fc fa1c 	bl	8000100 <__udivsi3>
 8003cc8:	0003      	movs	r3, r0
 8003cca:	001a      	movs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	085b      	lsrs	r3, r3, #1
 8003cd2:	18d2      	adds	r2, r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	0019      	movs	r1, r3
 8003cda:	0010      	movs	r0, r2
 8003cdc:	f7fc fa10 	bl	8000100 <__udivsi3>
 8003ce0:	0003      	movs	r3, r0
 8003ce2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	d90a      	bls.n	8003d00 <UART_SetConfig+0x280>
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	2380      	movs	r3, #128	; 0x80
 8003cee:	025b      	lsls	r3, r3, #9
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d205      	bcs.n	8003d00 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60da      	str	r2, [r3, #12]
 8003cfe:	e003      	b.n	8003d08 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003d00:	231a      	movs	r3, #26
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2201      	movs	r2, #1
 8003d06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	226a      	movs	r2, #106	; 0x6a
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2268      	movs	r2, #104	; 0x68
 8003d14:	2101      	movs	r1, #1
 8003d16:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003d24:	231a      	movs	r3, #26
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	781b      	ldrb	r3, [r3, #0]
}
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	b008      	add	sp, #32
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	46c0      	nop			; (mov r8, r8)
 8003d34:	cfff69f3 	.word	0xcfff69f3
 8003d38:	ffffcfff 	.word	0xffffcfff
 8003d3c:	11fff4ff 	.word	0x11fff4ff
 8003d40:	40013800 	.word	0x40013800
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40004400 	.word	0x40004400
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	08004a04 	.word	0x08004a04

08003d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	2201      	movs	r2, #1
 8003d62:	4013      	ands	r3, r2
 8003d64:	d00b      	beq.n	8003d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	4a4a      	ldr	r2, [pc, #296]	; (8003e98 <UART_AdvFeatureConfig+0x144>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d82:	2202      	movs	r2, #2
 8003d84:	4013      	ands	r3, r2
 8003d86:	d00b      	beq.n	8003da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	4a43      	ldr	r2, [pc, #268]	; (8003e9c <UART_AdvFeatureConfig+0x148>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	0019      	movs	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da4:	2204      	movs	r2, #4
 8003da6:	4013      	ands	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a3b      	ldr	r2, [pc, #236]	; (8003ea0 <UART_AdvFeatureConfig+0x14c>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d00b      	beq.n	8003de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4a34      	ldr	r2, [pc, #208]	; (8003ea4 <UART_AdvFeatureConfig+0x150>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de8:	2210      	movs	r2, #16
 8003dea:	4013      	ands	r3, r2
 8003dec:	d00b      	beq.n	8003e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a2c      	ldr	r2, [pc, #176]	; (8003ea8 <UART_AdvFeatureConfig+0x154>)
 8003df6:	4013      	ands	r3, r2
 8003df8:	0019      	movs	r1, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	4a25      	ldr	r2, [pc, #148]	; (8003eac <UART_AdvFeatureConfig+0x158>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	430a      	orrs	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	2240      	movs	r2, #64	; 0x40
 8003e2e:	4013      	ands	r3, r2
 8003e30:	d01d      	beq.n	8003e6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <UART_AdvFeatureConfig+0x15c>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	035b      	lsls	r3, r3, #13
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d10b      	bne.n	8003e6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <UART_AdvFeatureConfig+0x160>)
 8003e5e:	4013      	ands	r3, r2
 8003e60:	0019      	movs	r1, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	2280      	movs	r2, #128	; 0x80
 8003e74:	4013      	ands	r3, r2
 8003e76:	d00b      	beq.n	8003e90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <UART_AdvFeatureConfig+0x164>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	0019      	movs	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }
}
 8003e90:	46c0      	nop			; (mov r8, r8)
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	fffdffff 	.word	0xfffdffff
 8003e9c:	fffeffff 	.word	0xfffeffff
 8003ea0:	fffbffff 	.word	0xfffbffff
 8003ea4:	ffff7fff 	.word	0xffff7fff
 8003ea8:	ffffefff 	.word	0xffffefff
 8003eac:	ffffdfff 	.word	0xffffdfff
 8003eb0:	ffefffff 	.word	0xffefffff
 8003eb4:	ff9fffff 	.word	0xff9fffff
 8003eb8:	fff7ffff 	.word	0xfff7ffff

08003ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2290      	movs	r2, #144	; 0x90
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ecc:	f7fc ff8c 	bl	8000de8 <HAL_GetTick>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2208      	movs	r2, #8
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d10c      	bne.n	8003efc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	0391      	lsls	r1, r2, #14
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <UART_CheckIdleState+0x98>)
 8003eec:	9200      	str	r2, [sp, #0]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f000 f832 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8003ef4:	1e03      	subs	r3, r0, #0
 8003ef6:	d001      	beq.n	8003efc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e026      	b.n	8003f4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2204      	movs	r2, #4
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d10c      	bne.n	8003f24 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2280      	movs	r2, #128	; 0x80
 8003f0e:	03d1      	lsls	r1, r2, #15
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <UART_CheckIdleState+0x98>)
 8003f14:	9200      	str	r2, [sp, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f000 f81e 	bl	8003f58 <UART_WaitOnFlagUntilTimeout>
 8003f1c:	1e03      	subs	r3, r0, #0
 8003f1e:	d001      	beq.n	8003f24 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e012      	b.n	8003f4a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2288      	movs	r2, #136	; 0x88
 8003f28:	2120      	movs	r1, #32
 8003f2a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	228c      	movs	r2, #140	; 0x8c
 8003f30:	2120      	movs	r1, #32
 8003f32:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2284      	movs	r2, #132	; 0x84
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	b004      	add	sp, #16
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	01ffffff 	.word	0x01ffffff

08003f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b094      	sub	sp, #80	; 0x50
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	1dfb      	adds	r3, r7, #7
 8003f66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f68:	e0a7      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	d100      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003f70:	e0a3      	b.n	80040ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fc ff39 	bl	8000de8 <HAL_GetTick>
 8003f76:	0002      	movs	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d13f      	bne.n	8004008 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003f90:	647b      	str	r3, [r7, #68]	; 0x44
 8003f92:	2301      	movs	r3, #1
 8003f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	494e      	ldr	r1, [pc, #312]	; (80040e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003faa:	400a      	ands	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	f383 8810 	msr	PRIMASK, r3
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fba:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	643b      	str	r3, [r7, #64]	; 0x40
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	438a      	bics	r2, r1
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe6:	f383 8810 	msr	PRIMASK, r3
}
 8003fea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2288      	movs	r2, #136	; 0x88
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	228c      	movs	r2, #140	; 0x8c
 8003ff8:	2120      	movs	r1, #32
 8003ffa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2284      	movs	r2, #132	; 0x84
 8004000:	2100      	movs	r1, #0
 8004002:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e069      	b.n	80040dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2204      	movs	r2, #4
 8004010:	4013      	ands	r3, r2
 8004012:	d052      	beq.n	80040ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69da      	ldr	r2, [r3, #28]
 800401a:	2380      	movs	r3, #128	; 0x80
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	401a      	ands	r2, r3
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	429a      	cmp	r2, r3
 8004026:	d148      	bne.n	80040ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2280      	movs	r2, #128	; 0x80
 800402e:	0112      	lsls	r2, r2, #4
 8004030:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004032:	f3ef 8310 	mrs	r3, PRIMASK
 8004036:	613b      	str	r3, [r7, #16]
  return(result);
 8004038:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800403a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800403c:	2301      	movs	r3, #1
 800403e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f383 8810 	msr	PRIMASK, r3
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4924      	ldr	r1, [pc, #144]	; (80040e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004054:	400a      	ands	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800405a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f383 8810 	msr	PRIMASK, r3
}
 8004062:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004064:	f3ef 8310 	mrs	r3, PRIMASK
 8004068:	61fb      	str	r3, [r7, #28]
  return(result);
 800406a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406c:	64bb      	str	r3, [r7, #72]	; 0x48
 800406e:	2301      	movs	r3, #1
 8004070:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	f383 8810 	msr	PRIMASK, r3
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	438a      	bics	r2, r1
 8004088:	609a      	str	r2, [r3, #8]
 800408a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004090:	f383 8810 	msr	PRIMASK, r3
}
 8004094:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2288      	movs	r2, #136	; 0x88
 800409a:	2120      	movs	r1, #32
 800409c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	228c      	movs	r2, #140	; 0x8c
 80040a2:	2120      	movs	r1, #32
 80040a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2290      	movs	r2, #144	; 0x90
 80040aa:	2120      	movs	r1, #32
 80040ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2284      	movs	r2, #132	; 0x84
 80040b2:	2100      	movs	r1, #0
 80040b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e010      	b.n	80040dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	4013      	ands	r3, r2
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	425a      	negs	r2, r3
 80040ca:	4153      	adcs	r3, r2
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	001a      	movs	r2, r3
 80040d0:	1dfb      	adds	r3, r7, #7
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d100      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0x182>
 80040d8:	e747      	b.n	8003f6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	b014      	add	sp, #80	; 0x50
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	fffffe5f 	.word	0xfffffe5f

080040e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b090      	sub	sp, #64	; 0x40
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	1dbb      	adds	r3, r7, #6
 80040f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1dba      	adds	r2, r7, #6
 8004100:	215c      	movs	r1, #92	; 0x5c
 8004102:	8812      	ldrh	r2, [r2, #0]
 8004104:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2290      	movs	r2, #144	; 0x90
 800410a:	2100      	movs	r1, #0
 800410c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	228c      	movs	r2, #140	; 0x8c
 8004112:	2122      	movs	r1, #34	; 0x22
 8004114:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2280      	movs	r2, #128	; 0x80
 800411a:	589b      	ldr	r3, [r3, r2]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d02d      	beq.n	800417c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2280      	movs	r2, #128	; 0x80
 8004124:	589b      	ldr	r3, [r3, r2]
 8004126:	4a40      	ldr	r2, [pc, #256]	; (8004228 <UART_Start_Receive_DMA+0x140>)
 8004128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2280      	movs	r2, #128	; 0x80
 800412e:	589b      	ldr	r3, [r3, r2]
 8004130:	4a3e      	ldr	r2, [pc, #248]	; (800422c <UART_Start_Receive_DMA+0x144>)
 8004132:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2280      	movs	r2, #128	; 0x80
 8004138:	589b      	ldr	r3, [r3, r2]
 800413a:	4a3d      	ldr	r2, [pc, #244]	; (8004230 <UART_Start_Receive_DMA+0x148>)
 800413c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	589b      	ldr	r3, [r3, r2]
 8004144:	2200      	movs	r2, #0
 8004146:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2280      	movs	r2, #128	; 0x80
 800414c:	5898      	ldr	r0, [r3, r2]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3324      	adds	r3, #36	; 0x24
 8004154:	0019      	movs	r1, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	001a      	movs	r2, r3
 800415c:	1dbb      	adds	r3, r7, #6
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	f7fc ffb4 	bl	80010cc <HAL_DMA_Start_IT>
 8004164:	1e03      	subs	r3, r0, #0
 8004166:	d009      	beq.n	800417c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2290      	movs	r2, #144	; 0x90
 800416c:	2110      	movs	r1, #16
 800416e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	228c      	movs	r2, #140	; 0x8c
 8004174:	2120      	movs	r1, #32
 8004176:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	e050      	b.n	800421e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004184:	f3ef 8310 	mrs	r3, PRIMASK
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800418e:	2301      	movs	r3, #1
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004194:	f383 8810 	msr	PRIMASK, r3
}
 8004198:	46c0      	nop			; (mov r8, r8)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2180      	movs	r1, #128	; 0x80
 80041a6:	0049      	lsls	r1, r1, #1
 80041a8:	430a      	orrs	r2, r1
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	f383 8810 	msr	PRIMASK, r3
}
 80041b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b8:	f3ef 8310 	mrs	r3, PRIMASK
 80041bc:	613b      	str	r3, [r7, #16]
  return(result);
 80041be:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80041c2:	2301      	movs	r3, #1
 80041c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f383 8810 	msr	PRIMASK, r3
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2101      	movs	r1, #1
 80041da:	430a      	orrs	r2, r1
 80041dc:	609a      	str	r2, [r3, #8]
 80041de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	f383 8810 	msr	PRIMASK, r3
}
 80041e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ea:	f3ef 8310 	mrs	r3, PRIMASK
 80041ee:	61fb      	str	r3, [r7, #28]
  return(result);
 80041f0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f2:	637b      	str	r3, [r7, #52]	; 0x34
 80041f4:	2301      	movs	r3, #1
 80041f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f383 8810 	msr	PRIMASK, r3
}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2140      	movs	r1, #64	; 0x40
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	f383 8810 	msr	PRIMASK, r3
}
 800421a:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	0018      	movs	r0, r3
 8004220:	46bd      	mov	sp, r7
 8004222:	b010      	add	sp, #64	; 0x40
 8004224:	bd80      	pop	{r7, pc}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	08004381 	.word	0x08004381
 800422c:	080044b1 	.word	0x080044b1
 8004230:	080044f3 	.word	0x080044f3

08004234 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b08a      	sub	sp, #40	; 0x28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800423c:	f3ef 8310 	mrs	r3, PRIMASK
 8004240:	60bb      	str	r3, [r7, #8]
  return(result);
 8004242:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
 8004246:	2301      	movs	r3, #1
 8004248:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f383 8810 	msr	PRIMASK, r3
}
 8004250:	46c0      	nop			; (mov r8, r8)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	21c0      	movs	r1, #192	; 0xc0
 800425e:	438a      	bics	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	f383 8810 	msr	PRIMASK, r3
}
 800426c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800426e:	f3ef 8310 	mrs	r3, PRIMASK
 8004272:	617b      	str	r3, [r7, #20]
  return(result);
 8004274:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	2301      	movs	r3, #1
 800427a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f383 8810 	msr	PRIMASK, r3
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4908      	ldr	r1, [pc, #32]	; (80042b0 <UART_EndTxTransfer+0x7c>)
 8004290:	400a      	ands	r2, r1
 8004292:	609a      	str	r2, [r3, #8]
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f383 8810 	msr	PRIMASK, r3
}
 800429e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2288      	movs	r2, #136	; 0x88
 80042a4:	2120      	movs	r1, #32
 80042a6:	5099      	str	r1, [r3, r2]
}
 80042a8:	46c0      	nop			; (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b00a      	add	sp, #40	; 0x28
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	ff7fffff 	.word	0xff7fffff

080042b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08e      	sub	sp, #56	; 0x38
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042bc:	f3ef 8310 	mrs	r3, PRIMASK
 80042c0:	617b      	str	r3, [r7, #20]
  return(result);
 80042c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
 80042c6:	2301      	movs	r3, #1
 80042c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	f383 8810 	msr	PRIMASK, r3
}
 80042d0:	46c0      	nop			; (mov r8, r8)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4926      	ldr	r1, [pc, #152]	; (8004378 <UART_EndRxTransfer+0xc4>)
 80042de:	400a      	ands	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f383 8810 	msr	PRIMASK, r3
}
 80042ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ee:	f3ef 8310 	mrs	r3, PRIMASK
 80042f2:	623b      	str	r3, [r7, #32]
  return(result);
 80042f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80042f6:	633b      	str	r3, [r7, #48]	; 0x30
 80042f8:	2301      	movs	r3, #1
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	f383 8810 	msr	PRIMASK, r3
}
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	491b      	ldr	r1, [pc, #108]	; (800437c <UART_EndRxTransfer+0xc8>)
 8004310:	400a      	ands	r2, r1
 8004312:	609a      	str	r2, [r3, #8]
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800431a:	f383 8810 	msr	PRIMASK, r3
}
 800431e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d118      	bne.n	800435a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004328:	f3ef 8310 	mrs	r3, PRIMASK
 800432c:	60bb      	str	r3, [r7, #8]
  return(result);
 800432e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004332:	2301      	movs	r3, #1
 8004334:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f383 8810 	msr	PRIMASK, r3
}
 800433c:	46c0      	nop			; (mov r8, r8)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2110      	movs	r1, #16
 800434a:	438a      	bics	r2, r1
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004350:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f383 8810 	msr	PRIMASK, r3
}
 8004358:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	228c      	movs	r2, #140	; 0x8c
 800435e:	2120      	movs	r1, #32
 8004360:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	46bd      	mov	sp, r7
 8004372:	b00e      	add	sp, #56	; 0x38
 8004374:	bd80      	pop	{r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	fffffedf 	.word	0xfffffedf
 800437c:	effffffe 	.word	0xeffffffe

08004380 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b094      	sub	sp, #80	; 0x50
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	2220      	movs	r2, #32
 8004396:	4013      	ands	r3, r2
 8004398:	d16f      	bne.n	800447a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800439a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800439c:	225e      	movs	r2, #94	; 0x5e
 800439e:	2100      	movs	r1, #0
 80043a0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043a2:	f3ef 8310 	mrs	r3, PRIMASK
 80043a6:	61bb      	str	r3, [r7, #24]
  return(result);
 80043a8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80043ac:	2301      	movs	r3, #1
 80043ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f383 8810 	msr	PRIMASK, r3
}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	493a      	ldr	r1, [pc, #232]	; (80044ac <UART_DMAReceiveCplt+0x12c>)
 80043c4:	400a      	ands	r2, r1
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	f383 8810 	msr	PRIMASK, r3
}
 80043d2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d4:	f3ef 8310 	mrs	r3, PRIMASK
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043dc:	647b      	str	r3, [r7, #68]	; 0x44
 80043de:	2301      	movs	r3, #1
 80043e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	f383 8810 	msr	PRIMASK, r3
}
 80043e8:	46c0      	nop			; (mov r8, r8)
 80043ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2101      	movs	r1, #1
 80043f6:	438a      	bics	r2, r1
 80043f8:	609a      	str	r2, [r3, #8]
 80043fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004400:	f383 8810 	msr	PRIMASK, r3
}
 8004404:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004406:	f3ef 8310 	mrs	r3, PRIMASK
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440e:	643b      	str	r3, [r7, #64]	; 0x40
 8004410:	2301      	movs	r3, #1
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	f383 8810 	msr	PRIMASK, r3
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2140      	movs	r1, #64	; 0x40
 8004428:	438a      	bics	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
 800442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004438:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800443a:	228c      	movs	r2, #140	; 0x8c
 800443c:	2120      	movs	r1, #32
 800443e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004444:	2b01      	cmp	r3, #1
 8004446:	d118      	bne.n	800447a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004448:	f3ef 8310 	mrs	r3, PRIMASK
 800444c:	60fb      	str	r3, [r7, #12]
  return(result);
 800444e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004452:	2301      	movs	r3, #1
 8004454:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			; (mov r8, r8)
 800445e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2110      	movs	r1, #16
 800446a:	438a      	bics	r2, r1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004470:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f383 8810 	msr	PRIMASK, r3
}
 8004478:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800447a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447c:	2200      	movs	r2, #0
 800447e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004482:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d108      	bne.n	800449a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448a:	225c      	movs	r2, #92	; 0x5c
 800448c:	5a9a      	ldrh	r2, [r3, r2]
 800448e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004490:	0011      	movs	r1, r2
 8004492:	0018      	movs	r0, r3
 8004494:	f7fc f9ec 	bl	8000870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004498:	e003      	b.n	80044a2 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800449a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449c:	0018      	movs	r0, r3
 800449e:	f7ff fad7 	bl	8003a50 <HAL_UART_RxCpltCallback>
}
 80044a2:	46c0      	nop			; (mov r8, r8)
 80044a4:	46bd      	mov	sp, r7
 80044a6:	b014      	add	sp, #80	; 0x50
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	fffffeff 	.word	0xfffffeff

080044b0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d10a      	bne.n	80044e2 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	225c      	movs	r2, #92	; 0x5c
 80044d0:	5a9b      	ldrh	r3, [r3, r2]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	0011      	movs	r1, r2
 80044da:	0018      	movs	r0, r3
 80044dc:	f7fc f9c8 	bl	8000870 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044e0:	e003      	b.n	80044ea <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7ff fabb 	bl	8003a60 <HAL_UART_RxHalfCpltCallback>
}
 80044ea:	46c0      	nop			; (mov r8, r8)
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b004      	add	sp, #16
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b086      	sub	sp, #24
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044fe:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	2288      	movs	r2, #136	; 0x88
 8004504:	589b      	ldr	r3, [r3, r2]
 8004506:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	228c      	movs	r2, #140	; 0x8c
 800450c:	589b      	ldr	r3, [r3, r2]
 800450e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2280      	movs	r2, #128	; 0x80
 8004518:	4013      	ands	r3, r2
 800451a:	2b80      	cmp	r3, #128	; 0x80
 800451c:	d10a      	bne.n	8004534 <UART_DMAError+0x42>
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b21      	cmp	r3, #33	; 0x21
 8004522:	d107      	bne.n	8004534 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2256      	movs	r2, #86	; 0x56
 8004528:	2100      	movs	r1, #0
 800452a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	0018      	movs	r0, r3
 8004530:	f7ff fe80 	bl	8004234 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2240      	movs	r2, #64	; 0x40
 800453c:	4013      	ands	r3, r2
 800453e:	2b40      	cmp	r3, #64	; 0x40
 8004540:	d10a      	bne.n	8004558 <UART_DMAError+0x66>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b22      	cmp	r3, #34	; 0x22
 8004546:	d107      	bne.n	8004558 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	225e      	movs	r2, #94	; 0x5e
 800454c:	2100      	movs	r1, #0
 800454e:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff feae 	bl	80042b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2290      	movs	r2, #144	; 0x90
 800455c:	589b      	ldr	r3, [r3, r2]
 800455e:	2210      	movs	r2, #16
 8004560:	431a      	orrs	r2, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2190      	movs	r1, #144	; 0x90
 8004566:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	0018      	movs	r0, r3
 800456c:	f7ff fa80 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004570:	46c0      	nop			; (mov r8, r8)
 8004572:	46bd      	mov	sp, r7
 8004574:	b006      	add	sp, #24
 8004576:	bd80      	pop	{r7, pc}

08004578 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	225e      	movs	r2, #94	; 0x5e
 800458a:	2100      	movs	r1, #0
 800458c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2256      	movs	r2, #86	; 0x56
 8004592:	2100      	movs	r1, #0
 8004594:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	0018      	movs	r0, r3
 800459a:	f7ff fa69 	bl	8003a70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800459e:	46c0      	nop			; (mov r8, r8)
 80045a0:	46bd      	mov	sp, r7
 80045a2:	b004      	add	sp, #16
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ae:	f3ef 8310 	mrs	r3, PRIMASK
 80045b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80045b4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	2301      	movs	r3, #1
 80045ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f383 8810 	msr	PRIMASK, r3
}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2140      	movs	r1, #64	; 0x40
 80045d0:	438a      	bics	r2, r1
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	f383 8810 	msr	PRIMASK, r3
}
 80045de:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2288      	movs	r2, #136	; 0x88
 80045e4:	2120      	movs	r1, #32
 80045e6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f7ff fa25 	bl	8003a40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b006      	add	sp, #24
 80045fc:	bd80      	pop	{r7, pc}

080045fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045fe:	b580      	push	{r7, lr}
 8004600:	b082      	sub	sp, #8
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	46bd      	mov	sp, r7
 800460a:	b002      	add	sp, #8
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b082      	sub	sp, #8
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	46bd      	mov	sp, r7
 800461a:	b002      	add	sp, #8
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	46bd      	mov	sp, r7
 800462a:	b002      	add	sp, #8
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2284      	movs	r2, #132	; 0x84
 800463c:	5c9b      	ldrb	r3, [r3, r2]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_UARTEx_DisableFifoMode+0x16>
 8004642:	2302      	movs	r3, #2
 8004644:	e027      	b.n	8004696 <HAL_UARTEx_DisableFifoMode+0x66>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2284      	movs	r2, #132	; 0x84
 800464a:	2101      	movs	r1, #1
 800464c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2288      	movs	r2, #136	; 0x88
 8004652:	2124      	movs	r1, #36	; 0x24
 8004654:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2101      	movs	r1, #1
 800466a:	438a      	bics	r2, r1
 800466c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004672:	4013      	ands	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2288      	movs	r2, #136	; 0x88
 8004688:	2120      	movs	r1, #32
 800468a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2284      	movs	r2, #132	; 0x84
 8004690:	2100      	movs	r1, #0
 8004692:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	0018      	movs	r0, r3
 8004698:	46bd      	mov	sp, r7
 800469a:	b004      	add	sp, #16
 800469c:	bd80      	pop	{r7, pc}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	dfffffff 	.word	0xdfffffff

080046a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2284      	movs	r2, #132	; 0x84
 80046b2:	5c9b      	ldrb	r3, [r3, r2]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d101      	bne.n	80046bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e02e      	b.n	800471a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2284      	movs	r2, #132	; 0x84
 80046c0:	2101      	movs	r1, #1
 80046c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2288      	movs	r2, #136	; 0x88
 80046c8:	2124      	movs	r1, #36	; 0x24
 80046ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2101      	movs	r1, #1
 80046e0:	438a      	bics	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	08d9      	lsrs	r1, r3, #3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	430a      	orrs	r2, r1
 80046f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	0018      	movs	r0, r3
 80046fc:	f000 f8bc 	bl	8004878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2288      	movs	r2, #136	; 0x88
 800470c:	2120      	movs	r1, #32
 800470e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2284      	movs	r2, #132	; 0x84
 8004714:	2100      	movs	r1, #0
 8004716:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	0018      	movs	r0, r3
 800471c:	46bd      	mov	sp, r7
 800471e:	b004      	add	sp, #16
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2284      	movs	r2, #132	; 0x84
 8004732:	5c9b      	ldrb	r3, [r3, r2]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004738:	2302      	movs	r3, #2
 800473a:	e02f      	b.n	800479c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2284      	movs	r2, #132	; 0x84
 8004740:	2101      	movs	r1, #1
 8004742:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2288      	movs	r2, #136	; 0x88
 8004748:	2124      	movs	r1, #36	; 0x24
 800474a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	681a      	ldr	r2, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2101      	movs	r1, #1
 8004760:	438a      	bics	r2, r1
 8004762:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	4a0e      	ldr	r2, [pc, #56]	; (80047a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800476c:	4013      	ands	r3, r2
 800476e:	0019      	movs	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0018      	movs	r0, r3
 800477e:	f000 f87b 	bl	8004878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2288      	movs	r2, #136	; 0x88
 800478e:	2120      	movs	r1, #32
 8004790:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2284      	movs	r2, #132	; 0x84
 8004796:	2100      	movs	r1, #0
 8004798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	0018      	movs	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	b004      	add	sp, #16
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	f1ffffff 	.word	0xf1ffffff

080047a8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047a8:	b5b0      	push	{r4, r5, r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	1dbb      	adds	r3, r7, #6
 80047b4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	228c      	movs	r2, #140	; 0x8c
 80047ba:	589b      	ldr	r3, [r3, r2]
 80047bc:	2b20      	cmp	r3, #32
 80047be:	d156      	bne.n	800486e <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d003      	beq.n	80047ce <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80047c6:	1dbb      	adds	r3, r7, #6
 80047c8:	881b      	ldrh	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e04e      	b.n	8004870 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	2380      	movs	r3, #128	; 0x80
 80047d8:	015b      	lsls	r3, r3, #5
 80047da:	429a      	cmp	r2, r3
 80047dc:	d109      	bne.n	80047f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d105      	bne.n	80047f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2201      	movs	r2, #1
 80047ea:	4013      	ands	r3, r2
 80047ec:	d001      	beq.n	80047f2 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e03e      	b.n	8004870 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80047fe:	2527      	movs	r5, #39	; 0x27
 8004800:	197c      	adds	r4, r7, r5
 8004802:	1dbb      	adds	r3, r7, #6
 8004804:	881a      	ldrh	r2, [r3, #0]
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	0018      	movs	r0, r3
 800480c:	f7ff fc6c 	bl	80040e8 <UART_Start_Receive_DMA>
 8004810:	0003      	movs	r3, r0
 8004812:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004814:	197b      	adds	r3, r7, r5
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d124      	bne.n	8004866 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004820:	2b01      	cmp	r3, #1
 8004822:	d11c      	bne.n	800485e <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2210      	movs	r2, #16
 800482a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800482c:	f3ef 8310 	mrs	r3, PRIMASK
 8004830:	617b      	str	r3, [r7, #20]
  return(result);
 8004832:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004834:	623b      	str	r3, [r7, #32]
 8004836:	2301      	movs	r3, #1
 8004838:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	f383 8810 	msr	PRIMASK, r3
}
 8004840:	46c0      	nop			; (mov r8, r8)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2110      	movs	r1, #16
 800484e:	430a      	orrs	r2, r1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	f383 8810 	msr	PRIMASK, r3
}
 800485c:	e003      	b.n	8004866 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800485e:	2327      	movs	r3, #39	; 0x27
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	2201      	movs	r2, #1
 8004864:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004866:	2327      	movs	r3, #39	; 0x27
 8004868:	18fb      	adds	r3, r7, r3
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	e000      	b.n	8004870 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800486e:	2302      	movs	r3, #2
  }
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b00a      	add	sp, #40	; 0x28
 8004876:	bdb0      	pop	{r4, r5, r7, pc}

08004878 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004884:	2b00      	cmp	r3, #0
 8004886:	d108      	bne.n	800489a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	226a      	movs	r2, #106	; 0x6a
 800488c:	2101      	movs	r1, #1
 800488e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2268      	movs	r2, #104	; 0x68
 8004894:	2101      	movs	r1, #1
 8004896:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004898:	e043      	b.n	8004922 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800489a:	260f      	movs	r6, #15
 800489c:	19bb      	adds	r3, r7, r6
 800489e:	2208      	movs	r2, #8
 80048a0:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048a2:	200e      	movs	r0, #14
 80048a4:	183b      	adds	r3, r7, r0
 80048a6:	2208      	movs	r2, #8
 80048a8:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	0e5b      	lsrs	r3, r3, #25
 80048b2:	b2da      	uxtb	r2, r3
 80048b4:	240d      	movs	r4, #13
 80048b6:	193b      	adds	r3, r7, r4
 80048b8:	2107      	movs	r1, #7
 80048ba:	400a      	ands	r2, r1
 80048bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	0f5b      	lsrs	r3, r3, #29
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	250c      	movs	r5, #12
 80048ca:	197b      	adds	r3, r7, r5
 80048cc:	2107      	movs	r1, #7
 80048ce:	400a      	ands	r2, r1
 80048d0:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048d2:	183b      	adds	r3, r7, r0
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	197a      	adds	r2, r7, r5
 80048d8:	7812      	ldrb	r2, [r2, #0]
 80048da:	4914      	ldr	r1, [pc, #80]	; (800492c <UARTEx_SetNbDataToProcess+0xb4>)
 80048dc:	5c8a      	ldrb	r2, [r1, r2]
 80048de:	435a      	muls	r2, r3
 80048e0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80048e2:	197b      	adds	r3, r7, r5
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	4a12      	ldr	r2, [pc, #72]	; (8004930 <UARTEx_SetNbDataToProcess+0xb8>)
 80048e8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048ea:	0019      	movs	r1, r3
 80048ec:	f7fb fc92 	bl	8000214 <__divsi3>
 80048f0:	0003      	movs	r3, r0
 80048f2:	b299      	uxth	r1, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	226a      	movs	r2, #106	; 0x6a
 80048f8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048fa:	19bb      	adds	r3, r7, r6
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	193a      	adds	r2, r7, r4
 8004900:	7812      	ldrb	r2, [r2, #0]
 8004902:	490a      	ldr	r1, [pc, #40]	; (800492c <UARTEx_SetNbDataToProcess+0xb4>)
 8004904:	5c8a      	ldrb	r2, [r1, r2]
 8004906:	435a      	muls	r2, r3
 8004908:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800490a:	193b      	adds	r3, r7, r4
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	4a08      	ldr	r2, [pc, #32]	; (8004930 <UARTEx_SetNbDataToProcess+0xb8>)
 8004910:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004912:	0019      	movs	r1, r3
 8004914:	f7fb fc7e 	bl	8000214 <__divsi3>
 8004918:	0003      	movs	r3, r0
 800491a:	b299      	uxth	r1, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2268      	movs	r2, #104	; 0x68
 8004920:	5299      	strh	r1, [r3, r2]
}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	46bd      	mov	sp, r7
 8004926:	b005      	add	sp, #20
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	08004a1c 	.word	0x08004a1c
 8004930:	08004a24 	.word	0x08004a24

08004934 <__libc_init_array>:
 8004934:	b570      	push	{r4, r5, r6, lr}
 8004936:	2600      	movs	r6, #0
 8004938:	4d0c      	ldr	r5, [pc, #48]	; (800496c <__libc_init_array+0x38>)
 800493a:	4c0d      	ldr	r4, [pc, #52]	; (8004970 <__libc_init_array+0x3c>)
 800493c:	1b64      	subs	r4, r4, r5
 800493e:	10a4      	asrs	r4, r4, #2
 8004940:	42a6      	cmp	r6, r4
 8004942:	d109      	bne.n	8004958 <__libc_init_array+0x24>
 8004944:	2600      	movs	r6, #0
 8004946:	f000 f821 	bl	800498c <_init>
 800494a:	4d0a      	ldr	r5, [pc, #40]	; (8004974 <__libc_init_array+0x40>)
 800494c:	4c0a      	ldr	r4, [pc, #40]	; (8004978 <__libc_init_array+0x44>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	42a6      	cmp	r6, r4
 8004954:	d105      	bne.n	8004962 <__libc_init_array+0x2e>
 8004956:	bd70      	pop	{r4, r5, r6, pc}
 8004958:	00b3      	lsls	r3, r6, #2
 800495a:	58eb      	ldr	r3, [r5, r3]
 800495c:	4798      	blx	r3
 800495e:	3601      	adds	r6, #1
 8004960:	e7ee      	b.n	8004940 <__libc_init_array+0xc>
 8004962:	00b3      	lsls	r3, r6, #2
 8004964:	58eb      	ldr	r3, [r5, r3]
 8004966:	4798      	blx	r3
 8004968:	3601      	adds	r6, #1
 800496a:	e7f2      	b.n	8004952 <__libc_init_array+0x1e>
 800496c:	08004a2c 	.word	0x08004a2c
 8004970:	08004a2c 	.word	0x08004a2c
 8004974:	08004a2c 	.word	0x08004a2c
 8004978:	08004a30 	.word	0x08004a30

0800497c <memset>:
 800497c:	0003      	movs	r3, r0
 800497e:	1882      	adds	r2, r0, r2
 8004980:	4293      	cmp	r3, r2
 8004982:	d100      	bne.n	8004986 <memset+0xa>
 8004984:	4770      	bx	lr
 8004986:	7019      	strb	r1, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	e7f9      	b.n	8004980 <memset+0x4>

0800498c <_init>:
 800498c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004992:	bc08      	pop	{r3}
 8004994:	469e      	mov	lr, r3
 8004996:	4770      	bx	lr

08004998 <_fini>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr
