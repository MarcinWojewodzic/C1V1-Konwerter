
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004480  08004480  00014480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004520  08004520  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004520  08004520  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004520  08004520  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004524  08004524  00014524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  20000024  0800454c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  0800454c  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161e7  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032c7  00000000  00000000  00036233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00039500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  0003a680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018075  00000000  00000000  0003b688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001898f  00000000  00000000  000536fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b6a  00000000  00000000  0006c08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000febf6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d48  00000000  00000000  000fec48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000024 	.word	0x20000024
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004468 	.word	0x08004468

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000028 	.word	0x20000028
 80000fc:	08004468 	.word	0x08004468

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <Max485_SetStateListening>:
 *      Author: Marcin
 */
#include "MAX485.h"
#include "main.h"
void Max485_SetStateListening(Max485_Typedef *Max)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(Max->Max485SelectorPort, Max->Max485SelectorPin, MAX485_LISTENING);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	6898      	ldr	r0, [r3, #8]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	899b      	ldrh	r3, [r3, #12]
 80003fc:	2200      	movs	r2, #0
 80003fe:	0019      	movs	r1, r3
 8000400:	f001 faa2 	bl	8001948 <HAL_GPIO_WritePin>
   Max->State = MAX485_LISTENING;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
}
 800040a:	46c0      	nop			; (mov r8, r8)
 800040c:	46bd      	mov	sp, r7
 800040e:	b002      	add	sp, #8
 8000410:	bd80      	pop	{r7, pc}

08000412 <Max485_SetStateSending>:
void Max485_SetStateSending(Max485_Typedef *Max)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	b082      	sub	sp, #8
 8000416:	af00      	add	r7, sp, #0
 8000418:	6078      	str	r0, [r7, #4]
   HAL_GPIO_WritePin(Max->Max485SelectorPort, Max->Max485SelectorPin, MAX485_SENDING);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6898      	ldr	r0, [r3, #8]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	899b      	ldrh	r3, [r3, #12]
 8000422:	2201      	movs	r2, #1
 8000424:	0019      	movs	r1, r3
 8000426:	f001 fa8f 	bl	8001948 <HAL_GPIO_WritePin>
   Max->State = MAX485_SENDING;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	701a      	strb	r2, [r3, #0]
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	b002      	add	sp, #8
 8000436:	bd80      	pop	{r7, pc}

08000438 <Max485_StartListening>:
void Max485_StartListening(Max485_Typedef *Max, uint8_t *DataToRecive, uint16_t NumberDataToRecive)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60f8      	str	r0, [r7, #12]
 8000440:	60b9      	str	r1, [r7, #8]
 8000442:	1dbb      	adds	r3, r7, #6
 8000444:	801a      	strh	r2, [r3, #0]
   HAL_UARTEx_ReceiveToIdle_DMA(Max->Max485Uart, DataToRecive, NumberDataToRecive);
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	6858      	ldr	r0, [r3, #4]
 800044a:	1dbb      	adds	r3, r7, #6
 800044c:	881a      	ldrh	r2, [r3, #0]
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	0019      	movs	r1, r3
 8000452:	f003 ff17 	bl	8004284 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	b004      	add	sp, #16
 800045c:	bd80      	pop	{r7, pc}

0800045e <Max485_StartSending>:
void Max485_StartSending(Max485_Typedef *Max, uint8_t *DataToSend, uint16_t NumberDataToSend)
{
 800045e:	b590      	push	{r4, r7, lr}
 8000460:	b085      	sub	sp, #20
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	1dbb      	adds	r3, r7, #6
 800046a:	801a      	strh	r2, [r3, #0]
   HAL_UART_Transmit(Max->Max485Uart, DataToSend, NumberDataToSend, MAX485_MAX_TIMEOUT);
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	6858      	ldr	r0, [r3, #4]
 8000470:	23fa      	movs	r3, #250	; 0xfa
 8000472:	009c      	lsls	r4, r3, #2
 8000474:	1dbb      	adds	r3, r7, #6
 8000476:	881a      	ldrh	r2, [r3, #0]
 8000478:	68b9      	ldr	r1, [r7, #8]
 800047a:	0023      	movs	r3, r4
 800047c:	f002 fc8c 	bl	8002d98 <HAL_UART_Transmit>
}
 8000480:	46c0      	nop			; (mov r8, r8)
 8000482:	46bd      	mov	sp, r7
 8000484:	b005      	add	sp, #20
 8000486:	bd90      	pop	{r4, r7, pc}

08000488 <Max485_ListeningAfterTalk>:
void Max485_ListeningAfterTalk(Max485_Typedef *Max, uint8_t *DataToSend, uint16_t NumberDataToSend, uint8_t *DataToRecive,
                               uint16_t NumberDataToRecive)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	60f8      	str	r0, [r7, #12]
 8000490:	60b9      	str	r1, [r7, #8]
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	1dbb      	adds	r3, r7, #6
 8000496:	801a      	strh	r2, [r3, #0]
   Max485_SetStateSending(Max);
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	0018      	movs	r0, r3
 800049c:	f7ff ffb9 	bl	8000412 <Max485_SetStateSending>
   Max485_StartSending(Max, DataToSend, NumberDataToSend);
 80004a0:	1dbb      	adds	r3, r7, #6
 80004a2:	881a      	ldrh	r2, [r3, #0]
 80004a4:	68b9      	ldr	r1, [r7, #8]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	0018      	movs	r0, r3
 80004aa:	f7ff ffd8 	bl	800045e <Max485_StartSending>
   Max485_SetStateListening(Max);
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	0018      	movs	r0, r3
 80004b2:	f7ff ff9b 	bl	80003ec <Max485_SetStateListening>
   Max485_StartListening(Max, DataToRecive, NumberDataToRecive);
 80004b6:	2318      	movs	r3, #24
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	881a      	ldrh	r2, [r3, #0]
 80004bc:	6839      	ldr	r1, [r7, #0]
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	0018      	movs	r0, r3
 80004c2:	f7ff ffb9 	bl	8000438 <Max485_StartListening>
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}

080004ce <Max485_Init>:
void Max485_Init(Max485_Typedef *Max, UART_HandleTypeDef *Uart, GPIO_TypeDef *MaxSelectorPort, uint16_t MaxSelectorPin)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b084      	sub	sp, #16
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	60b9      	str	r1, [r7, #8]
 80004d8:	607a      	str	r2, [r7, #4]
 80004da:	001a      	movs	r2, r3
 80004dc:	1cbb      	adds	r3, r7, #2
 80004de:	801a      	strh	r2, [r3, #0]
   Max->Max485Uart         = Uart;
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	605a      	str	r2, [r3, #4]
   Max->Max485SelectorPin  = MaxSelectorPin;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	1cba      	adds	r2, r7, #2
 80004ea:	8812      	ldrh	r2, [r2, #0]
 80004ec:	819a      	strh	r2, [r3, #12]
   Max->Max485SelectorPort = MaxSelectorPort;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	687a      	ldr	r2, [r7, #4]
 80004f2:	609a      	str	r2, [r3, #8]
   Max485_SetStateListening(Max);
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff ff78 	bl	80003ec <Max485_SetStateListening>
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b004      	add	sp, #16
 8000502:	bd80      	pop	{r7, pc}

08000504 <SM_MainFunction>:
bh1750_t Bh                                 = { 0 };
Max485_Typedef Max                          = { 0 };
uint8_t data[100];

void SM_MainFunction()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
   if(TIM_GetTick() - SmPtr.LastTick > 10)
 8000508:	f000 fad8 	bl	8000abc <TIM_GetTick>
 800050c:	0003      	movs	r3, r0
 800050e:	001a      	movs	r2, r3
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <SM_MainFunction+0x4c>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	1ad3      	subs	r3, r2, r3
 8000516:	2b0a      	cmp	r3, #10
 8000518:	dd16      	ble.n	8000548 <SM_MainFunction+0x44>
   {
      SM_ChangeState();
 800051a:	f000 f81d 	bl	8000558 <SM_ChangeState>
      SmPtr.LastTick = TIM_GetTick();
 800051e:	f000 facd 	bl	8000abc <TIM_GetTick>
 8000522:	0003      	movs	r3, r0
 8000524:	001a      	movs	r2, r3
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <SM_MainFunction+0x4c>)
 8000528:	801a      	strh	r2, [r3, #0]
      if(Function[SmPtr.State].SmFunction != NULL)
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <SM_MainFunction+0x4c>)
 800052c:	789b      	ldrb	r3, [r3, #2]
 800052e:	001a      	movs	r2, r3
 8000530:	4b08      	ldr	r3, [pc, #32]	; (8000554 <SM_MainFunction+0x50>)
 8000532:	0092      	lsls	r2, r2, #2
 8000534:	58d3      	ldr	r3, [r2, r3]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d006      	beq.n	8000548 <SM_MainFunction+0x44>
      {
         Function[SmPtr.State].SmFunction();
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <SM_MainFunction+0x4c>)
 800053c:	789b      	ldrb	r3, [r3, #2]
 800053e:	001a      	movs	r2, r3
 8000540:	4b04      	ldr	r3, [pc, #16]	; (8000554 <SM_MainFunction+0x50>)
 8000542:	0092      	lsls	r2, r2, #2
 8000544:	58d3      	ldr	r3, [r2, r3]
 8000546:	4798      	blx	r3
      }
   }
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	20000040 	.word	0x20000040
 8000554:	20000010 	.word	0x20000010

08000558 <SM_ChangeState>:
static void SM_ChangeState()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 800055e:	2300      	movs	r3, #0
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	e026      	b.n	80005b2 <SM_ChangeState+0x5a>
   {
      if(SmPtr.State == TransitionTable[i].Source && SmPtr.NewEvent == TransitionTable[i].Event)
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <SM_ChangeState+0x68>)
 8000566:	7899      	ldrb	r1, [r3, #2]
 8000568:	4816      	ldr	r0, [pc, #88]	; (80005c4 <SM_ChangeState+0x6c>)
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	0013      	movs	r3, r2
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	189b      	adds	r3, r3, r2
 8000572:	5c1b      	ldrb	r3, [r3, r0]
 8000574:	4299      	cmp	r1, r3
 8000576:	d119      	bne.n	80005ac <SM_ChangeState+0x54>
 8000578:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <SM_ChangeState+0x68>)
 800057a:	78d9      	ldrb	r1, [r3, #3]
 800057c:	4811      	ldr	r0, [pc, #68]	; (80005c4 <SM_ChangeState+0x6c>)
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	0013      	movs	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	189b      	adds	r3, r3, r2
 8000586:	18c3      	adds	r3, r0, r3
 8000588:	3302      	adds	r3, #2
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	4299      	cmp	r1, r3
 800058e:	d10d      	bne.n	80005ac <SM_ChangeState+0x54>
      {
         SmPtr.State    = TransitionTable[i].Destination;
 8000590:	490c      	ldr	r1, [pc, #48]	; (80005c4 <SM_ChangeState+0x6c>)
 8000592:	687a      	ldr	r2, [r7, #4]
 8000594:	0013      	movs	r3, r2
 8000596:	005b      	lsls	r3, r3, #1
 8000598:	189b      	adds	r3, r3, r2
 800059a:	18cb      	adds	r3, r1, r3
 800059c:	3301      	adds	r3, #1
 800059e:	781a      	ldrb	r2, [r3, #0]
 80005a0:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <SM_ChangeState+0x68>)
 80005a2:	709a      	strb	r2, [r3, #2]
         SmPtr.NewEvent = SM_EVENT_NOTHING;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <SM_ChangeState+0x68>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	70da      	strb	r2, [r3, #3]
         return;
 80005aa:	e005      	b.n	80005b8 <SM_ChangeState+0x60>
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	3301      	adds	r3, #1
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	d9d5      	bls.n	8000564 <SM_ChangeState+0xc>
      }
   }
}
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b002      	add	sp, #8
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	20000040 	.word	0x20000040
 80005c4:	20000000 	.word	0x20000000

080005c8 <SM_InitializeFunction>:
static void SM_InitializeFunction()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
   //   bh1750_Init(&Bh, &hi2c2, 35, One_Time_H_Resolution_Mode);
   Max485_Init(&Max, &huart1, MAX485_Selector_GPIO_Port, MAX485_Selector_Pin);
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	019b      	lsls	r3, r3, #6
 80005d0:	22a0      	movs	r2, #160	; 0xa0
 80005d2:	05d2      	lsls	r2, r2, #23
 80005d4:	490e      	ldr	r1, [pc, #56]	; (8000610 <SM_InitializeFunction+0x48>)
 80005d6:	480f      	ldr	r0, [pc, #60]	; (8000614 <SM_InitializeFunction+0x4c>)
 80005d8:	f7ff ff79 	bl	80004ce <Max485_Init>
   Max485_StartListening(&Max, data, 100);
 80005dc:	490e      	ldr	r1, [pc, #56]	; (8000618 <SM_InitializeFunction+0x50>)
 80005de:	4b0d      	ldr	r3, [pc, #52]	; (8000614 <SM_InitializeFunction+0x4c>)
 80005e0:	2264      	movs	r2, #100	; 0x64
 80005e2:	0018      	movs	r0, r3
 80005e4:	f7ff ff28 	bl	8000438 <Max485_StartListening>
   SmPtr.NewEvent = SM_EVENT_INITIALIZE_OK;
 80005e8:	4b0c      	ldr	r3, [pc, #48]	; (800061c <SM_InitializeFunction+0x54>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	70da      	strb	r2, [r3, #3]
   Max485_SetStateSending(&Max);
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <SM_InitializeFunction+0x4c>)
 80005f0:	0018      	movs	r0, r3
 80005f2:	f7ff ff0e 	bl	8000412 <Max485_SetStateSending>
   Max485_StartSending(&Max, (uint8_t *)INITIALIZED_COMPLETE, sizeof(INITIALIZED_COMPLETE));
 80005f6:	490a      	ldr	r1, [pc, #40]	; (8000620 <SM_InitializeFunction+0x58>)
 80005f8:	4b06      	ldr	r3, [pc, #24]	; (8000614 <SM_InitializeFunction+0x4c>)
 80005fa:	2217      	movs	r2, #23
 80005fc:	0018      	movs	r0, r3
 80005fe:	f7ff ff2e 	bl	800045e <Max485_StartSending>
   Max485_SetStateListening(&Max);
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <SM_InitializeFunction+0x4c>)
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff fef1 	bl	80003ec <Max485_SetStateListening>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000184 	.word	0x20000184
 8000614:	20000044 	.word	0x20000044
 8000618:	20000054 	.word	0x20000054
 800061c:	20000040 	.word	0x20000040
 8000620:	08004480 	.word	0x08004480

08000624 <SM_RunningFunction>:
static void SM_RunningFunction()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
	...

08000630 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af02      	add	r7, sp, #8
 8000636:	6078      	str	r0, [r7, #4]
 8000638:	000a      	movs	r2, r1
 800063a:	1cbb      	adds	r3, r7, #2
 800063c:	801a      	strh	r2, [r3, #0]
   Max485_ListeningAfterTalk(&Max, data, Size, data, Size);
 800063e:	4c07      	ldr	r4, [pc, #28]	; (800065c <HAL_UARTEx_RxEventCallback+0x2c>)
 8000640:	1cbb      	adds	r3, r7, #2
 8000642:	881a      	ldrh	r2, [r3, #0]
 8000644:	4905      	ldr	r1, [pc, #20]	; (800065c <HAL_UARTEx_RxEventCallback+0x2c>)
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <HAL_UARTEx_RxEventCallback+0x30>)
 8000648:	1cbb      	adds	r3, r7, #2
 800064a:	881b      	ldrh	r3, [r3, #0]
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	0023      	movs	r3, r4
 8000650:	f7ff ff1a 	bl	8000488 <Max485_ListeningAfterTalk>
}
 8000654:	46c0      	nop			; (mov r8, r8)
 8000656:	46bd      	mov	sp, r7
 8000658:	b003      	add	sp, #12
 800065a:	bd90      	pop	{r4, r7, pc}
 800065c:	20000054 	.word	0x20000054
 8000660:	20000044 	.word	0x20000044

08000664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_DMA_Init+0x28>)
 800066c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <MX_DMA_Init+0x28>)
 8000670:	2101      	movs	r1, #1
 8000672:	430a      	orrs	r2, r1
 8000674:	639a      	str	r2, [r3, #56]	; 0x38
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_DMA_Init+0x28>)
 8000678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067a:	2201      	movs	r2, #1
 800067c:	4013      	ands	r3, r2
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]

}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	46bd      	mov	sp, r7
 8000686:	b002      	add	sp, #8
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	40021000 	.word	0x40021000

08000690 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b089      	sub	sp, #36	; 0x24
 8000694:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000696:	240c      	movs	r4, #12
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2314      	movs	r3, #20
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f003 fed9 	bl	8004458 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <MX_GPIO_Init+0x88>)
 80006a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006aa:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_GPIO_Init+0x88>)
 80006ac:	2102      	movs	r1, #2
 80006ae:	430a      	orrs	r2, r1
 80006b0:	635a      	str	r2, [r3, #52]	; 0x34
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_GPIO_Init+0x88>)
 80006b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b6:	2202      	movs	r2, #2
 80006b8:	4013      	ands	r3, r2
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <MX_GPIO_Init+0x88>)
 80006c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006c2:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_GPIO_Init+0x88>)
 80006c4:	2101      	movs	r1, #1
 80006c6:	430a      	orrs	r2, r1
 80006c8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <MX_GPIO_Init+0x88>)
 80006cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	0199      	lsls	r1, r3, #6
 80006da:	23a0      	movs	r3, #160	; 0xa0
 80006dc:	05db      	lsls	r3, r3, #23
 80006de:	2200      	movs	r2, #0
 80006e0:	0018      	movs	r0, r3
 80006e2:	f001 f931 	bl	8001948 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_Selector_Pin;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2280      	movs	r2, #128	; 0x80
 80006ea:	0192      	lsls	r2, r2, #6
 80006ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2203      	movs	r2, #3
 80006fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MAX485_Selector_GPIO_Port, &GPIO_InitStruct);
 8000700:	193a      	adds	r2, r7, r4
 8000702:	23a0      	movs	r3, #160	; 0xa0
 8000704:	05db      	lsls	r3, r3, #23
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f000 ffb9 	bl	8001680 <HAL_GPIO_Init>

}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b009      	add	sp, #36	; 0x24
 8000714:	bd90      	pop	{r4, r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	40021000 	.word	0x40021000

0800071c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <MX_I2C2_Init+0x74>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	; (8000794 <MX_I2C2_Init+0x78>)
 8000724:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <MX_I2C2_Init+0x74>)
 8000728:	4a1b      	ldr	r2, [pc, #108]	; (8000798 <MX_I2C2_Init+0x7c>)
 800072a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <MX_I2C2_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <MX_I2C2_Init+0x74>)
 8000734:	2201      	movs	r2, #1
 8000736:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <MX_I2C2_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <MX_I2C2_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <MX_I2C2_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800074a:	4b11      	ldr	r3, [pc, #68]	; (8000790 <MX_I2C2_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <MX_I2C2_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <MX_I2C2_Init+0x74>)
 8000758:	0018      	movs	r0, r3
 800075a:	f001 f913 	bl	8001984 <HAL_I2C_Init>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000762:	f000 f8e6 	bl	8000932 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <MX_I2C2_Init+0x74>)
 8000768:	2100      	movs	r1, #0
 800076a:	0018      	movs	r0, r3
 800076c:	f001 f9a0 	bl	8001ab0 <HAL_I2CEx_ConfigAnalogFilter>
 8000770:	1e03      	subs	r3, r0, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000774:	f000 f8dd 	bl	8000932 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MX_I2C2_Init+0x74>)
 800077a:	2100      	movs	r1, #0
 800077c:	0018      	movs	r0, r3
 800077e:	f001 f9e3 	bl	8001b48 <HAL_I2CEx_ConfigDigitalFilter>
 8000782:	1e03      	subs	r3, r0, #0
 8000784:	d001      	beq.n	800078a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000786:	f000 f8d4 	bl	8000932 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	200000b8 	.word	0x200000b8
 8000794:	40005800 	.word	0x40005800
 8000798:	00303d5b 	.word	0x00303d5b

0800079c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800079c:	b590      	push	{r4, r7, lr}
 800079e:	b08b      	sub	sp, #44	; 0x2c
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	2414      	movs	r4, #20
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	0018      	movs	r0, r3
 80007aa:	2314      	movs	r3, #20
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f003 fe52 	bl	8004458 <memset>
  if(i2cHandle->Instance==I2C2)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a1c      	ldr	r2, [pc, #112]	; (800082c <HAL_I2C_MspInit+0x90>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d131      	bne.n	8000822 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <HAL_I2C_MspInit+0x94>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c2:	4b1b      	ldr	r3, [pc, #108]	; (8000830 <HAL_I2C_MspInit+0x94>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <HAL_I2C_MspInit+0x94>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007d6:	193b      	adds	r3, r7, r4
 80007d8:	22c0      	movs	r2, #192	; 0xc0
 80007da:	0152      	lsls	r2, r2, #5
 80007dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007de:	0021      	movs	r1, r4
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2212      	movs	r2, #18
 80007e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2206      	movs	r2, #6
 80007f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	187a      	adds	r2, r7, r1
 80007fa:	23a0      	movs	r3, #160	; 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f000 ff3d 	bl	8001680 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_I2C_MspInit+0x94>)
 8000808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <HAL_I2C_MspInit+0x94>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	03c9      	lsls	r1, r1, #15
 8000810:	430a      	orrs	r2, r1
 8000812:	63da      	str	r2, [r3, #60]	; 0x3c
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_I2C_MspInit+0x94>)
 8000816:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	03db      	lsls	r3, r3, #15
 800081c:	4013      	ands	r3, r2
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b00b      	add	sp, #44	; 0x2c
 8000828:	bd90      	pop	{r4, r7, pc}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	40005800 	.word	0x40005800
 8000830:	40021000 	.word	0x40021000

08000834 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000838:	f000 faa0 	bl	8000d7c <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 800083c:	f000 f818 	bl	8000870 <SystemClock_Config>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000840:	f7ff ff26 	bl	8000690 <MX_GPIO_Init>
   MX_DMA_Init();
 8000844:	f7ff ff0e 	bl	8000664 <MX_DMA_Init>
   MX_I2C2_Init();
 8000848:	f7ff ff68 	bl	800071c <MX_I2C2_Init>
   MX_RTC_Init();
 800084c:	f000 f876 	bl	800093c <MX_RTC_Init>
   MX_USART1_UART_Init();
 8000850:	f000 f98c 	bl	8000b6c <MX_USART1_UART_Init>
   MX_TIM17_Init();
 8000854:	f000 f942 	bl	8000adc <MX_TIM17_Init>

   /* Initialize interrupts */
   MX_NVIC_Init();
 8000858:	f000 f856 	bl	8000908 <MX_NVIC_Init>
   /* USER CODE BEGIN 2 */
   HAL_TIM_Base_Start(&htim17);
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <main+0x38>)
 800085e:	0018      	movs	r0, r3
 8000860:	f002 f992 	bl	8002b88 <HAL_TIM_Base_Start>

   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   while(1)
   {
      SM_MainFunction();
 8000864:	f7ff fe4e 	bl	8000504 <SM_MainFunction>
 8000868:	e7fc      	b.n	8000864 <main+0x30>
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	20000138 	.word	0x20000138

08000870 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b093      	sub	sp, #76	; 0x4c
 8000874:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000876:	2414      	movs	r4, #20
 8000878:	193b      	adds	r3, r7, r4
 800087a:	0018      	movs	r0, r3
 800087c:	2334      	movs	r3, #52	; 0x34
 800087e:	001a      	movs	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f003 fde9 	bl	8004458 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	0018      	movs	r0, r3
 800088a:	2310      	movs	r3, #16
 800088c:	001a      	movs	r2, r3
 800088e:	2100      	movs	r1, #0
 8000890:	f003 fde2 	bl	8004458 <memset>

   /** Configure the main internal regulator output voltage
    */
   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	0018      	movs	r0, r3
 800089a:	f001 f9a1 	bl	8001be0 <HAL_PWREx_ControlVoltageScaling>

   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	220a      	movs	r2, #10
 80008a2:	601a      	str	r2, [r3, #0]
   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2280      	movs	r2, #128	; 0x80
 80008a8:	0052      	lsls	r2, r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
   RCC_OscInitStruct.HSIDiv              = RCC_HSI_DIV1;
 80008ac:	0021      	movs	r1, r4
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2240      	movs	r2, #64	; 0x40
 80008b8:	615a      	str	r2, [r3, #20]
   RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2201      	movs	r2, #1
 80008be:	619a      	str	r2, [r3, #24]
   RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 f9d5 	bl	8001c78 <HAL_RCC_OscConfig>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0x66>
   {
      Error_Handler();
 80008d2:	f000 f82e 	bl	8000932 <Error_Handler>
   }

   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	2207      	movs	r2, #7
 80008da:	601a      	str	r2, [r3, #0]
   RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
   RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]

   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	2100      	movs	r1, #0
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fcd0 	bl	8002298 <HAL_RCC_ClockConfig>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0x90>
   {
      Error_Handler();
 80008fc:	f000 f819 	bl	8000932 <Error_Handler>
   }
}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b013      	add	sp, #76	; 0x4c
 8000906:	bd90      	pop	{r4, r7, pc}

08000908 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
   /* DMA1_Channel1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2009      	movs	r0, #9
 8000912:	f000 fb65 	bl	8000fe0 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000916:	2009      	movs	r0, #9
 8000918:	f000 fb77 	bl	800100a <HAL_NVIC_EnableIRQ>
   /* USART1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800091c:	2200      	movs	r2, #0
 800091e:	2100      	movs	r1, #0
 8000920:	201b      	movs	r0, #27
 8000922:	f000 fb5d 	bl	8000fe0 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000926:	201b      	movs	r0, #27
 8000928:	f000 fb6f 	bl	800100a <HAL_NVIC_EnableIRQ>
}
 800092c:	46c0      	nop			; (mov r8, r8)
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}

08000932 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000932:	b580      	push	{r7, lr}
 8000934:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000936:	b672      	cpsid	i
}
 8000938:	46c0      	nop			; (mov r8, r8)
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 800093a:	e7fe      	b.n	800093a <Error_Handler+0x8>

0800093c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000940:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_RTC_Init+0x54>)
 8000942:	4a14      	ldr	r2, [pc, #80]	; (8000994 <MX_RTC_Init+0x58>)
 8000944:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_RTC_Init+0x54>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800094c:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_RTC_Init+0x54>)
 800094e:	227f      	movs	r2, #127	; 0x7f
 8000950:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_RTC_Init+0x54>)
 8000954:	22ff      	movs	r2, #255	; 0xff
 8000956:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <MX_RTC_Init+0x54>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_RTC_Init+0x54>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_RTC_Init+0x54>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800096a:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_RTC_Init+0x54>)
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	05d2      	lsls	r2, r2, #23
 8000970:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000972:	4b07      	ldr	r3, [pc, #28]	; (8000990 <MX_RTC_Init+0x54>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000978:	4b05      	ldr	r3, [pc, #20]	; (8000990 <MX_RTC_Init+0x54>)
 800097a:	0018      	movs	r0, r3
 800097c:	f001 ff5c 	bl	8002838 <HAL_RTC_Init>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000984:	f7ff ffd5 	bl	8000932 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	2000010c 	.word	0x2000010c
 8000994:	40002800 	.word	0x40002800

08000998 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b08b      	sub	sp, #44	; 0x2c
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	2410      	movs	r4, #16
 80009a2:	193b      	adds	r3, r7, r4
 80009a4:	0018      	movs	r0, r3
 80009a6:	2318      	movs	r3, #24
 80009a8:	001a      	movs	r2, r3
 80009aa:	2100      	movs	r1, #0
 80009ac:	f003 fd54 	bl	8004458 <memset>
  if(rtcHandle->Instance==RTC)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <HAL_RTC_MspInit+0x74>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d124      	bne.n	8000a04 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	2280      	movs	r2, #128	; 0x80
 80009be:	0292      	lsls	r2, r2, #10
 80009c0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80009c2:	193b      	adds	r3, r7, r4
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	0092      	lsls	r2, r2, #2
 80009c8:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ca:	193b      	adds	r3, r7, r4
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 fe0d 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80009d6:	f7ff ffac 	bl	8000932 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_RTC_MspInit+0x78>)
 80009dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_RTC_MspInit+0x78>)
 80009e0:	2180      	movs	r1, #128	; 0x80
 80009e2:	0209      	lsls	r1, r1, #8
 80009e4:	430a      	orrs	r2, r1
 80009e6:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_RTC_MspInit+0x78>)
 80009ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_RTC_MspInit+0x78>)
 80009ee:	2180      	movs	r1, #128	; 0x80
 80009f0:	00c9      	lsls	r1, r1, #3
 80009f2:	430a      	orrs	r2, r1
 80009f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_RTC_MspInit+0x78>)
 80009f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009fa:	2380      	movs	r3, #128	; 0x80
 80009fc:	00db      	lsls	r3, r3, #3
 80009fe:	4013      	ands	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	b00b      	add	sp, #44	; 0x2c
 8000a0a:	bd90      	pop	{r4, r7, pc}
 8000a0c:	40002800 	.word	0x40002800
 8000a10:	40021000 	.word	0x40021000

08000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x44>)
 8000a1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <HAL_MspInit+0x44>)
 8000a20:	2101      	movs	r1, #1
 8000a22:	430a      	orrs	r2, r1
 8000a24:	641a      	str	r2, [r3, #64]	; 0x40
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <HAL_MspInit+0x44>)
 8000a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x44>)
 8000a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_MspInit+0x44>)
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	0549      	lsls	r1, r1, #21
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <HAL_MspInit+0x44>)
 8000a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a44:	2380      	movs	r3, #128	; 0x80
 8000a46:	055b      	lsls	r3, r3, #21
 8000a48:	4013      	ands	r3, r2
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b002      	add	sp, #8
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	40021000 	.word	0x40021000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a80:	f000 f9e6 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <DMA1_Channel1_IRQHandler+0x14>)
 8000a92:	0018      	movs	r0, r3
 8000a94:	f000 fcb2 	bl	80013fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	20000218 	.word	0x20000218

08000aa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000aa8:	4b03      	ldr	r3, [pc, #12]	; (8000ab8 <USART1_IRQHandler+0x14>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f002 fa10 	bl	8002ed0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ab0:	46c0      	nop			; (mov r8, r8)
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	20000184 	.word	0x20000184

08000abc <TIM_GetTick>:
 *      Author: Marcin
 */
#include "main.h"
#include "supp.h"
uint16_t TIM_GetTick()
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
	return TIM17->CNT;
 8000ac0:	4b02      	ldr	r3, [pc, #8]	; (8000acc <TIM_GetTick+0x10>)
 8000ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac4:	b29b      	uxth	r3, r3
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40014800 	.word	0x40014800

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_TIM17_Init+0x44>)
 8000ae2:	4a10      	ldr	r2, [pc, #64]	; (8000b24 <MX_TIM17_Init+0x48>)
 8000ae4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_TIM17_Init+0x44>)
 8000ae8:	220f      	movs	r2, #15
 8000aea:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aec:	4b0c      	ldr	r3, [pc, #48]	; (8000b20 <MX_TIM17_Init+0x44>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000af2:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <MX_TIM17_Init+0x44>)
 8000af4:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <MX_TIM17_Init+0x4c>)
 8000af6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b09      	ldr	r3, [pc, #36]	; (8000b20 <MX_TIM17_Init+0x44>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000afe:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <MX_TIM17_Init+0x44>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <MX_TIM17_Init+0x44>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b0a:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <MX_TIM17_Init+0x44>)
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f001 ffe3 	bl	8002ad8 <HAL_TIM_Base_Init>
 8000b12:	1e03      	subs	r3, r0, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000b16:	f7ff ff0c 	bl	8000932 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20000138 	.word	0x20000138
 8000b24:	40014800 	.word	0x40014800
 8000b28:	0000ffff 	.word	0x0000ffff

08000b2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_TIM_Base_MspInit+0x38>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d10d      	bne.n	8000b5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	02c9      	lsls	r1, r1, #11
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	641a      	str	r2, [r3, #64]	; 0x40
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_TIM_Base_MspInit+0x3c>)
 8000b4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	02db      	lsls	r3, r3, #11
 8000b54:	4013      	ands	r3, r2
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b004      	add	sp, #16
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	40014800 	.word	0x40014800
 8000b68:	40021000 	.word	0x40021000

08000b6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b70:	4b23      	ldr	r3, [pc, #140]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000b72:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <MX_USART1_UART_Init+0x98>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b76:	4b22      	ldr	r3, [pc, #136]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000b78:	22e1      	movs	r2, #225	; 0xe1
 8000b7a:	0252      	lsls	r2, r2, #9
 8000b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b20      	ldr	r3, [pc, #128]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba8:	4b15      	ldr	r3, [pc, #84]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 f898 	bl	8002cec <HAL_UART_Init>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bc0:	f7ff feb7 	bl	8000932 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f003 fad9 	bl	8004180 <HAL_UARTEx_SetTxFifoThreshold>
 8000bce:	1e03      	subs	r3, r0, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000bd2:	f7ff feae 	bl	8000932 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f003 fb10 	bl	8004200 <HAL_UARTEx_SetRxFifoThreshold>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000be4:	f7ff fea5 	bl	8000932 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000be8:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <MX_USART1_UART_Init+0x94>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f003 fa8e 	bl	800410c <HAL_UARTEx_DisableFifoMode>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf4:	f7ff fe9d 	bl	8000932 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	20000184 	.word	0x20000184
 8000c04:	40013800 	.word	0x40013800

08000c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b091      	sub	sp, #68	; 0x44
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	232c      	movs	r3, #44	; 0x2c
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	0018      	movs	r0, r3
 8000c16:	2314      	movs	r3, #20
 8000c18:	001a      	movs	r2, r3
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	f003 fc1c 	bl	8004458 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	2414      	movs	r4, #20
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	0018      	movs	r0, r3
 8000c26:	2318      	movs	r3, #24
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f003 fc14 	bl	8004458 <memset>
  if(uartHandle->Instance==USART1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a37      	ldr	r2, [pc, #220]	; (8000d14 <HAL_UART_MspInit+0x10c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d167      	bne.n	8000d0a <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	2200      	movs	r2, #0
 8000c44:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c46:	193b      	adds	r3, r7, r4
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f001 fccf 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c52:	f7ff fe6e 	bl	8000932 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c56:	4b30      	ldr	r3, [pc, #192]	; (8000d18 <HAL_UART_MspInit+0x110>)
 8000c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c5a:	4b2f      	ldr	r3, [pc, #188]	; (8000d18 <HAL_UART_MspInit+0x110>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	01c9      	lsls	r1, r1, #7
 8000c60:	430a      	orrs	r2, r1
 8000c62:	641a      	str	r2, [r3, #64]	; 0x40
 8000c64:	4b2c      	ldr	r3, [pc, #176]	; (8000d18 <HAL_UART_MspInit+0x110>)
 8000c66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	01db      	lsls	r3, r3, #7
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c72:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <HAL_UART_MspInit+0x110>)
 8000c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c76:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <HAL_UART_MspInit+0x110>)
 8000c78:	2102      	movs	r1, #2
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c7e:	4b26      	ldr	r3, [pc, #152]	; (8000d18 <HAL_UART_MspInit+0x110>)
 8000c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c82:	2202      	movs	r2, #2
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000c8a:	212c      	movs	r1, #44	; 0x2c
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	22c0      	movs	r2, #192	; 0xc0
 8000c90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	2202      	movs	r2, #2
 8000c96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <HAL_UART_MspInit+0x114>)
 8000cae:	0019      	movs	r1, r3
 8000cb0:	0010      	movs	r0, r2
 8000cb2:	f000 fce5 	bl	8001680 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <HAL_UART_MspInit+0x11c>)
 8000cba:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000cbc:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000cbe:	2232      	movs	r2, #50	; 0x32
 8000cc0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cc2:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cce:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cd4:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cec:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 f9a8 	bl	8001044 <HAL_DMA_Init>
 8000cf4:	1e03      	subs	r3, r0, #0
 8000cf6:	d001      	beq.n	8000cfc <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000cf8:	f7ff fe1b 	bl	8000932 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2180      	movs	r1, #128	; 0x80
 8000d00:	4a07      	ldr	r2, [pc, #28]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000d02:	505a      	str	r2, [r3, r1]
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_UART_MspInit+0x118>)
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b011      	add	sp, #68	; 0x44
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	40013800 	.word	0x40013800
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	50000400 	.word	0x50000400
 8000d20:	20000218 	.word	0x20000218
 8000d24:	40020008 	.word	0x40020008

08000d28 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d2c:	f7ff fed0 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	; (8000d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <LoopForever+0xe>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	; (8000d74 <LoopForever+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d56:	f003 fb5b 	bl	8004410 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d5a:	f7ff fd6b 	bl	8000834 <main>

08000d5e <LoopForever>:

LoopForever:
  b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   r0, =_estack
 8000d60:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d6c:	08004528 	.word	0x08004528
  ldr r2, =_sbss
 8000d70:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d74:	20000278 	.word	0x20000278

08000d78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_IRQHandler>
	...

08000d7c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d82:	1dfb      	adds	r3, r7, #7
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <HAL_Init+0x3c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_Init+0x3c>)
 8000d8e:	2180      	movs	r1, #128	; 0x80
 8000d90:	0049      	lsls	r1, r1, #1
 8000d92:	430a      	orrs	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d96:	2003      	movs	r0, #3
 8000d98:	f000 f810 	bl	8000dbc <HAL_InitTick>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000da0:	1dfb      	adds	r3, r7, #7
 8000da2:	2201      	movs	r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
 8000da6:	e001      	b.n	8000dac <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000da8:	f7ff fe34 	bl	8000a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	0018      	movs	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	b002      	add	sp, #8
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40022000 	.word	0x40022000

08000dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	2200      	movs	r2, #0
 8000dca:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	; (8000e44 <HAL_InitTick+0x88>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d02b      	beq.n	8000e2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dd4:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_InitTick+0x8c>)
 8000dd6:	681c      	ldr	r4, [r3, #0]
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <HAL_InitTick+0x88>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	0019      	movs	r1, r3
 8000dde:	23fa      	movs	r3, #250	; 0xfa
 8000de0:	0098      	lsls	r0, r3, #2
 8000de2:	f7ff f98d 	bl	8000100 <__udivsi3>
 8000de6:	0003      	movs	r3, r0
 8000de8:	0019      	movs	r1, r3
 8000dea:	0020      	movs	r0, r4
 8000dec:	f7ff f988 	bl	8000100 <__udivsi3>
 8000df0:	0003      	movs	r3, r0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 f919 	bl	800102a <HAL_SYSTICK_Config>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d112      	bne.n	8000e22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	d80a      	bhi.n	8000e18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	2301      	movs	r3, #1
 8000e06:	425b      	negs	r3, r3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f000 f8e8 	bl	8000fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_InitTick+0x90>)
 8000e12:	687a      	ldr	r2, [r7, #4]
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	e00d      	b.n	8000e34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e18:	230f      	movs	r3, #15
 8000e1a:	18fb      	adds	r3, r7, r3
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e008      	b.n	8000e34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e22:	230f      	movs	r3, #15
 8000e24:	18fb      	adds	r3, r7, r3
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e003      	b.n	8000e34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e34:	230f      	movs	r3, #15
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781b      	ldrb	r3, [r3, #0]
}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b005      	add	sp, #20
 8000e40:	bd90      	pop	{r4, r7, pc}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	20000020 	.word	0x20000020
 8000e48:	20000018 	.word	0x20000018
 8000e4c:	2000001c 	.word	0x2000001c

08000e50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_IncTick+0x1c>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	001a      	movs	r2, r3
 8000e5a:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <HAL_IncTick+0x20>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	18d2      	adds	r2, r2, r3
 8000e60:	4b03      	ldr	r3, [pc, #12]	; (8000e70 <HAL_IncTick+0x20>)
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000020 	.word	0x20000020
 8000e70:	20000274 	.word	0x20000274

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b02      	ldr	r3, [pc, #8]	; (8000e84 <HAL_GetTick+0x10>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	20000274 	.word	0x20000274

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	0002      	movs	r2, r0
 8000e90:	1dfb      	adds	r3, r7, #7
 8000e92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	1dfb      	adds	r3, r7, #7
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b7f      	cmp	r3, #127	; 0x7f
 8000e9a:	d809      	bhi.n	8000eb0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	231f      	movs	r3, #31
 8000ea4:	401a      	ands	r2, r3
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <__NVIC_EnableIRQ+0x30>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	4091      	lsls	r1, r2
 8000eac:	000a      	movs	r2, r1
 8000eae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b002      	add	sp, #8
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	e000e100 	.word	0xe000e100

08000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ebc:	b590      	push	{r4, r7, lr}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	0002      	movs	r2, r0
 8000ec4:	6039      	str	r1, [r7, #0]
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	1dfb      	adds	r3, r7, #7
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b7f      	cmp	r3, #127	; 0x7f
 8000ed0:	d828      	bhi.n	8000f24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed2:	4a2f      	ldr	r2, [pc, #188]	; (8000f90 <__NVIC_SetPriority+0xd4>)
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	33c0      	adds	r3, #192	; 0xc0
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	589b      	ldr	r3, [r3, r2]
 8000ee2:	1dfa      	adds	r2, r7, #7
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	2203      	movs	r2, #3
 8000eea:	400a      	ands	r2, r1
 8000eec:	00d2      	lsls	r2, r2, #3
 8000eee:	21ff      	movs	r1, #255	; 0xff
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	22ff      	movs	r2, #255	; 0xff
 8000f00:	401a      	ands	r2, r3
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	0018      	movs	r0, r3
 8000f08:	2303      	movs	r3, #3
 8000f0a:	4003      	ands	r3, r0
 8000f0c:	00db      	lsls	r3, r3, #3
 8000f0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f10:	481f      	ldr	r0, [pc, #124]	; (8000f90 <__NVIC_SetPriority+0xd4>)
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	b25b      	sxtb	r3, r3
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	33c0      	adds	r3, #192	; 0xc0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f22:	e031      	b.n	8000f88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f26:	1dfb      	adds	r3, r7, #7
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	0019      	movs	r1, r3
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	400b      	ands	r3, r1
 8000f30:	3b08      	subs	r3, #8
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3306      	adds	r3, #6
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	18d3      	adds	r3, r2, r3
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1dfa      	adds	r2, r7, #7
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	0011      	movs	r1, r2
 8000f44:	2203      	movs	r2, #3
 8000f46:	400a      	ands	r2, r1
 8000f48:	00d2      	lsls	r2, r2, #3
 8000f4a:	21ff      	movs	r1, #255	; 0xff
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	000a      	movs	r2, r1
 8000f50:	43d2      	mvns	r2, r2
 8000f52:	401a      	ands	r2, r3
 8000f54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	22ff      	movs	r2, #255	; 0xff
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	1dfb      	adds	r3, r7, #7
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	2303      	movs	r3, #3
 8000f66:	4003      	ands	r3, r0
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <__NVIC_SetPriority+0xd8>)
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	001c      	movs	r4, r3
 8000f74:	230f      	movs	r3, #15
 8000f76:	4023      	ands	r3, r4
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	3306      	adds	r3, #6
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	18c3      	adds	r3, r0, r3
 8000f84:	3304      	adds	r3, #4
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	46c0      	nop			; (mov r8, r8)
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	b003      	add	sp, #12
 8000f8e:	bd90      	pop	{r4, r7, pc}
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	1e5a      	subs	r2, r3, #1
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	045b      	lsls	r3, r3, #17
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d301      	bcc.n	8000fb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fac:	2301      	movs	r3, #1
 8000fae:	e010      	b.n	8000fd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <SysTick_Config+0x44>)
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	3a01      	subs	r2, #1
 8000fb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb8:	2301      	movs	r3, #1
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2103      	movs	r1, #3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff ff7c 	bl	8000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x44>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x44>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			; (mov r8, r8)
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	210f      	movs	r1, #15
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	1c02      	adds	r2, r0, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	187b      	adds	r3, r7, r1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	b25b      	sxtb	r3, r3
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff ff5d 	bl	8000ebc <__NVIC_SetPriority>
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b004      	add	sp, #16
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	0002      	movs	r2, r0
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b25b      	sxtb	r3, r3
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff ff33 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff ffaf 	bl	8000f98 <SysTick_Config>
 800103a:	0003      	movs	r3, r0
}
 800103c:	0018      	movs	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	b002      	add	sp, #8
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e077      	b.n	8001146 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3d      	ldr	r2, [pc, #244]	; (8001150 <HAL_DMA_Init+0x10c>)
 800105c:	4694      	mov	ip, r2
 800105e:	4463      	add	r3, ip
 8001060:	2114      	movs	r1, #20
 8001062:	0018      	movs	r0, r3
 8001064:	f7ff f84c 	bl	8000100 <__udivsi3>
 8001068:	0003      	movs	r3, r0
 800106a:	009a      	lsls	r2, r3, #2
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2225      	movs	r2, #37	; 0x25
 8001074:	2102      	movs	r1, #2
 8001076:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4934      	ldr	r1, [pc, #208]	; (8001154 <HAL_DMA_Init+0x110>)
 8001084:	400a      	ands	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	431a      	orrs	r2, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	431a      	orrs	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	431a      	orrs	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	431a      	orrs	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	0018      	movs	r0, r3
 80010c2:	f000 fa8d 	bl	80015e0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689a      	ldr	r2, [r3, #8]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	01db      	lsls	r3, r3, #7
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d102      	bne.n	80010d8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e0:	213f      	movs	r1, #63	; 0x3f
 80010e2:	400a      	ands	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80010ee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d011      	beq.n	800111c <HAL_DMA_Init+0xd8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b04      	cmp	r3, #4
 80010fe:	d80d      	bhi.n	800111c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	0018      	movs	r0, r3
 8001104:	f000 fa98 	bl	8001638 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	e008      	b.n	800112e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2200      	movs	r2, #0
 8001120:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2225      	movs	r2, #37	; 0x25
 8001138:	2101      	movs	r1, #1
 800113a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2224      	movs	r2, #36	; 0x24
 8001140:	2100      	movs	r1, #0
 8001142:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	bffdfff8 	.word	0xbffdfff8
 8001154:	ffff800f 	.word	0xffff800f

08001158 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001166:	2317      	movs	r3, #23
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2224      	movs	r2, #36	; 0x24
 8001172:	5c9b      	ldrb	r3, [r3, r2]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d101      	bne.n	800117c <HAL_DMA_Start_IT+0x24>
 8001178:	2302      	movs	r3, #2
 800117a:	e06f      	b.n	800125c <HAL_DMA_Start_IT+0x104>
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2224      	movs	r2, #36	; 0x24
 8001180:	2101      	movs	r1, #1
 8001182:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2225      	movs	r2, #37	; 0x25
 8001188:	5c9b      	ldrb	r3, [r3, r2]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b01      	cmp	r3, #1
 800118e:	d157      	bne.n	8001240 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2225      	movs	r2, #37	; 0x25
 8001194:	2102      	movs	r1, #2
 8001196:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2101      	movs	r1, #1
 80011aa:	438a      	bics	r2, r1
 80011ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	68b9      	ldr	r1, [r7, #8]
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f000 f9d3 	bl	8001560 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d008      	beq.n	80011d4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	210e      	movs	r1, #14
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	e00f      	b.n	80011f4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2104      	movs	r1, #4
 80011e0:	438a      	bics	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	210a      	movs	r1, #10
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	025b      	lsls	r3, r3, #9
 80011fe:	4013      	ands	r3, r2
 8001200:	d008      	beq.n	8001214 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0049      	lsls	r1, r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001226:	2180      	movs	r1, #128	; 0x80
 8001228:	0049      	lsls	r1, r1, #1
 800122a:	430a      	orrs	r2, r1
 800122c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2101      	movs	r1, #1
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	e00a      	b.n	8001256 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	2224      	movs	r2, #36	; 0x24
 800124a:	2100      	movs	r1, #0
 800124c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800124e:	2317      	movs	r3, #23
 8001250:	18fb      	adds	r3, r7, r3
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001256:	2317      	movs	r3, #23
 8001258:	18fb      	adds	r3, r7, r3
 800125a:	781b      	ldrb	r3, [r3, #0]
}
 800125c:	0018      	movs	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	b006      	add	sp, #24
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e050      	b.n	8001318 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2225      	movs	r2, #37	; 0x25
 800127a:	5c9b      	ldrb	r3, [r3, r2]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d008      	beq.n	8001294 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2204      	movs	r2, #4
 8001286:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2224      	movs	r2, #36	; 0x24
 800128c:	2100      	movs	r1, #0
 800128e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e041      	b.n	8001318 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	210e      	movs	r1, #14
 80012a0:	438a      	bics	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ae:	491c      	ldr	r1, [pc, #112]	; (8001320 <HAL_DMA_Abort+0xbc>)
 80012b0:	400a      	ands	r2, r1
 80012b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2101      	movs	r1, #1
 80012c0:	438a      	bics	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_DMA_Abort+0xc0>)
 80012c6:	6859      	ldr	r1, [r3, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012cc:	221c      	movs	r2, #28
 80012ce:	4013      	ands	r3, r2
 80012d0:	2201      	movs	r2, #1
 80012d2:	409a      	lsls	r2, r3
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_DMA_Abort+0xc0>)
 80012d6:	430a      	orrs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80012e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d00c      	beq.n	8001306 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f6:	490a      	ldr	r1, [pc, #40]	; (8001320 <HAL_DMA_Abort+0xbc>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001304:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2225      	movs	r2, #37	; 0x25
 800130a:	2101      	movs	r1, #1
 800130c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2224      	movs	r2, #36	; 0x24
 8001312:	2100      	movs	r1, #0
 8001314:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}
 8001320:	fffffeff 	.word	0xfffffeff
 8001324:	40020000 	.word	0x40020000

08001328 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001330:	210f      	movs	r1, #15
 8001332:	187b      	adds	r3, r7, r1
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2225      	movs	r2, #37	; 0x25
 800133c:	5c9b      	ldrb	r3, [r3, r2]
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d006      	beq.n	8001352 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2204      	movs	r2, #4
 8001348:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2201      	movs	r2, #1
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e049      	b.n	80013e6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	210e      	movs	r1, #14
 800135e:	438a      	bics	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2101      	movs	r1, #1
 800136e:	438a      	bics	r2, r1
 8001370:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	491d      	ldr	r1, [pc, #116]	; (80013f4 <HAL_DMA_Abort_IT+0xcc>)
 800137e:	400a      	ands	r2, r1
 8001380:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_DMA_Abort_IT+0xd0>)
 8001384:	6859      	ldr	r1, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	221c      	movs	r2, #28
 800138c:	4013      	ands	r3, r2
 800138e:	2201      	movs	r2, #1
 8001390:	409a      	lsls	r2, r3
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_DMA_Abort_IT+0xd0>)
 8001394:	430a      	orrs	r2, r1
 8001396:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80013a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00c      	beq.n	80013c4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b4:	490f      	ldr	r1, [pc, #60]	; (80013f4 <HAL_DMA_Abort_IT+0xcc>)
 80013b6:	400a      	ands	r2, r1
 80013b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80013c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2225      	movs	r2, #37	; 0x25
 80013c8:	2101      	movs	r1, #1
 80013ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2224      	movs	r2, #36	; 0x24
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d004      	beq.n	80013e6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	0010      	movs	r0, r2
 80013e4:	4798      	blx	r3
    }
  }
  return status;
 80013e6:	230f      	movs	r3, #15
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	781b      	ldrb	r3, [r3, #0]
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b004      	add	sp, #16
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	fffffeff 	.word	0xfffffeff
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001404:	4b55      	ldr	r3, [pc, #340]	; (800155c <HAL_DMA_IRQHandler+0x160>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	221c      	movs	r2, #28
 8001418:	4013      	ands	r3, r2
 800141a:	2204      	movs	r2, #4
 800141c:	409a      	lsls	r2, r3
 800141e:	0013      	movs	r3, r2
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	d027      	beq.n	8001476 <HAL_DMA_IRQHandler+0x7a>
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2204      	movs	r2, #4
 800142a:	4013      	ands	r3, r2
 800142c:	d023      	beq.n	8001476 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2220      	movs	r2, #32
 8001436:	4013      	ands	r3, r2
 8001438:	d107      	bne.n	800144a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2104      	movs	r1, #4
 8001446:	438a      	bics	r2, r1
 8001448:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800144a:	4b44      	ldr	r3, [pc, #272]	; (800155c <HAL_DMA_IRQHandler+0x160>)
 800144c:	6859      	ldr	r1, [r3, #4]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	221c      	movs	r2, #28
 8001454:	4013      	ands	r3, r2
 8001456:	2204      	movs	r2, #4
 8001458:	409a      	lsls	r2, r3
 800145a:	4b40      	ldr	r3, [pc, #256]	; (800155c <HAL_DMA_IRQHandler+0x160>)
 800145c:	430a      	orrs	r2, r1
 800145e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	2b00      	cmp	r3, #0
 8001466:	d100      	bne.n	800146a <HAL_DMA_IRQHandler+0x6e>
 8001468:	e073      	b.n	8001552 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	0010      	movs	r0, r2
 8001472:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001474:	e06d      	b.n	8001552 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	221c      	movs	r2, #28
 800147c:	4013      	ands	r3, r2
 800147e:	2202      	movs	r2, #2
 8001480:	409a      	lsls	r2, r3
 8001482:	0013      	movs	r3, r2
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	4013      	ands	r3, r2
 8001488:	d02e      	beq.n	80014e8 <HAL_DMA_IRQHandler+0xec>
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	d02a      	beq.n	80014e8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2220      	movs	r2, #32
 800149a:	4013      	ands	r3, r2
 800149c:	d10b      	bne.n	80014b6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	210a      	movs	r1, #10
 80014aa:	438a      	bics	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2225      	movs	r2, #37	; 0x25
 80014b2:	2101      	movs	r1, #1
 80014b4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <HAL_DMA_IRQHandler+0x160>)
 80014b8:	6859      	ldr	r1, [r3, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	221c      	movs	r2, #28
 80014c0:	4013      	ands	r3, r2
 80014c2:	2202      	movs	r2, #2
 80014c4:	409a      	lsls	r2, r3
 80014c6:	4b25      	ldr	r3, [pc, #148]	; (800155c <HAL_DMA_IRQHandler+0x160>)
 80014c8:	430a      	orrs	r2, r1
 80014ca:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2224      	movs	r2, #36	; 0x24
 80014d0:	2100      	movs	r1, #0
 80014d2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d03a      	beq.n	8001552 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	0010      	movs	r0, r2
 80014e4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80014e6:	e034      	b.n	8001552 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	221c      	movs	r2, #28
 80014ee:	4013      	ands	r3, r2
 80014f0:	2208      	movs	r2, #8
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4013      	ands	r3, r2
 80014fa:	d02b      	beq.n	8001554 <HAL_DMA_IRQHandler+0x158>
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2208      	movs	r2, #8
 8001500:	4013      	ands	r3, r2
 8001502:	d027      	beq.n	8001554 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	210e      	movs	r1, #14
 8001510:	438a      	bics	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <HAL_DMA_IRQHandler+0x160>)
 8001516:	6859      	ldr	r1, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	221c      	movs	r2, #28
 800151e:	4013      	ands	r3, r2
 8001520:	2201      	movs	r2, #1
 8001522:	409a      	lsls	r2, r3
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <HAL_DMA_IRQHandler+0x160>)
 8001526:	430a      	orrs	r2, r1
 8001528:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2225      	movs	r2, #37	; 0x25
 8001534:	2101      	movs	r1, #1
 8001536:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2224      	movs	r2, #36	; 0x24
 800153c:	2100      	movs	r1, #0
 800153e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	2b00      	cmp	r3, #0
 8001546:	d005      	beq.n	8001554 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154c:	687a      	ldr	r2, [r7, #4]
 800154e:	0010      	movs	r0, r2
 8001550:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46c0      	nop			; (mov r8, r8)
}
 8001556:	46bd      	mov	sp, r7
 8001558:	b004      	add	sp, #16
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40020000 	.word	0x40020000

08001560 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001576:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157c:	2b00      	cmp	r3, #0
 800157e:	d004      	beq.n	800158a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001588:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800158a:	4b14      	ldr	r3, [pc, #80]	; (80015dc <DMA_SetConfig+0x7c>)
 800158c:	6859      	ldr	r1, [r3, #4]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	221c      	movs	r2, #28
 8001594:	4013      	ands	r3, r2
 8001596:	2201      	movs	r2, #1
 8001598:	409a      	lsls	r2, r3
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <DMA_SetConfig+0x7c>)
 800159c:	430a      	orrs	r2, r1
 800159e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d108      	bne.n	80015c2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80015c0:	e007      	b.n	80015d2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	60da      	str	r2, [r3, #12]
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	40020000 	.word	0x40020000

080015e0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80015f0:	4694      	mov	ip, r2
 80015f2:	4463      	add	r3, ip
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	001a      	movs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	001a      	movs	r2, r3
 8001602:	23ff      	movs	r3, #255	; 0xff
 8001604:	4013      	ands	r3, r2
 8001606:	3b08      	subs	r3, #8
 8001608:	2114      	movs	r1, #20
 800160a:	0018      	movs	r0, r3
 800160c:	f7fe fd78 	bl	8000100 <__udivsi3>
 8001610:	0003      	movs	r3, r0
 8001612:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a07      	ldr	r2, [pc, #28]	; (8001634 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001618:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	221f      	movs	r2, #31
 800161e:	4013      	ands	r3, r2
 8001620:	2201      	movs	r2, #1
 8001622:	409a      	lsls	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b004      	add	sp, #16
 800162e:	bd80      	pop	{r7, pc}
 8001630:	10008200 	.word	0x10008200
 8001634:	40020880 	.word	0x40020880

08001638 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	223f      	movs	r2, #63	; 0x3f
 8001646:	4013      	ands	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800164e:	4694      	mov	ip, r2
 8001650:	4463      	add	r3, ip
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	001a      	movs	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a07      	ldr	r2, [pc, #28]	; (800167c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800165e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3b01      	subs	r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	4013      	ands	r3, r2
 8001668:	2201      	movs	r2, #1
 800166a:	409a      	lsls	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001670:	46c0      	nop			; (mov r8, r8)
 8001672:	46bd      	mov	sp, r7
 8001674:	b004      	add	sp, #16
 8001676:	bd80      	pop	{r7, pc}
 8001678:	1000823f 	.word	0x1000823f
 800167c:	40020940 	.word	0x40020940

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168e:	e147      	b.n	8001920 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4091      	lsls	r1, r2
 800169a:	000a      	movs	r2, r1
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d100      	bne.n	80016a8 <HAL_GPIO_Init+0x28>
 80016a6:	e138      	b.n	800191a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2203      	movs	r2, #3
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d005      	beq.n	80016c0 <HAL_GPIO_Init+0x40>
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	2203      	movs	r2, #3
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d130      	bne.n	8001722 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	409a      	lsls	r2, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	43da      	mvns	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	409a      	lsls	r2, r3
 80016e2:	0013      	movs	r3, r2
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f6:	2201      	movs	r2, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	409a      	lsls	r2, r3
 80016fc:	0013      	movs	r3, r2
 80016fe:	43da      	mvns	r2, r3
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	2201      	movs	r2, #1
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
 8001714:	0013      	movs	r3, r2
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2203      	movs	r2, #3
 8001728:	4013      	ands	r3, r2
 800172a:	2b03      	cmp	r3, #3
 800172c:	d017      	beq.n	800175e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	409a      	lsls	r2, r3
 800173c:	0013      	movs	r3, r2
 800173e:	43da      	mvns	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2203      	movs	r2, #3
 8001764:	4013      	ands	r3, r2
 8001766:	2b02      	cmp	r3, #2
 8001768:	d123      	bne.n	80017b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	58d3      	ldr	r3, [r2, r3]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	2207      	movs	r2, #7
 800177c:	4013      	ands	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	409a      	lsls	r2, r3
 8001784:	0013      	movs	r3, r2
 8001786:	43da      	mvns	r2, r3
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2107      	movs	r1, #7
 8001796:	400b      	ands	r3, r1
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	409a      	lsls	r2, r3
 800179c:	0013      	movs	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	6939      	ldr	r1, [r7, #16]
 80017b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	409a      	lsls	r2, r3
 80017c0:	0013      	movs	r3, r2
 80017c2:	43da      	mvns	r2, r3
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2203      	movs	r2, #3
 80017d0:	401a      	ands	r2, r3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	23c0      	movs	r3, #192	; 0xc0
 80017ec:	029b      	lsls	r3, r3, #10
 80017ee:	4013      	ands	r3, r2
 80017f0:	d100      	bne.n	80017f4 <HAL_GPIO_Init+0x174>
 80017f2:	e092      	b.n	800191a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80017f4:	4a50      	ldr	r2, [pc, #320]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3318      	adds	r3, #24
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	589b      	ldr	r3, [r3, r2]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2203      	movs	r2, #3
 8001806:	4013      	ands	r3, r2
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	220f      	movs	r2, #15
 800180c:	409a      	lsls	r2, r3
 800180e:	0013      	movs	r3, r2
 8001810:	43da      	mvns	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	23a0      	movs	r3, #160	; 0xa0
 800181c:	05db      	lsls	r3, r3, #23
 800181e:	429a      	cmp	r2, r3
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x1ca>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a45      	ldr	r2, [pc, #276]	; (800193c <HAL_GPIO_Init+0x2bc>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x1c6>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a44      	ldr	r2, [pc, #272]	; (8001940 <HAL_GPIO_Init+0x2c0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x1c2>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a43      	ldr	r2, [pc, #268]	; (8001944 <HAL_GPIO_Init+0x2c4>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x1be>
 800183a:	2303      	movs	r3, #3
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x1cc>
 800183e:	2305      	movs	r3, #5
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x1cc>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x1cc>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x1cc>
 800184a:	2300      	movs	r3, #0
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	2103      	movs	r1, #3
 8001850:	400a      	ands	r2, r1
 8001852:	00d2      	lsls	r2, r2, #3
 8001854:	4093      	lsls	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800185c:	4936      	ldr	r1, [pc, #216]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3318      	adds	r3, #24
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800186a:	4b33      	ldr	r3, [pc, #204]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	2380      	movs	r3, #128	; 0x80
 8001880:	035b      	lsls	r3, r3, #13
 8001882:	4013      	ands	r3, r2
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001894:	4b28      	ldr	r3, [pc, #160]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43da      	mvns	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	039b      	lsls	r3, r3, #14
 80018ac:	4013      	ands	r3, r2
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 80018c0:	2384      	movs	r3, #132	; 0x84
 80018c2:	58d3      	ldr	r3, [r2, r3]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43da      	mvns	r2, r3
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	029b      	lsls	r3, r3, #10
 80018d8:	4013      	ands	r3, r2
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018e4:	4914      	ldr	r1, [pc, #80]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 80018e6:	2284      	movs	r2, #132	; 0x84
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80018ec:	4a12      	ldr	r2, [pc, #72]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	58d3      	ldr	r3, [r2, r3]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43da      	mvns	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	2380      	movs	r3, #128	; 0x80
 8001904:	025b      	lsls	r3, r3, #9
 8001906:	4013      	ands	r3, r2
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001912:	4909      	ldr	r1, [pc, #36]	; (8001938 <HAL_GPIO_Init+0x2b8>)
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	40da      	lsrs	r2, r3
 8001928:	1e13      	subs	r3, r2, #0
 800192a:	d000      	beq.n	800192e <HAL_GPIO_Init+0x2ae>
 800192c:	e6b0      	b.n	8001690 <HAL_GPIO_Init+0x10>
  }
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46c0      	nop			; (mov r8, r8)
 8001932:	46bd      	mov	sp, r7
 8001934:	b006      	add	sp, #24
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40021800 	.word	0x40021800
 800193c:	50000400 	.word	0x50000400
 8001940:	50000800 	.word	0x50000800
 8001944:	50000c00 	.word	0x50000c00

08001948 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	0008      	movs	r0, r1
 8001952:	0011      	movs	r1, r2
 8001954:	1cbb      	adds	r3, r7, #2
 8001956:	1c02      	adds	r2, r0, #0
 8001958:	801a      	strh	r2, [r3, #0]
 800195a:	1c7b      	adds	r3, r7, #1
 800195c:	1c0a      	adds	r2, r1, #0
 800195e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001960:	1c7b      	adds	r3, r7, #1
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d004      	beq.n	8001972 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001968:	1cbb      	adds	r3, r7, #2
 800196a:	881a      	ldrh	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001970:	e003      	b.n	800197a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001972:	1cbb      	adds	r3, r7, #2
 8001974:	881a      	ldrh	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	629a      	str	r2, [r3, #40]	; 0x28
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e082      	b.n	8001a9c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2241      	movs	r2, #65	; 0x41
 800199a:	5c9b      	ldrb	r3, [r3, r2]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d107      	bne.n	80019b2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2240      	movs	r2, #64	; 0x40
 80019a6:	2100      	movs	r1, #0
 80019a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f7fe fef5 	bl	800079c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2241      	movs	r2, #65	; 0x41
 80019b6:	2124      	movs	r1, #36	; 0x24
 80019b8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2101      	movs	r1, #1
 80019c6:	438a      	bics	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4934      	ldr	r1, [pc, #208]	; (8001aa4 <HAL_I2C_Init+0x120>)
 80019d4:	400a      	ands	r2, r1
 80019d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4931      	ldr	r1, [pc, #196]	; (8001aa8 <HAL_I2C_Init+0x124>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	0209      	lsls	r1, r1, #8
 80019fc:	430a      	orrs	r2, r1
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	e007      	b.n	8001a12 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2184      	movs	r1, #132	; 0x84
 8001a0c:	0209      	lsls	r1, r1, #8
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d104      	bne.n	8001a24 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2280      	movs	r2, #128	; 0x80
 8001a20:	0112      	lsls	r2, r2, #4
 8001a22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	491f      	ldr	r1, [pc, #124]	; (8001aac <HAL_I2C_Init+0x128>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	491a      	ldr	r1, [pc, #104]	; (8001aa8 <HAL_I2C_Init+0x124>)
 8001a40:	400a      	ands	r2, r1
 8001a42:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691a      	ldr	r2, [r3, #16]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69d9      	ldr	r1, [r3, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	430a      	orrs	r2, r1
 8001a6c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2101      	movs	r1, #1
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2241      	movs	r2, #65	; 0x41
 8001a88:	2120      	movs	r1, #32
 8001a8a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2242      	movs	r2, #66	; 0x42
 8001a96:	2100      	movs	r1, #0
 8001a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	0018      	movs	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	f0ffffff 	.word	0xf0ffffff
 8001aa8:	ffff7fff 	.word	0xffff7fff
 8001aac:	02008000 	.word	0x02008000

08001ab0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2241      	movs	r2, #65	; 0x41
 8001abe:	5c9b      	ldrb	r3, [r3, r2]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	d138      	bne.n	8001b38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2240      	movs	r2, #64	; 0x40
 8001aca:	5c9b      	ldrb	r3, [r3, r2]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e032      	b.n	8001b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2240      	movs	r2, #64	; 0x40
 8001ad8:	2101      	movs	r1, #1
 8001ada:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2241      	movs	r2, #65	; 0x41
 8001ae0:	2124      	movs	r1, #36	; 0x24
 8001ae2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2101      	movs	r1, #1
 8001af0:	438a      	bics	r2, r1
 8001af2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4911      	ldr	r1, [pc, #68]	; (8001b44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b00:	400a      	ands	r2, r1
 8001b02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6819      	ldr	r1, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2101      	movs	r1, #1
 8001b20:	430a      	orrs	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2241      	movs	r2, #65	; 0x41
 8001b28:	2120      	movs	r1, #32
 8001b2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	2100      	movs	r1, #0
 8001b32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b34:	2300      	movs	r3, #0
 8001b36:	e000      	b.n	8001b3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b38:	2302      	movs	r3, #2
  }
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			; (mov r8, r8)
 8001b44:	ffffefff 	.word	0xffffefff

08001b48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2241      	movs	r2, #65	; 0x41
 8001b56:	5c9b      	ldrb	r3, [r3, r2]
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	d139      	bne.n	8001bd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2240      	movs	r2, #64	; 0x40
 8001b62:	5c9b      	ldrb	r3, [r3, r2]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e033      	b.n	8001bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2240      	movs	r2, #64	; 0x40
 8001b70:	2101      	movs	r1, #1
 8001b72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2241      	movs	r2, #65	; 0x41
 8001b78:	2124      	movs	r1, #36	; 0x24
 8001b7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2101      	movs	r1, #1
 8001b88:	438a      	bics	r2, r1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4a11      	ldr	r2, [pc, #68]	; (8001bdc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68fa      	ldr	r2, [r7, #12]
 8001bac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2101      	movs	r1, #1
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2241      	movs	r2, #65	; 0x41
 8001bc2:	2120      	movs	r1, #32
 8001bc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2240      	movs	r2, #64	; 0x40
 8001bca:	2100      	movs	r1, #0
 8001bcc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bd2:	2302      	movs	r3, #2
  }
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b004      	add	sp, #16
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	fffff0ff 	.word	0xfffff0ff

08001be0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	; (8001c54 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d11f      	bne.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	0013      	movs	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	189b      	adds	r3, r3, r2
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	4912      	ldr	r1, [pc, #72]	; (8001c5c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7fe fa74 	bl	8000100 <__udivsi3>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c1e:	e008      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	e001      	b.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e009      	b.n	8001c46 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d0ed      	beq.n	8001c20 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b004      	add	sp, #16
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	40007000 	.word	0x40007000
 8001c54:	fffff9ff 	.word	0xfffff9ff
 8001c58:	20000018 	.word	0x20000018
 8001c5c:	000f4240 	.word	0x000f4240

08001c60 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	23e0      	movs	r3, #224	; 0xe0
 8001c6a:	01db      	lsls	r3, r3, #7
 8001c6c:	4013      	ands	r3, r2
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e2f3      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	d100      	bne.n	8001c96 <HAL_RCC_OscConfig+0x1e>
 8001c94:	e07c      	b.n	8001d90 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c96:	4bc3      	ldr	r3, [pc, #780]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2238      	movs	r2, #56	; 0x38
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca0:	4bc0      	ldr	r3, [pc, #768]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	2b10      	cmp	r3, #16
 8001cae:	d102      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x3e>
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d002      	beq.n	8001cbc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d10b      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cbc:	4bb9      	ldr	r3, [pc, #740]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	2380      	movs	r3, #128	; 0x80
 8001cc2:	029b      	lsls	r3, r3, #10
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d062      	beq.n	8001d8e <HAL_RCC_OscConfig+0x116>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d15e      	bne.n	8001d8e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e2ce      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d107      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x78>
 8001ce0:	4bb0      	ldr	r3, [pc, #704]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4baf      	ldr	r3, [pc, #700]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	0249      	lsls	r1, r1, #9
 8001cea:	430a      	orrs	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	e020      	b.n	8001d32 <HAL_RCC_OscConfig+0xba>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	23a0      	movs	r3, #160	; 0xa0
 8001cf6:	02db      	lsls	r3, r3, #11
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d10e      	bne.n	8001d1a <HAL_RCC_OscConfig+0xa2>
 8001cfc:	4ba9      	ldr	r3, [pc, #676]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4ba8      	ldr	r3, [pc, #672]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	2180      	movs	r1, #128	; 0x80
 8001d04:	02c9      	lsls	r1, r1, #11
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]
 8001d0a:	4ba6      	ldr	r3, [pc, #664]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4ba5      	ldr	r3, [pc, #660]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d10:	2180      	movs	r1, #128	; 0x80
 8001d12:	0249      	lsls	r1, r1, #9
 8001d14:	430a      	orrs	r2, r1
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e00b      	b.n	8001d32 <HAL_RCC_OscConfig+0xba>
 8001d1a:	4ba2      	ldr	r3, [pc, #648]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	4ba1      	ldr	r3, [pc, #644]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d20:	49a1      	ldr	r1, [pc, #644]	; (8001fa8 <HAL_RCC_OscConfig+0x330>)
 8001d22:	400a      	ands	r2, r1
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	4b9f      	ldr	r3, [pc, #636]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	4b9e      	ldr	r3, [pc, #632]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	499f      	ldr	r1, [pc, #636]	; (8001fac <HAL_RCC_OscConfig+0x334>)
 8001d2e:	400a      	ands	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d014      	beq.n	8001d64 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3a:	f7ff f89b 	bl	8000e74 <HAL_GetTick>
 8001d3e:	0003      	movs	r3, r0
 8001d40:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff f896 	bl	8000e74 <HAL_GetTick>
 8001d48:	0002      	movs	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e28d      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d56:	4b93      	ldr	r3, [pc, #588]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	2380      	movs	r3, #128	; 0x80
 8001d5c:	029b      	lsls	r3, r3, #10
 8001d5e:	4013      	ands	r3, r2
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0xcc>
 8001d62:	e015      	b.n	8001d90 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7ff f886 	bl	8000e74 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d6c:	e008      	b.n	8001d80 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6e:	f7ff f881 	bl	8000e74 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e278      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d80:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d1f0      	bne.n	8001d6e <HAL_RCC_OscConfig+0xf6>
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d8e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2202      	movs	r2, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d100      	bne.n	8001d9c <HAL_RCC_OscConfig+0x124>
 8001d9a:	e099      	b.n	8001ed0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d9c:	4b81      	ldr	r3, [pc, #516]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2238      	movs	r2, #56	; 0x38
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001da6:	4b7f      	ldr	r3, [pc, #508]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2203      	movs	r2, #3
 8001dac:	4013      	ands	r3, r2
 8001dae:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d102      	bne.n	8001dbc <HAL_RCC_OscConfig+0x144>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d002      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d135      	bne.n	8001e2e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc2:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	00db      	lsls	r3, r3, #3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d005      	beq.n	8001dda <HAL_RCC_OscConfig+0x162>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d101      	bne.n	8001dda <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e24b      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	4a74      	ldr	r2, [pc, #464]	; (8001fb0 <HAL_RCC_OscConfig+0x338>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	0019      	movs	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	021a      	lsls	r2, r3, #8
 8001dea:	4b6e      	ldr	r3, [pc, #440]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d112      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001df6:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a6e      	ldr	r2, [pc, #440]	; (8001fb4 <HAL_RCC_OscConfig+0x33c>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691a      	ldr	r2, [r3, #16]
 8001e04:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e0a:	4b66      	ldr	r3, [pc, #408]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0adb      	lsrs	r3, r3, #11
 8001e10:	2207      	movs	r2, #7
 8001e12:	4013      	ands	r3, r2
 8001e14:	4a68      	ldr	r2, [pc, #416]	; (8001fb8 <HAL_RCC_OscConfig+0x340>)
 8001e16:	40da      	lsrs	r2, r3
 8001e18:	4b68      	ldr	r3, [pc, #416]	; (8001fbc <HAL_RCC_OscConfig+0x344>)
 8001e1a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e1c:	4b68      	ldr	r3, [pc, #416]	; (8001fc0 <HAL_RCC_OscConfig+0x348>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f7fe ffcb 	bl	8000dbc <HAL_InitTick>
 8001e26:	1e03      	subs	r3, r0, #0
 8001e28:	d051      	beq.n	8001ece <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e221      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d030      	beq.n	8001e98 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e36:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a5e      	ldr	r2, [pc, #376]	; (8001fb4 <HAL_RCC_OscConfig+0x33c>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	0019      	movs	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	4b57      	ldr	r3, [pc, #348]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e46:	430a      	orrs	r2, r1
 8001e48:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e4a:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4b55      	ldr	r3, [pc, #340]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e50:	2180      	movs	r1, #128	; 0x80
 8001e52:	0049      	lsls	r1, r1, #1
 8001e54:	430a      	orrs	r2, r1
 8001e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff f80c 	bl	8000e74 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e62:	f7ff f807 	bl	8000e74 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1fe      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e74:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4a4a      	ldr	r2, [pc, #296]	; (8001fb0 <HAL_RCC_OscConfig+0x338>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	695b      	ldr	r3, [r3, #20]
 8001e8e:	021a      	lsls	r2, r3, #8
 8001e90:	4b44      	ldr	r3, [pc, #272]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e92:	430a      	orrs	r2, r1
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	e01b      	b.n	8001ed0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001e98:	4b42      	ldr	r3, [pc, #264]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001e9e:	4949      	ldr	r1, [pc, #292]	; (8001fc4 <HAL_RCC_OscConfig+0x34c>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea4:	f7fe ffe6 	bl	8000e74 <HAL_GetTick>
 8001ea8:	0003      	movs	r3, r0
 8001eaa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eac:	e008      	b.n	8001ec0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eae:	f7fe ffe1 	bl	8000e74 <HAL_GetTick>
 8001eb2:	0002      	movs	r2, r0
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	1ad3      	subs	r3, r2, r3
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e1d8      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec0:	4b38      	ldr	r3, [pc, #224]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d1f0      	bne.n	8001eae <HAL_RCC_OscConfig+0x236>
 8001ecc:	e000      	b.n	8001ed0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ece:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2208      	movs	r2, #8
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d047      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001eda:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2238      	movs	r2, #56	; 0x38
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b18      	cmp	r3, #24
 8001ee4:	d10a      	bne.n	8001efc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eea:	2202      	movs	r2, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	d03c      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2f2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d138      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e1ba      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d019      	beq.n	8001f38 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f08:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7fe ffb0 	bl	8000e74 <HAL_GetTick>
 8001f14:	0003      	movs	r3, r0
 8001f16:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7fe ffab 	bl	8000e74 <HAL_GetTick>
 8001f1e:	0002      	movs	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e1a2      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f30:	2202      	movs	r2, #2
 8001f32:	4013      	ands	r3, r2
 8001f34:	d0f1      	beq.n	8001f1a <HAL_RCC_OscConfig+0x2a2>
 8001f36:	e018      	b.n	8001f6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f38:	4b1a      	ldr	r3, [pc, #104]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f3c:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f3e:	2101      	movs	r1, #1
 8001f40:	438a      	bics	r2, r1
 8001f42:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f44:	f7fe ff96 	bl	8000e74 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f4e:	f7fe ff91 	bl	8000e74 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e188      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f60:	4b10      	ldr	r3, [pc, #64]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f64:	2202      	movs	r2, #2
 8001f66:	4013      	ands	r3, r2
 8001f68:	d1f1      	bne.n	8001f4e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	4013      	ands	r3, r2
 8001f72:	d100      	bne.n	8001f76 <HAL_RCC_OscConfig+0x2fe>
 8001f74:	e0c6      	b.n	8002104 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	231f      	movs	r3, #31
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2238      	movs	r2, #56	; 0x38
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d11e      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_RCC_OscConfig+0x32c>)
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d100      	bne.n	8001f96 <HAL_RCC_OscConfig+0x31e>
 8001f94:	e0b6      	b.n	8002104 <HAL_RCC_OscConfig+0x48c>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d000      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x328>
 8001f9e:	e0b1      	b.n	8002104 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e166      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	fffeffff 	.word	0xfffeffff
 8001fac:	fffbffff 	.word	0xfffbffff
 8001fb0:	ffff80ff 	.word	0xffff80ff
 8001fb4:	ffffc7ff 	.word	0xffffc7ff
 8001fb8:	00f42400 	.word	0x00f42400
 8001fbc:	20000018 	.word	0x20000018
 8001fc0:	2000001c 	.word	0x2000001c
 8001fc4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fc8:	4bac      	ldr	r3, [pc, #688]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8001fca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	055b      	lsls	r3, r3, #21
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x360>
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x362>
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d011      	beq.n	8002002 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4ba7      	ldr	r3, [pc, #668]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8001fe0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe2:	4ba6      	ldr	r3, [pc, #664]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8001fe4:	2180      	movs	r1, #128	; 0x80
 8001fe6:	0549      	lsls	r1, r1, #21
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fec:	4ba3      	ldr	r3, [pc, #652]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8001fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001ffa:	231f      	movs	r3, #31
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	2201      	movs	r2, #1
 8002000:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	4b9f      	ldr	r3, [pc, #636]	; (8002280 <HAL_RCC_OscConfig+0x608>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4013      	ands	r3, r2
 800200c:	d11a      	bne.n	8002044 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200e:	4b9c      	ldr	r3, [pc, #624]	; (8002280 <HAL_RCC_OscConfig+0x608>)
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	4b9b      	ldr	r3, [pc, #620]	; (8002280 <HAL_RCC_OscConfig+0x608>)
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	0049      	lsls	r1, r1, #1
 8002018:	430a      	orrs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800201c:	f7fe ff2a 	bl	8000e74 <HAL_GetTick>
 8002020:	0003      	movs	r3, r0
 8002022:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe ff25 	bl	8000e74 <HAL_GetTick>
 800202a:	0002      	movs	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e11c      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002038:	4b91      	ldr	r3, [pc, #580]	; (8002280 <HAL_RCC_OscConfig+0x608>)
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	; 0x80
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4013      	ands	r3, r2
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d106      	bne.n	800205a <HAL_RCC_OscConfig+0x3e2>
 800204c:	4b8b      	ldr	r3, [pc, #556]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800204e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002050:	4b8a      	ldr	r3, [pc, #552]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002052:	2101      	movs	r1, #1
 8002054:	430a      	orrs	r2, r1
 8002056:	65da      	str	r2, [r3, #92]	; 0x5c
 8002058:	e01c      	b.n	8002094 <HAL_RCC_OscConfig+0x41c>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0x404>
 8002062:	4b86      	ldr	r3, [pc, #536]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002064:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002066:	4b85      	ldr	r3, [pc, #532]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002068:	2104      	movs	r1, #4
 800206a:	430a      	orrs	r2, r1
 800206c:	65da      	str	r2, [r3, #92]	; 0x5c
 800206e:	4b83      	ldr	r3, [pc, #524]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002070:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002072:	4b82      	ldr	r3, [pc, #520]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002074:	2101      	movs	r1, #1
 8002076:	430a      	orrs	r2, r1
 8002078:	65da      	str	r2, [r3, #92]	; 0x5c
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0x41c>
 800207c:	4b7f      	ldr	r3, [pc, #508]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800207e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002080:	4b7e      	ldr	r3, [pc, #504]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002082:	2101      	movs	r1, #1
 8002084:	438a      	bics	r2, r1
 8002086:	65da      	str	r2, [r3, #92]	; 0x5c
 8002088:	4b7c      	ldr	r3, [pc, #496]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800208a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800208c:	4b7b      	ldr	r3, [pc, #492]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800208e:	2104      	movs	r1, #4
 8002090:	438a      	bics	r2, r1
 8002092:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d014      	beq.n	80020c6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7fe feea 	bl	8000e74 <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a4:	e009      	b.n	80020ba <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a6:	f7fe fee5 	bl	8000e74 <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	4a74      	ldr	r2, [pc, #464]	; (8002284 <HAL_RCC_OscConfig+0x60c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0db      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	4b70      	ldr	r3, [pc, #448]	; (800227c <HAL_RCC_OscConfig+0x604>)
 80020bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020be:	2202      	movs	r2, #2
 80020c0:	4013      	ands	r3, r2
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x42e>
 80020c4:	e013      	b.n	80020ee <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7fe fed5 	bl	8000e74 <HAL_GetTick>
 80020ca:	0003      	movs	r3, r0
 80020cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ce:	e009      	b.n	80020e4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7fe fed0 	bl	8000e74 <HAL_GetTick>
 80020d4:	0002      	movs	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	4a6a      	ldr	r2, [pc, #424]	; (8002284 <HAL_RCC_OscConfig+0x60c>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0c6      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e4:	4b65      	ldr	r3, [pc, #404]	; (800227c <HAL_RCC_OscConfig+0x604>)
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	2202      	movs	r2, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020ee:	231f      	movs	r3, #31
 80020f0:	18fb      	adds	r3, r7, r3
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d105      	bne.n	8002104 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80020f8:	4b60      	ldr	r3, [pc, #384]	; (800227c <HAL_RCC_OscConfig+0x604>)
 80020fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020fc:	4b5f      	ldr	r3, [pc, #380]	; (800227c <HAL_RCC_OscConfig+0x604>)
 80020fe:	4962      	ldr	r1, [pc, #392]	; (8002288 <HAL_RCC_OscConfig+0x610>)
 8002100:	400a      	ands	r2, r1
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d100      	bne.n	800210e <HAL_RCC_OscConfig+0x496>
 800210c:	e0b0      	b.n	8002270 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210e:	4b5b      	ldr	r3, [pc, #364]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2238      	movs	r2, #56	; 0x38
 8002114:	4013      	ands	r3, r2
 8002116:	2b10      	cmp	r3, #16
 8002118:	d100      	bne.n	800211c <HAL_RCC_OscConfig+0x4a4>
 800211a:	e078      	b.n	800220e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d153      	bne.n	80021cc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002124:	4b55      	ldr	r3, [pc, #340]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b54      	ldr	r3, [pc, #336]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800212a:	4958      	ldr	r1, [pc, #352]	; (800228c <HAL_RCC_OscConfig+0x614>)
 800212c:	400a      	ands	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002130:	f7fe fea0 	bl	8000e74 <HAL_GetTick>
 8002134:	0003      	movs	r3, r0
 8002136:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7fe fe9b 	bl	8000e74 <HAL_GetTick>
 800213e:	0002      	movs	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e092      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214c:	4b4b      	ldr	r3, [pc, #300]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	049b      	lsls	r3, r3, #18
 8002154:	4013      	ands	r3, r2
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002158:	4b48      	ldr	r3, [pc, #288]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a4c      	ldr	r2, [pc, #304]	; (8002290 <HAL_RCC_OscConfig+0x618>)
 800215e:	4013      	ands	r3, r2
 8002160:	0019      	movs	r1, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1a      	ldr	r2, [r3, #32]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002170:	021b      	lsls	r3, r3, #8
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	431a      	orrs	r2, r3
 8002180:	4b3e      	ldr	r3, [pc, #248]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002182:	430a      	orrs	r2, r1
 8002184:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b3c      	ldr	r3, [pc, #240]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800218c:	2180      	movs	r1, #128	; 0x80
 800218e:	0449      	lsls	r1, r1, #17
 8002190:	430a      	orrs	r2, r1
 8002192:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002194:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4b38      	ldr	r3, [pc, #224]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	0549      	lsls	r1, r1, #21
 800219e:	430a      	orrs	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7fe fe67 	bl	8000e74 <HAL_GetTick>
 80021a6:	0003      	movs	r3, r0
 80021a8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ac:	f7fe fe62 	bl	8000e74 <HAL_GetTick>
 80021b0:	0002      	movs	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e059      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <HAL_RCC_OscConfig+0x604>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	049b      	lsls	r3, r3, #18
 80021c6:	4013      	ands	r3, r2
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x534>
 80021ca:	e051      	b.n	8002270 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <HAL_RCC_OscConfig+0x604>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCC_OscConfig+0x604>)
 80021d2:	492e      	ldr	r1, [pc, #184]	; (800228c <HAL_RCC_OscConfig+0x614>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe4c 	bl	8000e74 <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7fe fe47 	bl	8000e74 <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e03e      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021f4:	4b21      	ldr	r3, [pc, #132]	; (800227c <HAL_RCC_OscConfig+0x604>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	049b      	lsls	r3, r3, #18
 80021fc:	4013      	ands	r3, r2
 80021fe:	d1f0      	bne.n	80021e2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002200:	4b1e      	ldr	r3, [pc, #120]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <HAL_RCC_OscConfig+0x604>)
 8002206:	4923      	ldr	r1, [pc, #140]	; (8002294 <HAL_RCC_OscConfig+0x61c>)
 8002208:	400a      	ands	r2, r1
 800220a:	60da      	str	r2, [r3, #12]
 800220c:	e030      	b.n	8002270 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e02b      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <HAL_RCC_OscConfig+0x604>)
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2203      	movs	r2, #3
 8002224:	401a      	ands	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	429a      	cmp	r2, r3
 800222c:	d11e      	bne.n	800226c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2270      	movs	r2, #112	; 0x70
 8002232:	401a      	ands	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d117      	bne.n	800226c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223c:	697a      	ldr	r2, [r7, #20]
 800223e:	23fe      	movs	r3, #254	; 0xfe
 8002240:	01db      	lsls	r3, r3, #7
 8002242:	401a      	ands	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800224a:	429a      	cmp	r2, r3
 800224c:	d10e      	bne.n	800226c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	23f8      	movs	r3, #248	; 0xf8
 8002252:	039b      	lsls	r3, r3, #14
 8002254:	401a      	ands	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800225a:	429a      	cmp	r2, r3
 800225c:	d106      	bne.n	800226c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	0f5b      	lsrs	r3, r3, #29
 8002262:	075a      	lsls	r2, r3, #29
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	0018      	movs	r0, r3
 8002274:	46bd      	mov	sp, r7
 8002276:	b008      	add	sp, #32
 8002278:	bd80      	pop	{r7, pc}
 800227a:	46c0      	nop			; (mov r8, r8)
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	00001388 	.word	0x00001388
 8002288:	efffffff 	.word	0xefffffff
 800228c:	feffffff 	.word	0xfeffffff
 8002290:	1fc1808c 	.word	0x1fc1808c
 8002294:	effefffc 	.word	0xeffefffc

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e0e9      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ac:	4b76      	ldr	r3, [pc, #472]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2207      	movs	r2, #7
 80022b2:	4013      	ands	r3, r2
 80022b4:	683a      	ldr	r2, [r7, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d91e      	bls.n	80022f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ba:	4b73      	ldr	r3, [pc, #460]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2207      	movs	r2, #7
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	4b70      	ldr	r3, [pc, #448]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022cc:	f7fe fdd2 	bl	8000e74 <HAL_GetTick>
 80022d0:	0003      	movs	r3, r0
 80022d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022d4:	e009      	b.n	80022ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022d6:	f7fe fdcd 	bl	8000e74 <HAL_GetTick>
 80022da:	0002      	movs	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	4a6a      	ldr	r2, [pc, #424]	; (800248c <HAL_RCC_ClockConfig+0x1f4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e0ca      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022ea:	4b67      	ldr	r3, [pc, #412]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2207      	movs	r2, #7
 80022f0:	4013      	ands	r3, r2
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d1ee      	bne.n	80022d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2202      	movs	r2, #2
 80022fe:	4013      	ands	r3, r2
 8002300:	d015      	beq.n	800232e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d006      	beq.n	800231a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800230c:	4b60      	ldr	r3, [pc, #384]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 8002312:	21e0      	movs	r1, #224	; 0xe0
 8002314:	01c9      	lsls	r1, r1, #7
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231a:	4b5d      	ldr	r3, [pc, #372]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4a5d      	ldr	r2, [pc, #372]	; (8002494 <HAL_RCC_ClockConfig+0x1fc>)
 8002320:	4013      	ands	r3, r2
 8002322:	0019      	movs	r1, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	4b59      	ldr	r3, [pc, #356]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 800232a:	430a      	orrs	r2, r1
 800232c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2201      	movs	r2, #1
 8002334:	4013      	ands	r3, r2
 8002336:	d057      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d107      	bne.n	8002350 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	029b      	lsls	r3, r3, #10
 8002348:	4013      	ands	r3, r2
 800234a:	d12b      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e097      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d107      	bne.n	8002368 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002358:	4b4d      	ldr	r3, [pc, #308]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	049b      	lsls	r3, r3, #18
 8002360:	4013      	ands	r3, r2
 8002362:	d11f      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e08b      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002370:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4013      	ands	r3, r2
 800237a:	d113      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e07f      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d106      	bne.n	8002396 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002388:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 800238a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238c:	2202      	movs	r2, #2
 800238e:	4013      	ands	r3, r2
 8002390:	d108      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e074      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002396:	4b3e      	ldr	r3, [pc, #248]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800239a:	2202      	movs	r2, #2
 800239c:	4013      	ands	r3, r2
 800239e:	d101      	bne.n	80023a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e06d      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023a4:	4b3a      	ldr	r3, [pc, #232]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2207      	movs	r2, #7
 80023aa:	4393      	bics	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4b37      	ldr	r3, [pc, #220]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 80023b4:	430a      	orrs	r2, r1
 80023b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b8:	f7fe fd5c 	bl	8000e74 <HAL_GetTick>
 80023bc:	0003      	movs	r3, r0
 80023be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c0:	e009      	b.n	80023d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023c2:	f7fe fd57 	bl	8000e74 <HAL_GetTick>
 80023c6:	0002      	movs	r2, r0
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	4a2f      	ldr	r2, [pc, #188]	; (800248c <HAL_RCC_ClockConfig+0x1f4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d901      	bls.n	80023d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e054      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2238      	movs	r2, #56	; 0x38
 80023dc:	401a      	ands	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d1ec      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e8:	4b27      	ldr	r3, [pc, #156]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2207      	movs	r2, #7
 80023ee:	4013      	ands	r3, r2
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d21e      	bcs.n	8002434 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2207      	movs	r2, #7
 80023fc:	4393      	bics	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	4b21      	ldr	r3, [pc, #132]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002408:	f7fe fd34 	bl	8000e74 <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002410:	e009      	b.n	8002426 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002412:	f7fe fd2f 	bl	8000e74 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	4a1b      	ldr	r2, [pc, #108]	; (800248c <HAL_RCC_ClockConfig+0x1f4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e02c      	b.n	8002480 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2207      	movs	r2, #7
 800242c:	4013      	ands	r3, r2
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d1ee      	bne.n	8002412 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2204      	movs	r2, #4
 800243a:	4013      	ands	r3, r2
 800243c:	d009      	beq.n	8002452 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800243e:	4b14      	ldr	r3, [pc, #80]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	4a15      	ldr	r2, [pc, #84]	; (8002498 <HAL_RCC_ClockConfig+0x200>)
 8002444:	4013      	ands	r3, r2
 8002446:	0019      	movs	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002452:	f000 f829 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8002456:	0001      	movs	r1, r0
 8002458:	4b0d      	ldr	r3, [pc, #52]	; (8002490 <HAL_RCC_ClockConfig+0x1f8>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	0a1b      	lsrs	r3, r3, #8
 800245e:	220f      	movs	r2, #15
 8002460:	401a      	ands	r2, r3
 8002462:	4b0e      	ldr	r3, [pc, #56]	; (800249c <HAL_RCC_ClockConfig+0x204>)
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	58d3      	ldr	r3, [r2, r3]
 8002468:	221f      	movs	r2, #31
 800246a:	4013      	ands	r3, r2
 800246c:	000a      	movs	r2, r1
 800246e:	40da      	lsrs	r2, r3
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <HAL_RCC_ClockConfig+0x208>)
 8002472:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002474:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <HAL_RCC_ClockConfig+0x20c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	0018      	movs	r0, r3
 800247a:	f7fe fc9f 	bl	8000dbc <HAL_InitTick>
 800247e:	0003      	movs	r3, r0
}
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b004      	add	sp, #16
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40022000 	.word	0x40022000
 800248c:	00001388 	.word	0x00001388
 8002490:	40021000 	.word	0x40021000
 8002494:	fffff0ff 	.word	0xfffff0ff
 8002498:	ffff8fff 	.word	0xffff8fff
 800249c:	08004498 	.word	0x08004498
 80024a0:	20000018 	.word	0x20000018
 80024a4:	2000001c 	.word	0x2000001c

080024a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ae:	4b3c      	ldr	r3, [pc, #240]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2238      	movs	r2, #56	; 0x38
 80024b4:	4013      	ands	r3, r2
 80024b6:	d10f      	bne.n	80024d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024b8:	4b39      	ldr	r3, [pc, #228]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	0adb      	lsrs	r3, r3, #11
 80024be:	2207      	movs	r2, #7
 80024c0:	4013      	ands	r3, r2
 80024c2:	2201      	movs	r2, #1
 80024c4:	409a      	lsls	r2, r3
 80024c6:	0013      	movs	r3, r2
 80024c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80024ca:	6839      	ldr	r1, [r7, #0]
 80024cc:	4835      	ldr	r0, [pc, #212]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80024ce:	f7fd fe17 	bl	8000100 <__udivsi3>
 80024d2:	0003      	movs	r3, r0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	e05d      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d8:	4b31      	ldr	r3, [pc, #196]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2238      	movs	r2, #56	; 0x38
 80024de:	4013      	ands	r3, r2
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d102      	bne.n	80024ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e4:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x100>)
 80024e6:	613b      	str	r3, [r7, #16]
 80024e8:	e054      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ea:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2238      	movs	r2, #56	; 0x38
 80024f0:	4013      	ands	r3, r2
 80024f2:	2b10      	cmp	r3, #16
 80024f4:	d138      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024f6:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2203      	movs	r2, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	2207      	movs	r2, #7
 8002508:	4013      	ands	r3, r2
 800250a:	3301      	adds	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d10d      	bne.n	8002530 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	4824      	ldr	r0, [pc, #144]	; (80025a8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002518:	f7fd fdf2 	bl	8000100 <__udivsi3>
 800251c:	0003      	movs	r3, r0
 800251e:	0019      	movs	r1, r3
 8002520:	4b1f      	ldr	r3, [pc, #124]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0a1b      	lsrs	r3, r3, #8
 8002526:	227f      	movs	r2, #127	; 0x7f
 8002528:	4013      	ands	r3, r2
 800252a:	434b      	muls	r3, r1
 800252c:	617b      	str	r3, [r7, #20]
        break;
 800252e:	e00d      	b.n	800254c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	481c      	ldr	r0, [pc, #112]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002534:	f7fd fde4 	bl	8000100 <__udivsi3>
 8002538:	0003      	movs	r3, r0
 800253a:	0019      	movs	r1, r3
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	227f      	movs	r2, #127	; 0x7f
 8002544:	4013      	ands	r3, r2
 8002546:	434b      	muls	r3, r1
 8002548:	617b      	str	r3, [r7, #20]
        break;
 800254a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0f5b      	lsrs	r3, r3, #29
 8002552:	2207      	movs	r2, #7
 8002554:	4013      	ands	r3, r2
 8002556:	3301      	adds	r3, #1
 8002558:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	6978      	ldr	r0, [r7, #20]
 800255e:	f7fd fdcf 	bl	8000100 <__udivsi3>
 8002562:	0003      	movs	r3, r0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	e015      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002568:	4b0d      	ldr	r3, [pc, #52]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2238      	movs	r2, #56	; 0x38
 800256e:	4013      	ands	r3, r2
 8002570:	2b20      	cmp	r3, #32
 8002572:	d103      	bne.n	800257c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	021b      	lsls	r3, r3, #8
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800257c:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2238      	movs	r2, #56	; 0x38
 8002582:	4013      	ands	r3, r2
 8002584:	2b18      	cmp	r3, #24
 8002586:	d103      	bne.n	8002590 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002588:	23fa      	movs	r3, #250	; 0xfa
 800258a:	01db      	lsls	r3, r3, #7
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	e001      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002594:	693b      	ldr	r3, [r7, #16]
}
 8002596:	0018      	movs	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	b006      	add	sp, #24
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	40021000 	.word	0x40021000
 80025a4:	00f42400 	.word	0x00f42400
 80025a8:	007a1200 	.word	0x007a1200

080025ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <HAL_RCC_GetHCLKFreq+0x10>)
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	0018      	movs	r0, r3
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	20000018 	.word	0x20000018

080025c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c0:	b5b0      	push	{r4, r5, r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80025c4:	f7ff fff2 	bl	80025ac <HAL_RCC_GetHCLKFreq>
 80025c8:	0004      	movs	r4, r0
 80025ca:	f7ff fb49 	bl	8001c60 <LL_RCC_GetAPB1Prescaler>
 80025ce:	0003      	movs	r3, r0
 80025d0:	0b1a      	lsrs	r2, r3, #12
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025d4:	0092      	lsls	r2, r2, #2
 80025d6:	58d3      	ldr	r3, [r2, r3]
 80025d8:	221f      	movs	r2, #31
 80025da:	4013      	ands	r3, r2
 80025dc:	40dc      	lsrs	r4, r3
 80025de:	0023      	movs	r3, r4
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bdb0      	pop	{r4, r5, r7, pc}
 80025e6:	46c0      	nop			; (mov r8, r8)
 80025e8:	080044d8 	.word	0x080044d8

080025ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80025f4:	2313      	movs	r3, #19
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2200      	movs	r2, #0
 80025fa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025fc:	2312      	movs	r3, #18
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	2200      	movs	r2, #0
 8002602:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	029b      	lsls	r3, r3, #10
 800260c:	4013      	ands	r3, r2
 800260e:	d100      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002610:	e0a3      	b.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002612:	2011      	movs	r0, #17
 8002614:	183b      	adds	r3, r7, r0
 8002616:	2200      	movs	r2, #0
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800261a:	4b7f      	ldr	r3, [pc, #508]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800261c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	055b      	lsls	r3, r3, #21
 8002622:	4013      	ands	r3, r2
 8002624:	d110      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	4b7c      	ldr	r3, [pc, #496]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800262a:	4b7b      	ldr	r3, [pc, #492]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800262c:	2180      	movs	r1, #128	; 0x80
 800262e:	0549      	lsls	r1, r1, #21
 8002630:	430a      	orrs	r2, r1
 8002632:	63da      	str	r2, [r3, #60]	; 0x3c
 8002634:	4b78      	ldr	r3, [pc, #480]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	055b      	lsls	r3, r3, #21
 800263c:	4013      	ands	r3, r2
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002642:	183b      	adds	r3, r7, r0
 8002644:	2201      	movs	r2, #1
 8002646:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002648:	4b74      	ldr	r3, [pc, #464]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	4b73      	ldr	r3, [pc, #460]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800264e:	2180      	movs	r1, #128	; 0x80
 8002650:	0049      	lsls	r1, r1, #1
 8002652:	430a      	orrs	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002656:	f7fe fc0d 	bl	8000e74 <HAL_GetTick>
 800265a:	0003      	movs	r3, r0
 800265c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800265e:	e00b      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002660:	f7fe fc08 	bl	8000e74 <HAL_GetTick>
 8002664:	0002      	movs	r2, r0
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d904      	bls.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800266e:	2313      	movs	r3, #19
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	2203      	movs	r2, #3
 8002674:	701a      	strb	r2, [r3, #0]
        break;
 8002676:	e005      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002678:	4b68      	ldr	r3, [pc, #416]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	4013      	ands	r3, r2
 8002682:	d0ed      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002684:	2313      	movs	r3, #19
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d154      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800268e:	4b62      	ldr	r3, [pc, #392]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002690:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002692:	23c0      	movs	r3, #192	; 0xc0
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	4013      	ands	r3, r2
 8002698:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d019      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	695b      	ldr	r3, [r3, #20]
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d014      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026aa:	4b5b      	ldr	r3, [pc, #364]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ae:	4a5c      	ldr	r2, [pc, #368]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026b4:	4b58      	ldr	r3, [pc, #352]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026b8:	4b57      	ldr	r3, [pc, #348]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026ba:	2180      	movs	r1, #128	; 0x80
 80026bc:	0249      	lsls	r1, r1, #9
 80026be:	430a      	orrs	r2, r1
 80026c0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026c2:	4b55      	ldr	r3, [pc, #340]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80026c6:	4b54      	ldr	r3, [pc, #336]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026c8:	4956      	ldr	r1, [pc, #344]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80026ca:	400a      	ands	r2, r1
 80026cc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026ce:	4b52      	ldr	r3, [pc, #328]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4013      	ands	r3, r2
 80026da:	d016      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fbca 	bl	8000e74 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e4:	e00c      	b.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe fbc5 	bl	8000e74 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	4a4d      	ldr	r2, [pc, #308]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d904      	bls.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80026f6:	2313      	movs	r3, #19
 80026f8:	18fb      	adds	r3, r7, r3
 80026fa:	2203      	movs	r2, #3
 80026fc:	701a      	strb	r2, [r3, #0]
            break;
 80026fe:	e004      	b.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002700:	4b45      	ldr	r3, [pc, #276]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2202      	movs	r2, #2
 8002706:	4013      	ands	r3, r2
 8002708:	d0ed      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800270a:	2313      	movs	r3, #19
 800270c:	18fb      	adds	r3, r7, r3
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002714:	4b40      	ldr	r3, [pc, #256]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	4a41      	ldr	r2, [pc, #260]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800271a:	4013      	ands	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002724:	430a      	orrs	r2, r1
 8002726:	65da      	str	r2, [r3, #92]	; 0x5c
 8002728:	e00c      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800272a:	2312      	movs	r3, #18
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2213      	movs	r2, #19
 8002730:	18ba      	adds	r2, r7, r2
 8002732:	7812      	ldrb	r2, [r2, #0]
 8002734:	701a      	strb	r2, [r3, #0]
 8002736:	e005      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002738:	2312      	movs	r3, #18
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	2213      	movs	r2, #19
 800273e:	18ba      	adds	r2, r7, r2
 8002740:	7812      	ldrb	r2, [r2, #0]
 8002742:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002744:	2311      	movs	r3, #17
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002752:	4b31      	ldr	r3, [pc, #196]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002754:	4935      	ldr	r1, [pc, #212]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002756:	400a      	ands	r2, r1
 8002758:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	4013      	ands	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002764:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002768:	2203      	movs	r2, #3
 800276a:	4393      	bics	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4b29      	ldr	r3, [pc, #164]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002774:	430a      	orrs	r2, r1
 8002776:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2220      	movs	r2, #32
 800277e:	4013      	ands	r3, r2
 8002780:	d009      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002782:	4b25      	ldr	r3, [pc, #148]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002788:	4013      	ands	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	4b21      	ldr	r3, [pc, #132]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002792:	430a      	orrs	r2, r1
 8002794:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	01db      	lsls	r3, r3, #7
 800279e:	4013      	ands	r3, r2
 80027a0:	d015      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	0899      	lsrs	r1, r3, #2
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691a      	ldr	r2, [r3, #16]
 80027ae:	4b1a      	ldr	r3, [pc, #104]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	05db      	lsls	r3, r3, #23
 80027bc:	429a      	cmp	r2, r3
 80027be:	d106      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027c0:	4b15      	ldr	r3, [pc, #84]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	4b14      	ldr	r3, [pc, #80]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027c6:	2180      	movs	r1, #128	; 0x80
 80027c8:	0249      	lsls	r1, r1, #9
 80027ca:	430a      	orrs	r2, r1
 80027cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	4013      	ands	r3, r2
 80027d8:	d016      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80027da:	4b0f      	ldr	r3, [pc, #60]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027de:	4a15      	ldr	r2, [pc, #84]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	0019      	movs	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	4b0b      	ldr	r3, [pc, #44]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027ea:	430a      	orrs	r2, r1
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	01db      	lsls	r3, r3, #7
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d106      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80027fa:	4b07      	ldr	r3, [pc, #28]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002800:	2180      	movs	r1, #128	; 0x80
 8002802:	0249      	lsls	r1, r1, #9
 8002804:	430a      	orrs	r2, r1
 8002806:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002808:	2312      	movs	r3, #18
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	781b      	ldrb	r3, [r3, #0]
}
 800280e:	0018      	movs	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	b006      	add	sp, #24
 8002814:	bd80      	pop	{r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
 8002820:	fffffcff 	.word	0xfffffcff
 8002824:	fffeffff 	.word	0xfffeffff
 8002828:	00001388 	.word	0x00001388
 800282c:	efffffff 	.word	0xefffffff
 8002830:	ffffcfff 	.word	0xffffcfff
 8002834:	ffff3fff 	.word	0xffff3fff

08002838 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002838:	b5b0      	push	{r4, r5, r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002840:	230f      	movs	r3, #15
 8002842:	18fb      	adds	r3, r7, r3
 8002844:	2201      	movs	r2, #1
 8002846:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d100      	bne.n	8002850 <HAL_RTC_Init+0x18>
 800284e:	e08c      	b.n	800296a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2229      	movs	r2, #41	; 0x29
 8002854:	5c9b      	ldrb	r3, [r3, r2]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10b      	bne.n	8002874 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2228      	movs	r2, #40	; 0x28
 8002860:	2100      	movs	r1, #0
 8002862:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2288      	movs	r2, #136	; 0x88
 8002868:	0212      	lsls	r2, r2, #8
 800286a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	0018      	movs	r0, r3
 8002870:	f7fe f892 	bl	8000998 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2229      	movs	r2, #41	; 0x29
 8002878:	2102      	movs	r1, #2
 800287a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	2210      	movs	r2, #16
 8002884:	4013      	ands	r3, r2
 8002886:	2b10      	cmp	r3, #16
 8002888:	d062      	beq.n	8002950 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	22ca      	movs	r2, #202	; 0xca
 8002890:	625a      	str	r2, [r3, #36]	; 0x24
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2253      	movs	r2, #83	; 0x53
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800289a:	250f      	movs	r5, #15
 800289c:	197c      	adds	r4, r7, r5
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	0018      	movs	r0, r3
 80028a2:	f000 f892 	bl	80029ca <RTC_EnterInitMode>
 80028a6:	0003      	movs	r3, r0
 80028a8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80028aa:	0028      	movs	r0, r5
 80028ac:	183b      	adds	r3, r7, r0
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d12c      	bne.n	800290e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699a      	ldr	r2, [r3, #24]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	492e      	ldr	r1, [pc, #184]	; (8002978 <HAL_RTC_Init+0x140>)
 80028c0:	400a      	ands	r2, r1
 80028c2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6999      	ldr	r1, [r3, #24]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	431a      	orrs	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6912      	ldr	r2, [r2, #16]
 80028ea:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6919      	ldr	r1, [r3, #16]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	041a      	lsls	r2, r3, #16
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002900:	183c      	adds	r4, r7, r0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 f8a3 	bl	8002a50 <RTC_ExitInitMode>
 800290a:	0003      	movs	r3, r0
 800290c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800290e:	230f      	movs	r3, #15
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d116      	bne.n	8002946 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699a      	ldr	r2, [r3, #24]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	00d2      	lsls	r2, r2, #3
 8002924:	08d2      	lsrs	r2, r2, #3
 8002926:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6999      	ldr	r1, [r3, #24]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	431a      	orrs	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	431a      	orrs	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	22ff      	movs	r2, #255	; 0xff
 800294c:	625a      	str	r2, [r3, #36]	; 0x24
 800294e:	e003      	b.n	8002958 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002950:	230f      	movs	r3, #15
 8002952:	18fb      	adds	r3, r7, r3
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002958:	230f      	movs	r3, #15
 800295a:	18fb      	adds	r3, r7, r3
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2229      	movs	r2, #41	; 0x29
 8002966:	2101      	movs	r1, #1
 8002968:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800296a:	230f      	movs	r3, #15
 800296c:	18fb      	adds	r3, r7, r3
 800296e:	781b      	ldrb	r3, [r3, #0]
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b004      	add	sp, #16
 8002976:	bdb0      	pop	{r4, r5, r7, pc}
 8002978:	fb8fffbf 	.word	0xfb8fffbf

0800297c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	21a0      	movs	r1, #160	; 0xa0
 8002990:	438a      	bics	r2, r1
 8002992:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002994:	f7fe fa6e 	bl	8000e74 <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800299c:	e00a      	b.n	80029b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800299e:	f7fe fa69 	bl	8000e74 <HAL_GetTick>
 80029a2:	0002      	movs	r2, r0
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	1ad2      	subs	r2, r2, r3
 80029a8:	23fa      	movs	r3, #250	; 0xfa
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d901      	bls.n	80029b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e006      	b.n	80029c2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	4013      	ands	r3, r2
 80029be:	d0ee      	beq.n	800299e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b004      	add	sp, #16
 80029c8:	bd80      	pop	{r7, pc}

080029ca <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80029d2:	230f      	movs	r3, #15
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2240      	movs	r2, #64	; 0x40
 80029e2:	4013      	ands	r3, r2
 80029e4:	d12c      	bne.n	8002a40 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2180      	movs	r1, #128	; 0x80
 80029f2:	430a      	orrs	r2, r1
 80029f4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80029f6:	f7fe fa3d 	bl	8000e74 <HAL_GetTick>
 80029fa:	0003      	movs	r3, r0
 80029fc:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80029fe:	e014      	b.n	8002a2a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002a00:	f7fe fa38 	bl	8000e74 <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	1ad2      	subs	r2, r2, r3
 8002a0a:	200f      	movs	r0, #15
 8002a0c:	183b      	adds	r3, r7, r0
 8002a0e:	1839      	adds	r1, r7, r0
 8002a10:	7809      	ldrb	r1, [r1, #0]
 8002a12:	7019      	strb	r1, [r3, #0]
 8002a14:	23fa      	movs	r3, #250	; 0xfa
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d906      	bls.n	8002a2a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002a1c:	183b      	adds	r3, r7, r0
 8002a1e:	2203      	movs	r2, #3
 8002a20:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2229      	movs	r2, #41	; 0x29
 8002a26:	2103      	movs	r1, #3
 8002a28:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	4013      	ands	r3, r2
 8002a34:	d104      	bne.n	8002a40 <RTC_EnterInitMode+0x76>
 8002a36:	230f      	movs	r3, #15
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d1df      	bne.n	8002a00 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002a40:	230f      	movs	r3, #15
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	781b      	ldrb	r3, [r3, #0]
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a58:	240f      	movs	r4, #15
 8002a5a:	193b      	adds	r3, r7, r4
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002a60:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <RTC_ExitInitMode+0x84>)
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <RTC_ExitInitMode+0x84>)
 8002a66:	2180      	movs	r1, #128	; 0x80
 8002a68:	438a      	bics	r2, r1
 8002a6a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <RTC_ExitInitMode+0x84>)
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2220      	movs	r2, #32
 8002a72:	4013      	ands	r3, r2
 8002a74:	d10d      	bne.n	8002a92 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f7ff ff7f 	bl	800297c <HAL_RTC_WaitForSynchro>
 8002a7e:	1e03      	subs	r3, r0, #0
 8002a80:	d021      	beq.n	8002ac6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2229      	movs	r2, #41	; 0x29
 8002a86:	2103      	movs	r1, #3
 8002a88:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002a8a:	193b      	adds	r3, r7, r4
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e019      	b.n	8002ac6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <RTC_ExitInitMode+0x84>)
 8002a94:	699a      	ldr	r2, [r3, #24]
 8002a96:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <RTC_ExitInitMode+0x84>)
 8002a98:	2120      	movs	r1, #32
 8002a9a:	438a      	bics	r2, r1
 8002a9c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff ff6b 	bl	800297c <HAL_RTC_WaitForSynchro>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d007      	beq.n	8002aba <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2229      	movs	r2, #41	; 0x29
 8002aae:	2103      	movs	r1, #3
 8002ab0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002ab2:	230f      	movs	r3, #15
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002aba:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <RTC_ExitInitMode+0x84>)
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <RTC_ExitInitMode+0x84>)
 8002ac0:	2120      	movs	r1, #32
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002ac6:	230f      	movs	r3, #15
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	781b      	ldrb	r3, [r3, #0]
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b005      	add	sp, #20
 8002ad2:	bd90      	pop	{r4, r7, pc}
 8002ad4:	40002800 	.word	0x40002800

08002ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e04a      	b.n	8002b80 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	223d      	movs	r2, #61	; 0x3d
 8002aee:	5c9b      	ldrb	r3, [r3, r2]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d107      	bne.n	8002b06 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	223c      	movs	r2, #60	; 0x3c
 8002afa:	2100      	movs	r1, #0
 8002afc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f7fe f813 	bl	8000b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	223d      	movs	r2, #61	; 0x3d
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	3304      	adds	r3, #4
 8002b16:	0019      	movs	r1, r3
 8002b18:	0010      	movs	r0, r2
 8002b1a:	f000 f87b 	bl	8002c14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2248      	movs	r2, #72	; 0x48
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	223e      	movs	r2, #62	; 0x3e
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	223f      	movs	r2, #63	; 0x3f
 8002b32:	2101      	movs	r1, #1
 8002b34:	5499      	strb	r1, [r3, r2]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2240      	movs	r2, #64	; 0x40
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	5499      	strb	r1, [r3, r2]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2241      	movs	r2, #65	; 0x41
 8002b42:	2101      	movs	r1, #1
 8002b44:	5499      	strb	r1, [r3, r2]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2242      	movs	r2, #66	; 0x42
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	5499      	strb	r1, [r3, r2]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2243      	movs	r2, #67	; 0x43
 8002b52:	2101      	movs	r1, #1
 8002b54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2244      	movs	r2, #68	; 0x44
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	5499      	strb	r1, [r3, r2]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2245      	movs	r2, #69	; 0x45
 8002b62:	2101      	movs	r1, #1
 8002b64:	5499      	strb	r1, [r3, r2]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2246      	movs	r2, #70	; 0x46
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2247      	movs	r2, #71	; 0x47
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223d      	movs	r2, #61	; 0x3d
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	223d      	movs	r2, #61	; 0x3d
 8002b94:	5c9b      	ldrb	r3, [r3, r2]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d001      	beq.n	8002ba0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e02f      	b.n	8002c00 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	223d      	movs	r2, #61	; 0x3d
 8002ba4:	2102      	movs	r1, #2
 8002ba6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a16      	ldr	r2, [pc, #88]	; (8002c08 <HAL_TIM_Base_Start+0x80>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_TIM_Base_Start+0x34>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a15      	ldr	r2, [pc, #84]	; (8002c0c <HAL_TIM_Base_Start+0x84>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d116      	bne.n	8002bea <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	4a13      	ldr	r2, [pc, #76]	; (8002c10 <HAL_TIM_Base_Start+0x88>)
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b06      	cmp	r3, #6
 8002bcc:	d016      	beq.n	8002bfc <HAL_TIM_Base_Start+0x74>
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	025b      	lsls	r3, r3, #9
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d011      	beq.n	8002bfc <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2101      	movs	r1, #1
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	e008      	b.n	8002bfc <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	e000      	b.n	8002bfe <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfc:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	0018      	movs	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b004      	add	sp, #16
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	40012c00 	.word	0x40012c00
 8002c0c:	40000400 	.word	0x40000400
 8002c10:	00010007 	.word	0x00010007

08002c14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a2b      	ldr	r2, [pc, #172]	; (8002cd4 <TIM_Base_SetConfig+0xc0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_Base_SetConfig+0x20>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a2a      	ldr	r2, [pc, #168]	; (8002cd8 <TIM_Base_SetConfig+0xc4>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d108      	bne.n	8002c46 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2270      	movs	r2, #112	; 0x70
 8002c38:	4393      	bics	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <TIM_Base_SetConfig+0xc0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00f      	beq.n	8002c6e <TIM_Base_SetConfig+0x5a>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a21      	ldr	r2, [pc, #132]	; (8002cd8 <TIM_Base_SetConfig+0xc4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00b      	beq.n	8002c6e <TIM_Base_SetConfig+0x5a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a20      	ldr	r2, [pc, #128]	; (8002cdc <TIM_Base_SetConfig+0xc8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d007      	beq.n	8002c6e <TIM_Base_SetConfig+0x5a>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1f      	ldr	r2, [pc, #124]	; (8002ce0 <TIM_Base_SetConfig+0xcc>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d003      	beq.n	8002c6e <TIM_Base_SetConfig+0x5a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a1e      	ldr	r2, [pc, #120]	; (8002ce4 <TIM_Base_SetConfig+0xd0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <TIM_Base_SetConfig+0xd4>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	4393      	bics	r3, r2
 8002c86:	001a      	movs	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a0a      	ldr	r2, [pc, #40]	; (8002cd4 <TIM_Base_SetConfig+0xc0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d007      	beq.n	8002cbe <TIM_Base_SetConfig+0xaa>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a0b      	ldr	r2, [pc, #44]	; (8002ce0 <TIM_Base_SetConfig+0xcc>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d003      	beq.n	8002cbe <TIM_Base_SetConfig+0xaa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a0a      	ldr	r2, [pc, #40]	; (8002ce4 <TIM_Base_SetConfig+0xd0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d103      	bne.n	8002cc6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	615a      	str	r2, [r3, #20]
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b004      	add	sp, #16
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40002000 	.word	0x40002000
 8002ce0:	40014400 	.word	0x40014400
 8002ce4:	40014800 	.word	0x40014800
 8002ce8:	fffffcff 	.word	0xfffffcff

08002cec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e046      	b.n	8002d8c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2288      	movs	r2, #136	; 0x88
 8002d02:	589b      	ldr	r3, [r3, r2]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d107      	bne.n	8002d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2284      	movs	r2, #132	; 0x84
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f7fd ff78 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2288      	movs	r2, #136	; 0x88
 8002d1c:	2124      	movs	r1, #36	; 0x24
 8002d1e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	438a      	bics	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f000 fc12 	bl	800355c <UART_SetConfig>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e024      	b.n	8002d8c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	0018      	movs	r0, r3
 8002d4e:	f000 fd6f 	bl	8003830 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	490d      	ldr	r1, [pc, #52]	; (8002d94 <HAL_UART_Init+0xa8>)
 8002d5e:	400a      	ands	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	689a      	ldr	r2, [r3, #8]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	212a      	movs	r1, #42	; 0x2a
 8002d6e:	438a      	bics	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 fe07 	bl	8003998 <UART_CheckIdleState>
 8002d8a:	0003      	movs	r3, r0
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b002      	add	sp, #8
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	ffffb7ff 	.word	0xffffb7ff

08002d98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b08a      	sub	sp, #40	; 0x28
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	1dbb      	adds	r3, r7, #6
 8002da6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2288      	movs	r2, #136	; 0x88
 8002dac:	589b      	ldr	r3, [r3, r2]
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d000      	beq.n	8002db4 <HAL_UART_Transmit+0x1c>
 8002db2:	e088      	b.n	8002ec6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_UART_Transmit+0x2a>
 8002dba:	1dbb      	adds	r3, r7, #6
 8002dbc:	881b      	ldrh	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e080      	b.n	8002ec8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	2380      	movs	r3, #128	; 0x80
 8002dcc:	015b      	lsls	r3, r3, #5
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d109      	bne.n	8002de6 <HAL_UART_Transmit+0x4e>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d105      	bne.n	8002de6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	d001      	beq.n	8002de6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e070      	b.n	8002ec8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2290      	movs	r2, #144	; 0x90
 8002dea:	2100      	movs	r1, #0
 8002dec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2288      	movs	r2, #136	; 0x88
 8002df2:	2121      	movs	r1, #33	; 0x21
 8002df4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002df6:	f7fe f83d 	bl	8000e74 <HAL_GetTick>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1dba      	adds	r2, r7, #6
 8002e02:	2154      	movs	r1, #84	; 0x54
 8002e04:	8812      	ldrh	r2, [r2, #0]
 8002e06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1dba      	adds	r2, r7, #6
 8002e0c:	2156      	movs	r1, #86	; 0x56
 8002e0e:	8812      	ldrh	r2, [r2, #0]
 8002e10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	015b      	lsls	r3, r3, #5
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d108      	bne.n	8002e30 <HAL_UART_Transmit+0x98>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e003      	b.n	8002e38 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e38:	e02c      	b.n	8002e94 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	0013      	movs	r3, r2
 8002e44:	2200      	movs	r2, #0
 8002e46:	2180      	movs	r1, #128	; 0x80
 8002e48:	f000 fdf4 	bl	8003a34 <UART_WaitOnFlagUntilTimeout>
 8002e4c:	1e03      	subs	r3, r0, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e039      	b.n	8002ec8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10b      	bne.n	8002e72 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	881b      	ldrh	r3, [r3, #0]
 8002e5e:	001a      	movs	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	05d2      	lsls	r2, r2, #23
 8002e66:	0dd2      	lsrs	r2, r2, #23
 8002e68:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	3302      	adds	r3, #2
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e007      	b.n	8002e82 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	781a      	ldrb	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2256      	movs	r2, #86	; 0x56
 8002e86:	5a9b      	ldrh	r3, [r3, r2]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b299      	uxth	r1, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2256      	movs	r2, #86	; 0x56
 8002e92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2256      	movs	r2, #86	; 0x56
 8002e98:	5a9b      	ldrh	r3, [r3, r2]
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1cc      	bne.n	8002e3a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	0013      	movs	r3, r2
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2140      	movs	r1, #64	; 0x40
 8002eae:	f000 fdc1 	bl	8003a34 <UART_WaitOnFlagUntilTimeout>
 8002eb2:	1e03      	subs	r3, r0, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e006      	b.n	8002ec8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2288      	movs	r2, #136	; 0x88
 8002ebe:	2120      	movs	r1, #32
 8002ec0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e000      	b.n	8002ec8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002ec6:	2302      	movs	r3, #2
  }
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	b008      	add	sp, #32
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b0aa      	sub	sp, #168	; 0xa8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	22a4      	movs	r2, #164	; 0xa4
 8002ee0:	18b9      	adds	r1, r7, r2
 8002ee2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	20a0      	movs	r0, #160	; 0xa0
 8002eec:	1839      	adds	r1, r7, r0
 8002eee:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	249c      	movs	r4, #156	; 0x9c
 8002ef8:	1939      	adds	r1, r7, r4
 8002efa:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002efc:	0011      	movs	r1, r2
 8002efe:	18bb      	adds	r3, r7, r2
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4aa2      	ldr	r2, [pc, #648]	; (800318c <HAL_UART_IRQHandler+0x2bc>)
 8002f04:	4013      	ands	r3, r2
 8002f06:	2298      	movs	r2, #152	; 0x98
 8002f08:	18bd      	adds	r5, r7, r2
 8002f0a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002f0c:	18bb      	adds	r3, r7, r2
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d11a      	bne.n	8002f4a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f14:	187b      	adds	r3, r7, r1
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d015      	beq.n	8002f4a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f1e:	183b      	adds	r3, r7, r0
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2220      	movs	r2, #32
 8002f24:	4013      	ands	r3, r2
 8002f26:	d105      	bne.n	8002f34 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f28:	193b      	adds	r3, r7, r4
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	055b      	lsls	r3, r3, #21
 8002f30:	4013      	ands	r3, r2
 8002f32:	d00a      	beq.n	8002f4a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d100      	bne.n	8002f3e <HAL_UART_IRQHandler+0x6e>
 8002f3c:	e2dc      	b.n	80034f8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	0010      	movs	r0, r2
 8002f46:	4798      	blx	r3
      }
      return;
 8002f48:	e2d6      	b.n	80034f8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f4a:	2398      	movs	r3, #152	; 0x98
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d100      	bne.n	8002f56 <HAL_UART_IRQHandler+0x86>
 8002f54:	e122      	b.n	800319c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f56:	239c      	movs	r3, #156	; 0x9c
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a8c      	ldr	r2, [pc, #560]	; (8003190 <HAL_UART_IRQHandler+0x2c0>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d106      	bne.n	8002f70 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f62:	23a0      	movs	r3, #160	; 0xa0
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a8a      	ldr	r2, [pc, #552]	; (8003194 <HAL_UART_IRQHandler+0x2c4>)
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d100      	bne.n	8002f70 <HAL_UART_IRQHandler+0xa0>
 8002f6e:	e115      	b.n	800319c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f70:	23a4      	movs	r3, #164	; 0xa4
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2201      	movs	r2, #1
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d012      	beq.n	8002fa2 <HAL_UART_IRQHandler+0xd2>
 8002f7c:	23a0      	movs	r3, #160	; 0xa0
 8002f7e:	18fb      	adds	r3, r7, r3
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4013      	ands	r3, r2
 8002f88:	d00b      	beq.n	8002fa2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2290      	movs	r2, #144	; 0x90
 8002f96:	589b      	ldr	r3, [r3, r2]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2190      	movs	r1, #144	; 0x90
 8002fa0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fa2:	23a4      	movs	r3, #164	; 0xa4
 8002fa4:	18fb      	adds	r3, r7, r3
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	4013      	ands	r3, r2
 8002fac:	d011      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x102>
 8002fae:	239c      	movs	r3, #156	; 0x9c
 8002fb0:	18fb      	adds	r3, r7, r3
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2290      	movs	r2, #144	; 0x90
 8002fc6:	589b      	ldr	r3, [r3, r2]
 8002fc8:	2204      	movs	r2, #4
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2190      	movs	r1, #144	; 0x90
 8002fd0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fd2:	23a4      	movs	r3, #164	; 0xa4
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2204      	movs	r2, #4
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d011      	beq.n	8003002 <HAL_UART_IRQHandler+0x132>
 8002fde:	239c      	movs	r3, #156	; 0x9c
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d00b      	beq.n	8003002 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2204      	movs	r2, #4
 8002ff0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2290      	movs	r2, #144	; 0x90
 8002ff6:	589b      	ldr	r3, [r3, r2]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2190      	movs	r1, #144	; 0x90
 8003000:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003002:	23a4      	movs	r3, #164	; 0xa4
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2208      	movs	r2, #8
 800300a:	4013      	ands	r3, r2
 800300c:	d017      	beq.n	800303e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800300e:	23a0      	movs	r3, #160	; 0xa0
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2220      	movs	r2, #32
 8003016:	4013      	ands	r3, r2
 8003018:	d105      	bne.n	8003026 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800301a:	239c      	movs	r3, #156	; 0x9c
 800301c:	18fb      	adds	r3, r7, r3
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5b      	ldr	r2, [pc, #364]	; (8003190 <HAL_UART_IRQHandler+0x2c0>)
 8003022:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003024:	d00b      	beq.n	800303e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2208      	movs	r2, #8
 800302c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2290      	movs	r2, #144	; 0x90
 8003032:	589b      	ldr	r3, [r3, r2]
 8003034:	2208      	movs	r2, #8
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2190      	movs	r1, #144	; 0x90
 800303c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800303e:	23a4      	movs	r3, #164	; 0xa4
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	4013      	ands	r3, r2
 800304a:	d013      	beq.n	8003074 <HAL_UART_IRQHandler+0x1a4>
 800304c:	23a0      	movs	r3, #160	; 0xa0
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	2380      	movs	r3, #128	; 0x80
 8003054:	04db      	lsls	r3, r3, #19
 8003056:	4013      	ands	r3, r2
 8003058:	d00c      	beq.n	8003074 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2280      	movs	r2, #128	; 0x80
 8003060:	0112      	lsls	r2, r2, #4
 8003062:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2290      	movs	r2, #144	; 0x90
 8003068:	589b      	ldr	r3, [r3, r2]
 800306a:	2220      	movs	r2, #32
 800306c:	431a      	orrs	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2190      	movs	r1, #144	; 0x90
 8003072:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2290      	movs	r2, #144	; 0x90
 8003078:	589b      	ldr	r3, [r3, r2]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d100      	bne.n	8003080 <HAL_UART_IRQHandler+0x1b0>
 800307e:	e23d      	b.n	80034fc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003080:	23a4      	movs	r3, #164	; 0xa4
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2220      	movs	r2, #32
 8003088:	4013      	ands	r3, r2
 800308a:	d015      	beq.n	80030b8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800308c:	23a0      	movs	r3, #160	; 0xa0
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2220      	movs	r2, #32
 8003094:	4013      	ands	r3, r2
 8003096:	d106      	bne.n	80030a6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003098:	239c      	movs	r3, #156	; 0x9c
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	4013      	ands	r3, r2
 80030a4:	d008      	beq.n	80030b8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	0010      	movs	r0, r2
 80030b6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2290      	movs	r2, #144	; 0x90
 80030bc:	589b      	ldr	r3, [r3, r2]
 80030be:	2194      	movs	r1, #148	; 0x94
 80030c0:	187a      	adds	r2, r7, r1
 80030c2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2240      	movs	r2, #64	; 0x40
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b40      	cmp	r3, #64	; 0x40
 80030d0:	d004      	beq.n	80030dc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2228      	movs	r2, #40	; 0x28
 80030d8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030da:	d04c      	beq.n	8003176 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	0018      	movs	r0, r3
 80030e0:	f000 fe56 	bl	8003d90 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	2240      	movs	r2, #64	; 0x40
 80030ec:	4013      	ands	r3, r2
 80030ee:	2b40      	cmp	r3, #64	; 0x40
 80030f0:	d13c      	bne.n	800316c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030f2:	f3ef 8310 	mrs	r3, PRIMASK
 80030f6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80030f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030fa:	2090      	movs	r0, #144	; 0x90
 80030fc:	183a      	adds	r2, r7, r0
 80030fe:	6013      	str	r3, [r2, #0]
 8003100:	2301      	movs	r3, #1
 8003102:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003104:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003106:	f383 8810 	msr	PRIMASK, r3
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2140      	movs	r1, #64	; 0x40
 8003118:	438a      	bics	r2, r1
 800311a:	609a      	str	r2, [r3, #8]
 800311c:	183b      	adds	r3, r7, r0
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003124:	f383 8810 	msr	PRIMASK, r3
}
 8003128:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2280      	movs	r2, #128	; 0x80
 800312e:	589b      	ldr	r3, [r3, r2]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d016      	beq.n	8003162 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	589b      	ldr	r3, [r3, r2]
 800313a:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_UART_IRQHandler+0x2c8>)
 800313c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	589b      	ldr	r3, [r3, r2]
 8003144:	0018      	movs	r0, r3
 8003146:	f7fe f8ef 	bl	8001328 <HAL_DMA_Abort_IT>
 800314a:	1e03      	subs	r3, r0, #0
 800314c:	d01c      	beq.n	8003188 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2280      	movs	r2, #128	; 0x80
 8003152:	589b      	ldr	r3, [r3, r2]
 8003154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	2180      	movs	r1, #128	; 0x80
 800315a:	5852      	ldr	r2, [r2, r1]
 800315c:	0010      	movs	r0, r2
 800315e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	e012      	b.n	8003188 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	0018      	movs	r0, r3
 8003166:	f000 f9f1 	bl	800354c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800316a:	e00d      	b.n	8003188 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	0018      	movs	r0, r3
 8003170:	f000 f9ec 	bl	800354c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	e008      	b.n	8003188 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 f9e7 	bl	800354c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2290      	movs	r2, #144	; 0x90
 8003182:	2100      	movs	r1, #0
 8003184:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003186:	e1b9      	b.n	80034fc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	46c0      	nop			; (mov r8, r8)
    return;
 800318a:	e1b7      	b.n	80034fc <HAL_UART_IRQHandler+0x62c>
 800318c:	0000080f 	.word	0x0000080f
 8003190:	10000001 	.word	0x10000001
 8003194:	04000120 	.word	0x04000120
 8003198:	08004055 	.word	0x08004055

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d000      	beq.n	80031a6 <HAL_UART_IRQHandler+0x2d6>
 80031a4:	e13e      	b.n	8003424 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80031a6:	23a4      	movs	r3, #164	; 0xa4
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2210      	movs	r2, #16
 80031ae:	4013      	ands	r3, r2
 80031b0:	d100      	bne.n	80031b4 <HAL_UART_IRQHandler+0x2e4>
 80031b2:	e137      	b.n	8003424 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031b4:	23a0      	movs	r3, #160	; 0xa0
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2210      	movs	r2, #16
 80031bc:	4013      	ands	r3, r2
 80031be:	d100      	bne.n	80031c2 <HAL_UART_IRQHandler+0x2f2>
 80031c0:	e130      	b.n	8003424 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2210      	movs	r2, #16
 80031c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d000      	beq.n	80031da <HAL_UART_IRQHandler+0x30a>
 80031d8:	e0a4      	b.n	8003324 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2280      	movs	r2, #128	; 0x80
 80031de:	589b      	ldr	r3, [r3, r2]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	217e      	movs	r1, #126	; 0x7e
 80031e6:	187b      	adds	r3, r7, r1
 80031e8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d100      	bne.n	80031f4 <HAL_UART_IRQHandler+0x324>
 80031f2:	e185      	b.n	8003500 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	225c      	movs	r2, #92	; 0x5c
 80031f8:	5a9b      	ldrh	r3, [r3, r2]
 80031fa:	187a      	adds	r2, r7, r1
 80031fc:	8812      	ldrh	r2, [r2, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d300      	bcc.n	8003204 <HAL_UART_IRQHandler+0x334>
 8003202:	e17d      	b.n	8003500 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	187a      	adds	r2, r7, r1
 8003208:	215e      	movs	r1, #94	; 0x5e
 800320a:	8812      	ldrh	r2, [r2, #0]
 800320c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	589b      	ldr	r3, [r3, r2]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2220      	movs	r2, #32
 800321a:	4013      	ands	r3, r2
 800321c:	d170      	bne.n	8003300 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800321e:	f3ef 8310 	mrs	r3, PRIMASK
 8003222:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003226:	67bb      	str	r3, [r7, #120]	; 0x78
 8003228:	2301      	movs	r3, #1
 800322a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	49b4      	ldr	r1, [pc, #720]	; (8003510 <HAL_UART_IRQHandler+0x640>)
 8003240:	400a      	ands	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003246:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800324a:	f383 8810 	msr	PRIMASK, r3
}
 800324e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003250:	f3ef 8310 	mrs	r3, PRIMASK
 8003254:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003258:	677b      	str	r3, [r7, #116]	; 0x74
 800325a:	2301      	movs	r3, #1
 800325c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800325e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003260:	f383 8810 	msr	PRIMASK, r3
}
 8003264:	46c0      	nop			; (mov r8, r8)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	438a      	bics	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003278:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800327c:	f383 8810 	msr	PRIMASK, r3
}
 8003280:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003282:	f3ef 8310 	mrs	r3, PRIMASK
 8003286:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003288:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328a:	673b      	str	r3, [r7, #112]	; 0x70
 800328c:	2301      	movs	r3, #1
 800328e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003292:	f383 8810 	msr	PRIMASK, r3
}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2140      	movs	r1, #64	; 0x40
 80032a4:	438a      	bics	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]
 80032a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032aa:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ae:	f383 8810 	msr	PRIMASK, r3
}
 80032b2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	228c      	movs	r2, #140	; 0x8c
 80032b8:	2120      	movs	r1, #32
 80032ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032c2:	f3ef 8310 	mrs	r3, PRIMASK
 80032c6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80032c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032cc:	2301      	movs	r3, #1
 80032ce:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032d2:	f383 8810 	msr	PRIMASK, r3
}
 80032d6:	46c0      	nop			; (mov r8, r8)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2110      	movs	r1, #16
 80032e4:	438a      	bics	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ee:	f383 8810 	msr	PRIMASK, r3
}
 80032f2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	589b      	ldr	r3, [r3, r2]
 80032fa:	0018      	movs	r0, r3
 80032fc:	f7fd ffb2 	bl	8001264 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	225c      	movs	r2, #92	; 0x5c
 800330a:	5a9a      	ldrh	r2, [r3, r2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	215e      	movs	r1, #94	; 0x5e
 8003310:	5a5b      	ldrh	r3, [r3, r1]
 8003312:	b29b      	uxth	r3, r3
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	b29a      	uxth	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	0011      	movs	r1, r2
 800331c:	0018      	movs	r0, r3
 800331e:	f7fd f987 	bl	8000630 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003322:	e0ed      	b.n	8003500 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	225c      	movs	r2, #92	; 0x5c
 8003328:	5a99      	ldrh	r1, [r3, r2]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	225e      	movs	r2, #94	; 0x5e
 800332e:	5a9b      	ldrh	r3, [r3, r2]
 8003330:	b29a      	uxth	r2, r3
 8003332:	208e      	movs	r0, #142	; 0x8e
 8003334:	183b      	adds	r3, r7, r0
 8003336:	1a8a      	subs	r2, r1, r2
 8003338:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	225e      	movs	r2, #94	; 0x5e
 800333e:	5a9b      	ldrh	r3, [r3, r2]
 8003340:	b29b      	uxth	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d100      	bne.n	8003348 <HAL_UART_IRQHandler+0x478>
 8003346:	e0dd      	b.n	8003504 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003348:	183b      	adds	r3, r7, r0
 800334a:	881b      	ldrh	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d100      	bne.n	8003352 <HAL_UART_IRQHandler+0x482>
 8003350:	e0d8      	b.n	8003504 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003352:	f3ef 8310 	mrs	r3, PRIMASK
 8003356:	60fb      	str	r3, [r7, #12]
  return(result);
 8003358:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800335a:	2488      	movs	r4, #136	; 0x88
 800335c:	193a      	adds	r2, r7, r4
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	2301      	movs	r3, #1
 8003362:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f383 8810 	msr	PRIMASK, r3
}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4967      	ldr	r1, [pc, #412]	; (8003514 <HAL_UART_IRQHandler+0x644>)
 8003378:	400a      	ands	r2, r1
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	193b      	adds	r3, r7, r4
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f383 8810 	msr	PRIMASK, r3
}
 8003388:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800338a:	f3ef 8310 	mrs	r3, PRIMASK
 800338e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003390:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003392:	2484      	movs	r4, #132	; 0x84
 8003394:	193a      	adds	r2, r7, r4
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	2301      	movs	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f383 8810 	msr	PRIMASK, r3
}
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	495a      	ldr	r1, [pc, #360]	; (8003518 <HAL_UART_IRQHandler+0x648>)
 80033b0:	400a      	ands	r2, r1
 80033b2:	609a      	str	r2, [r3, #8]
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033ba:	6a3b      	ldr	r3, [r7, #32]
 80033bc:	f383 8810 	msr	PRIMASK, r3
}
 80033c0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	228c      	movs	r2, #140	; 0x8c
 80033c6:	2120      	movs	r1, #32
 80033c8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033d6:	f3ef 8310 	mrs	r3, PRIMASK
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033de:	2480      	movs	r4, #128	; 0x80
 80033e0:	193a      	adds	r2, r7, r4
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	2301      	movs	r3, #1
 80033e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			; (mov r8, r8)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2110      	movs	r1, #16
 80033fc:	438a      	bics	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	193b      	adds	r3, r7, r4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2202      	movs	r2, #2
 8003412:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003414:	183b      	adds	r3, r7, r0
 8003416:	881a      	ldrh	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	0011      	movs	r1, r2
 800341c:	0018      	movs	r0, r3
 800341e:	f7fd f907 	bl	8000630 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003422:	e06f      	b.n	8003504 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003424:	23a4      	movs	r3, #164	; 0xa4
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	035b      	lsls	r3, r3, #13
 800342e:	4013      	ands	r3, r2
 8003430:	d010      	beq.n	8003454 <HAL_UART_IRQHandler+0x584>
 8003432:	239c      	movs	r3, #156	; 0x9c
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	03db      	lsls	r3, r3, #15
 800343c:	4013      	ands	r3, r2
 800343e:	d009      	beq.n	8003454 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2280      	movs	r2, #128	; 0x80
 8003446:	0352      	lsls	r2, r2, #13
 8003448:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f000 fe44 	bl	80040da <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003452:	e05a      	b.n	800350a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003454:	23a4      	movs	r3, #164	; 0xa4
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	4013      	ands	r3, r2
 800345e:	d016      	beq.n	800348e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003460:	23a0      	movs	r3, #160	; 0xa0
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	4013      	ands	r3, r2
 800346a:	d106      	bne.n	800347a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800346c:	239c      	movs	r3, #156	; 0x9c
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	041b      	lsls	r3, r3, #16
 8003476:	4013      	ands	r3, r2
 8003478:	d009      	beq.n	800348e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800347e:	2b00      	cmp	r3, #0
 8003480:	d042      	beq.n	8003508 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	0010      	movs	r0, r2
 800348a:	4798      	blx	r3
    }
    return;
 800348c:	e03c      	b.n	8003508 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800348e:	23a4      	movs	r3, #164	; 0xa4
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2240      	movs	r2, #64	; 0x40
 8003496:	4013      	ands	r3, r2
 8003498:	d00a      	beq.n	80034b0 <HAL_UART_IRQHandler+0x5e0>
 800349a:	23a0      	movs	r3, #160	; 0xa0
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2240      	movs	r2, #64	; 0x40
 80034a2:	4013      	ands	r3, r2
 80034a4:	d004      	beq.n	80034b0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	0018      	movs	r0, r3
 80034aa:	f000 fdea 	bl	8004082 <UART_EndTransmit_IT>
    return;
 80034ae:	e02c      	b.n	800350a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80034b0:	23a4      	movs	r3, #164	; 0xa4
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	041b      	lsls	r3, r3, #16
 80034ba:	4013      	ands	r3, r2
 80034bc:	d00b      	beq.n	80034d6 <HAL_UART_IRQHandler+0x606>
 80034be:	23a0      	movs	r3, #160	; 0xa0
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	05db      	lsls	r3, r3, #23
 80034c8:	4013      	ands	r3, r2
 80034ca:	d004      	beq.n	80034d6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 fe13 	bl	80040fa <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034d4:	e019      	b.n	800350a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80034d6:	23a4      	movs	r3, #164	; 0xa4
 80034d8:	18fb      	adds	r3, r7, r3
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	045b      	lsls	r3, r3, #17
 80034e0:	4013      	ands	r3, r2
 80034e2:	d012      	beq.n	800350a <HAL_UART_IRQHandler+0x63a>
 80034e4:	23a0      	movs	r3, #160	; 0xa0
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	da0d      	bge.n	800350a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	0018      	movs	r0, r3
 80034f2:	f000 fdfa 	bl	80040ea <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034f6:	e008      	b.n	800350a <HAL_UART_IRQHandler+0x63a>
      return;
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	e006      	b.n	800350a <HAL_UART_IRQHandler+0x63a>
    return;
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	e004      	b.n	800350a <HAL_UART_IRQHandler+0x63a>
      return;
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	e002      	b.n	800350a <HAL_UART_IRQHandler+0x63a>
      return;
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	e000      	b.n	800350a <HAL_UART_IRQHandler+0x63a>
    return;
 8003508:	46c0      	nop			; (mov r8, r8)
  }
}
 800350a:	46bd      	mov	sp, r7
 800350c:	b02a      	add	sp, #168	; 0xa8
 800350e:	bdb0      	pop	{r4, r5, r7, pc}
 8003510:	fffffeff 	.word	0xfffffeff
 8003514:	fffffedf 	.word	0xfffffedf
 8003518:	effffffe 	.word	0xeffffffe

0800351c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}

0800355c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003564:	231a      	movs	r3, #26
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	2200      	movs	r2, #0
 800356a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	69db      	ldr	r3, [r3, #28]
 8003580:	4313      	orrs	r3, r2
 8003582:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4aa1      	ldr	r2, [pc, #644]	; (8003810 <UART_SetConfig+0x2b4>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	430a      	orrs	r2, r1
 8003598:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a9c      	ldr	r2, [pc, #624]	; (8003814 <UART_SetConfig+0x2b8>)
 80035a2:	4013      	ands	r3, r2
 80035a4:	0019      	movs	r1, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a1b      	ldr	r3, [r3, #32]
 80035bc:	69fa      	ldr	r2, [r7, #28]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a93      	ldr	r2, [pc, #588]	; (8003818 <UART_SetConfig+0x2bc>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	0019      	movs	r1, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	220f      	movs	r2, #15
 80035e0:	4393      	bics	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a89      	ldr	r2, [pc, #548]	; (800381c <UART_SetConfig+0x2c0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d127      	bne.n	800364a <UART_SetConfig+0xee>
 80035fa:	4b89      	ldr	r3, [pc, #548]	; (8003820 <UART_SetConfig+0x2c4>)
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	2203      	movs	r2, #3
 8003600:	4013      	ands	r3, r2
 8003602:	2b03      	cmp	r3, #3
 8003604:	d017      	beq.n	8003636 <UART_SetConfig+0xda>
 8003606:	d81b      	bhi.n	8003640 <UART_SetConfig+0xe4>
 8003608:	2b02      	cmp	r3, #2
 800360a:	d00a      	beq.n	8003622 <UART_SetConfig+0xc6>
 800360c:	d818      	bhi.n	8003640 <UART_SetConfig+0xe4>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <UART_SetConfig+0xbc>
 8003612:	2b01      	cmp	r3, #1
 8003614:	d00a      	beq.n	800362c <UART_SetConfig+0xd0>
 8003616:	e013      	b.n	8003640 <UART_SetConfig+0xe4>
 8003618:	231b      	movs	r3, #27
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	2200      	movs	r2, #0
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	e021      	b.n	8003666 <UART_SetConfig+0x10a>
 8003622:	231b      	movs	r3, #27
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	2202      	movs	r2, #2
 8003628:	701a      	strb	r2, [r3, #0]
 800362a:	e01c      	b.n	8003666 <UART_SetConfig+0x10a>
 800362c:	231b      	movs	r3, #27
 800362e:	18fb      	adds	r3, r7, r3
 8003630:	2204      	movs	r2, #4
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e017      	b.n	8003666 <UART_SetConfig+0x10a>
 8003636:	231b      	movs	r3, #27
 8003638:	18fb      	adds	r3, r7, r3
 800363a:	2208      	movs	r2, #8
 800363c:	701a      	strb	r2, [r3, #0]
 800363e:	e012      	b.n	8003666 <UART_SetConfig+0x10a>
 8003640:	231b      	movs	r3, #27
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	2210      	movs	r2, #16
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e00d      	b.n	8003666 <UART_SetConfig+0x10a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a75      	ldr	r2, [pc, #468]	; (8003824 <UART_SetConfig+0x2c8>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d104      	bne.n	800365e <UART_SetConfig+0x102>
 8003654:	231b      	movs	r3, #27
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
 800365c:	e003      	b.n	8003666 <UART_SetConfig+0x10a>
 800365e:	231b      	movs	r3, #27
 8003660:	18fb      	adds	r3, r7, r3
 8003662:	2210      	movs	r2, #16
 8003664:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	69da      	ldr	r2, [r3, #28]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	021b      	lsls	r3, r3, #8
 800366e:	429a      	cmp	r2, r3
 8003670:	d000      	beq.n	8003674 <UART_SetConfig+0x118>
 8003672:	e065      	b.n	8003740 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003674:	231b      	movs	r3, #27
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b08      	cmp	r3, #8
 800367c:	d015      	beq.n	80036aa <UART_SetConfig+0x14e>
 800367e:	dc18      	bgt.n	80036b2 <UART_SetConfig+0x156>
 8003680:	2b04      	cmp	r3, #4
 8003682:	d00d      	beq.n	80036a0 <UART_SetConfig+0x144>
 8003684:	dc15      	bgt.n	80036b2 <UART_SetConfig+0x156>
 8003686:	2b00      	cmp	r3, #0
 8003688:	d002      	beq.n	8003690 <UART_SetConfig+0x134>
 800368a:	2b02      	cmp	r3, #2
 800368c:	d005      	beq.n	800369a <UART_SetConfig+0x13e>
 800368e:	e010      	b.n	80036b2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003690:	f7fe ff96 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8003694:	0003      	movs	r3, r0
 8003696:	617b      	str	r3, [r7, #20]
        break;
 8003698:	e012      	b.n	80036c0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800369a:	4b63      	ldr	r3, [pc, #396]	; (8003828 <UART_SetConfig+0x2cc>)
 800369c:	617b      	str	r3, [r7, #20]
        break;
 800369e:	e00f      	b.n	80036c0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a0:	f7fe ff02 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 80036a4:	0003      	movs	r3, r0
 80036a6:	617b      	str	r3, [r7, #20]
        break;
 80036a8:	e00a      	b.n	80036c0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	021b      	lsls	r3, r3, #8
 80036ae:	617b      	str	r3, [r7, #20]
        break;
 80036b0:	e006      	b.n	80036c0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036b6:	231a      	movs	r3, #26
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
        break;
 80036be:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d100      	bne.n	80036c8 <UART_SetConfig+0x16c>
 80036c6:	e08d      	b.n	80037e4 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036cc:	4b57      	ldr	r3, [pc, #348]	; (800382c <UART_SetConfig+0x2d0>)
 80036ce:	0052      	lsls	r2, r2, #1
 80036d0:	5ad3      	ldrh	r3, [r2, r3]
 80036d2:	0019      	movs	r1, r3
 80036d4:	6978      	ldr	r0, [r7, #20]
 80036d6:	f7fc fd13 	bl	8000100 <__udivsi3>
 80036da:	0003      	movs	r3, r0
 80036dc:	005a      	lsls	r2, r3, #1
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	085b      	lsrs	r3, r3, #1
 80036e4:	18d2      	adds	r2, r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	0019      	movs	r1, r3
 80036ec:	0010      	movs	r0, r2
 80036ee:	f7fc fd07 	bl	8000100 <__udivsi3>
 80036f2:	0003      	movs	r3, r0
 80036f4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	2b0f      	cmp	r3, #15
 80036fa:	d91c      	bls.n	8003736 <UART_SetConfig+0x1da>
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	2380      	movs	r3, #128	; 0x80
 8003700:	025b      	lsls	r3, r3, #9
 8003702:	429a      	cmp	r2, r3
 8003704:	d217      	bcs.n	8003736 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	b29a      	uxth	r2, r3
 800370a:	200e      	movs	r0, #14
 800370c:	183b      	adds	r3, r7, r0
 800370e:	210f      	movs	r1, #15
 8003710:	438a      	bics	r2, r1
 8003712:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	085b      	lsrs	r3, r3, #1
 8003718:	b29b      	uxth	r3, r3
 800371a:	2207      	movs	r2, #7
 800371c:	4013      	ands	r3, r2
 800371e:	b299      	uxth	r1, r3
 8003720:	183b      	adds	r3, r7, r0
 8003722:	183a      	adds	r2, r7, r0
 8003724:	8812      	ldrh	r2, [r2, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	183a      	adds	r2, r7, r0
 8003730:	8812      	ldrh	r2, [r2, #0]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	e056      	b.n	80037e4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003736:	231a      	movs	r3, #26
 8003738:	18fb      	adds	r3, r7, r3
 800373a:	2201      	movs	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e051      	b.n	80037e4 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003740:	231b      	movs	r3, #27
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b08      	cmp	r3, #8
 8003748:	d015      	beq.n	8003776 <UART_SetConfig+0x21a>
 800374a:	dc18      	bgt.n	800377e <UART_SetConfig+0x222>
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00d      	beq.n	800376c <UART_SetConfig+0x210>
 8003750:	dc15      	bgt.n	800377e <UART_SetConfig+0x222>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <UART_SetConfig+0x200>
 8003756:	2b02      	cmp	r3, #2
 8003758:	d005      	beq.n	8003766 <UART_SetConfig+0x20a>
 800375a:	e010      	b.n	800377e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7fe ff30 	bl	80025c0 <HAL_RCC_GetPCLK1Freq>
 8003760:	0003      	movs	r3, r0
 8003762:	617b      	str	r3, [r7, #20]
        break;
 8003764:	e012      	b.n	800378c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003766:	4b30      	ldr	r3, [pc, #192]	; (8003828 <UART_SetConfig+0x2cc>)
 8003768:	617b      	str	r3, [r7, #20]
        break;
 800376a:	e00f      	b.n	800378c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800376c:	f7fe fe9c 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8003770:	0003      	movs	r3, r0
 8003772:	617b      	str	r3, [r7, #20]
        break;
 8003774:	e00a      	b.n	800378c <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	617b      	str	r3, [r7, #20]
        break;
 800377c:	e006      	b.n	800378c <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003782:	231a      	movs	r3, #26
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
        break;
 800378a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d028      	beq.n	80037e4 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003796:	4b25      	ldr	r3, [pc, #148]	; (800382c <UART_SetConfig+0x2d0>)
 8003798:	0052      	lsls	r2, r2, #1
 800379a:	5ad3      	ldrh	r3, [r2, r3]
 800379c:	0019      	movs	r1, r3
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7fc fcae 	bl	8000100 <__udivsi3>
 80037a4:	0003      	movs	r3, r0
 80037a6:	001a      	movs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	18d2      	adds	r2, r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	0019      	movs	r1, r3
 80037b6:	0010      	movs	r0, r2
 80037b8:	f7fc fca2 	bl	8000100 <__udivsi3>
 80037bc:	0003      	movs	r3, r0
 80037be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d90a      	bls.n	80037dc <UART_SetConfig+0x280>
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	025b      	lsls	r3, r3, #9
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d205      	bcs.n	80037dc <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	60da      	str	r2, [r3, #12]
 80037da:	e003      	b.n	80037e4 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80037dc:	231a      	movs	r3, #26
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	2201      	movs	r2, #1
 80037e2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	226a      	movs	r2, #106	; 0x6a
 80037e8:	2101      	movs	r1, #1
 80037ea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2268      	movs	r2, #104	; 0x68
 80037f0:	2101      	movs	r1, #1
 80037f2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003800:	231a      	movs	r3, #26
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	781b      	ldrb	r3, [r3, #0]
}
 8003806:	0018      	movs	r0, r3
 8003808:	46bd      	mov	sp, r7
 800380a:	b008      	add	sp, #32
 800380c:	bd80      	pop	{r7, pc}
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	cfff69f3 	.word	0xcfff69f3
 8003814:	ffffcfff 	.word	0xffffcfff
 8003818:	11fff4ff 	.word	0x11fff4ff
 800381c:	40013800 	.word	0x40013800
 8003820:	40021000 	.word	0x40021000
 8003824:	40004400 	.word	0x40004400
 8003828:	00f42400 	.word	0x00f42400
 800382c:	080044f8 	.word	0x080044f8

08003830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	2201      	movs	r2, #1
 800383e:	4013      	ands	r3, r2
 8003840:	d00b      	beq.n	800385a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	4a4a      	ldr	r2, [pc, #296]	; (8003974 <UART_AdvFeatureConfig+0x144>)
 800384a:	4013      	ands	r3, r2
 800384c:	0019      	movs	r1, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	430a      	orrs	r2, r1
 8003858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385e:	2202      	movs	r2, #2
 8003860:	4013      	ands	r3, r2
 8003862:	d00b      	beq.n	800387c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4a43      	ldr	r2, [pc, #268]	; (8003978 <UART_AdvFeatureConfig+0x148>)
 800386c:	4013      	ands	r3, r2
 800386e:	0019      	movs	r1, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003880:	2204      	movs	r2, #4
 8003882:	4013      	ands	r3, r2
 8003884:	d00b      	beq.n	800389e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	4a3b      	ldr	r2, [pc, #236]	; (800397c <UART_AdvFeatureConfig+0x14c>)
 800388e:	4013      	ands	r3, r2
 8003890:	0019      	movs	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	2208      	movs	r2, #8
 80038a4:	4013      	ands	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4a34      	ldr	r2, [pc, #208]	; (8003980 <UART_AdvFeatureConfig+0x150>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	0019      	movs	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	2210      	movs	r2, #16
 80038c6:	4013      	ands	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	4a2c      	ldr	r2, [pc, #176]	; (8003984 <UART_AdvFeatureConfig+0x154>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	2220      	movs	r2, #32
 80038e8:	4013      	ands	r3, r2
 80038ea:	d00b      	beq.n	8003904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	4a25      	ldr	r2, [pc, #148]	; (8003988 <UART_AdvFeatureConfig+0x158>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	2240      	movs	r2, #64	; 0x40
 800390a:	4013      	ands	r3, r2
 800390c:	d01d      	beq.n	800394a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a1d      	ldr	r2, [pc, #116]	; (800398c <UART_AdvFeatureConfig+0x15c>)
 8003916:	4013      	ands	r3, r2
 8003918:	0019      	movs	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800392a:	2380      	movs	r3, #128	; 0x80
 800392c:	035b      	lsls	r3, r3, #13
 800392e:	429a      	cmp	r2, r3
 8003930:	d10b      	bne.n	800394a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a15      	ldr	r2, [pc, #84]	; (8003990 <UART_AdvFeatureConfig+0x160>)
 800393a:	4013      	ands	r3, r2
 800393c:	0019      	movs	r1, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394e:	2280      	movs	r2, #128	; 0x80
 8003950:	4013      	ands	r3, r2
 8003952:	d00b      	beq.n	800396c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	4a0e      	ldr	r2, [pc, #56]	; (8003994 <UART_AdvFeatureConfig+0x164>)
 800395c:	4013      	ands	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	605a      	str	r2, [r3, #4]
  }
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	b002      	add	sp, #8
 8003972:	bd80      	pop	{r7, pc}
 8003974:	fffdffff 	.word	0xfffdffff
 8003978:	fffeffff 	.word	0xfffeffff
 800397c:	fffbffff 	.word	0xfffbffff
 8003980:	ffff7fff 	.word	0xffff7fff
 8003984:	ffffefff 	.word	0xffffefff
 8003988:	ffffdfff 	.word	0xffffdfff
 800398c:	ffefffff 	.word	0xffefffff
 8003990:	ff9fffff 	.word	0xff9fffff
 8003994:	fff7ffff 	.word	0xfff7ffff

08003998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af02      	add	r7, sp, #8
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2290      	movs	r2, #144	; 0x90
 80039a4:	2100      	movs	r1, #0
 80039a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a8:	f7fd fa64 	bl	8000e74 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2208      	movs	r2, #8
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d10c      	bne.n	80039d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	0391      	lsls	r1, r2, #14
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4a1a      	ldr	r2, [pc, #104]	; (8003a30 <UART_CheckIdleState+0x98>)
 80039c8:	9200      	str	r2, [sp, #0]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f000 f832 	bl	8003a34 <UART_WaitOnFlagUntilTimeout>
 80039d0:	1e03      	subs	r3, r0, #0
 80039d2:	d001      	beq.n	80039d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e026      	b.n	8003a26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2204      	movs	r2, #4
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b04      	cmp	r3, #4
 80039e4:	d10c      	bne.n	8003a00 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2280      	movs	r2, #128	; 0x80
 80039ea:	03d1      	lsls	r1, r2, #15
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	4a10      	ldr	r2, [pc, #64]	; (8003a30 <UART_CheckIdleState+0x98>)
 80039f0:	9200      	str	r2, [sp, #0]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f000 f81e 	bl	8003a34 <UART_WaitOnFlagUntilTimeout>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d001      	beq.n	8003a00 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e012      	b.n	8003a26 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2288      	movs	r2, #136	; 0x88
 8003a04:	2120      	movs	r1, #32
 8003a06:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	228c      	movs	r2, #140	; 0x8c
 8003a0c:	2120      	movs	r1, #32
 8003a0e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2284      	movs	r2, #132	; 0x84
 8003a20:	2100      	movs	r1, #0
 8003a22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	0018      	movs	r0, r3
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b004      	add	sp, #16
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	01ffffff 	.word	0x01ffffff

08003a34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b094      	sub	sp, #80	; 0x50
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	1dfb      	adds	r3, r7, #7
 8003a42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a44:	e0a7      	b.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a48:	3301      	adds	r3, #1
 8003a4a:	d100      	bne.n	8003a4e <UART_WaitOnFlagUntilTimeout+0x1a>
 8003a4c:	e0a3      	b.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a4e:	f7fd fa11 	bl	8000e74 <HAL_GetTick>
 8003a52:	0002      	movs	r2, r0
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d13f      	bne.n	8003ae4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a64:	f3ef 8310 	mrs	r3, PRIMASK
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6e:	2301      	movs	r3, #1
 8003a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	f383 8810 	msr	PRIMASK, r3
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	494e      	ldr	r1, [pc, #312]	; (8003bc0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a86:	400a      	ands	r2, r1
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	f383 8810 	msr	PRIMASK, r3
}
 8003a94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a96:	f3ef 8310 	mrs	r3, PRIMASK
 8003a9a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa6:	f383 8810 	msr	PRIMASK, r3
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2101      	movs	r1, #1
 8003ab8:	438a      	bics	r2, r1
 8003aba:	609a      	str	r2, [r3, #8]
 8003abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003abe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac2:	f383 8810 	msr	PRIMASK, r3
}
 8003ac6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2288      	movs	r2, #136	; 0x88
 8003acc:	2120      	movs	r1, #32
 8003ace:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	228c      	movs	r2, #140	; 0x8c
 8003ad4:	2120      	movs	r1, #32
 8003ad6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2284      	movs	r2, #132	; 0x84
 8003adc:	2100      	movs	r1, #0
 8003ade:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e069      	b.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2204      	movs	r2, #4
 8003aec:	4013      	ands	r3, r2
 8003aee:	d052      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	401a      	ands	r2, r3
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d148      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2280      	movs	r2, #128	; 0x80
 8003b0a:	0112      	lsls	r2, r2, #4
 8003b0c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b12:	613b      	str	r3, [r7, #16]
  return(result);
 8003b14:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b18:	2301      	movs	r3, #1
 8003b1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	f383 8810 	msr	PRIMASK, r3
}
 8003b22:	46c0      	nop			; (mov r8, r8)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4924      	ldr	r1, [pc, #144]	; (8003bc0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003b30:	400a      	ands	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	f383 8810 	msr	PRIMASK, r3
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b40:	f3ef 8310 	mrs	r3, PRIMASK
 8003b44:	61fb      	str	r3, [r7, #28]
  return(result);
 8003b46:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b48:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	f383 8810 	msr	PRIMASK, r3
}
 8003b54:	46c0      	nop			; (mov r8, r8)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2101      	movs	r1, #1
 8003b62:	438a      	bics	r2, r1
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	f383 8810 	msr	PRIMASK, r3
}
 8003b70:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2288      	movs	r2, #136	; 0x88
 8003b76:	2120      	movs	r1, #32
 8003b78:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	228c      	movs	r2, #140	; 0x8c
 8003b7e:	2120      	movs	r1, #32
 8003b80:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2290      	movs	r2, #144	; 0x90
 8003b86:	2120      	movs	r1, #32
 8003b88:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2284      	movs	r2, #132	; 0x84
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e010      	b.n	8003bb8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	425a      	negs	r2, r3
 8003ba6:	4153      	adcs	r3, r2
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	001a      	movs	r2, r3
 8003bac:	1dfb      	adds	r3, r7, #7
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d100      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x182>
 8003bb4:	e747      	b.n	8003a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b014      	add	sp, #80	; 0x50
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	fffffe5f 	.word	0xfffffe5f

08003bc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b090      	sub	sp, #64	; 0x40
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	1dbb      	adds	r3, r7, #6
 8003bd0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1dba      	adds	r2, r7, #6
 8003bdc:	215c      	movs	r1, #92	; 0x5c
 8003bde:	8812      	ldrh	r2, [r2, #0]
 8003be0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2290      	movs	r2, #144	; 0x90
 8003be6:	2100      	movs	r1, #0
 8003be8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	228c      	movs	r2, #140	; 0x8c
 8003bee:	2122      	movs	r1, #34	; 0x22
 8003bf0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2280      	movs	r2, #128	; 0x80
 8003bf6:	589b      	ldr	r3, [r3, r2]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d02d      	beq.n	8003c58 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	589b      	ldr	r3, [r3, r2]
 8003c02:	4a40      	ldr	r2, [pc, #256]	; (8003d04 <UART_Start_Receive_DMA+0x140>)
 8003c04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2280      	movs	r2, #128	; 0x80
 8003c0a:	589b      	ldr	r3, [r3, r2]
 8003c0c:	4a3e      	ldr	r2, [pc, #248]	; (8003d08 <UART_Start_Receive_DMA+0x144>)
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2280      	movs	r2, #128	; 0x80
 8003c14:	589b      	ldr	r3, [r3, r2]
 8003c16:	4a3d      	ldr	r2, [pc, #244]	; (8003d0c <UART_Start_Receive_DMA+0x148>)
 8003c18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2280      	movs	r2, #128	; 0x80
 8003c1e:	589b      	ldr	r3, [r3, r2]
 8003c20:	2200      	movs	r2, #0
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	5898      	ldr	r0, [r3, r2]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3324      	adds	r3, #36	; 0x24
 8003c30:	0019      	movs	r1, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	001a      	movs	r2, r3
 8003c38:	1dbb      	adds	r3, r7, #6
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	f7fd fa8c 	bl	8001158 <HAL_DMA_Start_IT>
 8003c40:	1e03      	subs	r3, r0, #0
 8003c42:	d009      	beq.n	8003c58 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2290      	movs	r2, #144	; 0x90
 8003c48:	2110      	movs	r1, #16
 8003c4a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	228c      	movs	r2, #140	; 0x8c
 8003c50:	2120      	movs	r1, #32
 8003c52:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e050      	b.n	8003cfa <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d019      	beq.n	8003c94 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c60:	f3ef 8310 	mrs	r3, PRIMASK
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c70:	f383 8810 	msr	PRIMASK, r3
}
 8003c74:	46c0      	nop			; (mov r8, r8)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2180      	movs	r1, #128	; 0x80
 8003c82:	0049      	lsls	r1, r1, #1
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c94:	f3ef 8310 	mrs	r3, PRIMASK
 8003c98:	613b      	str	r3, [r7, #16]
  return(result);
 8003c9a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f383 8810 	msr	PRIMASK, r3
}
 8003ca8:	46c0      	nop			; (mov r8, r8)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	f383 8810 	msr	PRIMASK, r3
}
 8003cc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cca:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ccc:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cce:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	609a      	str	r2, [r3, #8]
 8003cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	f383 8810 	msr	PRIMASK, r3
}
 8003cf6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b010      	add	sp, #64	; 0x40
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	08003e5d 	.word	0x08003e5d
 8003d08:	08003f8d 	.word	0x08003f8d
 8003d0c:	08003fcf 	.word	0x08003fcf

08003d10 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b08a      	sub	sp, #40	; 0x28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d18:	f3ef 8310 	mrs	r3, PRIMASK
 8003d1c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
 8003d22:	2301      	movs	r3, #1
 8003d24:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f383 8810 	msr	PRIMASK, r3
}
 8003d2c:	46c0      	nop			; (mov r8, r8)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	21c0      	movs	r1, #192	; 0xc0
 8003d3a:	438a      	bics	r2, r1
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	f383 8810 	msr	PRIMASK, r3
}
 8003d48:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4e:	617b      	str	r3, [r7, #20]
  return(result);
 8003d50:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003d52:	623b      	str	r3, [r7, #32]
 8003d54:	2301      	movs	r3, #1
 8003d56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	f383 8810 	msr	PRIMASK, r3
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4908      	ldr	r1, [pc, #32]	; (8003d8c <UART_EndTxTransfer+0x7c>)
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
 8003d70:	6a3b      	ldr	r3, [r7, #32]
 8003d72:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f383 8810 	msr	PRIMASK, r3
}
 8003d7a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2288      	movs	r2, #136	; 0x88
 8003d80:	2120      	movs	r1, #32
 8003d82:	5099      	str	r1, [r3, r2]
}
 8003d84:	46c0      	nop			; (mov r8, r8)
 8003d86:	46bd      	mov	sp, r7
 8003d88:	b00a      	add	sp, #40	; 0x28
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	ff7fffff 	.word	0xff7fffff

08003d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	; 0x38
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d98:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9c:	617b      	str	r3, [r7, #20]
  return(result);
 8003d9e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003da0:	637b      	str	r3, [r7, #52]	; 0x34
 8003da2:	2301      	movs	r3, #1
 8003da4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	f383 8810 	msr	PRIMASK, r3
}
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4926      	ldr	r1, [pc, #152]	; (8003e54 <UART_EndRxTransfer+0xc4>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f383 8810 	msr	PRIMASK, r3
}
 8003dc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dca:	f3ef 8310 	mrs	r3, PRIMASK
 8003dce:	623b      	str	r3, [r7, #32]
  return(result);
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dd2:	633b      	str	r3, [r7, #48]	; 0x30
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	f383 8810 	msr	PRIMASK, r3
}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	491b      	ldr	r1, [pc, #108]	; (8003e58 <UART_EndRxTransfer+0xc8>)
 8003dec:	400a      	ands	r2, r1
 8003dee:	609a      	str	r2, [r3, #8]
 8003df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df6:	f383 8810 	msr	PRIMASK, r3
}
 8003dfa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d118      	bne.n	8003e36 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e04:	f3ef 8310 	mrs	r3, PRIMASK
 8003e08:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e0e:	2301      	movs	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f383 8810 	msr	PRIMASK, r3
}
 8003e18:	46c0      	nop			; (mov r8, r8)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2110      	movs	r1, #16
 8003e26:	438a      	bics	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
 8003e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f383 8810 	msr	PRIMASK, r3
}
 8003e34:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	228c      	movs	r2, #140	; 0x8c
 8003e3a:	2120      	movs	r1, #32
 8003e3c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e4a:	46c0      	nop			; (mov r8, r8)
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	b00e      	add	sp, #56	; 0x38
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	fffffedf 	.word	0xfffffedf
 8003e58:	effffffe 	.word	0xeffffffe

08003e5c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b094      	sub	sp, #80	; 0x50
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	2220      	movs	r2, #32
 8003e72:	4013      	ands	r3, r2
 8003e74:	d16f      	bne.n	8003f56 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e78:	225e      	movs	r2, #94	; 0x5e
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e82:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e84:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e88:	2301      	movs	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f383 8810 	msr	PRIMASK, r3
}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	493a      	ldr	r1, [pc, #232]	; (8003f88 <UART_DMAReceiveCplt+0x12c>)
 8003ea0:	400a      	ands	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	f383 8810 	msr	PRIMASK, r3
}
 8003eae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eba:	2301      	movs	r3, #1
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	f383 8810 	msr	PRIMASK, r3
}
 8003ec4:	46c0      	nop			; (mov r8, r8)
 8003ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2101      	movs	r1, #1
 8003ed2:	438a      	bics	r2, r1
 8003ed4:	609a      	str	r2, [r3, #8]
 8003ed6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003edc:	f383 8810 	msr	PRIMASK, r3
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
 8003eec:	2301      	movs	r3, #1
 8003eee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef2:	f383 8810 	msr	PRIMASK, r3
}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689a      	ldr	r2, [r3, #8]
 8003efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2140      	movs	r1, #64	; 0x40
 8003f04:	438a      	bics	r2, r1
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0e:	f383 8810 	msr	PRIMASK, r3
}
 8003f12:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f16:	228c      	movs	r2, #140	; 0x8c
 8003f18:	2120      	movs	r1, #32
 8003f1a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d118      	bne.n	8003f56 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f24:	f3ef 8310 	mrs	r3, PRIMASK
 8003f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f2e:	2301      	movs	r3, #1
 8003f30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f383 8810 	msr	PRIMASK, r3
}
 8003f38:	46c0      	nop			; (mov r8, r8)
 8003f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2110      	movs	r1, #16
 8003f46:	438a      	bics	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	f383 8810 	msr	PRIMASK, r3
}
 8003f54:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f58:	2200      	movs	r2, #0
 8003f5a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d108      	bne.n	8003f76 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f66:	225c      	movs	r2, #92	; 0x5c
 8003f68:	5a9a      	ldrh	r2, [r3, r2]
 8003f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f6c:	0011      	movs	r1, r2
 8003f6e:	0018      	movs	r0, r3
 8003f70:	f7fc fb5e 	bl	8000630 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003f74:	e003      	b.n	8003f7e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fad7 	bl	800352c <HAL_UART_RxCpltCallback>
}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b014      	add	sp, #80	; 0x50
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	fffffeff 	.word	0xfffffeff

08003f8c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f98:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d10a      	bne.n	8003fbe <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	225c      	movs	r2, #92	; 0x5c
 8003fac:	5a9b      	ldrh	r3, [r3, r2]
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	0011      	movs	r1, r2
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f7fc fb3a 	bl	8000630 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fbc:	e003      	b.n	8003fc6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff fabb 	bl	800353c <HAL_UART_RxHalfCpltCallback>
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b086      	sub	sp, #24
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fda:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2288      	movs	r2, #136	; 0x88
 8003fe0:	589b      	ldr	r3, [r3, r2]
 8003fe2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	228c      	movs	r2, #140	; 0x8c
 8003fe8:	589b      	ldr	r3, [r3, r2]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2280      	movs	r2, #128	; 0x80
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	2b80      	cmp	r3, #128	; 0x80
 8003ff8:	d10a      	bne.n	8004010 <UART_DMAError+0x42>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b21      	cmp	r3, #33	; 0x21
 8003ffe:	d107      	bne.n	8004010 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2256      	movs	r2, #86	; 0x56
 8004004:	2100      	movs	r1, #0
 8004006:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	0018      	movs	r0, r3
 800400c:	f7ff fe80 	bl	8003d10 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2240      	movs	r2, #64	; 0x40
 8004018:	4013      	ands	r3, r2
 800401a:	2b40      	cmp	r3, #64	; 0x40
 800401c:	d10a      	bne.n	8004034 <UART_DMAError+0x66>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b22      	cmp	r3, #34	; 0x22
 8004022:	d107      	bne.n	8004034 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	225e      	movs	r2, #94	; 0x5e
 8004028:	2100      	movs	r1, #0
 800402a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	0018      	movs	r0, r3
 8004030:	f7ff feae 	bl	8003d90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2290      	movs	r2, #144	; 0x90
 8004038:	589b      	ldr	r3, [r3, r2]
 800403a:	2210      	movs	r2, #16
 800403c:	431a      	orrs	r2, r3
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	2190      	movs	r1, #144	; 0x90
 8004042:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	0018      	movs	r0, r3
 8004048:	f7ff fa80 	bl	800354c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	b006      	add	sp, #24
 8004052:	bd80      	pop	{r7, pc}

08004054 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	225e      	movs	r2, #94	; 0x5e
 8004066:	2100      	movs	r1, #0
 8004068:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2256      	movs	r2, #86	; 0x56
 800406e:	2100      	movs	r1, #0
 8004070:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff fa69 	bl	800354c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407a:	46c0      	nop			; (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b004      	add	sp, #16
 8004080:	bd80      	pop	{r7, pc}

08004082 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b086      	sub	sp, #24
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800408a:	f3ef 8310 	mrs	r3, PRIMASK
 800408e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004090:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	2301      	movs	r3, #1
 8004096:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f383 8810 	msr	PRIMASK, r3
}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2140      	movs	r1, #64	; 0x40
 80040ac:	438a      	bics	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f383 8810 	msr	PRIMASK, r3
}
 80040ba:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2288      	movs	r2, #136	; 0x88
 80040c0:	2120      	movs	r1, #32
 80040c2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff fa25 	bl	800351c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b006      	add	sp, #24
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b082      	sub	sp, #8
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b002      	add	sp, #8
 80040e8:	bd80      	pop	{r7, pc}

080040ea <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b082      	sub	sp, #8
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	46bd      	mov	sp, r7
 80040f6:	b002      	add	sp, #8
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b082      	sub	sp, #8
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	46bd      	mov	sp, r7
 8004106:	b002      	add	sp, #8
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2284      	movs	r2, #132	; 0x84
 8004118:	5c9b      	ldrb	r3, [r3, r2]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d101      	bne.n	8004122 <HAL_UARTEx_DisableFifoMode+0x16>
 800411e:	2302      	movs	r3, #2
 8004120:	e027      	b.n	8004172 <HAL_UARTEx_DisableFifoMode+0x66>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2284      	movs	r2, #132	; 0x84
 8004126:	2101      	movs	r1, #1
 8004128:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2288      	movs	r2, #136	; 0x88
 800412e:	2124      	movs	r1, #36	; 0x24
 8004130:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2101      	movs	r1, #1
 8004146:	438a      	bics	r2, r1
 8004148:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a0b      	ldr	r2, [pc, #44]	; (800417c <HAL_UARTEx_DisableFifoMode+0x70>)
 800414e:	4013      	ands	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2288      	movs	r2, #136	; 0x88
 8004164:	2120      	movs	r1, #32
 8004166:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2284      	movs	r2, #132	; 0x84
 800416c:	2100      	movs	r1, #0
 800416e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	0018      	movs	r0, r3
 8004174:	46bd      	mov	sp, r7
 8004176:	b004      	add	sp, #16
 8004178:	bd80      	pop	{r7, pc}
 800417a:	46c0      	nop			; (mov r8, r8)
 800417c:	dfffffff 	.word	0xdfffffff

08004180 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2284      	movs	r2, #132	; 0x84
 800418e:	5c9b      	ldrb	r3, [r3, r2]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004194:	2302      	movs	r3, #2
 8004196:	e02e      	b.n	80041f6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2284      	movs	r2, #132	; 0x84
 800419c:	2101      	movs	r1, #1
 800419e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2288      	movs	r2, #136	; 0x88
 80041a4:	2124      	movs	r1, #36	; 0x24
 80041a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2101      	movs	r1, #1
 80041bc:	438a      	bics	r2, r1
 80041be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	08d9      	lsrs	r1, r3, #3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	0018      	movs	r0, r3
 80041d8:	f000 f8bc 	bl	8004354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2288      	movs	r2, #136	; 0x88
 80041e8:	2120      	movs	r1, #32
 80041ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2284      	movs	r2, #132	; 0x84
 80041f0:	2100      	movs	r1, #0
 80041f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	0018      	movs	r0, r3
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
	...

08004200 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2284      	movs	r2, #132	; 0x84
 800420e:	5c9b      	ldrb	r3, [r3, r2]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004214:	2302      	movs	r3, #2
 8004216:	e02f      	b.n	8004278 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2284      	movs	r2, #132	; 0x84
 800421c:	2101      	movs	r1, #1
 800421e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2288      	movs	r2, #136	; 0x88
 8004224:	2124      	movs	r1, #36	; 0x24
 8004226:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2101      	movs	r1, #1
 800423c:	438a      	bics	r2, r1
 800423e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4a0e      	ldr	r2, [pc, #56]	; (8004280 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004248:	4013      	ands	r3, r2
 800424a:	0019      	movs	r1, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	0018      	movs	r0, r3
 800425a:	f000 f87b 	bl	8004354 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2288      	movs	r2, #136	; 0x88
 800426a:	2120      	movs	r1, #32
 800426c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2284      	movs	r2, #132	; 0x84
 8004272:	2100      	movs	r1, #0
 8004274:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	0018      	movs	r0, r3
 800427a:	46bd      	mov	sp, r7
 800427c:	b004      	add	sp, #16
 800427e:	bd80      	pop	{r7, pc}
 8004280:	f1ffffff 	.word	0xf1ffffff

08004284 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004284:	b5b0      	push	{r4, r5, r7, lr}
 8004286:	b08a      	sub	sp, #40	; 0x28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	1dbb      	adds	r3, r7, #6
 8004290:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	228c      	movs	r2, #140	; 0x8c
 8004296:	589b      	ldr	r3, [r3, r2]
 8004298:	2b20      	cmp	r3, #32
 800429a:	d156      	bne.n	800434a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80042a2:	1dbb      	adds	r3, r7, #6
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e04e      	b.n	800434c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	2380      	movs	r3, #128	; 0x80
 80042b4:	015b      	lsls	r3, r3, #5
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d109      	bne.n	80042ce <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d105      	bne.n	80042ce <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2201      	movs	r2, #1
 80042c6:	4013      	ands	r3, r2
 80042c8:	d001      	beq.n	80042ce <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e03e      	b.n	800434c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80042da:	2527      	movs	r5, #39	; 0x27
 80042dc:	197c      	adds	r4, r7, r5
 80042de:	1dbb      	adds	r3, r7, #6
 80042e0:	881a      	ldrh	r2, [r3, #0]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	0018      	movs	r0, r3
 80042e8:	f7ff fc6c 	bl	8003bc4 <UART_Start_Receive_DMA>
 80042ec:	0003      	movs	r3, r0
 80042ee:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80042f0:	197b      	adds	r3, r7, r5
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d124      	bne.n	8004342 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d11c      	bne.n	800433a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2210      	movs	r2, #16
 8004306:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004308:	f3ef 8310 	mrs	r3, PRIMASK
 800430c:	617b      	str	r3, [r7, #20]
  return(result);
 800430e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004310:	623b      	str	r3, [r7, #32]
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f383 8810 	msr	PRIMASK, r3
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2110      	movs	r1, #16
 800432a:	430a      	orrs	r2, r1
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004332:	69fb      	ldr	r3, [r7, #28]
 8004334:	f383 8810 	msr	PRIMASK, r3
}
 8004338:	e003      	b.n	8004342 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800433a:	2327      	movs	r3, #39	; 0x27
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004342:	2327      	movs	r3, #39	; 0x27
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	e000      	b.n	800434c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
  }
}
 800434c:	0018      	movs	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	b00a      	add	sp, #40	; 0x28
 8004352:	bdb0      	pop	{r4, r5, r7, pc}

08004354 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004360:	2b00      	cmp	r3, #0
 8004362:	d108      	bne.n	8004376 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	226a      	movs	r2, #106	; 0x6a
 8004368:	2101      	movs	r1, #1
 800436a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2268      	movs	r2, #104	; 0x68
 8004370:	2101      	movs	r1, #1
 8004372:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004374:	e043      	b.n	80043fe <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004376:	260f      	movs	r6, #15
 8004378:	19bb      	adds	r3, r7, r6
 800437a:	2208      	movs	r2, #8
 800437c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800437e:	200e      	movs	r0, #14
 8004380:	183b      	adds	r3, r7, r0
 8004382:	2208      	movs	r2, #8
 8004384:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	0e5b      	lsrs	r3, r3, #25
 800438e:	b2da      	uxtb	r2, r3
 8004390:	240d      	movs	r4, #13
 8004392:	193b      	adds	r3, r7, r4
 8004394:	2107      	movs	r1, #7
 8004396:	400a      	ands	r2, r1
 8004398:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	0f5b      	lsrs	r3, r3, #29
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	250c      	movs	r5, #12
 80043a6:	197b      	adds	r3, r7, r5
 80043a8:	2107      	movs	r1, #7
 80043aa:	400a      	ands	r2, r1
 80043ac:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043ae:	183b      	adds	r3, r7, r0
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	197a      	adds	r2, r7, r5
 80043b4:	7812      	ldrb	r2, [r2, #0]
 80043b6:	4914      	ldr	r1, [pc, #80]	; (8004408 <UARTEx_SetNbDataToProcess+0xb4>)
 80043b8:	5c8a      	ldrb	r2, [r1, r2]
 80043ba:	435a      	muls	r2, r3
 80043bc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80043be:	197b      	adds	r3, r7, r5
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	4a12      	ldr	r2, [pc, #72]	; (800440c <UARTEx_SetNbDataToProcess+0xb8>)
 80043c4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043c6:	0019      	movs	r1, r3
 80043c8:	f7fb ff24 	bl	8000214 <__divsi3>
 80043cc:	0003      	movs	r3, r0
 80043ce:	b299      	uxth	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	226a      	movs	r2, #106	; 0x6a
 80043d4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043d6:	19bb      	adds	r3, r7, r6
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	193a      	adds	r2, r7, r4
 80043dc:	7812      	ldrb	r2, [r2, #0]
 80043de:	490a      	ldr	r1, [pc, #40]	; (8004408 <UARTEx_SetNbDataToProcess+0xb4>)
 80043e0:	5c8a      	ldrb	r2, [r1, r2]
 80043e2:	435a      	muls	r2, r3
 80043e4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80043e6:	193b      	adds	r3, r7, r4
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <UARTEx_SetNbDataToProcess+0xb8>)
 80043ec:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043ee:	0019      	movs	r1, r3
 80043f0:	f7fb ff10 	bl	8000214 <__divsi3>
 80043f4:	0003      	movs	r3, r0
 80043f6:	b299      	uxth	r1, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2268      	movs	r2, #104	; 0x68
 80043fc:	5299      	strh	r1, [r3, r2]
}
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	46bd      	mov	sp, r7
 8004402:	b005      	add	sp, #20
 8004404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	08004510 	.word	0x08004510
 800440c:	08004518 	.word	0x08004518

08004410 <__libc_init_array>:
 8004410:	b570      	push	{r4, r5, r6, lr}
 8004412:	2600      	movs	r6, #0
 8004414:	4d0c      	ldr	r5, [pc, #48]	; (8004448 <__libc_init_array+0x38>)
 8004416:	4c0d      	ldr	r4, [pc, #52]	; (800444c <__libc_init_array+0x3c>)
 8004418:	1b64      	subs	r4, r4, r5
 800441a:	10a4      	asrs	r4, r4, #2
 800441c:	42a6      	cmp	r6, r4
 800441e:	d109      	bne.n	8004434 <__libc_init_array+0x24>
 8004420:	2600      	movs	r6, #0
 8004422:	f000 f821 	bl	8004468 <_init>
 8004426:	4d0a      	ldr	r5, [pc, #40]	; (8004450 <__libc_init_array+0x40>)
 8004428:	4c0a      	ldr	r4, [pc, #40]	; (8004454 <__libc_init_array+0x44>)
 800442a:	1b64      	subs	r4, r4, r5
 800442c:	10a4      	asrs	r4, r4, #2
 800442e:	42a6      	cmp	r6, r4
 8004430:	d105      	bne.n	800443e <__libc_init_array+0x2e>
 8004432:	bd70      	pop	{r4, r5, r6, pc}
 8004434:	00b3      	lsls	r3, r6, #2
 8004436:	58eb      	ldr	r3, [r5, r3]
 8004438:	4798      	blx	r3
 800443a:	3601      	adds	r6, #1
 800443c:	e7ee      	b.n	800441c <__libc_init_array+0xc>
 800443e:	00b3      	lsls	r3, r6, #2
 8004440:	58eb      	ldr	r3, [r5, r3]
 8004442:	4798      	blx	r3
 8004444:	3601      	adds	r6, #1
 8004446:	e7f2      	b.n	800442e <__libc_init_array+0x1e>
 8004448:	08004520 	.word	0x08004520
 800444c:	08004520 	.word	0x08004520
 8004450:	08004520 	.word	0x08004520
 8004454:	08004524 	.word	0x08004524

08004458 <memset>:
 8004458:	0003      	movs	r3, r0
 800445a:	1882      	adds	r2, r0, r2
 800445c:	4293      	cmp	r3, r2
 800445e:	d100      	bne.n	8004462 <memset+0xa>
 8004460:	4770      	bx	lr
 8004462:	7019      	strb	r1, [r3, #0]
 8004464:	3301      	adds	r3, #1
 8004466:	e7f9      	b.n	800445c <memset+0x4>

08004468 <_init>:
 8004468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800446a:	46c0      	nop			; (mov r8, r8)
 800446c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446e:	bc08      	pop	{r3}
 8004470:	469e      	mov	lr, r3
 8004472:	4770      	bx	lr

08004474 <_fini>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr
