
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039d4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b3c  08003b3c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003b3c  08003b3c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b3c  08003b3c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b3c  08003b3c  00013b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b40  08003b40  00013b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000364  20000078  08003bbc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000e04  200003dc  08003bbc  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020b4a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000049f3  00000000  00000000  00040bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000139d4  00000000  00000000  000455dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00058fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001bb8  00000000  00000000  0005a0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e36  00000000  00000000  0005bc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002432b  00000000  00000000  00075a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d073  00000000  00000000  00099dc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00136e3c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003344  00000000  00000000  00136e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000078 	.word	0x20000078
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003a74 	.word	0x08003a74

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000007c 	.word	0x2000007c
 80000fc:	08003a74 	.word	0x08003a74

08000100 <__gnu_thumb1_case_uqi>:
 8000100:	b402      	push	{r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0049      	lsls	r1, r1, #1
 8000108:	5c09      	ldrb	r1, [r1, r0]
 800010a:	0049      	lsls	r1, r1, #1
 800010c:	448e      	add	lr, r1
 800010e:	bc02      	pop	{r1}
 8000110:	4770      	bx	lr
 8000112:	46c0      	nop			; (mov r8, r8)

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <MAX485_ReciveToIdleDMA>:
static void MAX485_TransmitMode(void)
{
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, 1);
}
void MAX485_ReciveToIdleDMA(uint8_t *Data, uint16_t Length)
{
 8000400:	b570      	push	{r4, r5, r6, lr}
 8000402:	000d      	movs	r5, r1
 8000404:	0004      	movs	r4, r0
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, 0);
 8000406:	2180      	movs	r1, #128	; 0x80
 8000408:	20a0      	movs	r0, #160	; 0xa0
 800040a:	2200      	movs	r2, #0
 800040c:	0189      	lsls	r1, r1, #6
 800040e:	05c0      	lsls	r0, r0, #23
 8000410:	f001 fc92 	bl	8001d38 <HAL_GPIO_WritePin>
   MAX485_ListeningMode();
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8000414:	002a      	movs	r2, r5
 8000416:	0021      	movs	r1, r4
 8000418:	4801      	ldr	r0, [pc, #4]	; (8000420 <MAX485_ReciveToIdleDMA+0x20>)
 800041a:	f003 facd 	bl	80039b8 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800041e:	bd70      	pop	{r4, r5, r6, pc}
 8000420:	20000344 	.word	0x20000344

08000424 <MAX485_TransmitData>:
void MAX485_TransmitData(uint8_t *Data, uint16_t Length)
{
 8000424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, 1);
 8000426:	2780      	movs	r7, #128	; 0x80
 8000428:	26a0      	movs	r6, #160	; 0xa0
 800042a:	01bf      	lsls	r7, r7, #6
 800042c:	05f6      	lsls	r6, r6, #23
{
 800042e:	0004      	movs	r4, r0
 8000430:	000d      	movs	r5, r1
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, 1);
 8000432:	2201      	movs	r2, #1
 8000434:	0039      	movs	r1, r7
 8000436:	0030      	movs	r0, r6
 8000438:	f001 fc7e 	bl	8001d38 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
   MAX485_TransmitMode();
   __disable_irq();
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 800043e:	23fa      	movs	r3, #250	; 0xfa
 8000440:	002a      	movs	r2, r5
 8000442:	0021      	movs	r1, r4
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4805      	ldr	r0, [pc, #20]	; (800045c <MAX485_TransmitData+0x38>)
 8000448:	f003 f8fc 	bl	8003644 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 800044c:	b662      	cpsie	i
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, 0);
 800044e:	0039      	movs	r1, r7
 8000450:	0030      	movs	r0, r6
 8000452:	2200      	movs	r2, #0
 8000454:	f001 fc70 	bl	8001d38 <HAL_GPIO_WritePin>
   __enable_irq();
   MAX485_ListeningMode();
}
 8000458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	20000344 	.word	0x20000344

08000460 <MAX485_Init>:
void MAX485_Init(MAX_TypeDef *max)
{
   MAX = max;
 8000460:	4b01      	ldr	r3, [pc, #4]	; (8000468 <MAX485_Init+0x8>)
 8000462:	6018      	str	r0, [r3, #0]
}
 8000464:	4770      	bx	lr
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	20000094 	.word	0x20000094

0800046c <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
   if(Size > 4 && Size < 101)
 800046c:	1f4b      	subs	r3, r1, #5
{
 800046e:	b510      	push	{r4, lr}
   if(Size > 4 && Size < 101)
 8000470:	2b5f      	cmp	r3, #95	; 0x5f
 8000472:	d804      	bhi.n	800047e <HAL_UARTEx_RxEventCallback+0x12>
   {
      MAX->DataSize = Size;
 8000474:	4b02      	ldr	r3, [pc, #8]	; (8000480 <HAL_UARTEx_RxEventCallback+0x14>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	6099      	str	r1, [r3, #8]
      MAX_InterruptTask();
 800047a:	f000 f993 	bl	80007a4 <MAX_InterruptTask>
   }
}
 800047e:	bd10      	pop	{r4, pc}
 8000480:	20000094 	.word	0x20000094

08000484 <MAX_InitializeFunction>:
   MAXDataTransmit[7] = (crc & 0xff);
   MAX485_TransmitData(MAXDataTransmit, 8);
}
static void MAX_InitializeFunction(void)
{
   MAX->NewEvent = MAX_EVENT_END_INITIALIZE;
 8000484:	2202      	movs	r2, #2
 8000486:	4b02      	ldr	r3, [pc, #8]	; (8000490 <MAX_InitializeFunction+0xc>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	705a      	strb	r2, [r3, #1]
}
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	20000098 	.word	0x20000098

08000494 <MAX_RunningFunction>:
         }
      }
   }
}
static void MAX_RunningFunction(void)
{
 8000494:	b510      	push	{r4, lr}
   switch(MAXDataRecive[2])
 8000496:	4c11      	ldr	r4, [pc, #68]	; (80004dc <MAX_RunningFunction+0x48>)
 8000498:	78a3      	ldrb	r3, [r4, #2]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d009      	beq.n	80004b2 <MAX_RunningFunction+0x1e>
 800049e:	2b03      	cmp	r3, #3
 80004a0:	d016      	beq.n	80004d0 <MAX_RunningFunction+0x3c>
 80004a2:	2b01      	cmp	r3, #1
 80004a4:	d10f      	bne.n	80004c6 <MAX_RunningFunction+0x32>
   {
      case MAX_COMMAND:
      {
         if(MAXCommandFunction[MAXDataRecive[3] - 1].MAXCommandFunction != NULL)
 80004a6:	78e3      	ldrb	r3, [r4, #3]
 80004a8:	4a0d      	ldr	r2, [pc, #52]	; (80004e0 <MAX_RunningFunction+0x4c>)
 80004aa:	3b01      	subs	r3, #1
 80004ac:	009b      	lsls	r3, r3, #2
         }
         break;
      }
      case MAX_MESSAGE:
      {
         if(MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction != NULL)
 80004ae:	589b      	ldr	r3, [r3, r2]
 80004b0:	e001      	b.n	80004b6 <MAX_RunningFunction+0x22>
         if(MAXDataFunctions.MAXDataFunction != NULL)
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MAX_RunningFunction+0x50>)
 80004b4:	681b      	ldr	r3, [r3, #0]
         if(MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction != NULL)
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d005      	beq.n	80004c6 <MAX_RunningFunction+0x32>
         {
            MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction(MAXDataRecive, MAX->DataSize, 4);
 80004ba:	4a0b      	ldr	r2, [pc, #44]	; (80004e8 <MAX_RunningFunction+0x54>)
 80004bc:	0020      	movs	r0, r4
 80004be:	6811      	ldr	r1, [r2, #0]
 80004c0:	2204      	movs	r2, #4
 80004c2:	6889      	ldr	r1, [r1, #8]
 80004c4:	4798      	blx	r3
      default:
      {
         break;
      }
   }
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 80004c6:	2164      	movs	r1, #100	; 0x64
 80004c8:	0020      	movs	r0, r4
 80004ca:	f7ff ff99 	bl	8000400 <MAX485_ReciveToIdleDMA>
}
 80004ce:	bd10      	pop	{r4, pc}
         if(MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction != NULL)
 80004d0:	78e3      	ldrb	r3, [r4, #3]
 80004d2:	4a06      	ldr	r2, [pc, #24]	; (80004ec <MAX_RunningFunction+0x58>)
 80004d4:	3b01      	subs	r3, #1
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	e7e9      	b.n	80004ae <MAX_RunningFunction+0x1a>
 80004da:	46c0      	nop			; (mov r8, r8)
 80004dc:	200000ac 	.word	0x200000ac
 80004e0:	2000009c 	.word	0x2000009c
 80004e4:	200000a8 	.word	0x200000a8
 80004e8:	20000098 	.word	0x20000098
 80004ec:	20000174 	.word	0x20000174

080004f0 <MAX_IdleFunction>:
{
 80004f0:	b510      	push	{r4, lr}
   if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
 80004f2:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <MAX_IdleFunction+0x30>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	791a      	ldrb	r2, [r3, #4]
 80004f8:	b2d1      	uxtb	r1, r2
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	d103      	bne.n	8000506 <MAX_IdleFunction+0x16>
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 80004fe:	2200      	movs	r2, #0
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
 8000500:	7059      	strb	r1, [r3, #1]
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 8000502:	711a      	strb	r2, [r3, #4]
}
 8000504:	bd10      	pop	{r4, pc}
   else if(MAX->SendFlag == MAX_SEND_FLAG_SET)
 8000506:	7b5a      	ldrb	r2, [r3, #13]
 8000508:	2a01      	cmp	r2, #1
 800050a:	d1fb      	bne.n	8000504 <MAX_IdleFunction+0x14>
      MAX->SendFlag = MAX_SEND_FLAG_RESET;
 800050c:	2200      	movs	r2, #0
 800050e:	735a      	strb	r2, [r3, #13]
      MAX->NewEvent = MAX_EVENT_SEND;
 8000510:	3206      	adds	r2, #6
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8000512:	2164      	movs	r1, #100	; 0x64
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <MAX_IdleFunction+0x34>)
      MAX->NewEvent = MAX_EVENT_SEND;
 8000516:	705a      	strb	r2, [r3, #1]
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8000518:	f7ff ff72 	bl	8000400 <MAX485_ReciveToIdleDMA>
}
 800051c:	e7f2      	b.n	8000504 <MAX_IdleFunction+0x14>
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	20000098 	.word	0x20000098
 8000524:	200000ac 	.word	0x200000ac

08000528 <MAX_ParseResponseFunction>:
}
static void MAX_ParseResponseFunction(void)
{
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
                          | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 8000528:	2001      	movs	r0, #1
{
 800052a:	b570      	push	{r4, r5, r6, lr}
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 800052c:	4e20      	ldr	r6, [pc, #128]	; (80005b0 <MAX_ParseResponseFunction+0x88>)
 800052e:	4c21      	ldr	r4, [pc, #132]	; (80005b4 <MAX_ParseResponseFunction+0x8c>)
 8000530:	6833      	ldr	r3, [r6, #0]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 8000532:	4240      	negs	r0, r0
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	1f19      	subs	r1, r3, #4
 8000538:	18e3      	adds	r3, r4, r3
 800053a:	1eda      	subs	r2, r3, #3
 800053c:	7815      	ldrb	r5, [r2, #0]
 800053e:	5c62      	ldrb	r2, [r4, r1]
 8000540:	042d      	lsls	r5, r5, #16
 8000542:	0612      	lsls	r2, r2, #24
 8000544:	4315      	orrs	r5, r2
                          | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 8000546:	1e5a      	subs	r2, r3, #1
 8000548:	3b02      	subs	r3, #2
 800054a:	7812      	ldrb	r2, [r2, #0]
 800054c:	781b      	ldrb	r3, [r3, #0]
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 800054e:	4315      	orrs	r5, r2
                          | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 8000550:	021b      	lsls	r3, r3, #8
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 8000552:	0022      	movs	r2, r4
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8000554:	431d      	orrs	r5, r3
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 8000556:	f000 fad5 	bl	8000b04 <Crc>
   {
      if(MAXDataRecive[0] == MAX->DeviceType && MAXDataRecive[2] == MAX_MESSAGE)
 800055a:	6833      	ldr	r3, [r6, #0]
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 800055c:	42a8      	cmp	r0, r5
 800055e:	d111      	bne.n	8000584 <MAX_ParseResponseFunction+0x5c>
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
      }
   }
   else if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
   {
      if(MAXDataRecive[0] == MAX->DeviceType && MAXDataRecive[2] == MAX_MESSAGE)
 8000560:	7821      	ldrb	r1, [r4, #0]
 8000562:	795a      	ldrb	r2, [r3, #5]
 8000564:	4291      	cmp	r1, r2
 8000566:	d116      	bne.n	8000596 <MAX_ParseResponseFunction+0x6e>
 8000568:	78a2      	ldrb	r2, [r4, #2]
 800056a:	2a03      	cmp	r2, #3
 800056c:	d113      	bne.n	8000596 <MAX_ParseResponseFunction+0x6e>
      {
         if(MAXDataRecive[3] == MAX_OK)
 800056e:	78e1      	ldrb	r1, [r4, #3]
 8000570:	2904      	cmp	r1, #4
 8000572:	d111      	bne.n	8000598 <MAX_ParseResponseFunction+0x70>
         {
            MAX->NewEvent = MAX_EVENT_DATA_OK;
            MAX->Cnt      = 0;
 8000574:	2200      	movs	r2, #0
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 8000576:	7059      	strb	r1, [r3, #1]
            MAX->Cnt      = 0;
 8000578:	611a      	str	r2, [r3, #16]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800057a:	3160      	adds	r1, #96	; 0x60
         }
      }
      else
      {
         MAX->NewEvent = MAX_EVENT_ERROR;
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800057c:	0020      	movs	r0, r4
 800057e:	f7ff ff3f 	bl	8000400 <MAX485_ReciveToIdleDMA>
   else
   {
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
      MAX->NewEvent = MAX_EVENT_ERROR;
   }
}
 8000582:	bd70      	pop	{r4, r5, r6, pc}
   else if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
 8000584:	0021      	movs	r1, r4
 8000586:	0028      	movs	r0, r5
 8000588:	689a      	ldr	r2, [r3, #8]
 800058a:	f000 fae7 	bl	8000b5c <RepareMessage>
 800058e:	2801      	cmp	r0, #1
 8000590:	d105      	bne.n	800059e <MAX_ParseResponseFunction+0x76>
      if(MAXDataRecive[0] == MAX->DeviceType && MAXDataRecive[2] == MAX_MESSAGE)
 8000592:	6833      	ldr	r3, [r6, #0]
 8000594:	e7e4      	b.n	8000560 <MAX_ParseResponseFunction+0x38>
         MAX->NewEvent = MAX_EVENT_ERROR;
 8000596:	2203      	movs	r2, #3
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8000598:	2164      	movs	r1, #100	; 0x64
         MAX->NewEvent = MAX_EVENT_ERROR;
 800059a:	705a      	strb	r2, [r3, #1]
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800059c:	e7ee      	b.n	800057c <MAX_ParseResponseFunction+0x54>
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800059e:	2164      	movs	r1, #100	; 0x64
 80005a0:	0020      	movs	r0, r4
 80005a2:	f7ff ff2d 	bl	8000400 <MAX485_ReciveToIdleDMA>
      MAX->NewEvent = MAX_EVENT_ERROR;
 80005a6:	2203      	movs	r2, #3
 80005a8:	6833      	ldr	r3, [r6, #0]
 80005aa:	705a      	strb	r2, [r3, #1]
}
 80005ac:	e7e9      	b.n	8000582 <MAX_ParseResponseFunction+0x5a>
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	20000098 	.word	0x20000098
 80005b4:	200000ac 	.word	0x200000ac

080005b8 <MAX_WaitForResponseFunction>:
{
 80005b8:	b510      	push	{r4, lr}
   if(HAL_GetTick() - MAX->LastTick > 2000)
 80005ba:	f000 fdbb 	bl	8001134 <HAL_GetTick>
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MAX_WaitForResponseFunction+0x2c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	695a      	ldr	r2, [r3, #20]
 80005c4:	1a80      	subs	r0, r0, r2
 80005c6:	22fa      	movs	r2, #250	; 0xfa
 80005c8:	00d2      	lsls	r2, r2, #3
 80005ca:	4290      	cmp	r0, r2
 80005cc:	d902      	bls.n	80005d4 <MAX_WaitForResponseFunction+0x1c>
      MAX->NewEvent = MAX_EVENT_ERROR;
 80005ce:	2203      	movs	r2, #3
 80005d0:	705a      	strb	r2, [r3, #1]
}
 80005d2:	bd10      	pop	{r4, pc}
   else if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
 80005d4:	791a      	ldrb	r2, [r3, #4]
 80005d6:	b2d1      	uxtb	r1, r2
 80005d8:	2a01      	cmp	r2, #1
 80005da:	d1fa      	bne.n	80005d2 <MAX_WaitForResponseFunction+0x1a>
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 80005dc:	2200      	movs	r2, #0
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
 80005de:	7059      	strb	r1, [r3, #1]
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 80005e0:	711a      	strb	r2, [r3, #4]
}
 80005e2:	e7f6      	b.n	80005d2 <MAX_WaitForResponseFunction+0x1a>
 80005e4:	20000098 	.word	0x20000098

080005e8 <MAX_SendFunction>:
{
 80005e8:	b510      	push	{r4, lr}
   if(MAX->Cnt < 5)
 80005ea:	4c0e      	ldr	r4, [pc, #56]	; (8000624 <MAX_SendFunction+0x3c>)
 80005ec:	6823      	ldr	r3, [r4, #0]
 80005ee:	691a      	ldr	r2, [r3, #16]
 80005f0:	2a04      	cmp	r2, #4
 80005f2:	d80e      	bhi.n	8000612 <MAX_SendFunction+0x2a>
      MAX485_TransmitData(MAXDataTransmit, MAX->DataTransmitSize);
 80005f4:	6999      	ldr	r1, [r3, #24]
 80005f6:	480c      	ldr	r0, [pc, #48]	; (8000628 <MAX_SendFunction+0x40>)
 80005f8:	b289      	uxth	r1, r1
 80005fa:	f7ff ff13 	bl	8000424 <MAX485_TransmitData>
      MAX->Cnt++;
 80005fe:	6824      	ldr	r4, [r4, #0]
 8000600:	6923      	ldr	r3, [r4, #16]
 8000602:	3301      	adds	r3, #1
 8000604:	6123      	str	r3, [r4, #16]
      MAX->NewEvent = MAX_EVENT_WAIT_FOR_RESPONSE;
 8000606:	2305      	movs	r3, #5
 8000608:	7063      	strb	r3, [r4, #1]
      MAX->LastTick = HAL_GetTick();
 800060a:	f000 fd93 	bl	8001134 <HAL_GetTick>
 800060e:	6160      	str	r0, [r4, #20]
}
 8000610:	bd10      	pop	{r4, pc}
      MAX->Cnt      = 0;
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
      MAX->NewEvent = MAX_EVENT_ERROR;
 8000616:	3203      	adds	r2, #3
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8000618:	2164      	movs	r1, #100	; 0x64
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <MAX_SendFunction+0x44>)
      MAX->NewEvent = MAX_EVENT_ERROR;
 800061c:	705a      	strb	r2, [r3, #1]
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800061e:	f7ff feef 	bl	8000400 <MAX485_ReciveToIdleDMA>
}
 8000622:	e7f5      	b.n	8000610 <MAX_SendFunction+0x28>
 8000624:	20000098 	.word	0x20000098
 8000628:	20000110 	.word	0x20000110
 800062c:	200000ac 	.word	0x200000ac

08000630 <MAX_SendResponseFunction>:
{
 8000630:	b510      	push	{r4, lr}
   MAXDataTransmit[0] = MAX->SourceMessage;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MAX_SendResponseFunction+0x3c>)
 8000634:	4c0e      	ldr	r4, [pc, #56]	; (8000670 <MAX_SendResponseFunction+0x40>)
 8000636:	681b      	ldr	r3, [r3, #0]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, MAXDataTransmit);
 8000638:	2104      	movs	r1, #4
   MAXDataTransmit[0] = MAX->SourceMessage;
 800063a:	7b1a      	ldrb	r2, [r3, #12]
 800063c:	7022      	strb	r2, [r4, #0]
   MAXDataTransmit[1] = MAX->DeviceType;
 800063e:	795b      	ldrb	r3, [r3, #5]
   MAXDataTransmit[3] = Response;
 8000640:	70e0      	strb	r0, [r4, #3]
   MAXDataTransmit[1] = MAX->DeviceType;
 8000642:	7063      	strb	r3, [r4, #1]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, MAXDataTransmit);
 8000644:	2001      	movs	r0, #1
   MAXDataTransmit[2] = MAX_MESSAGE;
 8000646:	2303      	movs	r3, #3
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, MAXDataTransmit);
 8000648:	0022      	movs	r2, r4
   MAXDataTransmit[2] = MAX_MESSAGE;
 800064a:	70a3      	strb	r3, [r4, #2]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, MAXDataTransmit);
 800064c:	4240      	negs	r0, r0
 800064e:	f000 fa59 	bl	8000b04 <Crc>
   MAXDataTransmit[4] = ((crc >> 24) & 0xff);
 8000652:	0e03      	lsrs	r3, r0, #24
 8000654:	7123      	strb	r3, [r4, #4]
   MAXDataTransmit[5] = ((crc >> 16) & 0xff);
 8000656:	0c03      	lsrs	r3, r0, #16
 8000658:	7163      	strb	r3, [r4, #5]
   MAXDataTransmit[6] = ((crc >> 8) & 0xff);
 800065a:	0a03      	lsrs	r3, r0, #8
   MAXDataTransmit[7] = (crc & 0xff);
 800065c:	71e0      	strb	r0, [r4, #7]
   MAX485_TransmitData(MAXDataTransmit, 8);
 800065e:	2108      	movs	r1, #8
 8000660:	0020      	movs	r0, r4
   MAXDataTransmit[6] = ((crc >> 8) & 0xff);
 8000662:	71a3      	strb	r3, [r4, #6]
   MAX485_TransmitData(MAXDataTransmit, 8);
 8000664:	f7ff fede 	bl	8000424 <MAX485_TransmitData>
}
 8000668:	bd10      	pop	{r4, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	20000098 	.word	0x20000098
 8000670:	20000110 	.word	0x20000110

08000674 <MAX_ParseFunction>:
{
 8000674:	b570      	push	{r4, r5, r6, lr}
   MAX->SourceMessage  = MAXDataRecive[1];
 8000676:	4d1f      	ldr	r5, [pc, #124]	; (80006f4 <MAX_ParseFunction+0x80>)
 8000678:	4e1f      	ldr	r6, [pc, #124]	; (80006f8 <MAX_ParseFunction+0x84>)
 800067a:	786a      	ldrb	r2, [r5, #1]
 800067c:	6833      	ldr	r3, [r6, #0]
 800067e:	731a      	strb	r2, [r3, #12]
   if(MAXDataRecive[0] != MAX->DeviceType)
 8000680:	7829      	ldrb	r1, [r5, #0]
 8000682:	795a      	ldrb	r2, [r3, #5]
 8000684:	4291      	cmp	r1, r2
 8000686:	d009      	beq.n	800069c <MAX_ParseFunction+0x28>
      MAX->NewEvent = MAX_EVENT_ERROR;
 8000688:	2203      	movs	r2, #3
      MAX_SendResponseFunction(MAX_ERROR);
 800068a:	2001      	movs	r0, #1
      MAX->NewEvent = MAX_EVENT_ERROR;
 800068c:	705a      	strb	r2, [r3, #1]
               MAX_SendResponseFunction(MAX_CRC_ERROR);
 800068e:	f7ff ffcf 	bl	8000630 <MAX_SendResponseFunction>
               MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8000692:	2164      	movs	r1, #100	; 0x64
 8000694:	0028      	movs	r0, r5
 8000696:	f7ff feb3 	bl	8000400 <MAX485_ReciveToIdleDMA>
}
 800069a:	e01d      	b.n	80006d8 <MAX_ParseFunction+0x64>
      if(MAX->DataSize != 0)
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d01a      	beq.n	80006d8 <MAX_ParseFunction+0x64>
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 80006a2:	2001      	movs	r0, #1
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 80006a4:	1f19      	subs	r1, r3, #4
 80006a6:	18eb      	adds	r3, r5, r3
 80006a8:	1eda      	subs	r2, r3, #3
 80006aa:	7814      	ldrb	r4, [r2, #0]
 80006ac:	5c6a      	ldrb	r2, [r5, r1]
 80006ae:	0424      	lsls	r4, r4, #16
 80006b0:	0612      	lsls	r2, r2, #24
 80006b2:	4314      	orrs	r4, r2
                       | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 80006b4:	1e5a      	subs	r2, r3, #1
 80006b6:	3b02      	subs	r3, #2
 80006b8:	7812      	ldrb	r2, [r2, #0]
 80006ba:	781b      	ldrb	r3, [r3, #0]
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 80006bc:	4314      	orrs	r4, r2
                       | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 80006be:	021b      	lsls	r3, r3, #8
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 80006c0:	002a      	movs	r2, r5
 80006c2:	4240      	negs	r0, r0
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 80006c4:	431c      	orrs	r4, r3
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 80006c6:	f000 fa1d 	bl	8000b04 <Crc>
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 80006ca:	6833      	ldr	r3, [r6, #0]
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 80006cc:	42a0      	cmp	r0, r4
 80006ce:	d104      	bne.n	80006da <MAX_ParseFunction+0x66>
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 80006d0:	2004      	movs	r0, #4
 80006d2:	7058      	strb	r0, [r3, #1]
            MAX_SendResponseFunction(MAX_OK);
 80006d4:	f7ff ffac 	bl	8000630 <MAX_SendResponseFunction>
}
 80006d8:	bd70      	pop	{r4, r5, r6, pc}
            if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
 80006da:	689a      	ldr	r2, [r3, #8]
 80006dc:	0029      	movs	r1, r5
 80006de:	0020      	movs	r0, r4
 80006e0:	f000 fa3c 	bl	8000b5c <RepareMessage>
               MAX->NewEvent = MAX_EVENT_DATA_OK;
 80006e4:	6833      	ldr	r3, [r6, #0]
            if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
 80006e6:	2801      	cmp	r0, #1
 80006e8:	d0f2      	beq.n	80006d0 <MAX_ParseFunction+0x5c>
               MAX->NewEvent = MAX_EVENT_ERROR;
 80006ea:	2203      	movs	r2, #3
               MAX_SendResponseFunction(MAX_CRC_ERROR);
 80006ec:	2002      	movs	r0, #2
               MAX->NewEvent = MAX_EVENT_ERROR;
 80006ee:	705a      	strb	r2, [r3, #1]
               MAX_SendResponseFunction(MAX_CRC_ERROR);
 80006f0:	e7cd      	b.n	800068e <MAX_ParseFunction+0x1a>
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	200000ac 	.word	0x200000ac
 80006f8:	20000098 	.word	0x20000098

080006fc <MAX_Handle>:
   for(int i = 0; i < MAX_TRANSITION_TABLE_SIZE; i++)
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <MAX_Handle+0x44>)
{
 80006fe:	b570      	push	{r4, r5, r6, lr}
   for(int i = 0; i < MAX_TRANSITION_TABLE_SIZE; i++)
 8000700:	2100      	movs	r1, #0
 8000702:	0014      	movs	r4, r2
      if(MAX->State == MAXTransitionTable[i].Source && MAX->NewEvent == MAXTransitionTable[i].Event)
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MAX_Handle+0x48>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	7818      	ldrb	r0, [r3, #0]
 800070a:	7815      	ldrb	r5, [r2, #0]
 800070c:	4285      	cmp	r5, r0
 800070e:	d112      	bne.n	8000736 <MAX_Handle+0x3a>
 8000710:	785e      	ldrb	r6, [r3, #1]
 8000712:	7895      	ldrb	r5, [r2, #2]
 8000714:	42ae      	cmp	r6, r5
 8000716:	d10e      	bne.n	8000736 <MAX_Handle+0x3a>
         MAX->State    = MAXTransitionTable[i].Destination;
 8000718:	2203      	movs	r2, #3
 800071a:	434a      	muls	r2, r1
 800071c:	18a2      	adds	r2, r4, r2
 800071e:	7852      	ldrb	r2, [r2, #1]
 8000720:	701a      	strb	r2, [r3, #0]
   MAX->NewEvent = MAX_EVENT_NOTHING;
 8000722:	2200      	movs	r2, #0
 8000724:	705a      	strb	r2, [r3, #1]
   if(MAXFunction[MAX->State].MAXFunction != NULL)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <MAX_Handle+0x4c>)
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	589b      	ldr	r3, [r3, r2]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d000      	beq.n	8000734 <MAX_Handle+0x38>
      MAXFunction[MAX->State].MAXFunction();
 8000732:	4798      	blx	r3
}
 8000734:	bd70      	pop	{r4, r5, r6, pc}
   for(int i = 0; i < MAX_TRANSITION_TABLE_SIZE; i++)
 8000736:	3101      	adds	r1, #1
 8000738:	3203      	adds	r2, #3
 800073a:	290c      	cmp	r1, #12
 800073c:	d1e5      	bne.n	800070a <MAX_Handle+0xe>
 800073e:	e7f0      	b.n	8000722 <MAX_Handle+0x26>
 8000740:	08003a8c 	.word	0x08003a8c
 8000744:	20000098 	.word	0x20000098
 8000748:	20000000 	.word	0x20000000

0800074c <MAX_Init>:
   MAX->Initialize = MAX_INITIALIZE;
 800074c:	2301      	movs	r3, #1
{
 800074e:	b510      	push	{r4, lr}
   MAX->Initialize = MAX_INITIALIZE;
 8000750:	70c3      	strb	r3, [r0, #3]
      MAXCommandFunction[i].MAXCommandFunction = NULL;
 8000752:	2300      	movs	r3, #0
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <MAX_Init+0x34>)
   MAX->DeviceType = Device;
 8000756:	7141      	strb	r1, [r0, #5]
      MAXCommandFunction[i].MAXCommandFunction = NULL;
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	6053      	str	r3, [r2, #4]
 800075c:	6093      	str	r3, [r2, #8]
      MAXMessageFunction[i].MAXMessageFunction = NULL;
 800075e:	4a09      	ldr	r2, [pc, #36]	; (8000784 <MAX_Init+0x38>)
   MAX             = RadioProtocol;
 8000760:	4c09      	ldr	r4, [pc, #36]	; (8000788 <MAX_Init+0x3c>)
      MAXMessageFunction[i].MAXMessageFunction = NULL;
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	6053      	str	r3, [r2, #4]
 8000766:	6093      	str	r3, [r2, #8]
 8000768:	60d3      	str	r3, [r2, #12]
   MAXDataFunctions.MAXDataFunction = NULL;
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <MAX_Init+0x40>)
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 800076c:	2164      	movs	r1, #100	; 0x64
   MAX             = RadioProtocol;
 800076e:	6020      	str	r0, [r4, #0]
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <MAX_Init+0x44>)
   MAXDataFunctions.MAXDataFunction = NULL;
 8000772:	6013      	str	r3, [r2, #0]
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8000774:	f7ff fe44 	bl	8000400 <MAX485_ReciveToIdleDMA>
   MAX485_Init(MAX);
 8000778:	6820      	ldr	r0, [r4, #0]
 800077a:	f7ff fe71 	bl	8000460 <MAX485_Init>
}
 800077e:	bd10      	pop	{r4, pc}
 8000780:	2000009c 	.word	0x2000009c
 8000784:	20000174 	.word	0x20000174
 8000788:	20000098 	.word	0x20000098
 800078c:	200000a8 	.word	0x200000a8
 8000790:	200000ac 	.word	0x200000ac

08000794 <MAX_RegisterCommandFunction>:
   MAXCommandFunction[Command - 1].MAXCommandFunction = Callback;
 8000794:	4b02      	ldr	r3, [pc, #8]	; (80007a0 <MAX_RegisterCommandFunction+0xc>)
 8000796:	3801      	subs	r0, #1
 8000798:	0080      	lsls	r0, r0, #2
 800079a:	5019      	str	r1, [r3, r0]
}
 800079c:	4770      	bx	lr
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	2000009c 	.word	0x2000009c

080007a4 <MAX_InterruptTask>:
   MAX->NewDataFlag = MAX_NEW_DATA_FLAG_SET;
 80007a4:	2201      	movs	r2, #1
 80007a6:	4b02      	ldr	r3, [pc, #8]	; (80007b0 <MAX_InterruptTask+0xc>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	711a      	strb	r2, [r3, #4]
}
 80007ac:	4770      	bx	lr
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	20000098 	.word	0x20000098

080007b4 <MAX_SendData>:
{
 80007b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   for(int i = 0; i < Length; i++)
 80007b6:	2500      	movs	r5, #0
   MAXDataTransmit[0] = Destination;
 80007b8:	4c11      	ldr	r4, [pc, #68]	; (8000800 <MAX_SendData+0x4c>)
   MAXDataTransmit[1] = MAX->DeviceType;
 80007ba:	4e12      	ldr	r6, [pc, #72]	; (8000804 <MAX_SendData+0x50>)
   MAXDataTransmit[0] = Destination;
 80007bc:	7020      	strb	r0, [r4, #0]
   MAXDataTransmit[1] = MAX->DeviceType;
 80007be:	6830      	ldr	r0, [r6, #0]
 80007c0:	7940      	ldrb	r0, [r0, #5]
   MAXDataTransmit[2] = Type;
 80007c2:	70a1      	strb	r1, [r4, #2]
   MAXDataTransmit[1] = MAX->DeviceType;
 80007c4:	7060      	strb	r0, [r4, #1]
   for(int i = 0; i < Length; i++)
 80007c6:	429d      	cmp	r5, r3
 80007c8:	d114      	bne.n	80007f4 <MAX_SendData+0x40>
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, MAXDataTransmit);
 80007ca:	2001      	movs	r0, #1
 80007cc:	1cef      	adds	r7, r5, #3
 80007ce:	0022      	movs	r2, r4
 80007d0:	0039      	movs	r1, r7
 80007d2:	4240      	negs	r0, r0
 80007d4:	f000 f996 	bl	8000b04 <Crc>
   MAX->SendFlag                   = MAX_SEND_FLAG_SET;
 80007d8:	2201      	movs	r2, #1
   MAXDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 80007da:	0e03      	lsrs	r3, r0, #24
 80007dc:	55e3      	strb	r3, [r4, r7]
   MAXDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 80007de:	1964      	adds	r4, r4, r5
 80007e0:	0c03      	lsrs	r3, r0, #16
 80007e2:	7123      	strb	r3, [r4, #4]
   MAXDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 80007e4:	0a03      	lsrs	r3, r0, #8
 80007e6:	7163      	strb	r3, [r4, #5]
   MAX->SendFlag                   = MAX_SEND_FLAG_SET;
 80007e8:	6833      	ldr	r3, [r6, #0]
   MAX->DataTransmitSize           = 3 + Length + 4;
 80007ea:	3507      	adds	r5, #7
   MAXDataTransmit[3 + Length + 3] = (crc & 0xff);
 80007ec:	71a0      	strb	r0, [r4, #6]
   MAX->DataTransmitSize           = 3 + Length + 4;
 80007ee:	619d      	str	r5, [r3, #24]
   MAX->SendFlag                   = MAX_SEND_FLAG_SET;
 80007f0:	735a      	strb	r2, [r3, #13]
}
 80007f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MAXDataTransmit[i + 3] = Data[i];
 80007f4:	5d50      	ldrb	r0, [r2, r5]
 80007f6:	1961      	adds	r1, r4, r5
 80007f8:	70c8      	strb	r0, [r1, #3]
   for(int i = 0; i < Length; i++)
 80007fa:	3501      	adds	r5, #1
 80007fc:	e7e3      	b.n	80007c6 <MAX_SendData+0x12>
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	20000110 	.word	0x20000110
 8000804:	20000098 	.word	0x20000098

08000808 <SM_WaitForSendFunction>:
#endif
}
static void SM_WaitForSendFunction(void)
{
#ifndef DEBUG_SWDIO
   if(MAX.State == MAX_STATE_IDLE)
 8000808:	4b03      	ldr	r3, [pc, #12]	; (8000818 <SM_WaitForSendFunction+0x10>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2b01      	cmp	r3, #1
 800080e:	d102      	bne.n	8000816 <SM_WaitForSendFunction+0xe>
   {
      SmPtr.NewEvent = SM_EVENT_END_RUNNING;
 8000810:	2202      	movs	r2, #2
 8000812:	4b02      	ldr	r3, [pc, #8]	; (800081c <SM_WaitForSendFunction+0x14>)
 8000814:	715a      	strb	r2, [r3, #5]
   }
#endif
#ifdef DEBUG_SWDIO
   SmPtr.NewEvent = SM_EVENT_END_RUNNING;
#endif
}
 8000816:	4770      	bx	lr
 8000818:	2000018c 	.word	0x2000018c
 800081c:	200001a8 	.word	0x200001a8

08000820 <SM_SleepFunction>:
static void SM_SleepFunction(void)
{

   if(SmPtr.DeepSleepFlag == SM_FLAG_SET)
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <SM_SleepFunction+0x14>)
 8000822:	2203      	movs	r2, #3
 8000824:	79d9      	ldrb	r1, [r3, #7]
 8000826:	2901      	cmp	r1, #1
 8000828:	d101      	bne.n	800082e <SM_SleepFunction+0xe>
   {
      SmPtr.DeepSleepFlag = SM_FLAG_RESET;
 800082a:	2100      	movs	r1, #0
 800082c:	71d9      	strb	r1, [r3, #7]
      SmPtr.NewEvent = SM_EVENT_END_SLEEP;
   }
   else
   {
      // HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
      SmPtr.NewEvent = SM_EVENT_END_SLEEP;
 800082e:	715a      	strb	r2, [r3, #5]
   }
}
 8000830:	4770      	bx	lr
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	200001a8 	.word	0x200001a8

08000838 <MAX_CommandStartMeasurmentFunction>:
   MAX_SendData(MAX_ODWS, MAX_MESSAGE, &Temp, 1);
#endif
}
void MAX_CommandStartMeasurmentFunction(uint8_t *Data, uint32_t DataSize, uint32_t DataStart)
{
   SmPtr.MeasurmentFlag = SM_FLAG_SET;
 8000838:	2201      	movs	r2, #1
 800083a:	4b01      	ldr	r3, [pc, #4]	; (8000840 <MAX_CommandStartMeasurmentFunction+0x8>)
 800083c:	719a      	strb	r2, [r3, #6]
}
 800083e:	4770      	bx	lr
 8000840:	200001a8 	.word	0x200001a8

08000844 <MAX_CommandGoToDeepSleepFunction>:
void MAX_CommandGoToDeepSleepFunction(uint8_t *Data, uint32_t DataSize, uint32_t DataStart)
{
}
 8000844:	4770      	bx	lr

08000846 <MAX_CommandTestFunction>:
{
 8000846:	b507      	push	{r0, r1, r2, lr}
   uint8_t Temp = MAX_OK;
 8000848:	466b      	mov	r3, sp
 800084a:	1dda      	adds	r2, r3, #7
 800084c:	2304      	movs	r3, #4
   MAX_SendData(MAX_ODWS, MAX_MESSAGE, &Temp, 1);
 800084e:	2103      	movs	r1, #3
   uint8_t Temp = MAX_OK;
 8000850:	7013      	strb	r3, [r2, #0]
   MAX_SendData(MAX_ODWS, MAX_MESSAGE, &Temp, 1);
 8000852:	2002      	movs	r0, #2
 8000854:	3b03      	subs	r3, #3
 8000856:	f7ff ffad 	bl	80007b4 <MAX_SendData>
}
 800085a:	bd07      	pop	{r0, r1, r2, pc}

0800085c <SM_InitializeFunction>:
{
 800085c:	b510      	push	{r4, lr}
   MAX_Init(&MAX, MAX_BS);
 800085e:	2101      	movs	r1, #1
 8000860:	4812      	ldr	r0, [pc, #72]	; (80008ac <SM_InitializeFunction+0x50>)
 8000862:	f7ff ff73 	bl	800074c <MAX_Init>
   MAX_RegisterCommandFunction(MAX_TEST, MAX_CommandTestFunction);
 8000866:	2001      	movs	r0, #1
 8000868:	4911      	ldr	r1, [pc, #68]	; (80008b0 <SM_InitializeFunction+0x54>)
 800086a:	f7ff ff93 	bl	8000794 <MAX_RegisterCommandFunction>
   MAX_RegisterCommandFunction(MAX_START_MEASURMENT, MAX_CommandStartMeasurmentFunction);
 800086e:	2002      	movs	r0, #2
 8000870:	4910      	ldr	r1, [pc, #64]	; (80008b4 <SM_InitializeFunction+0x58>)
 8000872:	f7ff ff8f 	bl	8000794 <MAX_RegisterCommandFunction>
   MAX_RegisterCommandFunction(MAX_GO_TO_DEEP_SLEEP, MAX_CommandGoToDeepSleepFunction);
 8000876:	2003      	movs	r0, #3
 8000878:	490f      	ldr	r1, [pc, #60]	; (80008b8 <SM_InitializeFunction+0x5c>)
 800087a:	f7ff ff8b 	bl	8000794 <MAX_RegisterCommandFunction>
   bh1750_Init(&Bh, &hi2c2, 35, One_Time_H_Resolution_Mode);
 800087e:	2320      	movs	r3, #32
 8000880:	2223      	movs	r2, #35	; 0x23
 8000882:	490e      	ldr	r1, [pc, #56]	; (80008bc <SM_InitializeFunction+0x60>)
 8000884:	480e      	ldr	r0, [pc, #56]	; (80008c0 <SM_InitializeFunction+0x64>)
 8000886:	f000 f932 	bl	8000aee <bh1750_Init>
   HAL_ADC_Start(&hadc1);
 800088a:	4c0e      	ldr	r4, [pc, #56]	; (80008c4 <SM_InitializeFunction+0x68>)
 800088c:	0020      	movs	r0, r4
 800088e:	f000 ff69 	bl	8001764 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc1, 1000);
 8000892:	21fa      	movs	r1, #250	; 0xfa
 8000894:	0020      	movs	r0, r4
 8000896:	0089      	lsls	r1, r1, #2
 8000898:	f000 fd7c 	bl	8001394 <HAL_ADC_PollForConversion>
   uint16_t data  = HAL_ADC_GetValue(&hadc1);
 800089c:	0020      	movs	r0, r4
 800089e:	f000 fddb 	bl	8001458 <HAL_ADC_GetValue>
   SmPtr.NewEvent = SM_EVENT_INITIALIZE_OK;
 80008a2:	2201      	movs	r2, #1
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <SM_InitializeFunction+0x6c>)
 80008a6:	715a      	strb	r2, [r3, #5]
}
 80008a8:	bd10      	pop	{r4, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	2000018c 	.word	0x2000018c
 80008b0:	08000847 	.word	0x08000847
 80008b4:	08000839 	.word	0x08000839
 80008b8:	08000845 	.word	0x08000845
 80008bc:	2000021c 	.word	0x2000021c
 80008c0:	20000184 	.word	0x20000184
 80008c4:	200001b4 	.word	0x200001b4
 80008c8:	200001a8 	.word	0x200001a8

080008cc <SM_RunningFunction>:
   if(MAX.State == MAX_STATE_IDLE)
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <SM_RunningFunction+0x38>)
{
 80008ce:	b510      	push	{r4, lr}
   if(MAX.State == MAX_STATE_IDLE)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d112      	bne.n	80008fc <SM_RunningFunction+0x30>
      if(SmPtr.MeasurmentFlag == SM_FLAG_SET)
 80008d6:	4c0c      	ldr	r4, [pc, #48]	; (8000908 <SM_RunningFunction+0x3c>)
 80008d8:	79a3      	ldrb	r3, [r4, #6]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10f      	bne.n	80008fe <SM_RunningFunction+0x32>
         SmPtr.MeasurmentFlag = SM_FLAG_RESET;
 80008de:	2300      	movs	r3, #0
         SmPtr.Brightness     = bh1750_ReadLuxOneTime(&Bh);
 80008e0:	480a      	ldr	r0, [pc, #40]	; (800090c <SM_RunningFunction+0x40>)
         SmPtr.MeasurmentFlag = SM_FLAG_RESET;
 80008e2:	71a3      	strb	r3, [r4, #6]
         SmPtr.Brightness     = bh1750_ReadLuxOneTime(&Bh);
 80008e4:	f000 f8f7 	bl	8000ad6 <bh1750_ReadLuxOneTime>
         SmPtr.NewEvent       = SM_EVENT_START_SENDING;
 80008e8:	2304      	movs	r3, #4
         MAX_SendData(MAX_ODWS, MAX_DATA, (uint8_t *)&SmPtr.Brightness, 2);
 80008ea:	0022      	movs	r2, r4
         SmPtr.NewEvent       = SM_EVENT_START_SENDING;
 80008ec:	7163      	strb	r3, [r4, #5]
         MAX_SendData(MAX_ODWS, MAX_DATA, (uint8_t *)&SmPtr.Brightness, 2);
 80008ee:	3b02      	subs	r3, #2
         SmPtr.Brightness     = bh1750_ReadLuxOneTime(&Bh);
 80008f0:	8120      	strh	r0, [r4, #8]
         MAX_SendData(MAX_ODWS, MAX_DATA, (uint8_t *)&SmPtr.Brightness, 2);
 80008f2:	0019      	movs	r1, r3
 80008f4:	0018      	movs	r0, r3
 80008f6:	3208      	adds	r2, #8
 80008f8:	f7ff ff5c 	bl	80007b4 <MAX_SendData>
}
 80008fc:	bd10      	pop	{r4, pc}
         SmPtr.NewEvent = SM_EVENT_END_RUNNING;
 80008fe:	2302      	movs	r3, #2
 8000900:	7163      	strb	r3, [r4, #5]
}
 8000902:	e7fb      	b.n	80008fc <SM_RunningFunction+0x30>
 8000904:	2000018c 	.word	0x2000018c
 8000908:	200001a8 	.word	0x200001a8
 800090c:	20000184 	.word	0x20000184

08000910 <SM_MainFunction>:
{
 8000910:	b570      	push	{r4, r5, r6, lr}
   if(MAX.Initialize == MAX_INITIALIZE)
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <SM_MainFunction+0x60>)
 8000914:	78db      	ldrb	r3, [r3, #3]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d101      	bne.n	800091e <SM_MainFunction+0xe>
      MAX_Handle();
 800091a:	f7ff feef 	bl	80006fc <MAX_Handle>
   if(HAL_GetTick() - SmPtr.LastTick > 10)
 800091e:	f000 fc09 	bl	8001134 <HAL_GetTick>
 8000922:	4c14      	ldr	r4, [pc, #80]	; (8000974 <SM_MainFunction+0x64>)
 8000924:	6823      	ldr	r3, [r4, #0]
 8000926:	1ac0      	subs	r0, r0, r3
 8000928:	280a      	cmp	r0, #10
 800092a:	d91b      	bls.n	8000964 <SM_MainFunction+0x54>
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <SM_MainFunction+0x68>)
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 800092e:	2200      	movs	r2, #0
 8000930:	001d      	movs	r5, r3
      if(SmPtr.State == TransitionTable[i].Source && SmPtr.NewEvent == TransitionTable[i].Event)
 8000932:	7921      	ldrb	r1, [r4, #4]
 8000934:	7960      	ldrb	r0, [r4, #5]
 8000936:	781e      	ldrb	r6, [r3, #0]
 8000938:	428e      	cmp	r6, r1
 800093a:	d114      	bne.n	8000966 <SM_MainFunction+0x56>
 800093c:	789e      	ldrb	r6, [r3, #2]
 800093e:	4286      	cmp	r6, r0
 8000940:	d111      	bne.n	8000966 <SM_MainFunction+0x56>
         SmPtr.State    = TransitionTable[i].Destination;
 8000942:	2303      	movs	r3, #3
 8000944:	4353      	muls	r3, r2
 8000946:	18eb      	adds	r3, r5, r3
 8000948:	785b      	ldrb	r3, [r3, #1]
 800094a:	7123      	strb	r3, [r4, #4]
   SmPtr.NewEvent = SM_EVENT_NOTHING;
 800094c:	2300      	movs	r3, #0
 800094e:	7163      	strb	r3, [r4, #5]
      SmPtr.LastTick = HAL_GetTick();
 8000950:	f000 fbf0 	bl	8001134 <HAL_GetTick>
      if(Function[SmPtr.State].SmFunction != NULL)
 8000954:	7923      	ldrb	r3, [r4, #4]
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <SM_MainFunction+0x6c>)
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	589b      	ldr	r3, [r3, r2]
      SmPtr.LastTick = HAL_GetTick();
 800095c:	6020      	str	r0, [r4, #0]
      if(Function[SmPtr.State].SmFunction != NULL)
 800095e:	2b00      	cmp	r3, #0
 8000960:	d000      	beq.n	8000964 <SM_MainFunction+0x54>
         Function[SmPtr.State].SmFunction();
 8000962:	4798      	blx	r3
}
 8000964:	bd70      	pop	{r4, r5, r6, pc}
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8000966:	3201      	adds	r2, #1
 8000968:	3303      	adds	r3, #3
 800096a:	2a05      	cmp	r2, #5
 800096c:	d1e3      	bne.n	8000936 <SM_MainFunction+0x26>
 800096e:	e7ed      	b.n	800094c <SM_MainFunction+0x3c>
 8000970:	2000018c 	.word	0x2000018c
 8000974:	200001a8 	.word	0x200001a8
 8000978:	2000002c 	.word	0x2000002c
 800097c:	2000001c 	.word	0x2000001c

08000980 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000980:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000982:	220c      	movs	r2, #12
 8000984:	2100      	movs	r1, #0
 8000986:	a801      	add	r0, sp, #4
 8000988:	f003 f86c 	bl	8003a64 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800098c:	4c19      	ldr	r4, [pc, #100]	; (80009f4 <MX_ADC1_Init+0x74>)
 800098e:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <MX_ADC1_Init+0x78>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000990:	2204      	movs	r2, #4
  hadc1.Instance = ADC1;
 8000992:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000994:	2380      	movs	r3, #128	; 0x80
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	6063      	str	r3, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800099a:	2300      	movs	r3, #0
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800099c:	6162      	str	r2, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.NbrOfConversion = 1;
 800099e:	3a03      	subs	r2, #3
 80009a0:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009a2:	18a2      	adds	r2, r4, r2
 80009a4:	77d3      	strb	r3, [r2, #31]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a6:	0022      	movs	r2, r4
 80009a8:	322c      	adds	r2, #44	; 0x2c
 80009aa:	7013      	strb	r3, [r2, #0]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80009ac:	2207      	movs	r2, #7
 80009ae:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80009b0:	63a2      	str	r2, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80009b2:	0022      	movs	r2, r4
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b4:	0020      	movs	r0, r4
  hadc1.Init.OversamplingMode = DISABLE;
 80009b6:	323c      	adds	r2, #60	; 0x3c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009b8:	8323      	strh	r3, [r4, #24]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009ba:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009bc:	60e3      	str	r3, [r4, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009be:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009c0:	76a3      	strb	r3, [r4, #26]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c2:	6263      	str	r3, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c4:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009c6:	6323      	str	r3, [r4, #48]	; 0x30
  hadc1.Init.OversamplingMode = DISABLE;
 80009c8:	7013      	strb	r3, [r2, #0]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80009ca:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009cc:	f000 fbce 	bl	800116c <HAL_ADC_Init>
 80009d0:	2800      	cmp	r0, #0
 80009d2:	d001      	beq.n	80009d8 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 80009d4:	f000 f9f0 	bl	8000db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_ADC1_Init+0x7c>)
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009da:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80009dc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009de:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e0:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009e2:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80009e4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e6:	f000 fd3b 	bl	8001460 <HAL_ADC_ConfigChannel>
 80009ea:	2800      	cmp	r0, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 80009ee:	f000 f9e3 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009f2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
 80009f4:	200001b4 	.word	0x200001b4
 80009f8:	40012400 	.word	0x40012400
 80009fc:	b0001000 	.word	0xb0001000

08000a00 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a00:	b510      	push	{r4, lr}
 8000a02:	0004      	movs	r4, r0
 8000a04:	b088      	sub	sp, #32

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a06:	2218      	movs	r2, #24
 8000a08:	2100      	movs	r1, #0
 8000a0a:	a802      	add	r0, sp, #8
 8000a0c:	f003 f82a 	bl	8003a64 <memset>
  if(adcHandle->Instance==ADC1)
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_ADC_MspInit+0x44>)
 8000a12:	6822      	ldr	r2, [r4, #0]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d113      	bne.n	8000a40 <HAL_ADC_MspInit+0x40>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a18:	2380      	movs	r3, #128	; 0x80
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1a:	a802      	add	r0, sp, #8
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a1c:	01db      	lsls	r3, r3, #7
 8000a1e:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	f002 f810 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_ADC_MspInit+0x2c>
    {
      Error_Handler();
 8000a28:	f000 f9c6 	bl	8000db8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a2c:	2080      	movs	r0, #128	; 0x80
 8000a2e:	4a06      	ldr	r2, [pc, #24]	; (8000a48 <HAL_ADC_MspInit+0x48>)
 8000a30:	0340      	lsls	r0, r0, #13
 8000a32:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000a34:	4301      	orrs	r1, r0
 8000a36:	6411      	str	r1, [r2, #64]	; 0x40
 8000a38:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a3a:	4003      	ands	r3, r0
 8000a3c:	9301      	str	r3, [sp, #4]
 8000a3e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000a40:	b008      	add	sp, #32
 8000a42:	bd10      	pop	{r4, pc}
 8000a44:	40012400 	.word	0x40012400
 8000a48:	40021000 	.word	0x40021000

08000a4c <bh1750_TransmitData>:
 */
#include "main.h"
#include "bh1750.h"
void bh1750_TransmitData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
	HAL_I2C_Master_Transmit(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 8000a4c:	0013      	movs	r3, r2
 8000a4e:	22fa      	movs	r2, #250	; 0xfa
{
 8000a50:	b523      	push	{r0, r1, r5, lr}
 8000a52:	000d      	movs	r5, r1
	HAL_I2C_Master_Transmit(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 8000a54:	7901      	ldrb	r1, [r0, #4]
 8000a56:	0092      	lsls	r2, r2, #2
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	0049      	lsls	r1, r1, #1
 8000a5c:	002a      	movs	r2, r5
 8000a5e:	6800      	ldr	r0, [r0, #0]
 8000a60:	f001 fb34 	bl	80020cc <HAL_I2C_Master_Transmit>
}
 8000a64:	bd23      	pop	{r0, r1, r5, pc}

08000a66 <bh1750_ReceiveData>:
void bh1750_ReceiveData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
	HAL_I2C_Master_Receive(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 8000a66:	0013      	movs	r3, r2
 8000a68:	22fa      	movs	r2, #250	; 0xfa
{
 8000a6a:	b523      	push	{r0, r1, r5, lr}
 8000a6c:	000d      	movs	r5, r1
	HAL_I2C_Master_Receive(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 8000a6e:	7901      	ldrb	r1, [r0, #4]
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	9200      	str	r2, [sp, #0]
 8000a74:	0049      	lsls	r1, r1, #1
 8000a76:	002a      	movs	r2, r5
 8000a78:	6800      	ldr	r0, [r0, #0]
 8000a7a:	f001 fbb9 	bl	80021f0 <HAL_I2C_Master_Receive>
}
 8000a7e:	bd23      	pop	{r0, r1, r5, pc}

08000a80 <bh1750_ChangeState>:
void bh1750_ChangeState(bh1750_t *bh,bh1750State_t s)
{
 8000a80:	b513      	push	{r0, r1, r4, lr}
 8000a82:	466b      	mov	r3, sp
 8000a84:	71d9      	strb	r1, [r3, #7]
	if(s==Continuously_H_Resolution_Mode||s==Continuously_H_Resolution_Mode2||s==Continuously_L_Resolution_Mode)
 8000a86:	000b      	movs	r3, r1
 8000a88:	3b10      	subs	r3, #16
{
 8000a8a:	0004      	movs	r4, r0
	if(s==Continuously_H_Resolution_Mode||s==Continuously_H_Resolution_Mode2||s==Continuously_L_Resolution_Mode)
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d901      	bls.n	8000a94 <bh1750_ChangeState+0x14>
 8000a90:	2913      	cmp	r1, #19
 8000a92:	d105      	bne.n	8000aa0 <bh1750_ChangeState+0x20>
	bh1750_TransmitData(bh,&s,1);
 8000a94:	466b      	mov	r3, sp
 8000a96:	2201      	movs	r2, #1
 8000a98:	0020      	movs	r0, r4
 8000a9a:	1dd9      	adds	r1, r3, #7
 8000a9c:	f7ff ffd6 	bl	8000a4c <bh1750_TransmitData>
	bh->state=s;
 8000aa0:	466b      	mov	r3, sp
 8000aa2:	79db      	ldrb	r3, [r3, #7]
 8000aa4:	7163      	strb	r3, [r4, #5]
}
 8000aa6:	bd13      	pop	{r0, r1, r4, pc}

08000aa8 <bh1750_SendStartMeasurment>:
void bh1750_SendStartMeasurment(bh1750_t *bh)
{
	if(bh->state==One_Time_H_Resolution_Mode||bh->state==One_Time_H_Resolution_Mode2||bh->state==One_Time_L_Resolution_Mode)
 8000aa8:	7943      	ldrb	r3, [r0, #5]
{
 8000aaa:	b510      	push	{r4, lr}
	if(bh->state==One_Time_H_Resolution_Mode||bh->state==One_Time_H_Resolution_Mode2||bh->state==One_Time_L_Resolution_Mode)
 8000aac:	001a      	movs	r2, r3
 8000aae:	3a20      	subs	r2, #32
 8000ab0:	2a01      	cmp	r2, #1
 8000ab2:	d901      	bls.n	8000ab8 <bh1750_SendStartMeasurment+0x10>
 8000ab4:	2b23      	cmp	r3, #35	; 0x23
 8000ab6:	d103      	bne.n	8000ac0 <bh1750_SendStartMeasurment+0x18>
	{
		bh1750_TransmitData(bh,&bh->state,1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	1d41      	adds	r1, r0, #5
 8000abc:	f7ff ffc6 	bl	8000a4c <bh1750_TransmitData>
	}
}
 8000ac0:	bd10      	pop	{r4, pc}

08000ac2 <bh1750_ReadMeasurment>:
uint16_t bh1750_ReadMeasurment(bh1750_t *bh)
{
 8000ac2:	b513      	push	{r0, r1, r4, lr}
	uint8_t data[2];
	bh1750_ReceiveData(bh, data, 2);
 8000ac4:	ac01      	add	r4, sp, #4
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	0021      	movs	r1, r4
 8000aca:	f7ff ffcc 	bl	8000a66 <bh1750_ReceiveData>
	return ((data[0]<<8)|(data[1]));
 8000ace:	8820      	ldrh	r0, [r4, #0]
 8000ad0:	ba40      	rev16	r0, r0
 8000ad2:	b280      	uxth	r0, r0
}
 8000ad4:	bd16      	pop	{r1, r2, r4, pc}

08000ad6 <bh1750_ReadLuxOneTime>:
uint16_t bh1750_ReadLuxOneTime(bh1750_t *bh)
{
 8000ad6:	b510      	push	{r4, lr}
 8000ad8:	0004      	movs	r4, r0
	bh1750_SendStartMeasurment(bh);
 8000ada:	f7ff ffe5 	bl	8000aa8 <bh1750_SendStartMeasurment>
	HAL_Delay(500);
 8000ade:	20fa      	movs	r0, #250	; 0xfa
 8000ae0:	0040      	lsls	r0, r0, #1
 8000ae2:	f000 fb2d 	bl	8001140 <HAL_Delay>
	uint16_t rowMeasurment=bh1750_ReadMeasurment(bh);
 8000ae6:	0020      	movs	r0, r4
 8000ae8:	f7ff ffeb 	bl	8000ac2 <bh1750_ReadMeasurment>
	return rowMeasurment;
}
 8000aec:	bd10      	pop	{r4, pc}

08000aee <bh1750_Init>:
void bh1750_Init(bh1750_t *bh,I2C_HandleTypeDef* i2c,uint8_t addres,bh1750State_t s)
{
 8000aee:	b570      	push	{r4, r5, r6, lr}
	bh->bh_i2c=i2c;
 8000af0:	6001      	str	r1, [r0, #0]
{
 8000af2:	0004      	movs	r4, r0
 8000af4:	1e1d      	subs	r5, r3, #0
	bh->addr=addres;
 8000af6:	7102      	strb	r2, [r0, #4]
	if(s!=0)
 8000af8:	d002      	beq.n	8000b00 <bh1750_Init+0x12>
	bh1750_ChangeState(bh, s);
 8000afa:	0019      	movs	r1, r3
 8000afc:	f7ff ffc0 	bl	8000a80 <bh1750_ChangeState>
	bh->state=s;
 8000b00:	7165      	strb	r5, [r4, #5]
}
 8000b02:	bd70      	pop	{r4, r5, r6, pc}

08000b04 <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 8000b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   PreviuseCRC ^= data[0];
   for(uint32_t i = 1; i < DataLength; i++)
 8000b06:	2501      	movs	r5, #1
   PreviuseCRC ^= data[0];
 8000b08:	7814      	ldrb	r4, [r2, #0]
   {
      uint32_t temp = data[i];
      if(temp == 0x00000000 )
      {
         temp = RandomNumber[k % sizeof(RandomNumber)];
 8000b0a:	4f11      	ldr	r7, [pc, #68]	; (8000b50 <Crc+0x4c>)
{
 8000b0c:	9101      	str	r1, [sp, #4]
 8000b0e:	9200      	str	r2, [sp, #0]
   PreviuseCRC ^= data[0];
 8000b10:	4044      	eors	r4, r0
   for(uint32_t i = 1; i < DataLength; i++)
 8000b12:	9b01      	ldr	r3, [sp, #4]
 8000b14:	429d      	cmp	r5, r3
 8000b16:	d304      	bcc.n	8000b22 <Crc+0x1e>
      {
         PreviuseCRC ^= 0xABC245C2;
      }
      PreviuseCRC <<= 1;
   }
   k = 0;
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <Crc+0x4c>)
   return PreviuseCRC;
}
 8000b1c:	0020      	movs	r0, r4
   k = 0;
 8000b1e:	601a      	str	r2, [r3, #0]
}
 8000b20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      uint32_t temp = data[i];
 8000b22:	9b00      	ldr	r3, [sp, #0]
 8000b24:	5d58      	ldrb	r0, [r3, r5]
      if(temp == 0x00000000 )
 8000b26:	2800      	cmp	r0, #0
 8000b28:	d109      	bne.n	8000b3e <Crc+0x3a>
         temp = RandomNumber[k % sizeof(RandomNumber)];
 8000b2a:	683e      	ldr	r6, [r7, #0]
 8000b2c:	2130      	movs	r1, #48	; 0x30
 8000b2e:	0030      	movs	r0, r6
 8000b30:	f7ff fb76 	bl	8000220 <__aeabi_uidivmod>
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <Crc+0x50>)
 8000b36:	0089      	lsls	r1, r1, #2
         k++;
 8000b38:	3601      	adds	r6, #1
         temp = RandomNumber[k % sizeof(RandomNumber)];
 8000b3a:	58c8      	ldr	r0, [r1, r3]
         k++;
 8000b3c:	603e      	str	r6, [r7, #0]
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 8000b3e:	4368      	muls	r0, r5
 8000b40:	0200      	lsls	r0, r0, #8
 8000b42:	4044      	eors	r4, r0
      if(PreviuseCRC & 0x80000000)
 8000b44:	d501      	bpl.n	8000b4a <Crc+0x46>
         PreviuseCRC ^= 0xABC245C2;
 8000b46:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <Crc+0x54>)
 8000b48:	405c      	eors	r4, r3
      PreviuseCRC <<= 1;
 8000b4a:	0064      	lsls	r4, r4, #1
   for(uint32_t i = 1; i < DataLength; i++)
 8000b4c:	3501      	adds	r5, #1
 8000b4e:	e7e0      	b.n	8000b12 <Crc+0xe>
 8000b50:	20000218 	.word	0x20000218
 8000b54:	2000003c 	.word	0x2000003c
 8000b58:	abc245c2 	.word	0xabc245c2

08000b5c <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	000e      	movs	r6, r1
 8000b60:	000c      	movs	r4, r1
 8000b62:	b085      	sub	sp, #20
 8000b64:	1853      	adds	r3, r2, r1
 8000b66:	9003      	str	r0, [sp, #12]
 8000b68:	9201      	str	r2, [sp, #4]
 8000b6a:	9302      	str	r3, [sp, #8]
   uint8_t temp = 1;
   for(int i = 0; i < DataLength; i++)
 8000b6c:	9b02      	ldr	r3, [sp, #8]
 8000b6e:	42a3      	cmp	r3, r4
 8000b70:	d102      	bne.n	8000b78 <RepareMessage+0x1c>
         {
            data[i] ^= (temp << j);
         }
      }
   }
   return CRC_ERROR;
 8000b72:	2000      	movs	r0, #0
}
 8000b74:	b005      	add	sp, #20
 8000b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
      for(int j = 0; j < 8; j++)
 8000b78:	2700      	movs	r7, #0
         data[i] ^= (temp << j);
 8000b7a:	2501      	movs	r5, #1
 8000b7c:	40bd      	lsls	r5, r7
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 8000b7e:	2001      	movs	r0, #1
         data[i] ^= (temp << j);
 8000b80:	7823      	ldrb	r3, [r4, #0]
 8000b82:	b26d      	sxtb	r5, r5
 8000b84:	406b      	eors	r3, r5
 8000b86:	7023      	strb	r3, [r4, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 8000b88:	9b01      	ldr	r3, [sp, #4]
 8000b8a:	0032      	movs	r2, r6
 8000b8c:	1f19      	subs	r1, r3, #4
 8000b8e:	4240      	negs	r0, r0
 8000b90:	f7ff ffb8 	bl	8000b04 <Crc>
 8000b94:	9b03      	ldr	r3, [sp, #12]
 8000b96:	4298      	cmp	r0, r3
 8000b98:	d007      	beq.n	8000baa <RepareMessage+0x4e>
            data[i] ^= (temp << j);
 8000b9a:	7823      	ldrb	r3, [r4, #0]
      for(int j = 0; j < 8; j++)
 8000b9c:	3701      	adds	r7, #1
            data[i] ^= (temp << j);
 8000b9e:	405d      	eors	r5, r3
 8000ba0:	7025      	strb	r5, [r4, #0]
      for(int j = 0; j < 8; j++)
 8000ba2:	2f08      	cmp	r7, #8
 8000ba4:	d1e9      	bne.n	8000b7a <RepareMessage+0x1e>
   for(int i = 0; i < DataLength; i++)
 8000ba6:	3401      	adds	r4, #1
 8000ba8:	e7e0      	b.n	8000b6c <RepareMessage+0x10>
            return CRC_OK;
 8000baa:	2001      	movs	r0, #1
 8000bac:	e7e2      	b.n	8000b74 <RepareMessage+0x18>
	...

08000bb0 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <MX_DMA_Init+0x18>)
{
 8000bb4:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bb6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000bb8:	4301      	orrs	r1, r0
 8000bba:	6391      	str	r1, [r2, #56]	; 0x38
 8000bbc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000bbe:	4003      	ands	r3, r0
 8000bc0:	9301      	str	r3, [sp, #4]
 8000bc2:	9b01      	ldr	r3, [sp, #4]

}
 8000bc4:	b002      	add	sp, #8
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000

08000bcc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	2214      	movs	r2, #20
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	a803      	add	r0, sp, #12
 8000bd6:	f002 ff45 	bl	8003a64 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	2002      	movs	r0, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	2401      	movs	r4, #1

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 8000bde:	2680      	movs	r6, #128	; 0x80
 8000be0:	25a0      	movs	r5, #160	; 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_GPIO_Init+0x5c>)
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 8000be4:	01b6      	lsls	r6, r6, #6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	6b59      	ldr	r1, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 8000be8:	05ed      	lsls	r5, r5, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4301      	orrs	r1, r0
 8000bec:	6359      	str	r1, [r3, #52]	; 0x34
 8000bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 8000bf0:	0031      	movs	r1, r6
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4002      	ands	r2, r0
 8000bf4:	9201      	str	r2, [sp, #4]
 8000bf6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 8000bfa:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4322      	orrs	r2, r4
 8000bfe:	635a      	str	r2, [r3, #52]	; 0x34
 8000c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4023      	ands	r3, r4
 8000c06:	9302      	str	r3, [sp, #8]
 8000c08:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 8000c0a:	f001 f895 	bl	8001d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_Selector_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  HAL_GPIO_Init(MAX485_Selector_GPIO_Port, &GPIO_InitStruct);
 8000c10:	0028      	movs	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(MAX485_Selector_GPIO_Port, &GPIO_InitStruct);
 8000c14:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	3303      	adds	r3, #3
  GPIO_InitStruct.Pin = MAX485_Selector_Pin;
 8000c18:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(MAX485_Selector_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f000 ffdd 	bl	8001bdc <HAL_GPIO_Init>

}
 8000c22:	b008      	add	sp, #32
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	40021000 	.word	0x40021000

08000c2c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000c2c:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c30:	4c13      	ldr	r4, [pc, #76]	; (8000c80 <MX_I2C2_Init+0x54>)
  hi2c2.Init.Timing = 0x10707DBC;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c32:	2201      	movs	r2, #1
  hi2c2.Instance = I2C2;
 8000c34:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_I2C2_Init+0x58>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c38:	0020      	movs	r0, r4
  hi2c2.Init.Timing = 0x10707DBC;
 8000c3a:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c3c:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3e:	60e2      	str	r2, [r4, #12]
  hi2c2.Init.OwnAddress1 = 0;
 8000c40:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c42:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c44:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c46:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c48:	61e3      	str	r3, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c4a:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c4c:	f001 f9e8 	bl	8002020 <HAL_I2C_Init>
 8000c50:	2800      	cmp	r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_I2C2_Init+0x2c>
  {
    Error_Handler();
 8000c54:	f000 f8b0 	bl	8000db8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c58:	2100      	movs	r1, #0
 8000c5a:	0020      	movs	r0, r4
 8000c5c:	f001 fb5a 	bl	8002314 <HAL_I2CEx_ConfigAnalogFilter>
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d001      	beq.n	8000c68 <MX_I2C2_Init+0x3c>
  {
    Error_Handler();
 8000c64:	f000 f8a8 	bl	8000db8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c68:	2100      	movs	r1, #0
 8000c6a:	0020      	movs	r0, r4
 8000c6c:	f001 fb78 	bl	8002360 <HAL_I2CEx_ConfigDigitalFilter>
 8000c70:	2800      	cmp	r0, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f8a0 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c78:	bd10      	pop	{r4, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	40005800 	.word	0x40005800
 8000c80:	2000021c 	.word	0x2000021c
 8000c84:	10707dbc 	.word	0x10707dbc

08000c88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	0004      	movs	r4, r0
 8000c8c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	2214      	movs	r2, #20
 8000c90:	2100      	movs	r1, #0
 8000c92:	a803      	add	r0, sp, #12
 8000c94:	f002 fee6 	bl	8003a64 <memset>
  if(i2cHandle->Instance==I2C2)
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_I2C_MspInit+0x58>)
 8000c9a:	6822      	ldr	r2, [r4, #0]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	d11d      	bne.n	8000cdc <HAL_I2C_MspInit+0x54>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4c10      	ldr	r4, [pc, #64]	; (8000ce4 <HAL_I2C_MspInit+0x5c>)
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	430a      	orrs	r2, r1
 8000cac:	6362      	str	r2, [r4, #52]	; 0x34
 8000cae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000cb0:	400b      	ands	r3, r1
 8000cb2:	9301      	str	r3, [sp, #4]
 8000cb4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000cb6:	23c0      	movs	r3, #192	; 0xc0
 8000cb8:	015b      	lsls	r3, r3, #5
 8000cba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbc:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000cc2:	3b0c      	subs	r3, #12
 8000cc4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f000 ff89 	bl	8001bdc <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000cce:	03c9      	lsls	r1, r1, #15
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000cd4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000cd6:	400b      	ands	r3, r1
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000cdc:	b008      	add	sp, #32
 8000cde:	bd10      	pop	{r4, pc}
 8000ce0:	40005800 	.word	0x40005800
 8000ce4:	40021000 	.word	0x40021000

08000ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce8:	b510      	push	{r4, lr}
 8000cea:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cec:	2234      	movs	r2, #52	; 0x34
 8000cee:	2100      	movs	r1, #0
 8000cf0:	a805      	add	r0, sp, #20
 8000cf2:	f002 feb7 	bl	8003a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	a801      	add	r0, sp, #4
 8000cfc:	f002 feb2 	bl	8003a64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	2080      	movs	r0, #128	; 0x80
 8000d02:	0080      	lsls	r0, r0, #2
 8000d04:	f001 fb50 	bl	80023a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d08:	230a      	movs	r3, #10
 8000d0a:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d0c:	33f6      	adds	r3, #246	; 0xf6
 8000d0e:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d14:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000d16:	3308      	adds	r3, #8
 8000d18:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d1a:	2380      	movs	r3, #128	; 0x80
 8000d1c:	029b      	lsls	r3, r3, #10
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d1e:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d20:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d22:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d24:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d26:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d28:	059b      	lsls	r3, r3, #22
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d2a:	3a3f      	subs	r2, #63	; 0x3f
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d2e:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d30:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d32:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d34:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f001 fb63 	bl	8002400 <HAL_RCC_OscConfig>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d3e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8000d40:	e7fe      	b.n	8000d40 <SystemClock_Config+0x58>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d42:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d46:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d48:	0021      	movs	r1, r4
 8000d4a:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d50:	f001 fdb6 	bl	80028c0 <HAL_RCC_ClockConfig>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d001      	beq.n	8000d5c <SystemClock_Config+0x74>
 8000d58:	b672      	cpsid	i
   while(1)
 8000d5a:	e7fe      	b.n	8000d5a <SystemClock_Config+0x72>
}
 8000d5c:	b012      	add	sp, #72	; 0x48
 8000d5e:	bd10      	pop	{r4, pc}

08000d60 <main>:
{
 8000d60:	b510      	push	{r4, lr}
  HAL_Init();
 8000d62:	f000 f9c7 	bl	80010f4 <HAL_Init>
  SystemClock_Config();
 8000d66:	f7ff ffbf 	bl	8000ce8 <SystemClock_Config>
  MX_GPIO_Init();
 8000d6a:	f7ff ff2f 	bl	8000bcc <MX_GPIO_Init>
  MX_DMA_Init();
 8000d6e:	f7ff ff1f 	bl	8000bb0 <MX_DMA_Init>
  MX_I2C2_Init();
 8000d72:	f7ff ff5b 	bl	8000c2c <MX_I2C2_Init>
  MX_RTC_Init();
 8000d76:	f000 f821 	bl	8000dbc <MX_RTC_Init>
  MX_TIM17_Init();
 8000d7a:	f000 f8a5 	bl	8000ec8 <MX_TIM17_Init>
  MX_ADC1_Init();
 8000d7e:	f7ff fdff 	bl	8000980 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d82:	f000 f8d1 	bl	8000f28 <MX_USART1_UART_Init>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2009      	movs	r0, #9
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	f000 fd18 	bl	80017c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d90:	2009      	movs	r0, #9
 8000d92:	f000 fd3f 	bl	8001814 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	201b      	movs	r0, #27
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	f000 fd10 	bl	80017c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000da0:	201b      	movs	r0, #27
 8000da2:	f000 fd37 	bl	8001814 <HAL_NVIC_EnableIRQ>
   HAL_TIM_Base_Start(&htim17);
 8000da6:	4803      	ldr	r0, [pc, #12]	; (8000db4 <main+0x54>)
 8000da8:	f001 ffae 	bl	8002d08 <HAL_TIM_Base_Start>
      SM_MainFunction();
 8000dac:	f7ff fdb0 	bl	8000910 <SM_MainFunction>
   while(1)
 8000db0:	e7fc      	b.n	8000dac <main+0x4c>
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	2000029c 	.word	0x2000029c

08000db8 <Error_Handler>:
 8000db8:	b672      	cpsid	i
   while(1)
 8000dba:	e7fe      	b.n	8000dba <Error_Handler+0x2>

08000dbc <MX_RTC_Init>:

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8000dbc:	227f      	movs	r2, #127	; 0x7f
  hrtc.Instance = RTC;
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <MX_RTC_Init+0x30>)
{
 8000dc0:	b510      	push	{r4, lr}
  hrtc.Instance = RTC;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <MX_RTC_Init+0x34>)
  hrtc.Init.AsynchPrediv = 127;
 8000dc4:	60c2      	str	r2, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 8000dc6:	3280      	adds	r2, #128	; 0x80
 8000dc8:	6102      	str	r2, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dca:	2280      	movs	r2, #128	; 0x80
  hrtc.Instance = RTC;
 8000dcc:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dce:	2300      	movs	r3, #0
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dd0:	05d2      	lsls	r2, r2, #23
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000dd2:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000dd4:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000dd6:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000dd8:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000dda:	6202      	str	r2, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000ddc:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000dde:	f001 ff3d 	bl	8002c5c <HAL_RTC_Init>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d001      	beq.n	8000dea <MX_RTC_Init+0x2e>
  {
    Error_Handler();
 8000de6:	f7ff ffe7 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000dea:	bd10      	pop	{r4, pc}
 8000dec:	20000270 	.word	0x20000270
 8000df0:	40002800 	.word	0x40002800

08000df4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000df4:	b510      	push	{r4, lr}
 8000df6:	0004      	movs	r4, r0
 8000df8:	b088      	sub	sp, #32

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dfa:	2218      	movs	r2, #24
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	a802      	add	r0, sp, #8
 8000e00:	f002 fe30 	bl	8003a64 <memset>
  if(rtcHandle->Instance==RTC)
 8000e04:	4b10      	ldr	r3, [pc, #64]	; (8000e48 <HAL_RTC_MspInit+0x54>)
 8000e06:	6822      	ldr	r2, [r4, #0]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d11b      	bne.n	8000e44 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	029b      	lsls	r3, r3, #10
 8000e10:	9302      	str	r3, [sp, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e12:	2380      	movs	r3, #128	; 0x80

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e14:	a802      	add	r0, sp, #8
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e1a:	f001 fe13 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 8000e1e:	2800      	cmp	r0, #0
 8000e20:	d001      	beq.n	8000e26 <HAL_RTC_MspInit+0x32>
    {
      Error_Handler();
 8000e22:	f7ff ffc9 	bl	8000db8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e26:	2280      	movs	r2, #128	; 0x80
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_RTC_MspInit+0x58>)
 8000e2a:	0212      	lsls	r2, r2, #8
 8000e2c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000e2e:	430a      	orrs	r2, r1
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e30:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_RTC_ENABLE();
 8000e32:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e36:	00c9      	lsls	r1, r1, #3
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3e:	400b      	ands	r3, r1
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000e44:	b008      	add	sp, #32
 8000e46:	bd10      	pop	{r4, pc}
 8000e48:	40002800 	.word	0x40002800
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e50:	2001      	movs	r0, #1
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_MspInit+0x2c>)
{
 8000e54:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000e58:	4301      	orrs	r1, r0
 8000e5a:	6419      	str	r1, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5c:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e60:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	4002      	ands	r2, r0
 8000e64:	9200      	str	r2, [sp, #0]
 8000e66:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e70:	400b      	ands	r3, r1
 8000e72:	9301      	str	r3, [sp, #4]
 8000e74:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e76:	b002      	add	sp, #8
 8000e78:	4770      	bx	lr
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	40021000 	.word	0x40021000

08000e80 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while(1)
 8000e80:	e7fe      	b.n	8000e80 <NMI_Handler>

08000e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e82:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
   HAL_NVIC_SystemReset();
 8000e84:	f000 fcd2 	bl	800182c <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e88:	e7fe      	b.n	8000e88 <HardFault_Handler+0x6>

08000e8a <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e8a:	4770      	bx	lr

08000e8c <PendSV_Handler>:
 8000e8c:	4770      	bx	lr

08000e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8e:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f944 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bd10      	pop	{r4, pc}
	...

08000e98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e9a:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <DMA1_Channel1_IRQHandler+0xc>)
 8000e9c:	f000 fe4a 	bl	8001b34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ea0:	bd10      	pop	{r4, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	200002e8 	.word	0x200002e8

08000ea8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000ea8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eaa:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <USART1_IRQHandler+0xc>)
 8000eac:	f002 f84c 	bl	8002f48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	20000344 	.word	0x20000344

08000eb8 <SystemInit>:
  */
void SystemInit(void)
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8000eb8:	2280      	movs	r2, #128	; 0x80
 8000eba:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <SystemInit+0xc>)
 8000ebc:	0512      	lsls	r2, r2, #20
 8000ebe:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ec0:	4770      	bx	lr
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <MX_TIM17_Init>:
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ec8:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <MX_TIM17_Init+0x28>)
 8000eca:	4b0a      	ldr	r3, [pc, #40]	; (8000ef4 <MX_TIM17_Init+0x2c>)
{
 8000ecc:	b510      	push	{r4, lr}
  htim17.Instance = TIM17;
 8000ece:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 15;
 8000ed0:	230f      	movs	r3, #15
 8000ed2:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	2300      	movs	r3, #0
  htim17.Init.Period = 65535;
 8000ed6:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <MX_TIM17_Init+0x30>)
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8000eda:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8000ede:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ee2:	f001 ff7b 	bl	8002ddc <HAL_TIM_Base_Init>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM17_Init+0x26>
  {
    Error_Handler();
 8000eea:	f7ff ff65 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000eee:	bd10      	pop	{r4, pc}
 8000ef0:	2000029c 	.word	0x2000029c
 8000ef4:	40014800 	.word	0x40014800
 8000ef8:	0000ffff 	.word	0x0000ffff

08000efc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM17)
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <HAL_TIM_Base_MspInit+0x24>)
 8000efe:	6802      	ldr	r2, [r0, #0]
{
 8000f00:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM17)
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d109      	bne.n	8000f1a <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000f06:	2080      	movs	r0, #128	; 0x80
 8000f08:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <HAL_TIM_Base_MspInit+0x28>)
 8000f0a:	02c0      	lsls	r0, r0, #11
 8000f0c:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000f0e:	4301      	orrs	r1, r0
 8000f10:	6411      	str	r1, [r2, #64]	; 0x40
 8000f12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000f14:	4003      	ands	r3, r0
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000f1a:	b002      	add	sp, #8
 8000f1c:	4770      	bx	lr
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	40014800 	.word	0x40014800
 8000f24:	40021000 	.word	0x40021000

08000f28 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f28:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_USART1_UART_Init+0x64>)
 8000f2c:	4c18      	ldr	r4, [pc, #96]	; (8000f90 <MX_USART1_UART_Init+0x68>)
  huart1.Init.BaudRate = 2400;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f2e:	220c      	movs	r2, #12
  huart1.Instance = USART1;
 8000f30:	6023      	str	r3, [r4, #0]
  huart1.Init.BaudRate = 2400;
 8000f32:	2396      	movs	r3, #150	; 0x96
 8000f34:	011b      	lsls	r3, r3, #4
 8000f36:	6063      	str	r3, [r4, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f38:	2300      	movs	r3, #0
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f3a:	0020      	movs	r0, r4
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f3c:	60a3      	str	r3, [r4, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f3e:	60e3      	str	r3, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f40:	6123      	str	r3, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f42:	6162      	str	r2, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f44:	61a3      	str	r3, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f46:	61e3      	str	r3, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f48:	6223      	str	r3, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f4a:	6263      	str	r3, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4c:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f4e:	f002 fc17 	bl	8003780 <HAL_UART_Init>
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART1_UART_Init+0x32>
  {
    Error_Handler();
 8000f56:	f7ff ff2f 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	0020      	movs	r0, r4
 8000f5e:	f002 fce1 	bl	8003924 <HAL_UARTEx_SetTxFifoThreshold>
 8000f62:	2800      	cmp	r0, #0
 8000f64:	d001      	beq.n	8000f6a <MX_USART1_UART_Init+0x42>
  {
    Error_Handler();
 8000f66:	f7ff ff27 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	0020      	movs	r0, r4
 8000f6e:	f002 fcfd 	bl	800396c <HAL_UARTEx_SetRxFifoThreshold>
 8000f72:	2800      	cmp	r0, #0
 8000f74:	d001      	beq.n	8000f7a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f76:	f7ff ff1f 	bl	8000db8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f7a:	0020      	movs	r0, r4
 8000f7c:	f002 fcb4 	bl	80038e8 <HAL_UARTEx_DisableFifoMode>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	d001      	beq.n	8000f88 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8000f84:	f7ff ff18 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	40013800 	.word	0x40013800
 8000f90:	20000344 	.word	0x20000344

08000f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	0006      	movs	r6, r0
 8000f98:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	2214      	movs	r2, #20
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	a803      	add	r0, sp, #12
 8000fa0:	f002 fd60 	bl	8003a64 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fa4:	2218      	movs	r2, #24
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	a808      	add	r0, sp, #32
 8000faa:	f002 fd5b 	bl	8003a64 <memset>
  if(uartHandle->Instance==USART1)
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_UART_MspInit+0xa8>)
 8000fb0:	6832      	ldr	r2, [r6, #0]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d140      	bne.n	8001038 <HAL_UART_MspInit+0xa4>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fb6:	2301      	movs	r3, #1
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb8:	a808      	add	r0, sp, #32
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fba:	9308      	str	r3, [sp, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000fbc:	18db      	adds	r3, r3, r3
 8000fbe:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc0:	f001 fd40 	bl	8002a44 <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_UART_MspInit+0x38>
    {
      Error_Handler();
 8000fc8:	f7ff fef6 	bl	8000db8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fcc:	2080      	movs	r0, #128	; 0x80
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <HAL_UART_MspInit+0xac>)
 8000fd0:	01c0      	lsls	r0, r0, #7
 8000fd2:	6c19      	ldr	r1, [r3, #64]	; 0x40
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2500      	movs	r5, #0
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd6:	4301      	orrs	r1, r0
 8000fd8:	6419      	str	r1, [r3, #64]	; 0x40
 8000fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fdc:	4002      	ands	r2, r0
 8000fde:	9201      	str	r2, [sp, #4]
 8000fe0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	4817      	ldr	r0, [pc, #92]	; (8001044 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	4311      	orrs	r1, r2
 8000fea:	6359      	str	r1, [r3, #52]	; 0x34
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ff6:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff8:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ffa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffc:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001000:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001002:	f000 fdeb 	bl	8001bdc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001006:	4c10      	ldr	r4, [pc, #64]	; (8001048 <HAL_UART_MspInit+0xb4>)
 8001008:	4b10      	ldr	r3, [pc, #64]	; (800104c <HAL_UART_MspInit+0xb8>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800100a:	0020      	movs	r0, r4
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800100c:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800100e:	2332      	movs	r3, #50	; 0x32
 8001010:	6063      	str	r3, [r4, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001012:	334e      	adds	r3, #78	; 0x4e
 8001014:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001016:	23c0      	movs	r3, #192	; 0xc0
 8001018:	019b      	lsls	r3, r3, #6
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800101a:	60a5      	str	r5, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800101c:	60e5      	str	r5, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800101e:	6165      	str	r5, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001020:	61a5      	str	r5, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001022:	61e5      	str	r5, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001024:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001026:	f000 fc63 	bl	80018f0 <HAL_DMA_Init>
 800102a:	42a8      	cmp	r0, r5
 800102c:	d001      	beq.n	8001032 <HAL_UART_MspInit+0x9e>
    {
      Error_Handler();
 800102e:	f7ff fec3 	bl	8000db8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001032:	1d33      	adds	r3, r6, #4
 8001034:	67dc      	str	r4, [r3, #124]	; 0x7c
 8001036:	62a6      	str	r6, [r4, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001038:	b00e      	add	sp, #56	; 0x38
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	40013800 	.word	0x40013800
 8001040:	40021000 	.word	0x40021000
 8001044:	50000400 	.word	0x50000400
 8001048:	200002e8 	.word	0x200002e8
 800104c:	40020008 	.word	0x40020008

08001050 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001050:	480d      	ldr	r0, [pc, #52]	; (8001088 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001052:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001054:	f7ff ff30 	bl	8000eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <LoopForever+0x6>)
  ldr r1, =_edata
 800105a:	490d      	ldr	r1, [pc, #52]	; (8001090 <LoopForever+0xa>)
  ldr r2, =_sidata
 800105c:	4a0d      	ldr	r2, [pc, #52]	; (8001094 <LoopForever+0xe>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001060:	e002      	b.n	8001068 <LoopCopyDataInit>

08001062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001066:	3304      	adds	r3, #4

08001068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800106a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800106c:	d3f9      	bcc.n	8001062 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800106e:	4a0a      	ldr	r2, [pc, #40]	; (8001098 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001070:	4c0a      	ldr	r4, [pc, #40]	; (800109c <LoopForever+0x16>)
  movs r3, #0
 8001072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001074:	e001      	b.n	800107a <LoopFillZerobss>

08001076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001078:	3204      	adds	r2, #4

0800107a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800107a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800107c:	d3fb      	bcc.n	8001076 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800107e:	f002 fccd 	bl	8003a1c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001082:	f7ff fe6d 	bl	8000d60 <main>

08001086 <LoopForever>:

LoopForever:
  b LoopForever
 8001086:	e7fe      	b.n	8001086 <LoopForever>
  ldr   r0, =_estack
 8001088:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800108c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001090:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001094:	08003b44 	.word	0x08003b44
  ldr r2, =_sbss
 8001098:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800109c:	200003dc 	.word	0x200003dc

080010a0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010a0:	e7fe      	b.n	80010a0 <ADC1_IRQHandler>
	...

080010a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_InitTick+0x44>)
{
 80010a8:	0005      	movs	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 80010aa:	7819      	ldrb	r1, [r3, #0]
 80010ac:	2900      	cmp	r1, #0
 80010ae:	d101      	bne.n	80010b4 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b0:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80010b2:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010b4:	20fa      	movs	r0, #250	; 0xfa
 80010b6:	0080      	lsls	r0, r0, #2
 80010b8:	f7ff f82c 	bl	8000114 <__udivsi3>
 80010bc:	4b0b      	ldr	r3, [pc, #44]	; (80010ec <HAL_InitTick+0x48>)
 80010be:	0001      	movs	r1, r0
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f7ff f827 	bl	8000114 <__udivsi3>
 80010c6:	f000 fbbf 	bl	8001848 <HAL_SYSTICK_Config>
 80010ca:	1e04      	subs	r4, r0, #0
 80010cc:	d1f0      	bne.n	80010b0 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ce:	2d03      	cmp	r5, #3
 80010d0:	d8ee      	bhi.n	80010b0 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d2:	0002      	movs	r2, r0
 80010d4:	2001      	movs	r0, #1
 80010d6:	0029      	movs	r1, r5
 80010d8:	4240      	negs	r0, r0
 80010da:	f000 fb71 	bl	80017c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <HAL_InitTick+0x4c>)
 80010e0:	0020      	movs	r0, r4
 80010e2:	601d      	str	r5, [r3, #0]
  return status;
 80010e4:	e7e5      	b.n	80010b2 <HAL_InitTick+0xe>
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	20000070 	.word	0x20000070
 80010ec:	2000006c 	.word	0x2000006c
 80010f0:	20000074 	.word	0x20000074

080010f4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010f4:	2380      	movs	r3, #128	; 0x80
 80010f6:	4a08      	ldr	r2, [pc, #32]	; (8001118 <HAL_Init+0x24>)
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	6811      	ldr	r1, [r2, #0]
{
 80010fc:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010fe:	430b      	orrs	r3, r1
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001100:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001102:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001104:	f7ff ffce 	bl	80010a4 <HAL_InitTick>
 8001108:	1e04      	subs	r4, r0, #0
 800110a:	d103      	bne.n	8001114 <HAL_Init+0x20>
  HAL_MspInit();
 800110c:	f7ff fea0 	bl	8000e50 <HAL_MspInit>
}
 8001110:	0020      	movs	r0, r4
 8001112:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001114:	2401      	movs	r4, #1
 8001116:	e7fb      	b.n	8001110 <HAL_Init+0x1c>
 8001118:	40022000 	.word	0x40022000

0800111c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <HAL_IncTick+0x10>)
 800111e:	4b04      	ldr	r3, [pc, #16]	; (8001130 <HAL_IncTick+0x14>)
 8001120:	6811      	ldr	r1, [r2, #0]
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	185b      	adds	r3, r3, r1
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	4770      	bx	lr
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	200003d8 	.word	0x200003d8
 8001130:	20000070 	.word	0x20000070

08001134 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001134:	4b01      	ldr	r3, [pc, #4]	; (800113c <HAL_GetTick+0x8>)
 8001136:	6818      	ldr	r0, [r3, #0]
}
 8001138:	4770      	bx	lr
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	200003d8 	.word	0x200003d8

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b570      	push	{r4, r5, r6, lr}
 8001142:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff fff6 	bl	8001134 <HAL_GetTick>
 8001148:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800114a:	1c63      	adds	r3, r4, #1
 800114c:	d002      	beq.n	8001154 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b04      	ldr	r3, [pc, #16]	; (8001160 <HAL_Delay+0x20>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001154:	f7ff ffee 	bl	8001134 <HAL_GetTick>
 8001158:	1b40      	subs	r0, r0, r5
 800115a:	42a0      	cmp	r0, r4
 800115c:	d3fa      	bcc.n	8001154 <HAL_Delay+0x14>
  {
  }
}
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	20000070 	.word	0x20000070

08001164 <LL_ADC_REG_IsConversionOngoing>:
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001164:	6880      	ldr	r0, [r0, #8]
 8001166:	0740      	lsls	r0, r0, #29
 8001168:	0fc0      	lsrs	r0, r0, #31
}
 800116a:	4770      	bx	lr

0800116c <HAL_ADC_Init>:
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800116c:	2300      	movs	r3, #0
{
 800116e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001170:	b085      	sub	sp, #20
 8001172:	0004      	movs	r4, r0

  /* Check ADC handle */
  if (hadc == NULL)
  {
    return HAL_ERROR;
 8001174:	2501      	movs	r5, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001176:	9303      	str	r3, [sp, #12]
  if (hadc == NULL)
 8001178:	4298      	cmp	r0, r3
 800117a:	d100      	bne.n	800117e <HAL_ADC_Init+0x12>
 800117c:	e0b7      	b.n	80012ee <HAL_ADC_Init+0x182>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800117e:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8001180:	429d      	cmp	r5, r3
 8001182:	d105      	bne.n	8001190 <HAL_ADC_Init+0x24>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001184:	f7ff fc3c 	bl	8000a00 <HAL_ADC_MspInit>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001188:	0023      	movs	r3, r4
 800118a:	3354      	adds	r3, #84	; 0x54
    ADC_CLEAR_ERRORCODE(hadc);
 800118c:	65e5      	str	r5, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 800118e:	701d      	strb	r5, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001190:	2380      	movs	r3, #128	; 0x80
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001192:	6826      	ldr	r6, [r4, #0]
 8001194:	055b      	lsls	r3, r3, #21
 8001196:	68b2      	ldr	r2, [r6, #8]
 8001198:	421a      	tst	r2, r3
 800119a:	d100      	bne.n	800119e <HAL_ADC_Init+0x32>
 800119c:	e0aa      	b.n	80012f4 <HAL_ADC_Init+0x188>
 800119e:	68b3      	ldr	r3, [r6, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011a0:	2500      	movs	r5, #0
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	d407      	bmi.n	80011b6 <HAL_ADC_Init+0x4a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011a6:	2310      	movs	r3, #16

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a8:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80011ac:	4313      	orrs	r3, r2
 80011ae:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011b0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011b2:	432b      	orrs	r3, r5
 80011b4:	65e3      	str	r3, [r4, #92]	; 0x5c

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011b6:	0030      	movs	r0, r6
 80011b8:	f7ff ffd4 	bl	8001164 <LL_ADC_REG_IsConversionOngoing>

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011bc:	2210      	movs	r2, #16
 80011be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011c0:	4013      	ands	r3, r2
 80011c2:	4303      	orrs	r3, r0
 80011c4:	d000      	beq.n	80011c8 <HAL_ADC_Init+0x5c>
 80011c6:	e0d0      	b.n	800136a <HAL_ADC_Init+0x1fe>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011ca:	4a6a      	ldr	r2, [pc, #424]	; (8001374 <HAL_ADC_Init+0x208>)
 80011cc:	401a      	ands	r2, r3
 80011ce:	2302      	movs	r3, #2
 80011d0:	4313      	orrs	r3, r2
 80011d2:	65a3      	str	r3, [r4, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011d4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	07d2      	lsls	r2, r2, #31
 80011da:	d466      	bmi.n	80012aa <HAL_ADC_Init+0x13e>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011dc:	7e22      	ldrb	r2, [r4, #24]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011de:	7ea0      	ldrb	r0, [r4, #26]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011e0:	0392      	lsls	r2, r2, #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011e2:	7e66      	ldrb	r6, [r4, #25]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011e4:	6b27      	ldr	r7, [r4, #48]	; 0x30
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80011e6:	4694      	mov	ip, r2
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011e8:	0342      	lsls	r2, r0, #13
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80011ea:	68a1      	ldr	r1, [r4, #8]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80011ec:	03f6      	lsls	r6, r6, #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80011ee:	9201      	str	r2, [sp, #4]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80011f0:	2f00      	cmp	r7, #0
 80011f2:	d001      	beq.n	80011f8 <HAL_ADC_Init+0x8c>
 80011f4:	2780      	movs	r7, #128	; 0x80
 80011f6:	017f      	lsls	r7, r7, #5
 80011f8:	68e2      	ldr	r2, [r4, #12]
 80011fa:	4311      	orrs	r1, r2
 80011fc:	4662      	mov	r2, ip
 80011fe:	4311      	orrs	r1, r2
 8001200:	4331      	orrs	r1, r6
 8001202:	0342      	lsls	r2, r0, #13
 8001204:	4311      	orrs	r1, r2
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001206:	6922      	ldr	r2, [r4, #16]
 8001208:	2a00      	cmp	r2, #0
 800120a:	db00      	blt.n	800120e <HAL_ADC_Init+0xa2>
 800120c:	e087      	b.n	800131e <HAL_ADC_Init+0x1b2>
 800120e:	0052      	lsls	r2, r2, #1
 8001210:	0856      	lsrs	r6, r2, #1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001212:	0022      	movs	r2, r4
 8001214:	322c      	adds	r2, #44	; 0x2c
 8001216:	7812      	ldrb	r2, [r2, #0]
 8001218:	0052      	lsls	r2, r2, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800121a:	430a      	orrs	r2, r1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800121c:	1c61      	adds	r1, r4, #1
 800121e:	7fc9      	ldrb	r1, [r1, #31]
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001220:	433a      	orrs	r2, r7
 8001222:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001224:	2901      	cmp	r1, #1
 8001226:	d105      	bne.n	8001234 <HAL_ADC_Init+0xc8>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001228:	2800      	cmp	r0, #0
 800122a:	d000      	beq.n	800122e <HAL_ADC_Init+0xc2>
 800122c:	e07a      	b.n	8001324 <HAL_ADC_Init+0x1b8>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800122e:	2180      	movs	r1, #128	; 0x80
 8001230:	0249      	lsls	r1, r1, #9
 8001232:	430a      	orrs	r2, r1
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001234:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001236:	2900      	cmp	r1, #0
 8001238:	d005      	beq.n	8001246 <HAL_ADC_Init+0xda>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800123a:	20e0      	movs	r0, #224	; 0xe0
 800123c:	0040      	lsls	r0, r0, #1
 800123e:	4001      	ands	r1, r0
 8001240:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001242:	4301      	orrs	r1, r0
 8001244:	430a      	orrs	r2, r1
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001246:	68d9      	ldr	r1, [r3, #12]
 8001248:	484b      	ldr	r0, [pc, #300]	; (8001378 <HAL_ADC_Init+0x20c>)
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800124a:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
      MODIFY_REG(hadc->Instance->CFGR1,
 800124c:	4001      	ands	r1, r0
 800124e:	430a      	orrs	r2, r1
 8001250:	60da      	str	r2, [r3, #12]
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001252:	0022      	movs	r2, r4
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001254:	6861      	ldr	r1, [r4, #4]
      if (hadc->Init.OversamplingMode == ENABLE)
 8001256:	323c      	adds	r2, #60	; 0x3c
 8001258:	7812      	ldrb	r2, [r2, #0]
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800125a:	0f8e      	lsrs	r6, r1, #30
 800125c:	07b6      	lsls	r6, r6, #30
      if (hadc->Init.OversamplingMode == ENABLE)
 800125e:	4694      	mov	ip, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001260:	4337      	orrs	r7, r6
      if (hadc->Init.OversamplingMode == ENABLE)
 8001262:	2a01      	cmp	r2, #1
 8001264:	d109      	bne.n	800127a <HAL_ADC_Init+0x10e>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001266:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001268:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800126a:	4302      	orrs	r2, r0
 800126c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800126e:	433a      	orrs	r2, r7
 8001270:	4302      	orrs	r2, r0
 8001272:	4660      	mov	r0, ip
 8001274:	4332      	orrs	r2, r6
 8001276:	4310      	orrs	r0, r2
 8001278:	0007      	movs	r7, r0
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	483f      	ldr	r0, [pc, #252]	; (800137c <HAL_ADC_Init+0x210>)
 800127e:	4002      	ands	r2, r0
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001280:	2080      	movs	r0, #128	; 0x80
      MODIFY_REG(hadc->Instance->CFGR2,
 8001282:	433a      	orrs	r2, r7
 8001284:	611a      	str	r2, [r3, #16]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001286:	004a      	lsls	r2, r1, #1
 8001288:	0852      	lsrs	r2, r2, #1
 800128a:	05c0      	lsls	r0, r0, #23
 800128c:	4282      	cmp	r2, r0
 800128e:	d00c      	beq.n	80012aa <HAL_ADC_Init+0x13e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	0612      	lsls	r2, r2, #24
 8001294:	4291      	cmp	r1, r2
 8001296:	d008      	beq.n	80012aa <HAL_ADC_Init+0x13e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001298:	4839      	ldr	r0, [pc, #228]	; (8001380 <HAL_ADC_Init+0x214>)
 800129a:	4e3a      	ldr	r6, [pc, #232]	; (8001384 <HAL_ADC_Init+0x218>)
 800129c:	6802      	ldr	r2, [r0, #0]
 800129e:	4032      	ands	r2, r6
 80012a0:	26f0      	movs	r6, #240	; 0xf0
 80012a2:	03b6      	lsls	r6, r6, #14
 80012a4:	4031      	ands	r1, r6
 80012a6:	4311      	orrs	r1, r2
 80012a8:	6001      	str	r1, [r0, #0]
  MODIFY_REG(ADCx->SMPR,
 80012aa:	2007      	movs	r0, #7
 80012ac:	2670      	movs	r6, #112	; 0x70
 80012ae:	695a      	ldr	r2, [r3, #20]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80012b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012b2:	4382      	bics	r2, r0
 80012b4:	430a      	orrs	r2, r1
 80012b6:	615a      	str	r2, [r3, #20]
 80012b8:	6958      	ldr	r0, [r3, #20]
 80012ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80012bc:	43b0      	bics	r0, r6
 80012be:	0112      	lsls	r2, r2, #4
 80012c0:	4302      	orrs	r2, r0
 80012c2:	615a      	str	r2, [r3, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80012c4:	6922      	ldr	r2, [r4, #16]
 80012c6:	2a00      	cmp	r2, #0
 80012c8:	d134      	bne.n	8001334 <HAL_ADC_Init+0x1c8>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80012ca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012cc:	3a10      	subs	r2, #16
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80012ce:	4302      	orrs	r2, r0
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012d2:	2207      	movs	r2, #7
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4013      	ands	r3, r2
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012d8:	4299      	cmp	r1, r3
 80012da:	d13a      	bne.n	8001352 <HAL_ADC_Init+0x1e6>
      == hadc->Init.SamplingTimeCommon1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012dc:	2300      	movs	r3, #0
 80012de:	65e3      	str	r3, [r4, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80012e2:	3a04      	subs	r2, #4
 80012e4:	4393      	bics	r3, r2
 80012e6:	001a      	movs	r2, r3
 80012e8:	2301      	movs	r3, #1
 80012ea:	4313      	orrs	r3, r2
 80012ec:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
  }

  return tmp_hal_status;
}
 80012ee:	0028      	movs	r0, r5
 80012f0:	b005      	add	sp, #20
 80012f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(ADCx->CR,
 80012f4:	68b2      	ldr	r2, [r6, #8]
 80012f6:	4924      	ldr	r1, [pc, #144]	; (8001388 <HAL_ADC_Init+0x21c>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	4313      	orrs	r3, r2
 80012fc:	60b3      	str	r3, [r6, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012fe:	4b23      	ldr	r3, [pc, #140]	; (800138c <HAL_ADC_Init+0x220>)
 8001300:	4923      	ldr	r1, [pc, #140]	; (8001390 <HAL_ADC_Init+0x224>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	f7fe ff06 	bl	8000114 <__udivsi3>
 8001308:	3001      	adds	r0, #1
 800130a:	0040      	lsls	r0, r0, #1
 800130c:	9003      	str	r0, [sp, #12]
    while (wait_loop_index != 0UL)
 800130e:	9b03      	ldr	r3, [sp, #12]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d100      	bne.n	8001316 <HAL_ADC_Init+0x1aa>
 8001314:	e743      	b.n	800119e <HAL_ADC_Init+0x32>
      wait_loop_index--;
 8001316:	9b03      	ldr	r3, [sp, #12]
 8001318:	3b01      	subs	r3, #1
 800131a:	9303      	str	r3, [sp, #12]
 800131c:	e7f7      	b.n	800130e <HAL_ADC_Init+0x1a2>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800131e:	2680      	movs	r6, #128	; 0x80
 8001320:	03b6      	lsls	r6, r6, #14
 8001322:	e776      	b.n	8001212 <HAL_ADC_Init+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001324:	2020      	movs	r0, #32
 8001326:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8001328:	4330      	orrs	r0, r6
 800132a:	65a0      	str	r0, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 800132e:	4301      	orrs	r1, r0
 8001330:	65e1      	str	r1, [r4, #92]	; 0x5c
 8001332:	e77f      	b.n	8001234 <HAL_ADC_Init+0xc8>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001334:	2080      	movs	r0, #128	; 0x80
 8001336:	0380      	lsls	r0, r0, #14
 8001338:	4282      	cmp	r2, r0
 800133a:	d1ca      	bne.n	80012d2 <HAL_ADC_Init+0x166>
      MODIFY_REG(hadc->Instance->CHSELR,
 800133c:	201c      	movs	r0, #28
 800133e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001340:	69e2      	ldr	r2, [r4, #28]
 8001342:	3a01      	subs	r2, #1
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4002      	ands	r2, r0
 8001348:	382c      	subs	r0, #44	; 0x2c
 800134a:	4090      	lsls	r0, r2
 800134c:	0002      	movs	r2, r0
 800134e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001350:	e7bd      	b.n	80012ce <HAL_ADC_Init+0x162>
      ADC_STATE_CLR_SET(hadc->State,
 8001352:	2212      	movs	r2, #18
 8001354:	6da3      	ldr	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001356:	2501      	movs	r5, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001358:	4393      	bics	r3, r2
 800135a:	001a      	movs	r2, r3
 800135c:	2310      	movs	r3, #16
 800135e:	4313      	orrs	r3, r2
 8001360:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001362:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001364:	432b      	orrs	r3, r5
 8001366:	65e3      	str	r3, [r4, #92]	; 0x5c
      tmp_hal_status = HAL_ERROR;
 8001368:	e7c1      	b.n	80012ee <HAL_ADC_Init+0x182>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 800136c:	2501      	movs	r5, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800136e:	431a      	orrs	r2, r3
 8001370:	65a2      	str	r2, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001372:	e7bc      	b.n	80012ee <HAL_ADC_Init+0x182>
 8001374:	fffffefd 	.word	0xfffffefd
 8001378:	fffe0201 	.word	0xfffe0201
 800137c:	1ffffc02 	.word	0x1ffffc02
 8001380:	40012708 	.word	0x40012708
 8001384:	ffc3ffff 	.word	0xffc3ffff
 8001388:	6fffffe8 	.word	0x6fffffe8
 800138c:	2000006c 	.word	0x2000006c
 8001390:	00030d40 	.word	0x00030d40

08001394 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001396:	6945      	ldr	r5, [r0, #20]
{
 8001398:	0004      	movs	r4, r0
 800139a:	000e      	movs	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800139c:	2d08      	cmp	r5, #8
 800139e:	d00a      	beq.n	80013b6 <HAL_ADC_PollForConversion+0x22>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80013a0:	6803      	ldr	r3, [r0, #0]
 80013a2:	2001      	movs	r0, #1
 80013a4:	68db      	ldr	r3, [r3, #12]

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80013a6:	2504      	movs	r5, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80013a8:	4203      	tst	r3, r0
 80013aa:	d004      	beq.n	80013b6 <HAL_ADC_PollForConversion+0x22>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013ac:	2320      	movs	r3, #32
 80013ae:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80013b0:	4313      	orrs	r3, r2
 80013b2:	65a3      	str	r3, [r4, #88]	; 0x58
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
  }

  /* Return function status */
  return HAL_OK;
}
 80013b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80013b6:	f7ff febd 	bl	8001134 <HAL_GetTick>
 80013ba:	0007      	movs	r7, r0
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	6803      	ldr	r3, [r0, #0]
 80013c0:	421d      	tst	r5, r3
 80013c2:	d025      	beq.n	8001410 <HAL_ADC_PollForConversion+0x7c>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4313      	orrs	r3, r2
 80013cc:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80013ce:	23c0      	movs	r3, #192	; 0xc0
 80013d0:	68c2      	ldr	r2, [r0, #12]
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	421a      	tst	r2, r3
 80013d6:	d114      	bne.n	8001402 <HAL_ADC_PollForConversion+0x6e>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80013d8:	7ea3      	ldrb	r3, [r4, #26]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d111      	bne.n	8001402 <HAL_ADC_PollForConversion+0x6e>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80013de:	6803      	ldr	r3, [r0, #0]
 80013e0:	071b      	lsls	r3, r3, #28
 80013e2:	d50e      	bpl.n	8001402 <HAL_ADC_PollForConversion+0x6e>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013e4:	f7ff febe 	bl	8001164 <LL_ADC_REG_IsConversionOngoing>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d128      	bne.n	800143e <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80013ec:	210c      	movs	r1, #12
 80013ee:	6822      	ldr	r2, [r4, #0]
 80013f0:	6853      	ldr	r3, [r2, #4]
 80013f2:	438b      	bics	r3, r1
 80013f4:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80013f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80013f8:	4a16      	ldr	r2, [pc, #88]	; (8001454 <HAL_ADC_PollForConversion+0xc0>)
 80013fa:	401a      	ands	r2, r3
 80013fc:	2301      	movs	r3, #1
 80013fe:	4313      	orrs	r3, r2
 8001400:	65a3      	str	r3, [r4, #88]	; 0x58
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001402:	7e20      	ldrb	r0, [r4, #24]
 8001404:	2800      	cmp	r0, #0
 8001406:	d123      	bne.n	8001450 <HAL_ADC_PollForConversion+0xbc>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001408:	220c      	movs	r2, #12
 800140a:	6823      	ldr	r3, [r4, #0]
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	e7d1      	b.n	80013b4 <HAL_ADC_PollForConversion+0x20>
    if (Timeout != HAL_MAX_DELAY)
 8001410:	1c73      	adds	r3, r6, #1
 8001412:	d0d4      	beq.n	80013be <HAL_ADC_PollForConversion+0x2a>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001414:	f7ff fe8e 	bl	8001134 <HAL_GetTick>
 8001418:	1bc0      	subs	r0, r0, r7
 800141a:	42b0      	cmp	r0, r6
 800141c:	d801      	bhi.n	8001422 <HAL_ADC_PollForConversion+0x8e>
 800141e:	2e00      	cmp	r6, #0
 8001420:	d1cc      	bne.n	80013bc <HAL_ADC_PollForConversion+0x28>
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8001422:	002a      	movs	r2, r5
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	401a      	ands	r2, r3
 800142a:	421d      	tst	r5, r3
 800142c:	d1c6      	bne.n	80013bc <HAL_ADC_PollForConversion+0x28>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800142e:	2304      	movs	r3, #4
 8001430:	6da1      	ldr	r1, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8001432:	3454      	adds	r4, #84	; 0x54
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001434:	430b      	orrs	r3, r1
 8001436:	6063      	str	r3, [r4, #4]
          return HAL_TIMEOUT;
 8001438:	2003      	movs	r0, #3
          __HAL_UNLOCK(hadc);
 800143a:	7022      	strb	r2, [r4, #0]
          return HAL_TIMEOUT;
 800143c:	e7ba      	b.n	80013b4 <HAL_ADC_PollForConversion+0x20>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143e:	2320      	movs	r3, #32
 8001440:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001442:	4313      	orrs	r3, r2
 8001444:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001446:	2301      	movs	r3, #1
 8001448:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800144a:	4313      	orrs	r3, r2
 800144c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800144e:	e7d8      	b.n	8001402 <HAL_ADC_PollForConversion+0x6e>
  return HAL_OK;
 8001450:	2000      	movs	r0, #0
 8001452:	e7af      	b.n	80013b4 <HAL_ADC_PollForConversion+0x20>
 8001454:	fffffefe 	.word	0xfffffefe

08001458 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001458:	6803      	ldr	r3, [r0, #0]
 800145a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800145c:	4770      	bx	lr
	...

08001460 <HAL_ADC_ConfigChannel>:
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001460:	2300      	movs	r3, #0
{
 8001462:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001464:	b087      	sub	sp, #28
  __IO uint32_t wait_loop_index = 0UL;
 8001466:	9305      	str	r3, [sp, #20]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001468:	0003      	movs	r3, r0
 800146a:	3354      	adds	r3, #84	; 0x54
 800146c:	781a      	ldrb	r2, [r3, #0]
{
 800146e:	0005      	movs	r5, r0
 8001470:	000e      	movs	r6, r1
  __HAL_LOCK(hadc);
 8001472:	2002      	movs	r0, #2
 8001474:	2a01      	cmp	r2, #1
 8001476:	d100      	bne.n	800147a <HAL_ADC_ConfigChannel+0x1a>
 8001478:	e0c3      	b.n	8001602 <HAL_ADC_ConfigChannel+0x1a2>
 800147a:	2401      	movs	r4, #1
 800147c:	701c      	strb	r4, [r3, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800147e:	6828      	ldr	r0, [r5, #0]
 8001480:	f7ff fe70 	bl	8001164 <LL_ADC_REG_IsConversionOngoing>
 8001484:	2800      	cmp	r0, #0
 8001486:	d000      	beq.n	800148a <HAL_ADC_ConfigChannel+0x2a>
 8001488:	e0f9      	b.n	800167e <HAL_ADC_ConfigChannel+0x21e>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800148a:	2204      	movs	r2, #4
 800148c:	692f      	ldr	r7, [r5, #16]
    if (pConfig->Rank != ADC_RANK_NONE)
 800148e:	6873      	ldr	r3, [r6, #4]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001490:	4397      	bics	r7, r2
 8001492:	2280      	movs	r2, #128	; 0x80
    if (pConfig->Rank != ADC_RANK_NONE)
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	0612      	lsls	r2, r2, #24
 8001498:	4694      	mov	ip, r2
 800149a:	9a01      	ldr	r2, [sp, #4]
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800149c:	6833      	ldr	r3, [r6, #0]
    if (pConfig->Rank != ADC_RANK_NONE)
 800149e:	2a02      	cmp	r2, #2
 80014a0:	d100      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x44>
 80014a2:	e0c2      	b.n	800162a <HAL_ADC_ConfigChannel+0x1ca>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80014a4:	0359      	lsls	r1, r3, #13
 80014a6:	0b49      	lsrs	r1, r1, #13
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80014a8:	682a      	ldr	r2, [r5, #0]
 80014aa:	9102      	str	r1, [sp, #8]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80014ac:	4567      	cmp	r7, ip
 80014ae:	d10f      	bne.n	80014d0 <HAL_ADC_ConfigChannel+0x70>
 80014b0:	6a90      	ldr	r0, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->CHSELR,
 80014b2:	4301      	orrs	r1, r0
 80014b4:	6291      	str	r1, [r2, #40]	; 0x28
  MODIFY_REG(ADCx->SMPR,
 80014b6:	68b1      	ldr	r1, [r6, #8]
 80014b8:	6954      	ldr	r4, [r2, #20]
 80014ba:	0218      	lsls	r0, r3, #8
 80014bc:	4e73      	ldr	r6, [pc, #460]	; (800168c <HAL_ADC_ConfigChannel+0x22c>)
 80014be:	4001      	ands	r1, r0
 80014c0:	4031      	ands	r1, r6
 80014c2:	4384      	bics	r4, r0
 80014c4:	4321      	orrs	r1, r4
 80014c6:	6151      	str	r1, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db64      	blt.n	8001596 <HAL_ADC_ConfigChannel+0x136>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014cc:	2000      	movs	r0, #0
}
 80014ce:	e095      	b.n	80015fc <HAL_ADC_ConfigChannel+0x19c>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80014d0:	211f      	movs	r1, #31
 80014d2:	9f01      	ldr	r7, [sp, #4]
 80014d4:	400f      	ands	r7, r1
 80014d6:	46bc      	mov	ip, r7
 80014d8:	270f      	movs	r7, #15
 80014da:	4661      	mov	r1, ip
 80014dc:	408f      	lsls	r7, r1
 80014de:	43f9      	mvns	r1, r7
 80014e0:	9103      	str	r1, [sp, #12]
 80014e2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 80014e4:	43b9      	bics	r1, r7
 80014e6:	000f      	movs	r7, r1
 80014e8:	9902      	ldr	r1, [sp, #8]
 80014ea:	2900      	cmp	r1, #0
 80014ec:	d114      	bne.n	8001518 <HAL_ADC_ConfigChannel+0xb8>
 80014ee:	0e98      	lsrs	r0, r3, #26
 80014f0:	311f      	adds	r1, #31
 80014f2:	4008      	ands	r0, r1
 80014f4:	4661      	mov	r1, ip
 80014f6:	4088      	lsls	r0, r1
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80014f8:	9901      	ldr	r1, [sp, #4]
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80014fa:	4307      	orrs	r7, r0
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80014fc:	0889      	lsrs	r1, r1, #2
 80014fe:	69e8      	ldr	r0, [r5, #28]
 8001500:	3101      	adds	r1, #1
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001502:	662f      	str	r7, [r5, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001504:	4281      	cmp	r1, r0
 8001506:	d8d6      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0x56>
  MODIFY_REG(ADCx->CHSELR,
 8001508:	4664      	mov	r4, ip
 800150a:	0099      	lsls	r1, r3, #2
 800150c:	0f09      	lsrs	r1, r1, #28
 800150e:	40a1      	lsls	r1, r4
 8001510:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001512:	9c03      	ldr	r4, [sp, #12]
 8001514:	4020      	ands	r0, r4
 8001516:	e7cc      	b.n	80014b2 <HAL_ADC_ConfigChannel+0x52>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001518:	4223      	tst	r3, r4
 800151a:	d1eb      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 800151c:	2102      	movs	r1, #2
 800151e:	0020      	movs	r0, r4
 8001520:	420b      	tst	r3, r1
 8001522:	d1e7      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001524:	0008      	movs	r0, r1
 8001526:	1849      	adds	r1, r1, r1
 8001528:	420b      	tst	r3, r1
 800152a:	d1e3      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 800152c:	3001      	adds	r0, #1
 800152e:	0719      	lsls	r1, r3, #28
 8001530:	d4e0      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001532:	3001      	adds	r0, #1
 8001534:	06d9      	lsls	r1, r3, #27
 8001536:	d4dd      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001538:	3001      	adds	r0, #1
 800153a:	0699      	lsls	r1, r3, #26
 800153c:	d4da      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 800153e:	3001      	adds	r0, #1
 8001540:	0659      	lsls	r1, r3, #25
 8001542:	d4d7      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001544:	3001      	adds	r0, #1
 8001546:	0619      	lsls	r1, r3, #24
 8001548:	d4d4      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 800154a:	3001      	adds	r0, #1
 800154c:	05d9      	lsls	r1, r3, #23
 800154e:	d4d1      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001550:	3001      	adds	r0, #1
 8001552:	0599      	lsls	r1, r3, #22
 8001554:	d4ce      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001556:	3001      	adds	r0, #1
 8001558:	0559      	lsls	r1, r3, #21
 800155a:	d4cb      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 800155c:	3001      	adds	r0, #1
 800155e:	0519      	lsls	r1, r3, #20
 8001560:	d4c8      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001562:	3001      	adds	r0, #1
 8001564:	04d9      	lsls	r1, r3, #19
 8001566:	d4c5      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001568:	3001      	adds	r0, #1
 800156a:	0499      	lsls	r1, r3, #18
 800156c:	d4c2      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 800156e:	3001      	adds	r0, #1
 8001570:	0459      	lsls	r1, r3, #17
 8001572:	d4bf      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001574:	3001      	adds	r0, #1
 8001576:	0419      	lsls	r1, r3, #16
 8001578:	d4bc      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 800157a:	3001      	adds	r0, #1
 800157c:	03d9      	lsls	r1, r3, #15
 800157e:	d4b9      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001580:	3001      	adds	r0, #1
 8001582:	0399      	lsls	r1, r3, #14
 8001584:	d4b6      	bmi.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0018      	movs	r0, r3
 800158a:	02c9      	lsls	r1, r1, #11
 800158c:	4008      	ands	r0, r1
 800158e:	420b      	tst	r3, r1
 8001590:	d0b0      	beq.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
 8001592:	2012      	movs	r0, #18
 8001594:	e7ae      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x94>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001596:	24e0      	movs	r4, #224	; 0xe0
 8001598:	4a3d      	ldr	r2, [pc, #244]	; (8001690 <HAL_ADC_ConfigChannel+0x230>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800159a:	483e      	ldr	r0, [pc, #248]	; (8001694 <HAL_ADC_ConfigChannel+0x234>)
 800159c:	6811      	ldr	r1, [r2, #0]
 800159e:	0464      	lsls	r4, r4, #17
 80015a0:	400c      	ands	r4, r1
 80015a2:	4283      	cmp	r3, r0
 80015a4:	d11a      	bne.n	80015dc <HAL_ADC_ConfigChannel+0x17c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	041b      	lsls	r3, r3, #16
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015aa:	4219      	tst	r1, r3
 80015ac:	d18e      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x6c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015ae:	6811      	ldr	r1, [r2, #0]
 80015b0:	4839      	ldr	r0, [pc, #228]	; (8001698 <HAL_ADC_ConfigChannel+0x238>)
 80015b2:	4001      	ands	r1, r0
 80015b4:	4321      	orrs	r1, r4
 80015b6:	4319      	orrs	r1, r3
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <HAL_ADC_ConfigChannel+0x23c>)
 80015ba:	6011      	str	r1, [r2, #0]
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	4938      	ldr	r1, [pc, #224]	; (80016a0 <HAL_ADC_ConfigChannel+0x240>)
 80015c0:	f7fe fda8 	bl	8000114 <__udivsi3>
 80015c4:	1c43      	adds	r3, r0, #1
 80015c6:	200c      	movs	r0, #12
 80015c8:	4358      	muls	r0, r3
 80015ca:	9005      	str	r0, [sp, #20]
          while (wait_loop_index != 0UL)
 80015cc:	9b05      	ldr	r3, [sp, #20]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d100      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x174>
 80015d2:	e77b      	b.n	80014cc <HAL_ADC_ConfigChannel+0x6c>
          {
            wait_loop_index--;
 80015d4:	9b05      	ldr	r3, [sp, #20]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	9305      	str	r3, [sp, #20]
 80015da:	e7f7      	b.n	80015cc <HAL_ADC_ConfigChannel+0x16c>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80015dc:	4831      	ldr	r0, [pc, #196]	; (80016a4 <HAL_ADC_ConfigChannel+0x244>)
 80015de:	4283      	cmp	r3, r0
 80015e0:	d111      	bne.n	8001606 <HAL_ADC_ConfigChannel+0x1a6>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80015e2:	2680      	movs	r6, #128	; 0x80
 80015e4:	0008      	movs	r0, r1
 80015e6:	0476      	lsls	r6, r6, #17
 80015e8:	4030      	ands	r0, r6
 80015ea:	4231      	tst	r1, r6
 80015ec:	d000      	beq.n	80015f0 <HAL_ADC_ConfigChannel+0x190>
 80015ee:	e76d      	b.n	80014cc <HAL_ADC_ConfigChannel+0x6c>
 80015f0:	6811      	ldr	r1, [r2, #0]
 80015f2:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_ADC_ConfigChannel+0x238>)
 80015f4:	4019      	ands	r1, r3
 80015f6:	4321      	orrs	r1, r4
 80015f8:	430e      	orrs	r6, r1
 80015fa:	6016      	str	r6, [r2, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);

    tmp_hal_status = HAL_ERROR;
  }

  __HAL_UNLOCK(hadc);
 80015fc:	2300      	movs	r3, #0
 80015fe:	3554      	adds	r5, #84	; 0x54
 8001600:	702b      	strb	r3, [r5, #0]

  return tmp_hal_status;
}
 8001602:	b007      	add	sp, #28
 8001604:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001606:	4828      	ldr	r0, [pc, #160]	; (80016a8 <HAL_ADC_ConfigChannel+0x248>)
 8001608:	4283      	cmp	r3, r0
 800160a:	d000      	beq.n	800160e <HAL_ADC_ConfigChannel+0x1ae>
 800160c:	e75e      	b.n	80014cc <HAL_ADC_ConfigChannel+0x6c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	0008      	movs	r0, r1
 8001612:	03db      	lsls	r3, r3, #15
 8001614:	4018      	ands	r0, r3
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001616:	4219      	tst	r1, r3
 8001618:	d000      	beq.n	800161c <HAL_ADC_ConfigChannel+0x1bc>
 800161a:	e757      	b.n	80014cc <HAL_ADC_ConfigChannel+0x6c>
 800161c:	6811      	ldr	r1, [r2, #0]
 800161e:	4e1e      	ldr	r6, [pc, #120]	; (8001698 <HAL_ADC_ConfigChannel+0x238>)
 8001620:	4031      	ands	r1, r6
 8001622:	4321      	orrs	r1, r4
 8001624:	430b      	orrs	r3, r1
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	e7e8      	b.n	80015fc <HAL_ADC_ConfigChannel+0x19c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800162a:	4567      	cmp	r7, ip
 800162c:	d105      	bne.n	800163a <HAL_ADC_ConfigChannel+0x1da>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800162e:	6828      	ldr	r0, [r5, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001630:	0359      	lsls	r1, r3, #13
 8001632:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001634:	0b49      	lsrs	r1, r1, #13
 8001636:	438a      	bics	r2, r1
 8001638:	6282      	str	r2, [r0, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800163a:	2b00      	cmp	r3, #0
 800163c:	db00      	blt.n	8001640 <HAL_ADC_ConfigChannel+0x1e0>
 800163e:	e745      	b.n	80014cc <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001640:	4a13      	ldr	r2, [pc, #76]	; (8001690 <HAL_ADC_ConfigChannel+0x230>)
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001642:	4814      	ldr	r0, [pc, #80]	; (8001694 <HAL_ADC_ConfigChannel+0x234>)
 8001644:	6811      	ldr	r1, [r2, #0]
 8001646:	4283      	cmp	r3, r0
 8001648:	d108      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1fc>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800164a:	23a0      	movs	r3, #160	; 0xa0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800164c:	6810      	ldr	r0, [r2, #0]
 800164e:	045b      	lsls	r3, r3, #17
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001650:	4019      	ands	r1, r3
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_ADC_ConfigChannel+0x238>)
 8001654:	4003      	ands	r3, r0
 8001656:	4319      	orrs	r1, r3
 8001658:	6011      	str	r1, [r2, #0]
 800165a:	e737      	b.n	80014cc <HAL_ADC_ConfigChannel+0x6c>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800165c:	4811      	ldr	r0, [pc, #68]	; (80016a4 <HAL_ADC_ConfigChannel+0x244>)
 800165e:	4283      	cmp	r3, r0
 8001660:	d103      	bne.n	800166a <HAL_ADC_ConfigChannel+0x20a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001662:	23c0      	movs	r3, #192	; 0xc0
 8001664:	6810      	ldr	r0, [r2, #0]
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	e7f2      	b.n	8001650 <HAL_ADC_ConfigChannel+0x1f0>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800166a:	480f      	ldr	r0, [pc, #60]	; (80016a8 <HAL_ADC_ConfigChannel+0x248>)
 800166c:	4283      	cmp	r3, r0
 800166e:	d000      	beq.n	8001672 <HAL_ADC_ConfigChannel+0x212>
 8001670:	e72c      	b.n	80014cc <HAL_ADC_ConfigChannel+0x6c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001672:	20c0      	movs	r0, #192	; 0xc0
 8001674:	0440      	lsls	r0, r0, #17
 8001676:	4001      	ands	r1, r0
 8001678:	6813      	ldr	r3, [r2, #0]
 800167a:	4807      	ldr	r0, [pc, #28]	; (8001698 <HAL_ADC_ConfigChannel+0x238>)
 800167c:	e7ea      	b.n	8001654 <HAL_ADC_ConfigChannel+0x1f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167e:	2320      	movs	r3, #32
 8001680:	6daa      	ldr	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001682:	0020      	movs	r0, r4
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001684:	4313      	orrs	r3, r2
 8001686:	65ab      	str	r3, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 8001688:	e7b8      	b.n	80015fc <HAL_ADC_ConfigChannel+0x19c>
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	07ffff00 	.word	0x07ffff00
 8001690:	40012708 	.word	0x40012708
 8001694:	b0001000 	.word	0xb0001000
 8001698:	fe3fffff 	.word	0xfe3fffff
 800169c:	2000006c 	.word	0x2000006c
 80016a0:	00030d40 	.word	0x00030d40
 80016a4:	b8004000 	.word	0xb8004000
 80016a8:	b4002000 	.word	0xb4002000

080016ac <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80016ac:	2300      	movs	r3, #0
{
 80016ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016b0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 80016b2:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016b4:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80016b6:	2001      	movs	r0, #1
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	4202      	tst	r2, r0
 80016bc:	d001      	beq.n	80016c2 <ADC_Enable+0x16>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80016be:	2000      	movs	r0, #0
}
 80016c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80016c2:	6899      	ldr	r1, [r3, #8]
 80016c4:	4a22      	ldr	r2, [pc, #136]	; (8001750 <ADC_Enable+0xa4>)
 80016c6:	4211      	tst	r1, r2
 80016c8:	d007      	beq.n	80016da <ADC_Enable+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ca:	2310      	movs	r3, #16
 80016cc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80016ce:	4313      	orrs	r3, r2
 80016d0:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80016d4:	4303      	orrs	r3, r0
 80016d6:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80016d8:	e7f2      	b.n	80016c0 <ADC_Enable+0x14>
  MODIFY_REG(ADCx->CR,
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4d1d      	ldr	r5, [pc, #116]	; (8001754 <ADC_Enable+0xa8>)
 80016de:	402a      	ands	r2, r5
 80016e0:	4310      	orrs	r0, r2
 80016e2:	6098      	str	r0, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <ADC_Enable+0xac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80016e8:	021b      	lsls	r3, r3, #8
 80016ea:	d423      	bmi.n	8001734 <ADC_Enable+0x88>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80016ec:	7e63      	ldrb	r3, [r4, #25]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d0e5      	beq.n	80016be <ADC_Enable+0x12>
      tickstart = HAL_GetTick();
 80016f2:	f7ff fd1f 	bl	8001134 <HAL_GetTick>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016f6:	2601      	movs	r6, #1
      tickstart = HAL_GetTick();
 80016f8:	0007      	movs	r7, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016fa:	6822      	ldr	r2, [r4, #0]
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	4233      	tst	r3, r6
 8001700:	d1dd      	bne.n	80016be <ADC_Enable+0x12>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001702:	6893      	ldr	r3, [r2, #8]
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001704:	4233      	tst	r3, r6
 8001706:	d103      	bne.n	8001710 <ADC_Enable+0x64>
  MODIFY_REG(ADCx->CR,
 8001708:	6893      	ldr	r3, [r2, #8]
 800170a:	402b      	ands	r3, r5
 800170c:	4333      	orrs	r3, r6
 800170e:	6093      	str	r3, [r2, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001710:	f7ff fd10 	bl	8001134 <HAL_GetTick>
 8001714:	1bc0      	subs	r0, r0, r7
 8001716:	2802      	cmp	r0, #2
 8001718:	d9ef      	bls.n	80016fa <ADC_Enable+0x4e>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4233      	tst	r3, r6
 8001720:	d1eb      	bne.n	80016fa <ADC_Enable+0x4e>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001722:	2310      	movs	r3, #16
 8001724:	6da2      	ldr	r2, [r4, #88]	; 0x58
            return HAL_ERROR;
 8001726:	2001      	movs	r0, #1
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001728:	4313      	orrs	r3, r2
 800172a:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800172c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800172e:	431e      	orrs	r6, r3
 8001730:	65e6      	str	r6, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8001732:	e7c5      	b.n	80016c0 <ADC_Enable+0x14>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <ADC_Enable+0xb0>)
 8001736:	490a      	ldr	r1, [pc, #40]	; (8001760 <ADC_Enable+0xb4>)
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	f7fe fceb 	bl	8000114 <__udivsi3>
 800173e:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8001740:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001742:	9b01      	ldr	r3, [sp, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d0d1      	beq.n	80016ec <ADC_Enable+0x40>
        wait_loop_index--;
 8001748:	9b01      	ldr	r3, [sp, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	e7f8      	b.n	8001742 <ADC_Enable+0x96>
 8001750:	80000017 	.word	0x80000017
 8001754:	7fffffe8 	.word	0x7fffffe8
 8001758:	40012708 	.word	0x40012708
 800175c:	2000006c 	.word	0x2000006c
 8001760:	00030d40 	.word	0x00030d40

08001764 <HAL_ADC_Start>:
{
 8001764:	b570      	push	{r4, r5, r6, lr}
 8001766:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001768:	6800      	ldr	r0, [r0, #0]
 800176a:	f7ff fcfb 	bl	8001164 <LL_ADC_REG_IsConversionOngoing>
 800176e:	0006      	movs	r6, r0
    tmp_hal_status = HAL_BUSY;
 8001770:	2002      	movs	r0, #2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001772:	2e00      	cmp	r6, #0
 8001774:	d11d      	bne.n	80017b2 <HAL_ADC_Start+0x4e>
    __HAL_LOCK(hadc);
 8001776:	0025      	movs	r5, r4
 8001778:	3554      	adds	r5, #84	; 0x54
 800177a:	782b      	ldrb	r3, [r5, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d018      	beq.n	80017b2 <HAL_ADC_Start+0x4e>
 8001780:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8001782:	0020      	movs	r0, r4
    __HAL_LOCK(hadc);
 8001784:	702b      	strb	r3, [r5, #0]
    tmp_hal_status = ADC_Enable(hadc);
 8001786:	f7ff ff91 	bl	80016ac <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800178a:	2800      	cmp	r0, #0
 800178c:	d112      	bne.n	80017b4 <HAL_ADC_Start+0x50>
      ADC_STATE_CLR_SET(hadc->State,
 800178e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_ADC_Start+0x54>)
  MODIFY_REG(ADCx->CR,
 8001792:	490a      	ldr	r1, [pc, #40]	; (80017bc <HAL_ADC_Start+0x58>)
 8001794:	401a      	ands	r2, r3
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800179c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800179e:	65a3      	str	r3, [r4, #88]	; 0x58
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017a0:	6823      	ldr	r3, [r4, #0]
      ADC_CLEAR_ERRORCODE(hadc);
 80017a2:	65e0      	str	r0, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017a4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 80017a6:	7028      	strb	r0, [r5, #0]
 80017a8:	689a      	ldr	r2, [r3, #8]
 80017aa:	4011      	ands	r1, r2
 80017ac:	2204      	movs	r2, #4
 80017ae:	430a      	orrs	r2, r1
 80017b0:	609a      	str	r2, [r3, #8]
}
 80017b2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_UNLOCK(hadc);
 80017b4:	702e      	strb	r6, [r5, #0]
 80017b6:	e7fc      	b.n	80017b2 <HAL_ADC_Start+0x4e>
 80017b8:	fffff0fe 	.word	0xfffff0fe
 80017bc:	7fffffe8 	.word	0x7fffffe8

080017c0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017c2:	25ff      	movs	r5, #255	; 0xff
 80017c4:	2403      	movs	r4, #3
 80017c6:	002a      	movs	r2, r5
 80017c8:	4004      	ands	r4, r0
 80017ca:	00e4      	lsls	r4, r4, #3
 80017cc:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017ce:	0189      	lsls	r1, r1, #6
 80017d0:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d2:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017d4:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017d6:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 80017d8:	2800      	cmp	r0, #0
 80017da:	db0a      	blt.n	80017f2 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017dc:	24c0      	movs	r4, #192	; 0xc0
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_NVIC_SetPriority+0x4c>)
 80017e0:	0880      	lsrs	r0, r0, #2
 80017e2:	0080      	lsls	r0, r0, #2
 80017e4:	18c0      	adds	r0, r0, r3
 80017e6:	00a4      	lsls	r4, r4, #2
 80017e8:	5903      	ldr	r3, [r0, r4]
 80017ea:	401a      	ands	r2, r3
 80017ec:	4311      	orrs	r1, r2
 80017ee:	5101      	str	r1, [r0, r4]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80017f0:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017f2:	200f      	movs	r0, #15
 80017f4:	4003      	ands	r3, r0
 80017f6:	3b08      	subs	r3, #8
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_NVIC_SetPriority+0x50>)
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	181b      	adds	r3, r3, r0
 8001800:	69d8      	ldr	r0, [r3, #28]
 8001802:	4002      	ands	r2, r0
 8001804:	4311      	orrs	r1, r2
 8001806:	61d9      	str	r1, [r3, #28]
 8001808:	e7f2      	b.n	80017f0 <HAL_NVIC_SetPriority+0x30>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	e000e100 	.word	0xe000e100
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001814:	2800      	cmp	r0, #0
 8001816:	db05      	blt.n	8001824 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001818:	231f      	movs	r3, #31
 800181a:	4018      	ands	r0, r3
 800181c:	3b1e      	subs	r3, #30
 800181e:	4083      	lsls	r3, r0
 8001820:	4a01      	ldr	r2, [pc, #4]	; (8001828 <HAL_NVIC_EnableIRQ+0x14>)
 8001822:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001824:	4770      	bx	lr
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	e000e100 	.word	0xe000e100

0800182c <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800182c:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_NVIC_SystemReset+0x14>)
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_NVIC_SystemReset+0x18>)
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800183a:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 800183c:	e7fd      	b.n	800183a <HAL_NVIC_SystemReset+0xe>
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	05fa0004 	.word	0x05fa0004

08001848 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	1e43      	subs	r3, r0, #1
 800184c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	4293      	cmp	r3, r2
 8001852:	d20d      	bcs.n	8001870 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001854:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001858:	4807      	ldr	r0, [pc, #28]	; (8001878 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800185c:	6a03      	ldr	r3, [r0, #32]
 800185e:	0609      	lsls	r1, r1, #24
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	430b      	orrs	r3, r1
 8001866:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001868:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186e:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8001870:	4770      	bx	lr
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	e000e010 	.word	0xe000e010
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800187c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800187e:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001880:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8001882:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001884:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001886:	2c00      	cmp	r4, #0
 8001888:	d002      	beq.n	8001890 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800188a:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800188c:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800188e:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001890:	251c      	movs	r5, #28
 8001892:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001894:	4e08      	ldr	r6, [pc, #32]	; (80018b8 <DMA_SetConfig+0x3c>)
 8001896:	4025      	ands	r5, r4
 8001898:	2401      	movs	r4, #1
 800189a:	40ac      	lsls	r4, r5
 800189c:	6877      	ldr	r7, [r6, #4]
 800189e:	433c      	orrs	r4, r7
 80018a0:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018a2:	6804      	ldr	r4, [r0, #0]
 80018a4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018a6:	6883      	ldr	r3, [r0, #8]
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d102      	bne.n	80018b2 <DMA_SetConfig+0x36>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ac:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018ae:	60e1      	str	r1, [r4, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 80018b2:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 80018b4:	60e2      	str	r2, [r4, #12]
}
 80018b6:	e7fb      	b.n	80018b0 <DMA_SetConfig+0x34>
 80018b8:	40020000 	.word	0x40020000

080018bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018bc:	b510      	push	{r4, lr}
 80018be:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80018c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 80018c4:	089b      	lsrs	r3, r3, #2
 80018c6:	189b      	adds	r3, r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018cc:	6803      	ldr	r3, [r0, #0]
 80018ce:	2114      	movs	r1, #20
 80018d0:	b2d8      	uxtb	r0, r3
 80018d2:	3808      	subs	r0, #8
 80018d4:	f7fe fc1e 	bl	8000114 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018d8:	4b04      	ldr	r3, [pc, #16]	; (80018ec <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80018da:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018dc:	231f      	movs	r3, #31
 80018de:	4018      	ands	r0, r3
 80018e0:	3b1e      	subs	r3, #30
 80018e2:	4083      	lsls	r3, r0
 80018e4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80018e6:	bd10      	pop	{r4, pc}
 80018e8:	10008200 	.word	0x10008200
 80018ec:	40020880 	.word	0x40020880

080018f0 <HAL_DMA_Init>:
{
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80018f4:	2001      	movs	r0, #1
  if (hdma == NULL)
 80018f6:	2c00      	cmp	r4, #0
 80018f8:	d049      	beq.n	800198e <HAL_DMA_Init+0x9e>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018fa:	6825      	ldr	r5, [r4, #0]
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <HAL_DMA_Init+0xac>)
 80018fe:	2114      	movs	r1, #20
 8001900:	18e8      	adds	r0, r5, r3
 8001902:	f7fe fc07 	bl	8000114 <__udivsi3>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001906:	2302      	movs	r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001908:	0080      	lsls	r0, r0, #2
  hdma->State = HAL_DMA_STATE_BUSY;
 800190a:	1da6      	adds	r6, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800190c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800190e:	77f3      	strb	r3, [r6, #31]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001910:	682b      	ldr	r3, [r5, #0]
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_DMA_Init+0xb0>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001914:	68e1      	ldr	r1, [r4, #12]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001916:	4013      	ands	r3, r2
 8001918:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800191a:	68a3      	ldr	r3, [r4, #8]
 800191c:	682a      	ldr	r2, [r5, #0]
 800191e:	430b      	orrs	r3, r1
 8001920:	6921      	ldr	r1, [r4, #16]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001922:	0020      	movs	r0, r4
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001924:	430b      	orrs	r3, r1
 8001926:	6961      	ldr	r1, [r4, #20]
 8001928:	430b      	orrs	r3, r1
 800192a:	69a1      	ldr	r1, [r4, #24]
 800192c:	430b      	orrs	r3, r1
 800192e:	69e1      	ldr	r1, [r4, #28]
 8001930:	430b      	orrs	r3, r1
 8001932:	6a21      	ldr	r1, [r4, #32]
 8001934:	430b      	orrs	r3, r1
 8001936:	4313      	orrs	r3, r2
 8001938:	602b      	str	r3, [r5, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800193a:	f7ff ffbf 	bl	80018bc <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800193e:	2380      	movs	r3, #128	; 0x80
 8001940:	68a2      	ldr	r2, [r4, #8]
 8001942:	01db      	lsls	r3, r3, #7
 8001944:	429a      	cmp	r2, r3
 8001946:	d101      	bne.n	800194c <HAL_DMA_Init+0x5c>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001948:	2300      	movs	r3, #0
 800194a:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800194c:	233f      	movs	r3, #63	; 0x3f
 800194e:	6862      	ldr	r2, [r4, #4]
 8001950:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001952:	4013      	ands	r3, r2
 8001954:	600b      	str	r3, [r1, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001956:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001958:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800195a:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800195c:	6048      	str	r0, [r1, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800195e:	2a03      	cmp	r2, #3
 8001960:	d816      	bhi.n	8001990 <HAL_DMA_Init+0xa0>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_DMA_Init+0xb4>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001964:	4810      	ldr	r0, [pc, #64]	; (80019a8 <HAL_DMA_Init+0xb8>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001966:	1899      	adds	r1, r3, r2

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001968:	2203      	movs	r2, #3
 800196a:	3b01      	subs	r3, #1
 800196c:	4013      	ands	r3, r2
 800196e:	3a02      	subs	r2, #2
 8001970:	409a      	lsls	r2, r3
 8001972:	65a2      	str	r2, [r4, #88]	; 0x58
 8001974:	0013      	movs	r3, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001976:	2200      	movs	r2, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001978:	0089      	lsls	r1, r1, #2
 800197a:	6521      	str	r1, [r4, #80]	; 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800197c:	6560      	str	r0, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800197e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001980:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001982:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001984:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001986:	63e0      	str	r0, [r4, #60]	; 0x3c
  __HAL_UNLOCK(hdma);
 8001988:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_READY;
 800198a:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hdma);
 800198c:	77e0      	strb	r0, [r4, #31]
}
 800198e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->DMAmuxRequestGen = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001994:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001996:	65a3      	str	r3, [r4, #88]	; 0x58
 8001998:	e7f3      	b.n	8001982 <HAL_DMA_Init+0x92>
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	bffdfff8 	.word	0xbffdfff8
 80019a0:	ffff800f 	.word	0xffff800f
 80019a4:	1000823f 	.word	0x1000823f
 80019a8:	40020940 	.word	0x40020940

080019ac <HAL_DMA_Start_IT>:
{
 80019ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80019ae:	1d45      	adds	r5, r0, #5
{
 80019b0:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80019b2:	7fee      	ldrb	r6, [r5, #31]
{
 80019b4:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80019b6:	2002      	movs	r0, #2
 80019b8:	2e01      	cmp	r6, #1
 80019ba:	d034      	beq.n	8001a26 <HAL_DMA_Start_IT+0x7a>
 80019bc:	3801      	subs	r0, #1
 80019be:	77e8      	strb	r0, [r5, #31]
  if (hdma->State == HAL_DMA_STATE_READY)
 80019c0:	1da7      	adds	r7, r4, #6
 80019c2:	7ffe      	ldrb	r6, [r7, #31]
 80019c4:	46b4      	mov	ip, r6
 80019c6:	4663      	mov	r3, ip
 80019c8:	b2f6      	uxtb	r6, r6
 80019ca:	9600      	str	r6, [sp, #0]
 80019cc:	2600      	movs	r6, #0
 80019ce:	4283      	cmp	r3, r0
 80019d0:	d131      	bne.n	8001a36 <HAL_DMA_Start_IT+0x8a>
    hdma->State = HAL_DMA_STATE_BUSY;
 80019d2:	3001      	adds	r0, #1
 80019d4:	77f8      	strb	r0, [r7, #31]
    __HAL_DMA_DISABLE(hdma);
 80019d6:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019d8:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80019da:	6828      	ldr	r0, [r5, #0]
 80019dc:	9b00      	ldr	r3, [sp, #0]
 80019de:	4398      	bics	r0, r3
 80019e0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019e2:	9b01      	ldr	r3, [sp, #4]
 80019e4:	0020      	movs	r0, r4
 80019e6:	f7ff ff49 	bl	800187c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80019ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	42b2      	cmp	r2, r6
 80019f0:	d01a      	beq.n	8001a28 <HAL_DMA_Start_IT+0x7c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019f2:	220e      	movs	r2, #14
 80019f4:	6819      	ldr	r1, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019f6:	430a      	orrs	r2, r1
 80019f8:	601a      	str	r2, [r3, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80019fa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80019fc:	6811      	ldr	r1, [r2, #0]
 80019fe:	03c9      	lsls	r1, r1, #15
 8001a00:	d504      	bpl.n	8001a0c <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001a02:	2180      	movs	r1, #128	; 0x80
 8001a04:	6810      	ldr	r0, [r2, #0]
 8001a06:	0049      	lsls	r1, r1, #1
 8001a08:	4301      	orrs	r1, r0
 8001a0a:	6011      	str	r1, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001a0c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001a0e:	2a00      	cmp	r2, #0
 8001a10:	d004      	beq.n	8001a1c <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001a12:	2180      	movs	r1, #128	; 0x80
 8001a14:	6810      	ldr	r0, [r2, #0]
 8001a16:	0049      	lsls	r1, r1, #1
 8001a18:	4301      	orrs	r1, r0
 8001a1a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001a1c:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 8001a1e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001a20:	6819      	ldr	r1, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	601a      	str	r2, [r3, #0]
}
 8001a26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a28:	2104      	movs	r1, #4
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001a30:	6819      	ldr	r1, [r3, #0]
 8001a32:	220a      	movs	r2, #10
 8001a34:	e7df      	b.n	80019f6 <HAL_DMA_Start_IT+0x4a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001a3a:	77ee      	strb	r6, [r5, #31]
    status = HAL_ERROR;
 8001a3c:	e7f3      	b.n	8001a26 <HAL_DMA_Start_IT+0x7a>
	...

08001a40 <HAL_DMA_Abort>:
{
 8001a40:	0003      	movs	r3, r0
 8001a42:	b5f0      	push	{r4, r5, r6, r7, lr}
    return HAL_ERROR;
 8001a44:	2001      	movs	r0, #1
  if (NULL == hdma)
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d009      	beq.n	8001a5e <HAL_DMA_Abort+0x1e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a4a:	1d98      	adds	r0, r3, #6
 8001a4c:	7fc2      	ldrb	r2, [r0, #31]
 8001a4e:	1d5c      	adds	r4, r3, #5
 8001a50:	2a02      	cmp	r2, #2
 8001a52:	d005      	beq.n	8001a60 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a54:	2204      	movs	r2, #4
 8001a56:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001a58:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001a5a:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001a5c:	77e3      	strb	r3, [r4, #31]
}
 8001a5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a60:	250e      	movs	r5, #14
 8001a62:	6819      	ldr	r1, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a64:	6c5e      	ldr	r6, [r3, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a66:	680a      	ldr	r2, [r1, #0]
 8001a68:	43aa      	bics	r2, r5
 8001a6a:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a6c:	6832      	ldr	r2, [r6, #0]
 8001a6e:	4d11      	ldr	r5, [pc, #68]	; (8001ab4 <HAL_DMA_Abort+0x74>)
 8001a70:	402a      	ands	r2, r5
 8001a72:	6032      	str	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 8001a74:	2201      	movs	r2, #1
 8001a76:	680e      	ldr	r6, [r1, #0]
 8001a78:	4694      	mov	ip, r2
 8001a7a:	4396      	bics	r6, r2
 8001a7c:	600e      	str	r6, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001a7e:	211c      	movs	r1, #28
 8001a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a82:	4e0d      	ldr	r6, [pc, #52]	; (8001ab8 <HAL_DMA_Abort+0x78>)
 8001a84:	4011      	ands	r1, r2
 8001a86:	4662      	mov	r2, ip
 8001a88:	408a      	lsls	r2, r1
 8001a8a:	6877      	ldr	r7, [r6, #4]
 8001a8c:	433a      	orrs	r2, r7
 8001a8e:	6072      	str	r2, [r6, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a90:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8001a92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001a94:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001a96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a98:	2a00      	cmp	r2, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_DMA_Abort+0x68>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a9c:	6811      	ldr	r1, [r2, #0]
 8001a9e:	4029      	ands	r1, r5
 8001aa0:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	77c3      	strb	r3, [r0, #31]
    __HAL_UNLOCK(hdma);
 8001aac:	2000      	movs	r0, #0
 8001aae:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8001ab0:	e7d5      	b.n	8001a5e <HAL_DMA_Abort+0x1e>
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	fffffeff 	.word	0xfffffeff
 8001ab8:	40020000 	.word	0x40020000

08001abc <HAL_DMA_Abort_IT>:
{
 8001abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001abe:	1d81      	adds	r1, r0, #6
 8001ac0:	7fcb      	ldrb	r3, [r1, #31]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d004      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001aca:	3b03      	subs	r3, #3
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad0:	240e      	movs	r4, #14
 8001ad2:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ad4:	4d15      	ldr	r5, [pc, #84]	; (8001b2c <HAL_DMA_Abort_IT+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad6:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001ad8:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ada:	43a3      	bics	r3, r4
 8001adc:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ade:	2301      	movs	r3, #1
 8001ae0:	6814      	ldr	r4, [r2, #0]
 8001ae2:	439c      	bics	r4, r3
 8001ae4:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001ae6:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001ae8:	6822      	ldr	r2, [r4, #0]
 8001aea:	402a      	ands	r2, r5
 8001aec:	6022      	str	r2, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001aee:	241c      	movs	r4, #28
 8001af0:	403c      	ands	r4, r7
 8001af2:	40a3      	lsls	r3, r4
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <HAL_DMA_Abort_IT+0x74>)
 8001af6:	6856      	ldr	r6, [r2, #4]
 8001af8:	4333      	orrs	r3, r6
 8001afa:	6053      	str	r3, [r2, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001afc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001afe:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001b00:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001b02:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	402a      	ands	r2, r5
 8001b0c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b0e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001b10:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001b12:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001b14:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001b16:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001b18:	77cb      	strb	r3, [r1, #31]
    __HAL_UNLOCK(hdma);
 8001b1a:	1d43      	adds	r3, r0, #5
 8001b1c:	77dc      	strb	r4, [r3, #31]
    if (hdma->XferAbortCallback != NULL)
 8001b1e:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8001b20:	0013      	movs	r3, r2
    if (hdma->XferAbortCallback != NULL)
 8001b22:	42a2      	cmp	r2, r4
 8001b24:	d0d2      	beq.n	8001acc <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001b26:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001b28:	0023      	movs	r3, r4
 8001b2a:	e7cf      	b.n	8001acc <HAL_DMA_Abort_IT+0x10>
 8001b2c:	fffffeff 	.word	0xfffffeff
 8001b30:	40020000 	.word	0x40020000

08001b34 <HAL_DMA_IRQHandler>:
{
 8001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b36:	211c      	movs	r1, #28
 8001b38:	2704      	movs	r7, #4
 8001b3a:	6c04      	ldr	r4, [r0, #64]	; 0x40
  uint32_t flag_it = DMA1->ISR;
 8001b3c:	4a26      	ldr	r2, [pc, #152]	; (8001bd8 <HAL_DMA_IRQHandler+0xa4>)
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b3e:	4021      	ands	r1, r4
 8001b40:	003c      	movs	r4, r7
 8001b42:	408c      	lsls	r4, r1
  uint32_t flag_it = DMA1->ISR;
 8001b44:	6816      	ldr	r6, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001b46:	6803      	ldr	r3, [r0, #0]
 8001b48:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001b4a:	4226      	tst	r6, r4
 8001b4c:	d00f      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x3a>
 8001b4e:	423d      	tst	r5, r7
 8001b50:	d00d      	beq.n	8001b6e <HAL_DMA_IRQHandler+0x3a>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b52:	6819      	ldr	r1, [r3, #0]
 8001b54:	0689      	lsls	r1, r1, #26
 8001b56:	d402      	bmi.n	8001b5e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	43b9      	bics	r1, r7
 8001b5c:	6019      	str	r1, [r3, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001b5e:	6853      	ldr	r3, [r2, #4]
 8001b60:	431c      	orrs	r4, r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001b62:	6b03      	ldr	r3, [r0, #48]	; 0x30
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8001b64:	6054      	str	r4, [r2, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d01b      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x6e>
      hdma->XferErrorCallback(hdma);
 8001b6a:	4798      	blx	r3
  return;
 8001b6c:	e019      	b.n	8001ba2 <HAL_DMA_IRQHandler+0x6e>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b6e:	2702      	movs	r7, #2
 8001b70:	003c      	movs	r4, r7
 8001b72:	408c      	lsls	r4, r1
 8001b74:	4226      	tst	r6, r4
 8001b76:	d015      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x70>
 8001b78:	423d      	tst	r5, r7
 8001b7a:	d013      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x70>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b7c:	6819      	ldr	r1, [r3, #0]
 8001b7e:	0689      	lsls	r1, r1, #26
 8001b80:	d406      	bmi.n	8001b90 <HAL_DMA_IRQHandler+0x5c>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b82:	250a      	movs	r5, #10
 8001b84:	6819      	ldr	r1, [r3, #0]
 8001b86:	43a9      	bics	r1, r5
 8001b88:	6019      	str	r1, [r3, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	1d83      	adds	r3, r0, #6
 8001b8e:	77d9      	strb	r1, [r3, #31]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001b90:	6853      	ldr	r3, [r2, #4]
 8001b92:	431c      	orrs	r4, r3
 8001b94:	6054      	str	r4, [r2, #4]
      __HAL_UNLOCK(hdma);
 8001b96:	2200      	movs	r2, #0
 8001b98:	1d43      	adds	r3, r0, #5
 8001b9a:	77da      	strb	r2, [r3, #31]
      if (hdma->XferCpltCallback != NULL)
 8001b9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d1e3      	bne.n	8001b6a <HAL_DMA_IRQHandler+0x36>
}
 8001ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001ba4:	2408      	movs	r4, #8
 8001ba6:	0027      	movs	r7, r4
 8001ba8:	408f      	lsls	r7, r1
 8001baa:	423e      	tst	r6, r7
 8001bac:	d0f9      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x6e>
 8001bae:	4225      	tst	r5, r4
 8001bb0:	d0f7      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x6e>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb2:	250e      	movs	r5, #14
 8001bb4:	681c      	ldr	r4, [r3, #0]
 8001bb6:	43ac      	bics	r4, r5
 8001bb8:	601c      	str	r4, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001bba:	2301      	movs	r3, #1
 8001bbc:	001d      	movs	r5, r3
 8001bbe:	408d      	lsls	r5, r1
 8001bc0:	0029      	movs	r1, r5
 8001bc2:	6854      	ldr	r4, [r2, #4]
 8001bc4:	4321      	orrs	r1, r4
 8001bc6:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	1d82      	adds	r2, r0, #6
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001bca:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	1d43      	adds	r3, r0, #5
 8001bd2:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001bd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001bd6:	e7e2      	b.n	8001b9e <HAL_DMA_IRQHandler+0x6a>
 8001bd8:	40020000 	.word	0x40020000

08001bdc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 8001bdc:	2300      	movs	r3, #0
{
 8001bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be2:	680a      	ldr	r2, [r1, #0]
 8001be4:	0014      	movs	r4, r2
 8001be6:	40dc      	lsrs	r4, r3
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  }
}
 8001bea:	b005      	add	sp, #20
 8001bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bee:	2501      	movs	r5, #1
 8001bf0:	0014      	movs	r4, r2
 8001bf2:	409d      	lsls	r5, r3
 8001bf4:	402c      	ands	r4, r5
 8001bf6:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8001bf8:	422a      	tst	r2, r5
 8001bfa:	d100      	bne.n	8001bfe <HAL_GPIO_Init+0x22>
 8001bfc:	e08e      	b.n	8001d1c <HAL_GPIO_Init+0x140>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bfe:	684a      	ldr	r2, [r1, #4]
 8001c00:	005e      	lsls	r6, r3, #1
 8001c02:	4694      	mov	ip, r2
 8001c04:	2203      	movs	r2, #3
 8001c06:	4664      	mov	r4, ip
 8001c08:	4022      	ands	r2, r4
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c0a:	2403      	movs	r4, #3
 8001c0c:	40b4      	lsls	r4, r6
 8001c0e:	43e4      	mvns	r4, r4
 8001c10:	9402      	str	r4, [sp, #8]
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c12:	1e54      	subs	r4, r2, #1
 8001c14:	2c01      	cmp	r4, #1
 8001c16:	d82a      	bhi.n	8001c6e <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8001c18:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c1a:	9c02      	ldr	r4, [sp, #8]
 8001c1c:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c1e:	68cc      	ldr	r4, [r1, #12]
 8001c20:	40b4      	lsls	r4, r6
 8001c22:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8001c24:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c26:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c28:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2a:	43ac      	bics	r4, r5
 8001c2c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2e:	4664      	mov	r4, ip
 8001c30:	0924      	lsrs	r4, r4, #4
 8001c32:	403c      	ands	r4, r7
 8001c34:	409c      	lsls	r4, r3
 8001c36:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8001c38:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 8001c3a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c3c:	9c02      	ldr	r4, [sp, #8]
 8001c3e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c40:	688c      	ldr	r4, [r1, #8]
 8001c42:	40b4      	lsls	r4, r6
 8001c44:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8001c46:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c48:	2a02      	cmp	r2, #2
 8001c4a:	d112      	bne.n	8001c72 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 8001c4c:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c4e:	2507      	movs	r5, #7
 8001c50:	00a4      	lsls	r4, r4, #2
 8001c52:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8001c54:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c56:	9403      	str	r4, [sp, #12]
 8001c58:	240f      	movs	r4, #15
 8001c5a:	401d      	ands	r5, r3
 8001c5c:	00ad      	lsls	r5, r5, #2
 8001c5e:	40ac      	lsls	r4, r5
 8001c60:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c62:	690c      	ldr	r4, [r1, #16]
 8001c64:	40ac      	lsls	r4, r5
 8001c66:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8001c68:	9c03      	ldr	r4, [sp, #12]
 8001c6a:	6227      	str	r7, [r4, #32]
 8001c6c:	e001      	b.n	8001c72 <HAL_GPIO_Init+0x96>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c6e:	2a03      	cmp	r2, #3
 8001c70:	d1e3      	bne.n	8001c3a <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8001c72:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c74:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c76:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c78:	4025      	ands	r5, r4
 8001c7a:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c7c:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 8001c7e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c80:	24c0      	movs	r4, #192	; 0xc0
 8001c82:	4662      	mov	r2, ip
 8001c84:	02a4      	lsls	r4, r4, #10
 8001c86:	4222      	tst	r2, r4
 8001c88:	d048      	beq.n	8001d1c <HAL_GPIO_Init+0x140>
        temp = EXTI->EXTICR[position >> 2u];
 8001c8a:	4a25      	ldr	r2, [pc, #148]	; (8001d20 <HAL_GPIO_Init+0x144>)
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c8c:	2503      	movs	r5, #3
        temp = EXTI->EXTICR[position >> 2u];
 8001c8e:	089c      	lsrs	r4, r3, #2
 8001c90:	00a4      	lsls	r4, r4, #2
 8001c92:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001c94:	220f      	movs	r2, #15
 8001c96:	401d      	ands	r5, r3
 8001c98:	00ed      	lsls	r5, r5, #3
 8001c9a:	40aa      	lsls	r2, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c9c:	27a0      	movs	r7, #160	; 0xa0
        temp = EXTI->EXTICR[position >> 2u];
 8001c9e:	6e26      	ldr	r6, [r4, #96]	; 0x60
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ca0:	05ff      	lsls	r7, r7, #23
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ca2:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	42b8      	cmp	r0, r7
 8001ca8:	d00c      	beq.n	8001cc4 <HAL_GPIO_Init+0xe8>
 8001caa:	4f1e      	ldr	r7, [pc, #120]	; (8001d24 <HAL_GPIO_Init+0x148>)
 8001cac:	3201      	adds	r2, #1
 8001cae:	42b8      	cmp	r0, r7
 8001cb0:	d008      	beq.n	8001cc4 <HAL_GPIO_Init+0xe8>
 8001cb2:	4f1d      	ldr	r7, [pc, #116]	; (8001d28 <HAL_GPIO_Init+0x14c>)
 8001cb4:	3201      	adds	r2, #1
 8001cb6:	42b8      	cmp	r0, r7
 8001cb8:	d004      	beq.n	8001cc4 <HAL_GPIO_Init+0xe8>
 8001cba:	4f1c      	ldr	r7, [pc, #112]	; (8001d2c <HAL_GPIO_Init+0x150>)
 8001cbc:	3201      	adds	r2, #1
 8001cbe:	42b8      	cmp	r0, r7
 8001cc0:	d000      	beq.n	8001cc4 <HAL_GPIO_Init+0xe8>
 8001cc2:	3202      	adds	r2, #2
 8001cc4:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cc6:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001cc8:	4332      	orrs	r2, r6
        EXTI->EXTICR[position >> 2u] = temp;
 8001cca:	6622      	str	r2, [r4, #96]	; 0x60
        temp = EXTI->RTSR1;
 8001ccc:	4c14      	ldr	r4, [pc, #80]	; (8001d20 <HAL_GPIO_Init+0x144>)
        temp &= ~(iocurrent);
 8001cce:	9a01      	ldr	r2, [sp, #4]
        temp = EXTI->RTSR1;
 8001cd0:	6826      	ldr	r6, [r4, #0]
          temp |= iocurrent;
 8001cd2:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 8001cd4:	43d2      	mvns	r2, r2
          temp |= iocurrent;
 8001cd6:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cd8:	02ff      	lsls	r7, r7, #11
 8001cda:	d401      	bmi.n	8001ce0 <HAL_GPIO_Init+0x104>
        temp &= ~(iocurrent);
 8001cdc:	0035      	movs	r5, r6
 8001cde:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ce0:	4667      	mov	r7, ip
        EXTI->RTSR1 = temp;
 8001ce2:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8001ce4:	6866      	ldr	r6, [r4, #4]
          temp |= iocurrent;
 8001ce6:	9d01      	ldr	r5, [sp, #4]
 8001ce8:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001cea:	02bf      	lsls	r7, r7, #10
 8001cec:	d401      	bmi.n	8001cf2 <HAL_GPIO_Init+0x116>
        temp &= ~(iocurrent);
 8001cee:	0035      	movs	r5, r6
 8001cf0:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cf2:	4667      	mov	r7, ip
        EXTI->FTSR1 = temp;
 8001cf4:	6065      	str	r5, [r4, #4]
        temp = EXTI->EMR1;
 8001cf6:	4c0e      	ldr	r4, [pc, #56]	; (8001d30 <HAL_GPIO_Init+0x154>)
          temp |= iocurrent;
 8001cf8:	9d01      	ldr	r5, [sp, #4]
        temp = EXTI->EMR1;
 8001cfa:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8001cfc:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cfe:	03bf      	lsls	r7, r7, #14
 8001d00:	d401      	bmi.n	8001d06 <HAL_GPIO_Init+0x12a>
        temp &= ~(iocurrent);
 8001d02:	0035      	movs	r5, r6
 8001d04:	4015      	ands	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d06:	4667      	mov	r7, ip
        EXTI->EMR1 = temp;
 8001d08:	67e5      	str	r5, [r4, #124]	; 0x7c
        temp = EXTI->IMR1;
 8001d0a:	4c0a      	ldr	r4, [pc, #40]	; (8001d34 <HAL_GPIO_Init+0x158>)
          temp |= iocurrent;
 8001d0c:	9e01      	ldr	r6, [sp, #4]
        temp = EXTI->IMR1;
 8001d0e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
          temp |= iocurrent;
 8001d10:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d12:	03ff      	lsls	r7, r7, #15
 8001d14:	d401      	bmi.n	8001d1a <HAL_GPIO_Init+0x13e>
        temp &= ~(iocurrent);
 8001d16:	4015      	ands	r5, r2
 8001d18:	002e      	movs	r6, r5
        EXTI->IMR1 = temp;
 8001d1a:	67e6      	str	r6, [r4, #124]	; 0x7c
    position++;
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	e760      	b.n	8001be2 <HAL_GPIO_Init+0x6>
 8001d20:	40021800 	.word	0x40021800
 8001d24:	50000400 	.word	0x50000400
 8001d28:	50000800 	.word	0x50000800
 8001d2c:	50000c00 	.word	0x50000c00
 8001d30:	40021808 	.word	0x40021808
 8001d34:	40021804 	.word	0x40021804

08001d38 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d3c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d3e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d40:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001d42:	e7fc      	b.n	8001d3e <HAL_GPIO_WritePin+0x6>

08001d44 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d44:	6803      	ldr	r3, [r0, #0]
 8001d46:	699a      	ldr	r2, [r3, #24]
 8001d48:	0792      	lsls	r2, r2, #30
 8001d4a:	d501      	bpl.n	8001d50 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d50:	2201      	movs	r2, #1
 8001d52:	6999      	ldr	r1, [r3, #24]
 8001d54:	4211      	tst	r1, r2
 8001d56:	d102      	bne.n	8001d5e <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d58:	6999      	ldr	r1, [r3, #24]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	619a      	str	r2, [r3, #24]
  }
}
 8001d5e:	4770      	bx	lr

08001d60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d60:	b530      	push	{r4, r5, lr}
 8001d62:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d64:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d66:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d68:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d6a:	0589      	lsls	r1, r1, #22
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <I2C_TransferConfig+0x28>)
 8001d72:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d74:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d76:	0d64      	lsrs	r4, r4, #21
 8001d78:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d7a:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d7c:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d7e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d80:	432a      	orrs	r2, r5
 8001d82:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d84:	bd30      	pop	{r4, r5, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	03ff63ff 	.word	0x03ff63ff

08001d8c <I2C_IsErrorOccurred>:
{
 8001d8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001d8e:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d90:	6802      	ldr	r2, [r0, #0]
{
 8001d92:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8001d94:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d96:	2310      	movs	r3, #16
 8001d98:	000f      	movs	r7, r1
{
 8001d9a:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001d9c:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001da0:	4219      	tst	r1, r3
 8001da2:	d00e      	beq.n	8001dc2 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001da4:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001da6:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8001da8:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001daa:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	423a      	tst	r2, r7
 8001db2:	d164      	bne.n	8001e7e <I2C_IsErrorOccurred+0xf2>
 8001db4:	9a01      	ldr	r2, [sp, #4]
 8001db6:	2a00      	cmp	r2, #0
 8001db8:	d032      	beq.n	8001e20 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 8001dba:	2704      	movs	r7, #4
    status = HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dc2:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8001dc4:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dc6:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8001dc8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001dca:	420a      	tst	r2, r1
 8001dcc:	d002      	beq.n	8001dd4 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 8001dce:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001dd0:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001dd2:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	00c9      	lsls	r1, r1, #3
 8001dd8:	420a      	tst	r2, r1
 8001dda:	d003      	beq.n	8001de4 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 8001ddc:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001dde:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8001de0:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 8001de2:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	0089      	lsls	r1, r1, #2
 8001de8:	420a      	tst	r2, r1
 8001dea:	d04d      	beq.n	8001e88 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8001dec:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001dee:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8001df0:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 8001df2:	0020      	movs	r0, r4
 8001df4:	f7ff ffa6 	bl	8001d44 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001df8:	6822      	ldr	r2, [r4, #0]
 8001dfa:	4925      	ldr	r1, [pc, #148]	; (8001e90 <I2C_IsErrorOccurred+0x104>)
 8001dfc:	6853      	ldr	r3, [r2, #4]
 8001dfe:	400b      	ands	r3, r1
 8001e00:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001e02:	0023      	movs	r3, r4
 8001e04:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8001e06:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 8001e0a:	4307      	orrs	r7, r0
 8001e0c:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e0e:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e10:	0022      	movs	r2, r4
 8001e12:	2300      	movs	r3, #0
 8001e14:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8001e16:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	7023      	strb	r3, [r4, #0]
 8001e1e:	e035      	b.n	8001e8c <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8001e20:	1c72      	adds	r2, r6, #1
 8001e22:	d0c4      	beq.n	8001dae <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e24:	f7ff f986 	bl	8001134 <HAL_GetTick>
 8001e28:	1b40      	subs	r0, r0, r5
 8001e2a:	42b0      	cmp	r0, r6
 8001e2c:	d801      	bhi.n	8001e32 <I2C_IsErrorOccurred+0xa6>
 8001e2e:	2e00      	cmp	r6, #0
 8001e30:	d1bc      	bne.n	8001dac <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 8001e32:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e34:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 8001e36:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e38:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8001e3a:	7811      	ldrb	r1, [r2, #0]
 8001e3c:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e3e:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 8001e40:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e42:	699a      	ldr	r2, [r3, #24]
 8001e44:	0209      	lsls	r1, r1, #8
 8001e46:	420a      	tst	r2, r1
 8001e48:	d00c      	beq.n	8001e64 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001e4e:	4210      	tst	r0, r2
 8001e50:	d108      	bne.n	8001e64 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 8001e52:	4661      	mov	r1, ip
 8001e54:	2920      	cmp	r1, #32
 8001e56:	d005      	beq.n	8001e64 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001e58:	6859      	ldr	r1, [r3, #4]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001e5e:	f7ff f969 	bl	8001134 <HAL_GetTick>
 8001e62:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	423b      	tst	r3, r7
 8001e6a:	d19f      	bne.n	8001dac <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001e6c:	f7ff f962 	bl	8001134 <HAL_GetTick>
 8001e70:	1b40      	subs	r0, r0, r5
 8001e72:	2819      	cmp	r0, #25
 8001e74:	d9f6      	bls.n	8001e64 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8001e78:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 8001e7a:	9301      	str	r3, [sp, #4]
 8001e7c:	e796      	b.n	8001dac <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 8001e7e:	9a01      	ldr	r2, [sp, #4]
 8001e80:	2a00      	cmp	r2, #0
 8001e82:	d19a      	bne.n	8001dba <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e84:	61df      	str	r7, [r3, #28]
 8001e86:	e798      	b.n	8001dba <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 8001e88:	2800      	cmp	r0, #0
 8001e8a:	d1b2      	bne.n	8001df2 <I2C_IsErrorOccurred+0x66>
}
 8001e8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	fe00e800 	.word	0xfe00e800

08001e94 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e96:	0004      	movs	r4, r0
 8001e98:	000d      	movs	r5, r1
 8001e9a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e9c:	2702      	movs	r7, #2
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	423b      	tst	r3, r7
 8001ea4:	d001      	beq.n	8001eaa <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8001ea6:	2000      	movs	r0, #0
}
 8001ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001eaa:	0032      	movs	r2, r6
 8001eac:	0029      	movs	r1, r5
 8001eae:	0020      	movs	r0, r4
 8001eb0:	f7ff ff6c 	bl	8001d8c <I2C_IsErrorOccurred>
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	d115      	bne.n	8001ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001eb8:	1c6b      	adds	r3, r5, #1
 8001eba:	d0f0      	beq.n	8001e9e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ebc:	f7ff f93a 	bl	8001134 <HAL_GetTick>
 8001ec0:	1b80      	subs	r0, r0, r6
 8001ec2:	42a8      	cmp	r0, r5
 8001ec4:	d801      	bhi.n	8001eca <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8001ec6:	2d00      	cmp	r5, #0
 8001ec8:	d1e9      	bne.n	8001e9e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eca:	2220      	movs	r2, #32
 8001ecc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ed2:	0023      	movs	r3, r4
 8001ed4:	3341      	adds	r3, #65	; 0x41
 8001ed6:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed8:	0022      	movs	r2, r4
 8001eda:	2300      	movs	r3, #0
 8001edc:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8001ede:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee0:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001ee2:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e7df      	b.n	8001ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

08001ee8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	0004      	movs	r4, r0
 8001eec:	000d      	movs	r5, r1
 8001eee:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ef0:	2704      	movs	r7, #4
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	423b      	tst	r3, r7
 8001ef8:	d111      	bne.n	8001f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001efa:	0032      	movs	r2, r6
 8001efc:	0029      	movs	r1, r5
 8001efe:	0020      	movs	r0, r4
 8001f00:	f7ff ff44 	bl	8001d8c <I2C_IsErrorOccurred>
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d124      	bne.n	8001f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f08:	2120      	movs	r1, #32
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	420a      	tst	r2, r1
 8001f10:	d023      	beq.n	8001f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x72>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001f12:	699a      	ldr	r2, [r3, #24]
 8001f14:	423a      	tst	r2, r7
 8001f16:	d004      	beq.n	8001f22 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
 8001f18:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001f1a:	2a00      	cmp	r2, #0
 8001f1c:	d001      	beq.n	8001f22 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
        return HAL_OK;
 8001f1e:	2000      	movs	r0, #0
}
 8001f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f22:	6999      	ldr	r1, [r3, #24]
 8001f24:	2210      	movs	r2, #16
 8001f26:	0008      	movs	r0, r1
 8001f28:	4010      	ands	r0, r2
 8001f2a:	4211      	tst	r1, r2
 8001f2c:	d013      	beq.n	8001f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001f30:	3a0c      	subs	r2, #12
 8001f32:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f34:	2120      	movs	r1, #32
 8001f36:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	4810      	ldr	r0, [pc, #64]	; (8001f7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>)
 8001f3c:	4002      	ands	r2, r0
 8001f3e:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8001f40:	0023      	movs	r3, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f42:	0022      	movs	r2, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8001f44:	3341      	adds	r3, #65	; 0x41
 8001f46:	7019      	strb	r1, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	3242      	adds	r2, #66	; 0x42
 8001f4c:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001f4e:	3440      	adds	r4, #64	; 0x40
      __HAL_UNLOCK(hi2c);
 8001f50:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8001f52:	2001      	movs	r0, #1
 8001f54:	e7e4      	b.n	8001f20 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f56:	6460      	str	r0, [r4, #68]	; 0x44
 8001f58:	e7ec      	b.n	8001f34 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7ff f8eb 	bl	8001134 <HAL_GetTick>
 8001f5e:	1b80      	subs	r0, r0, r6
 8001f60:	42a8      	cmp	r0, r5
 8001f62:	d801      	bhi.n	8001f68 <I2C_WaitOnRXNEFlagUntilTimeout+0x80>
 8001f64:	2d00      	cmp	r5, #0
 8001f66:	d1c4      	bne.n	8001ef2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f68:	2220      	movs	r2, #32
 8001f6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001f70:	0023      	movs	r3, r4
 8001f72:	3341      	adds	r3, #65	; 0x41
 8001f74:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8001f76:	3440      	adds	r4, #64	; 0x40
 8001f78:	2300      	movs	r3, #0
 8001f7a:	e7e9      	b.n	8001f50 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 8001f7c:	fe00e800 	.word	0xfe00e800

08001f80 <I2C_WaitOnFlagUntilTimeout>:
{
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	0004      	movs	r4, r0
 8001f84:	000e      	movs	r6, r1
 8001f86:	0017      	movs	r7, r2
 8001f88:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f8a:	6822      	ldr	r2, [r4, #0]
 8001f8c:	6993      	ldr	r3, [r2, #24]
 8001f8e:	4033      	ands	r3, r6
 8001f90:	1b9b      	subs	r3, r3, r6
 8001f92:	4259      	negs	r1, r3
 8001f94:	414b      	adcs	r3, r1
 8001f96:	42bb      	cmp	r3, r7
 8001f98:	d001      	beq.n	8001f9e <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	e017      	b.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	1c6b      	adds	r3, r5, #1
 8001fa0:	d0f4      	beq.n	8001f8c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa2:	f7ff f8c7 	bl	8001134 <HAL_GetTick>
 8001fa6:	9b06      	ldr	r3, [sp, #24]
 8001fa8:	1ac0      	subs	r0, r0, r3
 8001faa:	42a8      	cmp	r0, r5
 8001fac:	d801      	bhi.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0x32>
 8001fae:	2d00      	cmp	r5, #0
 8001fb0:	d1eb      	bne.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb2:	2220      	movs	r2, #32
 8001fb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001fb6:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	0023      	movs	r3, r4
 8001fbe:	3341      	adds	r3, #65	; 0x41
 8001fc0:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc2:	0022      	movs	r2, r4
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8001fc8:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001fcc:	7023      	strb	r3, [r4, #0]
}
 8001fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd2:	0004      	movs	r4, r0
 8001fd4:	000d      	movs	r5, r1
 8001fd6:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fd8:	2720      	movs	r7, #32
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	423b      	tst	r3, r7
 8001fe0:	d001      	beq.n	8001fe6 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8001fe2:	2000      	movs	r0, #0
}
 8001fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe6:	0032      	movs	r2, r6
 8001fe8:	0029      	movs	r1, r5
 8001fea:	0020      	movs	r0, r4
 8001fec:	f7ff fece 	bl	8001d8c <I2C_IsErrorOccurred>
 8001ff0:	2800      	cmp	r0, #0
 8001ff2:	d113      	bne.n	800201c <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff4:	f7ff f89e 	bl	8001134 <HAL_GetTick>
 8001ff8:	1b80      	subs	r0, r0, r6
 8001ffa:	42a8      	cmp	r0, r5
 8001ffc:	d801      	bhi.n	8002002 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 8001ffe:	2d00      	cmp	r5, #0
 8002000:	d1eb      	bne.n	8001fda <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002002:	2220      	movs	r2, #32
 8002004:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002006:	4313      	orrs	r3, r2
 8002008:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800200a:	0023      	movs	r3, r4
 800200c:	3341      	adds	r3, #65	; 0x41
 800200e:	701a      	strb	r2, [r3, #0]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002010:	0022      	movs	r2, r4
 8002012:	2300      	movs	r3, #0
 8002014:	3242      	adds	r2, #66	; 0x42
        __HAL_UNLOCK(hi2c);
 8002016:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002018:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 800201a:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800201c:	2001      	movs	r0, #1
 800201e:	e7e1      	b.n	8001fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08002020 <HAL_I2C_Init>:
{
 8002020:	b570      	push	{r4, r5, r6, lr}
 8002022:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002024:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8002026:	2c00      	cmp	r4, #0
 8002028:	d03f      	beq.n	80020aa <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800202a:	0025      	movs	r5, r4
 800202c:	3541      	adds	r5, #65	; 0x41
 800202e:	782b      	ldrb	r3, [r5, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d105      	bne.n	8002042 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8002036:	0023      	movs	r3, r4
 8002038:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800203a:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800203c:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 800203e:	f7fe fe23 	bl	8000c88 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002042:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8002044:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002046:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8002048:	6823      	ldr	r3, [r4, #0]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800204a:	481d      	ldr	r0, [pc, #116]	; (80020c0 <HAL_I2C_Init+0xa0>)
  __HAL_I2C_DISABLE(hi2c);
 800204c:	681a      	ldr	r2, [r3, #0]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800204e:	68a6      	ldr	r6, [r4, #8]
  __HAL_I2C_DISABLE(hi2c);
 8002050:	438a      	bics	r2, r1
 8002052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002054:	6861      	ldr	r1, [r4, #4]
 8002056:	4a1b      	ldr	r2, [pc, #108]	; (80020c4 <HAL_I2C_Init+0xa4>)
 8002058:	400a      	ands	r2, r1
 800205a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800205c:	689a      	ldr	r2, [r3, #8]
 800205e:	4002      	ands	r2, r0
 8002060:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002062:	68e2      	ldr	r2, [r4, #12]
 8002064:	2a01      	cmp	r2, #1
 8002066:	d121      	bne.n	80020ac <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0209      	lsls	r1, r1, #8
 800206c:	4331      	orrs	r1, r6
 800206e:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4915      	ldr	r1, [pc, #84]	; (80020c8 <HAL_I2C_Init+0xa8>)
 8002074:	4311      	orrs	r1, r2
 8002076:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002078:	68da      	ldr	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800207a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800207c:	4002      	ands	r2, r0
 800207e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002080:	6922      	ldr	r2, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002082:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002084:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002086:	69a1      	ldr	r1, [r4, #24]
 8002088:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800208a:	430a      	orrs	r2, r1
 800208c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800208e:	6a21      	ldr	r1, [r4, #32]
 8002090:	69e2      	ldr	r2, [r4, #28]
 8002092:	430a      	orrs	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002096:	2201      	movs	r2, #1
 8002098:	6819      	ldr	r1, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800209e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a6:	3442      	adds	r4, #66	; 0x42
 80020a8:	7020      	strb	r0, [r4, #0]
}
 80020aa:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020ac:	2184      	movs	r1, #132	; 0x84
 80020ae:	0209      	lsls	r1, r1, #8
 80020b0:	4331      	orrs	r1, r6
 80020b2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020b4:	2a02      	cmp	r2, #2
 80020b6:	d1db      	bne.n	8002070 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	0112      	lsls	r2, r2, #4
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	e7d7      	b.n	8002070 <HAL_I2C_Init+0x50>
 80020c0:	ffff7fff 	.word	0xffff7fff
 80020c4:	f0ffffff 	.word	0xf0ffffff
 80020c8:	02008000 	.word	0x02008000

080020cc <HAL_I2C_Master_Transmit>:
{
 80020cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ce:	b087      	sub	sp, #28
 80020d0:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d2:	0003      	movs	r3, r0
 80020d4:	3341      	adds	r3, #65	; 0x41
{
 80020d6:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020d8:	9303      	str	r3, [sp, #12]
 80020da:	781b      	ldrb	r3, [r3, #0]
{
 80020dc:	0004      	movs	r4, r0
 80020de:	000f      	movs	r7, r1
    return HAL_BUSY;
 80020e0:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d114      	bne.n	8002110 <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 80020e6:	0023      	movs	r3, r4
 80020e8:	3340      	adds	r3, #64	; 0x40
 80020ea:	781a      	ldrb	r2, [r3, #0]
 80020ec:	2a01      	cmp	r2, #1
 80020ee:	d00f      	beq.n	8002110 <HAL_I2C_Master_Transmit+0x44>
 80020f0:	2601      	movs	r6, #1
 80020f2:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 80020f4:	f7ff f81e 	bl	8001134 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020f8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 80020fa:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020fc:	9000      	str	r0, [sp, #0]
 80020fe:	2319      	movs	r3, #25
 8002100:	0032      	movs	r2, r6
 8002102:	0020      	movs	r0, r4
 8002104:	0209      	lsls	r1, r1, #8
 8002106:	f7ff ff3b 	bl	8001f80 <I2C_WaitOnFlagUntilTimeout>
 800210a:	2800      	cmp	r0, #0
 800210c:	d002      	beq.n	8002114 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 800210e:	2001      	movs	r0, #1
}
 8002110:	b007      	add	sp, #28
 8002112:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002114:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002116:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002118:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800211a:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800211c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800211e:	3b11      	subs	r3, #17
 8002120:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8002122:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002124:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002126:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8002128:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800212a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 800212c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800212e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002130:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_I2C_Master_Transmit+0x11c>)
 8002132:	2aff      	cmp	r2, #255	; 0xff
 8002134:	d920      	bls.n	8002178 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002136:	22ff      	movs	r2, #255	; 0xff
 8002138:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002140:	0039      	movs	r1, r7
 8002142:	0020      	movs	r0, r4
 8002144:	f7ff fe0c 	bl	8001d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002148:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214a:	002a      	movs	r2, r5
 800214c:	0020      	movs	r0, r4
 800214e:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8002150:	2b00      	cmp	r3, #0
 8002152:	d119      	bne.n	8002188 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002154:	f7ff ff3c 	bl	8001fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002158:	2800      	cmp	r0, #0
 800215a:	d1d8      	bne.n	800210e <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800215c:	2120      	movs	r1, #32
 800215e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002160:	4d22      	ldr	r5, [pc, #136]	; (80021ec <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002162:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	402a      	ands	r2, r5
 8002168:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800216a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 800216c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800216e:	3341      	adds	r3, #65	; 0x41
 8002170:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002172:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002174:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8002176:	e7cb      	b.n	8002110 <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8002178:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800217a:	b292      	uxth	r2, r2
 800217c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002182:	2380      	movs	r3, #128	; 0x80
 8002184:	049b      	lsls	r3, r3, #18
 8002186:	e7db      	b.n	8002140 <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002188:	f7ff fe84 	bl	8001e94 <I2C_WaitOnTXISFlagUntilTimeout>
 800218c:	2800      	cmp	r0, #0
 800218e:	d1be      	bne.n	800210e <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002190:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002192:	6822      	ldr	r2, [r4, #0]
 8002194:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8002196:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002198:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800219a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800219c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800219e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80021a0:	3b01      	subs	r3, #1
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80021a6:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80021aa:	b292      	uxth	r2, r2
 80021ac:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0ca      	beq.n	8002148 <HAL_I2C_Master_Transmit+0x7c>
 80021b2:	2a00      	cmp	r2, #0
 80021b4:	d1c8      	bne.n	8002148 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	0020      	movs	r0, r4
 80021ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80021bc:	9500      	str	r5, [sp, #0]
 80021be:	f7ff fedf 	bl	8001f80 <I2C_WaitOnFlagUntilTimeout>
 80021c2:	2800      	cmp	r0, #0
 80021c4:	d1a3      	bne.n	800210e <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021c8:	2bff      	cmp	r3, #255	; 0xff
 80021ca:	d906      	bls.n	80021da <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021cc:	23ff      	movs	r3, #255	; 0xff
 80021ce:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021d0:	2380      	movs	r3, #128	; 0x80
 80021d2:	22ff      	movs	r2, #255	; 0xff
 80021d4:	9000      	str	r0, [sp, #0]
 80021d6:	045b      	lsls	r3, r3, #17
 80021d8:	e7b2      	b.n	8002140 <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 80021da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80021dc:	b292      	uxth	r2, r2
 80021de:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	9000      	str	r0, [sp, #0]
 80021e4:	e7cd      	b.n	8002182 <HAL_I2C_Master_Transmit+0xb6>
 80021e6:	46c0      	nop			; (mov r8, r8)
 80021e8:	80002000 	.word	0x80002000
 80021ec:	fe00e800 	.word	0xfe00e800

080021f0 <HAL_I2C_Master_Receive>:
{
 80021f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021f2:	b087      	sub	sp, #28
 80021f4:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f6:	0003      	movs	r3, r0
 80021f8:	3341      	adds	r3, #65	; 0x41
{
 80021fa:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	9303      	str	r3, [sp, #12]
 80021fe:	781b      	ldrb	r3, [r3, #0]
{
 8002200:	0004      	movs	r4, r0
 8002202:	000f      	movs	r7, r1
    return HAL_BUSY;
 8002204:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002206:	2b20      	cmp	r3, #32
 8002208:	d114      	bne.n	8002234 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 800220a:	0023      	movs	r3, r4
 800220c:	3340      	adds	r3, #64	; 0x40
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	2a01      	cmp	r2, #1
 8002212:	d00f      	beq.n	8002234 <HAL_I2C_Master_Receive+0x44>
 8002214:	2601      	movs	r6, #1
 8002216:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8002218:	f7fe ff8c 	bl	8001134 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800221c:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 800221e:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002220:	9000      	str	r0, [sp, #0]
 8002222:	2319      	movs	r3, #25
 8002224:	0032      	movs	r2, r6
 8002226:	0020      	movs	r0, r4
 8002228:	0209      	lsls	r1, r1, #8
 800222a:	f7ff fea9 	bl	8001f80 <I2C_WaitOnFlagUntilTimeout>
 800222e:	2800      	cmp	r0, #0
 8002230:	d002      	beq.n	8002238 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8002232:	2001      	movs	r0, #1
}
 8002234:	b007      	add	sp, #28
 8002236:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002238:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800223a:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800223c:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800223e:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002240:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002242:	3b12      	subs	r3, #18
 8002244:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8002246:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002248:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800224a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800224c:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 800224e:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002250:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002252:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002254:	4b2d      	ldr	r3, [pc, #180]	; (800230c <HAL_I2C_Master_Receive+0x11c>)
 8002256:	2aff      	cmp	r2, #255	; 0xff
 8002258:	d920      	bls.n	800229c <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002264:	0039      	movs	r1, r7
 8002266:	0020      	movs	r0, r4
 8002268:	f7ff fd7a 	bl	8001d60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800226c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800226e:	002a      	movs	r2, r5
 8002270:	0020      	movs	r0, r4
 8002272:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8002274:	2b00      	cmp	r3, #0
 8002276:	d119      	bne.n	80022ac <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002278:	f7ff feaa 	bl	8001fd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800227c:	2800      	cmp	r0, #0
 800227e:	d1d8      	bne.n	8002232 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002280:	2120      	movs	r1, #32
 8002282:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8002284:	4d22      	ldr	r5, [pc, #136]	; (8002310 <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002286:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	402a      	ands	r2, r5
 800228c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800228e:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8002290:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8002292:	3341      	adds	r3, #65	; 0x41
 8002294:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002296:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8002298:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800229a:	e7cb      	b.n	8002234 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800229c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800229e:	b292      	uxth	r2, r2
 80022a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	049b      	lsls	r3, r3, #18
 80022aa:	e7db      	b.n	8002264 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ac:	f7ff fe1c 	bl	8001ee8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d1be      	bne.n	8002232 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80022b4:	6823      	ldr	r3, [r4, #0]
 80022b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80022bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80022be:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80022c0:	3301      	adds	r3, #1
 80022c2:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80022c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80022c6:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80022c8:	3b01      	subs	r3, #1
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80022d0:	b292      	uxth	r2, r2
 80022d2:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d0c9      	beq.n	800226c <HAL_I2C_Master_Receive+0x7c>
 80022d8:	2a00      	cmp	r2, #0
 80022da:	d1c7      	bne.n	800226c <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	0020      	movs	r0, r4
 80022e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80022e2:	9500      	str	r5, [sp, #0]
 80022e4:	f7ff fe4c 	bl	8001f80 <I2C_WaitOnFlagUntilTimeout>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d1a2      	bne.n	8002232 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022ee:	2bff      	cmp	r3, #255	; 0xff
 80022f0:	d906      	bls.n	8002300 <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f2:	23ff      	movs	r3, #255	; 0xff
 80022f4:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	22ff      	movs	r2, #255	; 0xff
 80022fa:	9000      	str	r0, [sp, #0]
 80022fc:	045b      	lsls	r3, r3, #17
 80022fe:	e7b1      	b.n	8002264 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8002300:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002302:	b292      	uxth	r2, r2
 8002304:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	9000      	str	r0, [sp, #0]
 800230a:	e7cc      	b.n	80022a6 <HAL_I2C_Master_Receive+0xb6>
 800230c:	80002400 	.word	0x80002400
 8002310:	fe00e800 	.word	0xfe00e800

08002314 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002314:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002316:	0004      	movs	r4, r0
 8002318:	3441      	adds	r4, #65	; 0x41
 800231a:	7822      	ldrb	r2, [r4, #0]
{
 800231c:	0003      	movs	r3, r0
 800231e:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002320:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002322:	b2d6      	uxtb	r6, r2
 8002324:	2a20      	cmp	r2, #32
 8002326:	d118      	bne.n	800235a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002328:	001d      	movs	r5, r3
 800232a:	3540      	adds	r5, #64	; 0x40
 800232c:	782a      	ldrb	r2, [r5, #0]
 800232e:	2a01      	cmp	r2, #1
 8002330:	d013      	beq.n	800235a <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002332:	2224      	movs	r2, #36	; 0x24
 8002334:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3a23      	subs	r2, #35	; 0x23
 800233a:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800233c:	4807      	ldr	r0, [pc, #28]	; (800235c <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800233e:	4391      	bics	r1, r2
 8002340:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002346:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002348:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	4339      	orrs	r1, r7
 800234e:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002350:	6819      	ldr	r1, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002356:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002358:	7028      	strb	r0, [r5, #0]
  }
}
 800235a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800235c:	ffffefff 	.word	0xffffefff

08002360 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002360:	0002      	movs	r2, r0
{
 8002362:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002364:	3241      	adds	r2, #65	; 0x41
 8002366:	7814      	ldrb	r4, [r2, #0]
{
 8002368:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800236a:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800236c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800236e:	2c20      	cmp	r4, #32
 8002370:	d117      	bne.n	80023a2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8002372:	001c      	movs	r4, r3
 8002374:	3440      	adds	r4, #64	; 0x40
 8002376:	7826      	ldrb	r6, [r4, #0]
 8002378:	2e01      	cmp	r6, #1
 800237a:	d012      	beq.n	80023a2 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800237c:	3022      	adds	r0, #34	; 0x22
 800237e:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	3823      	subs	r0, #35	; 0x23
 8002384:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002386:	4f07      	ldr	r7, [pc, #28]	; (80023a4 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002388:	4386      	bics	r6, r0
 800238a:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800238c:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800238e:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8002390:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8002392:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002394:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	4308      	orrs	r0, r1
 800239a:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 800239c:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800239e:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80023a0:	7020      	strb	r0, [r4, #0]
  }
}
 80023a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023a4:	fffff0ff 	.word	0xfffff0ff

080023a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80023a8:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023aa:	4c11      	ldr	r4, [pc, #68]	; (80023f0 <HAL_PWREx_ControlVoltageScaling+0x48>)
 80023ac:	4911      	ldr	r1, [pc, #68]	; (80023f4 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80023ae:	6823      	ldr	r3, [r4, #0]
{
 80023b0:	0002      	movs	r2, r0
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80023b2:	400b      	ands	r3, r1
 80023b4:	4303      	orrs	r3, r0
 80023b6:	6023      	str	r3, [r4, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023b8:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80023ba:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	429a      	cmp	r2, r3
 80023c0:	d10e      	bne.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x38>
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023c2:	4b0d      	ldr	r3, [pc, #52]	; (80023f8 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80023c4:	490d      	ldr	r1, [pc, #52]	; (80023fc <HAL_PWREx_ControlVoltageScaling+0x54>)
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	2306      	movs	r3, #6
 80023ca:	4358      	muls	r0, r3
 80023cc:	f7fd fea2 	bl	8000114 <__udivsi3>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d0:	2280      	movs	r2, #128	; 0x80
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80023d2:	1c43      	adds	r3, r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d4:	00d2      	lsls	r2, r2, #3
 80023d6:	6961      	ldr	r1, [r4, #20]
 80023d8:	0008      	movs	r0, r1
 80023da:	4010      	ands	r0, r2
 80023dc:	4211      	tst	r1, r2
 80023de:	d100      	bne.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x3a>
}
 80023e0:	bd10      	pop	{r4, pc}
      if (wait_loop_index != 0U)
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x42>
        wait_loop_index--;
 80023e6:	3b01      	subs	r3, #1
 80023e8:	e7f5      	b.n	80023d6 <HAL_PWREx_ControlVoltageScaling+0x2e>
        return HAL_TIMEOUT;
 80023ea:	2003      	movs	r0, #3
 80023ec:	e7f8      	b.n	80023e0 <HAL_PWREx_ControlVoltageScaling+0x38>
 80023ee:	46c0      	nop			; (mov r8, r8)
 80023f0:	40007000 	.word	0x40007000
 80023f4:	fffff9ff 	.word	0xfffff9ff
 80023f8:	2000006c 	.word	0x2000006c
 80023fc:	000f4240 	.word	0x000f4240

08002400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002402:	0004      	movs	r4, r0
 8002404:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002406:	2800      	cmp	r0, #0
 8002408:	d023      	beq.n	8002452 <HAL_RCC_OscConfig+0x52>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	6803      	ldr	r3, [r0, #0]
 800240c:	07db      	lsls	r3, r3, #31
 800240e:	d410      	bmi.n	8002432 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	079b      	lsls	r3, r3, #30
 8002414:	d45e      	bmi.n	80024d4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	071b      	lsls	r3, r3, #28
 800241a:	d500      	bpl.n	800241e <HAL_RCC_OscConfig+0x1e>
 800241c:	e0c3      	b.n	80025a6 <HAL_RCC_OscConfig+0x1a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800241e:	6823      	ldr	r3, [r4, #0]
 8002420:	075b      	lsls	r3, r3, #29
 8002422:	d500      	bpl.n	8002426 <HAL_RCC_OscConfig+0x26>
 8002424:	e0f4      	b.n	8002610 <HAL_RCC_OscConfig+0x210>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002426:	69e3      	ldr	r3, [r4, #28]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d000      	beq.n	800242e <HAL_RCC_OscConfig+0x2e>
 800242c:	e17a      	b.n	8002724 <HAL_RCC_OscConfig+0x324>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800242e:	2000      	movs	r0, #0
 8002430:	e029      	b.n	8002486 <HAL_RCC_OscConfig+0x86>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002432:	2238      	movs	r2, #56	; 0x38
 8002434:	4daf      	ldr	r5, [pc, #700]	; (80026f4 <HAL_RCC_OscConfig+0x2f4>)
 8002436:	68ab      	ldr	r3, [r5, #8]
 8002438:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800243a:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800243c:	2b10      	cmp	r3, #16
 800243e:	d10a      	bne.n	8002456 <HAL_RCC_OscConfig+0x56>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002440:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002442:	0793      	lsls	r3, r2, #30
 8002444:	d109      	bne.n	800245a <HAL_RCC_OscConfig+0x5a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002446:	682b      	ldr	r3, [r5, #0]
 8002448:	039b      	lsls	r3, r3, #14
 800244a:	d5e1      	bpl.n	8002410 <HAL_RCC_OscConfig+0x10>
 800244c:	6863      	ldr	r3, [r4, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1de      	bne.n	8002410 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8002452:	2001      	movs	r0, #1
 8002454:	e017      	b.n	8002486 <HAL_RCC_OscConfig+0x86>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002456:	2b08      	cmp	r3, #8
 8002458:	d0f5      	beq.n	8002446 <HAL_RCC_OscConfig+0x46>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	6863      	ldr	r3, [r4, #4]
 800245e:	0252      	lsls	r2, r2, #9
 8002460:	4293      	cmp	r3, r2
 8002462:	d112      	bne.n	800248a <HAL_RCC_OscConfig+0x8a>
 8002464:	682a      	ldr	r2, [r5, #0]
 8002466:	4313      	orrs	r3, r2
 8002468:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800246a:	f7fe fe63 	bl	8001134 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246e:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8002470:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002472:	02bf      	lsls	r7, r7, #10
 8002474:	682b      	ldr	r3, [r5, #0]
 8002476:	423b      	tst	r3, r7
 8002478:	d1ca      	bne.n	8002410 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247a:	f7fe fe5b 	bl	8001134 <HAL_GetTick>
 800247e:	1b80      	subs	r0, r0, r6
 8002480:	2864      	cmp	r0, #100	; 0x64
 8002482:	d9f7      	bls.n	8002474 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8002484:	2003      	movs	r0, #3
}
 8002486:	b005      	add	sp, #20
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248a:	21a0      	movs	r1, #160	; 0xa0
 800248c:	02c9      	lsls	r1, r1, #11
 800248e:	428b      	cmp	r3, r1
 8002490:	d108      	bne.n	80024a4 <HAL_RCC_OscConfig+0xa4>
 8002492:	2380      	movs	r3, #128	; 0x80
 8002494:	6829      	ldr	r1, [r5, #0]
 8002496:	02db      	lsls	r3, r3, #11
 8002498:	430b      	orrs	r3, r1
 800249a:	602b      	str	r3, [r5, #0]
 800249c:	682b      	ldr	r3, [r5, #0]
 800249e:	431a      	orrs	r2, r3
 80024a0:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a2:	e7e2      	b.n	800246a <HAL_RCC_OscConfig+0x6a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a4:	682a      	ldr	r2, [r5, #0]
 80024a6:	4994      	ldr	r1, [pc, #592]	; (80026f8 <HAL_RCC_OscConfig+0x2f8>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	602a      	str	r2, [r5, #0]
 80024ac:	682a      	ldr	r2, [r5, #0]
 80024ae:	4993      	ldr	r1, [pc, #588]	; (80026fc <HAL_RCC_OscConfig+0x2fc>)
 80024b0:	400a      	ands	r2, r1
 80024b2:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1d8      	bne.n	800246a <HAL_RCC_OscConfig+0x6a>
        tickstart = HAL_GetTick();
 80024b8:	f7fe fe3c 	bl	8001134 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024bc:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80024be:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024c0:	02bf      	lsls	r7, r7, #10
 80024c2:	682b      	ldr	r3, [r5, #0]
 80024c4:	423b      	tst	r3, r7
 80024c6:	d0a3      	beq.n	8002410 <HAL_RCC_OscConfig+0x10>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fe34 	bl	8001134 <HAL_GetTick>
 80024cc:	1b80      	subs	r0, r0, r6
 80024ce:	2864      	cmp	r0, #100	; 0x64
 80024d0:	d9f7      	bls.n	80024c2 <HAL_RCC_OscConfig+0xc2>
 80024d2:	e7d7      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d4:	2338      	movs	r3, #56	; 0x38
 80024d6:	4d87      	ldr	r5, [pc, #540]	; (80026f4 <HAL_RCC_OscConfig+0x2f4>)
 80024d8:	68aa      	ldr	r2, [r5, #8]
 80024da:	4013      	ands	r3, r2
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024dc:	68ea      	ldr	r2, [r5, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d128      	bne.n	8002534 <HAL_RCC_OscConfig+0x134>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e2:	2103      	movs	r1, #3
 80024e4:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80024e6:	2a02      	cmp	r2, #2
 80024e8:	d126      	bne.n	8002538 <HAL_RCC_OscConfig+0x138>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ea:	682a      	ldr	r2, [r5, #0]
 80024ec:	0552      	lsls	r2, r2, #21
 80024ee:	d502      	bpl.n	80024f6 <HAL_RCC_OscConfig+0xf6>
 80024f0:	68e2      	ldr	r2, [r4, #12]
 80024f2:	2a00      	cmp	r2, #0
 80024f4:	d0ad      	beq.n	8002452 <HAL_RCC_OscConfig+0x52>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	6869      	ldr	r1, [r5, #4]
 80024f8:	6962      	ldr	r2, [r4, #20]
 80024fa:	4881      	ldr	r0, [pc, #516]	; (8002700 <HAL_RCC_OscConfig+0x300>)
 80024fc:	0212      	lsls	r2, r2, #8
 80024fe:	4001      	ands	r1, r0
 8002500:	430a      	orrs	r2, r1
 8002502:	606a      	str	r2, [r5, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002508:	682b      	ldr	r3, [r5, #0]
 800250a:	4a7e      	ldr	r2, [pc, #504]	; (8002704 <HAL_RCC_OscConfig+0x304>)
 800250c:	4013      	ands	r3, r2
 800250e:	6922      	ldr	r2, [r4, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002514:	682b      	ldr	r3, [r5, #0]
 8002516:	4a7c      	ldr	r2, [pc, #496]	; (8002708 <HAL_RCC_OscConfig+0x308>)
 8002518:	049b      	lsls	r3, r3, #18
 800251a:	0f5b      	lsrs	r3, r3, #29
 800251c:	40da      	lsrs	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	4a7a      	ldr	r2, [pc, #488]	; (800270c <HAL_RCC_OscConfig+0x30c>)
 8002522:	6013      	str	r3, [r2, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002524:	4b7a      	ldr	r3, [pc, #488]	; (8002710 <HAL_RCC_OscConfig+0x310>)
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	f7fe fdbc 	bl	80010a4 <HAL_InitTick>
 800252c:	2800      	cmp	r0, #0
 800252e:	d100      	bne.n	8002532 <HAL_RCC_OscConfig+0x132>
 8002530:	e771      	b.n	8002416 <HAL_RCC_OscConfig+0x16>
 8002532:	e78e      	b.n	8002452 <HAL_RCC_OscConfig+0x52>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002534:	2b00      	cmp	r3, #0
 8002536:	d0d8      	beq.n	80024ea <HAL_RCC_OscConfig+0xea>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002538:	68e3      	ldr	r3, [r4, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d020      	beq.n	8002580 <HAL_RCC_OscConfig+0x180>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800253e:	682b      	ldr	r3, [r5, #0]
 8002540:	4a70      	ldr	r2, [pc, #448]	; (8002704 <HAL_RCC_OscConfig+0x304>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002542:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002544:	4013      	ands	r3, r2
 8002546:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002548:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800254a:	4313      	orrs	r3, r2
 800254c:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 800254e:	2380      	movs	r3, #128	; 0x80
 8002550:	682a      	ldr	r2, [r5, #0]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4313      	orrs	r3, r2
 8002556:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002558:	f7fe fdec 	bl	8001134 <HAL_GetTick>
 800255c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800255e:	682b      	ldr	r3, [r5, #0]
 8002560:	423b      	tst	r3, r7
 8002562:	d007      	beq.n	8002574 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002564:	686a      	ldr	r2, [r5, #4]
 8002566:	6963      	ldr	r3, [r4, #20]
 8002568:	4965      	ldr	r1, [pc, #404]	; (8002700 <HAL_RCC_OscConfig+0x300>)
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	400a      	ands	r2, r1
 800256e:	4313      	orrs	r3, r2
 8002570:	606b      	str	r3, [r5, #4]
 8002572:	e750      	b.n	8002416 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002574:	f7fe fdde 	bl	8001134 <HAL_GetTick>
 8002578:	1b80      	subs	r0, r0, r6
 800257a:	2802      	cmp	r0, #2
 800257c:	d9ef      	bls.n	800255e <HAL_RCC_OscConfig+0x15e>
 800257e:	e781      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8002580:	682b      	ldr	r3, [r5, #0]
 8002582:	4a64      	ldr	r2, [pc, #400]	; (8002714 <HAL_RCC_OscConfig+0x314>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002584:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI_DISABLE();
 8002586:	4013      	ands	r3, r2
 8002588:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800258a:	f7fe fdd3 	bl	8001134 <HAL_GetTick>
 800258e:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002590:	00ff      	lsls	r7, r7, #3
 8002592:	682b      	ldr	r3, [r5, #0]
 8002594:	423b      	tst	r3, r7
 8002596:	d100      	bne.n	800259a <HAL_RCC_OscConfig+0x19a>
 8002598:	e73d      	b.n	8002416 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259a:	f7fe fdcb 	bl	8001134 <HAL_GetTick>
 800259e:	1b80      	subs	r0, r0, r6
 80025a0:	2802      	cmp	r0, #2
 80025a2:	d9f6      	bls.n	8002592 <HAL_RCC_OscConfig+0x192>
 80025a4:	e76e      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80025a6:	2238      	movs	r2, #56	; 0x38
 80025a8:	4d52      	ldr	r5, [pc, #328]	; (80026f4 <HAL_RCC_OscConfig+0x2f4>)
 80025aa:	68ab      	ldr	r3, [r5, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	2b18      	cmp	r3, #24
 80025b0:	d108      	bne.n	80025c4 <HAL_RCC_OscConfig+0x1c4>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80025b2:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80025b4:	079b      	lsls	r3, r3, #30
 80025b6:	d400      	bmi.n	80025ba <HAL_RCC_OscConfig+0x1ba>
 80025b8:	e731      	b.n	800241e <HAL_RCC_OscConfig+0x1e>
 80025ba:	69a3      	ldr	r3, [r4, #24]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d000      	beq.n	80025c2 <HAL_RCC_OscConfig+0x1c2>
 80025c0:	e72d      	b.n	800241e <HAL_RCC_OscConfig+0x1e>
 80025c2:	e746      	b.n	8002452 <HAL_RCC_OscConfig+0x52>
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025c4:	69a2      	ldr	r2, [r4, #24]
 80025c6:	2301      	movs	r3, #1
 80025c8:	2a00      	cmp	r2, #0
 80025ca:	d010      	beq.n	80025ee <HAL_RCC_OscConfig+0x1ee>
        __HAL_RCC_LSI_ENABLE();
 80025cc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ce:	2702      	movs	r7, #2
        __HAL_RCC_LSI_ENABLE();
 80025d0:	4313      	orrs	r3, r2
 80025d2:	662b      	str	r3, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80025d4:	f7fe fdae 	bl	8001134 <HAL_GetTick>
 80025d8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025da:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80025dc:	423b      	tst	r3, r7
 80025de:	d000      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1e2>
 80025e0:	e71d      	b.n	800241e <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e2:	f7fe fda7 	bl	8001134 <HAL_GetTick>
 80025e6:	1b80      	subs	r0, r0, r6
 80025e8:	2802      	cmp	r0, #2
 80025ea:	d9f6      	bls.n	80025da <HAL_RCC_OscConfig+0x1da>
 80025ec:	e74a      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_LSI_DISABLE();
 80025ee:	6e2a      	ldr	r2, [r5, #96]	; 0x60
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025f0:	2702      	movs	r7, #2
        __HAL_RCC_LSI_DISABLE();
 80025f2:	439a      	bics	r2, r3
 80025f4:	662a      	str	r2, [r5, #96]	; 0x60
        tickstart = HAL_GetTick();
 80025f6:	f7fe fd9d 	bl	8001134 <HAL_GetTick>
 80025fa:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025fc:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 80025fe:	423b      	tst	r3, r7
 8002600:	d100      	bne.n	8002604 <HAL_RCC_OscConfig+0x204>
 8002602:	e70c      	b.n	800241e <HAL_RCC_OscConfig+0x1e>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002604:	f7fe fd96 	bl	8001134 <HAL_GetTick>
 8002608:	1b80      	subs	r0, r0, r6
 800260a:	2802      	cmp	r0, #2
 800260c:	d9f6      	bls.n	80025fc <HAL_RCC_OscConfig+0x1fc>
 800260e:	e739      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002610:	2238      	movs	r2, #56	; 0x38
 8002612:	4d38      	ldr	r5, [pc, #224]	; (80026f4 <HAL_RCC_OscConfig+0x2f4>)
 8002614:	68ab      	ldr	r3, [r5, #8]
 8002616:	4013      	ands	r3, r2
 8002618:	2b20      	cmp	r3, #32
 800261a:	d108      	bne.n	800262e <HAL_RCC_OscConfig+0x22e>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800261c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 800261e:	079b      	lsls	r3, r3, #30
 8002620:	d400      	bmi.n	8002624 <HAL_RCC_OscConfig+0x224>
 8002622:	e700      	b.n	8002426 <HAL_RCC_OscConfig+0x26>
 8002624:	68a3      	ldr	r3, [r4, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d000      	beq.n	800262c <HAL_RCC_OscConfig+0x22c>
 800262a:	e6fc      	b.n	8002426 <HAL_RCC_OscConfig+0x26>
 800262c:	e711      	b.n	8002452 <HAL_RCC_OscConfig+0x52>
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800262e:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002630:	2100      	movs	r1, #0
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002632:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002634:	0552      	lsls	r2, r2, #21
    FlagStatus       pwrclkchanged = RESET;
 8002636:	9100      	str	r1, [sp, #0]
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002638:	4213      	tst	r3, r2
 800263a:	d108      	bne.n	800264e <HAL_RCC_OscConfig+0x24e>
        __HAL_RCC_PWR_CLK_ENABLE();
 800263c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800263e:	4313      	orrs	r3, r2
 8002640:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002642:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002644:	4013      	ands	r3, r2
 8002646:	9303      	str	r3, [sp, #12]
 8002648:	9b03      	ldr	r3, [sp, #12]
        pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	9300      	str	r3, [sp, #0]
      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264e:	2780      	movs	r7, #128	; 0x80
 8002650:	4e31      	ldr	r6, [pc, #196]	; (8002718 <HAL_RCC_OscConfig+0x318>)
 8002652:	007f      	lsls	r7, r7, #1
 8002654:	6833      	ldr	r3, [r6, #0]
 8002656:	423b      	tst	r3, r7
 8002658:	d015      	beq.n	8002686 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800265a:	68a3      	ldr	r3, [r4, #8]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d122      	bne.n	80026a6 <HAL_RCC_OscConfig+0x2a6>
 8002660:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002662:	4313      	orrs	r3, r2
 8002664:	65eb      	str	r3, [r5, #92]	; 0x5c
        tickstart = HAL_GetTick();
 8002666:	f7fe fd65 	bl	8001134 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266a:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 800266c:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8002670:	423b      	tst	r3, r7
 8002672:	d038      	beq.n	80026e6 <HAL_RCC_OscConfig+0x2e6>
      if (pwrclkchanged == SET)
 8002674:	9b00      	ldr	r3, [sp, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d000      	beq.n	800267c <HAL_RCC_OscConfig+0x27c>
 800267a:	e6d4      	b.n	8002426 <HAL_RCC_OscConfig+0x26>
        __HAL_RCC_PWR_CLK_DISABLE();
 800267c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800267e:	4a27      	ldr	r2, [pc, #156]	; (800271c <HAL_RCC_OscConfig+0x31c>)
 8002680:	4013      	ands	r3, r2
 8002682:	63eb      	str	r3, [r5, #60]	; 0x3c
 8002684:	e6cf      	b.n	8002426 <HAL_RCC_OscConfig+0x26>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002686:	6833      	ldr	r3, [r6, #0]
 8002688:	433b      	orrs	r3, r7
 800268a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800268c:	f7fe fd52 	bl	8001134 <HAL_GetTick>
 8002690:	9001      	str	r0, [sp, #4]
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002692:	6833      	ldr	r3, [r6, #0]
 8002694:	423b      	tst	r3, r7
 8002696:	d1e0      	bne.n	800265a <HAL_RCC_OscConfig+0x25a>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002698:	f7fe fd4c 	bl	8001134 <HAL_GetTick>
 800269c:	9b01      	ldr	r3, [sp, #4]
 800269e:	1ac0      	subs	r0, r0, r3
 80026a0:	2802      	cmp	r0, #2
 80026a2:	d9f6      	bls.n	8002692 <HAL_RCC_OscConfig+0x292>
 80026a4:	e6ee      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a6:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d105      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2b8>
 80026ac:	3b01      	subs	r3, #1
 80026ae:	4313      	orrs	r3, r2
 80026b0:	65eb      	str	r3, [r5, #92]	; 0x5c
 80026b2:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80026b4:	2301      	movs	r3, #1
 80026b6:	e7d4      	b.n	8002662 <HAL_RCC_OscConfig+0x262>
 80026b8:	2101      	movs	r1, #1
 80026ba:	438a      	bics	r2, r1
 80026bc:	65ea      	str	r2, [r5, #92]	; 0x5c
 80026be:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80026c0:	3103      	adds	r1, #3
 80026c2:	438a      	bics	r2, r1
 80026c4:	65ea      	str	r2, [r5, #92]	; 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1cd      	bne.n	8002666 <HAL_RCC_OscConfig+0x266>
        tickstart = HAL_GetTick();
 80026ca:	f7fe fd33 	bl	8001134 <HAL_GetTick>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026ce:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80026d0:	0006      	movs	r6, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026d2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 80026d4:	423b      	tst	r3, r7
 80026d6:	d0cd      	beq.n	8002674 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe fd2c 	bl	8001134 <HAL_GetTick>
 80026dc:	4b10      	ldr	r3, [pc, #64]	; (8002720 <HAL_RCC_OscConfig+0x320>)
 80026de:	1b80      	subs	r0, r0, r6
 80026e0:	4298      	cmp	r0, r3
 80026e2:	d9f6      	bls.n	80026d2 <HAL_RCC_OscConfig+0x2d2>
 80026e4:	e6ce      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e6:	f7fe fd25 	bl	8001134 <HAL_GetTick>
 80026ea:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <HAL_RCC_OscConfig+0x320>)
 80026ec:	1b80      	subs	r0, r0, r6
 80026ee:	4298      	cmp	r0, r3
 80026f0:	d9bd      	bls.n	800266e <HAL_RCC_OscConfig+0x26e>
 80026f2:	e6c7      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
 80026f4:	40021000 	.word	0x40021000
 80026f8:	fffeffff 	.word	0xfffeffff
 80026fc:	fffbffff 	.word	0xfffbffff
 8002700:	ffff80ff 	.word	0xffff80ff
 8002704:	ffffc7ff 	.word	0xffffc7ff
 8002708:	00f42400 	.word	0x00f42400
 800270c:	2000006c 	.word	0x2000006c
 8002710:	20000074 	.word	0x20000074
 8002714:	fffffeff 	.word	0xfffffeff
 8002718:	40007000 	.word	0x40007000
 800271c:	efffffff 	.word	0xefffffff
 8002720:	00001388 	.word	0x00001388
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002724:	2138      	movs	r1, #56	; 0x38
 8002726:	4d3f      	ldr	r5, [pc, #252]	; (8002824 <HAL_RCC_OscConfig+0x424>)
 8002728:	68aa      	ldr	r2, [r5, #8]
 800272a:	400a      	ands	r2, r1
 800272c:	2a10      	cmp	r2, #16
 800272e:	d053      	beq.n	80027d8 <HAL_RCC_OscConfig+0x3d8>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002730:	4a3d      	ldr	r2, [pc, #244]	; (8002828 <HAL_RCC_OscConfig+0x428>)
 8002732:	2b02      	cmp	r3, #2
 8002734:	d138      	bne.n	80027a8 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_PLL_DISABLE();
 8002736:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002738:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800273a:	4013      	ands	r3, r2
 800273c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800273e:	f7fe fcf9 	bl	8001134 <HAL_GetTick>
 8002742:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002744:	04bf      	lsls	r7, r7, #18
 8002746:	682b      	ldr	r3, [r5, #0]
 8002748:	423b      	tst	r3, r7
 800274a:	d127      	bne.n	800279c <HAL_RCC_OscConfig+0x39c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800274c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800274e:	6a23      	ldr	r3, [r4, #32]
 8002750:	68ea      	ldr	r2, [r5, #12]
 8002752:	430b      	orrs	r3, r1
 8002754:	4935      	ldr	r1, [pc, #212]	; (800282c <HAL_RCC_OscConfig+0x42c>)
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002756:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002758:	400a      	ands	r2, r1
 800275a:	4313      	orrs	r3, r2
 800275c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002760:	4313      	orrs	r3, r2
 8002762:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002764:	4313      	orrs	r3, r2
 8002766:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002768:	0212      	lsls	r2, r2, #8
 800276a:	4313      	orrs	r3, r2
 800276c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	682a      	ldr	r2, [r5, #0]
 8002772:	045b      	lsls	r3, r3, #17
 8002774:	4313      	orrs	r3, r2
 8002776:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	68ea      	ldr	r2, [r5, #12]
 800277c:	055b      	lsls	r3, r3, #21
 800277e:	4313      	orrs	r3, r2
 8002780:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002782:	f7fe fcd7 	bl	8001134 <HAL_GetTick>
 8002786:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002788:	682b      	ldr	r3, [r5, #0]
 800278a:	4233      	tst	r3, r6
 800278c:	d000      	beq.n	8002790 <HAL_RCC_OscConfig+0x390>
 800278e:	e64e      	b.n	800242e <HAL_RCC_OscConfig+0x2e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe fcd0 	bl	8001134 <HAL_GetTick>
 8002794:	1b00      	subs	r0, r0, r4
 8002796:	2802      	cmp	r0, #2
 8002798:	d9f6      	bls.n	8002788 <HAL_RCC_OscConfig+0x388>
 800279a:	e673      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe fcca 	bl	8001134 <HAL_GetTick>
 80027a0:	1b80      	subs	r0, r0, r6
 80027a2:	2802      	cmp	r0, #2
 80027a4:	d9cf      	bls.n	8002746 <HAL_RCC_OscConfig+0x346>
 80027a6:	e66d      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_PLL_DISABLE();
 80027a8:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027aa:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80027ac:	4013      	ands	r3, r2
 80027ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027b0:	f7fe fcc0 	bl	8001134 <HAL_GetTick>
 80027b4:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b6:	04b6      	lsls	r6, r6, #18
 80027b8:	682b      	ldr	r3, [r5, #0]
 80027ba:	0018      	movs	r0, r3
 80027bc:	4030      	ands	r0, r6
 80027be:	4233      	tst	r3, r6
 80027c0:	d104      	bne.n	80027cc <HAL_RCC_OscConfig+0x3cc>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80027c2:	68eb      	ldr	r3, [r5, #12]
 80027c4:	4a1a      	ldr	r2, [pc, #104]	; (8002830 <HAL_RCC_OscConfig+0x430>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	60eb      	str	r3, [r5, #12]
 80027ca:	e65c      	b.n	8002486 <HAL_RCC_OscConfig+0x86>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027cc:	f7fe fcb2 	bl	8001134 <HAL_GetTick>
 80027d0:	1b00      	subs	r0, r0, r4
 80027d2:	2802      	cmp	r0, #2
 80027d4:	d9f0      	bls.n	80027b8 <HAL_RCC_OscConfig+0x3b8>
 80027d6:	e655      	b.n	8002484 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d100      	bne.n	80027de <HAL_RCC_OscConfig+0x3de>
 80027dc:	e639      	b.n	8002452 <HAL_RCC_OscConfig+0x52>
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	2203      	movs	r2, #3
        temp_pllckcfg = RCC->PLLCFGR;
 80027e0:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	6a21      	ldr	r1, [r4, #32]
 80027e4:	401a      	ands	r2, r3
 80027e6:	428a      	cmp	r2, r1
 80027e8:	d000      	beq.n	80027ec <HAL_RCC_OscConfig+0x3ec>
 80027ea:	e632      	b.n	8002452 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ec:	2270      	movs	r2, #112	; 0x70
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f0:	401a      	ands	r2, r3
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f2:	428a      	cmp	r2, r1
 80027f4:	d000      	beq.n	80027f8 <HAL_RCC_OscConfig+0x3f8>
 80027f6:	e62c      	b.n	8002452 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f8:	21fe      	movs	r1, #254	; 0xfe
 80027fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027fc:	01c9      	lsls	r1, r1, #7
 80027fe:	4019      	ands	r1, r3
 8002800:	0212      	lsls	r2, r2, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002802:	4291      	cmp	r1, r2
 8002804:	d000      	beq.n	8002808 <HAL_RCC_OscConfig+0x408>
 8002806:	e624      	b.n	8002452 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002808:	22f8      	movs	r2, #248	; 0xf8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800280a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800280c:	0392      	lsls	r2, r2, #14
 800280e:	401a      	ands	r2, r3
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002810:	428a      	cmp	r2, r1
 8002812:	d000      	beq.n	8002816 <HAL_RCC_OscConfig+0x416>
 8002814:	e61d      	b.n	8002452 <HAL_RCC_OscConfig+0x52>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002816:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002818:	0f5b      	lsrs	r3, r3, #29
 800281a:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800281c:	4293      	cmp	r3, r2
 800281e:	d100      	bne.n	8002822 <HAL_RCC_OscConfig+0x422>
 8002820:	e605      	b.n	800242e <HAL_RCC_OscConfig+0x2e>
 8002822:	e616      	b.n	8002452 <HAL_RCC_OscConfig+0x52>
 8002824:	40021000 	.word	0x40021000
 8002828:	feffffff 	.word	0xfeffffff
 800282c:	1fc1808c 	.word	0x1fc1808c
 8002830:	effefffc 	.word	0xeffefffc

08002834 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002834:	2338      	movs	r3, #56	; 0x38
{
 8002836:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002838:	4c1e      	ldr	r4, [pc, #120]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x80>)
 800283a:	68a2      	ldr	r2, [r4, #8]
 800283c:	421a      	tst	r2, r3
 800283e:	d105      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002840:	6823      	ldr	r3, [r4, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002842:	481d      	ldr	r0, [pc, #116]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x84>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002844:	049b      	lsls	r3, r3, #18
 8002846:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002848:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 800284a:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800284c:	68a2      	ldr	r2, [r4, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	2a08      	cmp	r2, #8
 8002852:	d02a      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x76>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002854:	68a2      	ldr	r2, [r4, #8]
 8002856:	401a      	ands	r2, r3
 8002858:	2a10      	cmp	r2, #16
 800285a:	d11a      	bne.n	8002892 <HAL_RCC_GetSysClockFreq+0x5e>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800285c:	68e3      	ldr	r3, [r4, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800285e:	68e1      	ldr	r1, [r4, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002860:	43db      	mvns	r3, r3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002862:	0649      	lsls	r1, r1, #25
 8002864:	0f49      	lsrs	r1, r1, #29
 8002866:	257f      	movs	r5, #127	; 0x7f
 8002868:	3101      	adds	r1, #1
    switch (pllsource)
 800286a:	079b      	lsls	r3, r3, #30
 800286c:	d10c      	bne.n	8002888 <HAL_RCC_GetSysClockFreq+0x54>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800286e:	68e3      	ldr	r3, [r4, #12]
 8002870:	4812      	ldr	r0, [pc, #72]	; (80028bc <HAL_RCC_GetSysClockFreq+0x88>)
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	401d      	ands	r5, r3
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002876:	f7fd fc4d 	bl	8000114 <__udivsi3>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800287a:	68e1      	ldr	r1, [r4, #12]
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800287c:	4368      	muls	r0, r5
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800287e:	0f49      	lsrs	r1, r1, #29
 8002880:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002882:	f7fd fc47 	bl	8000114 <__udivsi3>
 8002886:	e7e0      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x16>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002888:	68e3      	ldr	r3, [r4, #12]
 800288a:	480b      	ldr	r0, [pc, #44]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x84>)
 800288c:	0a1b      	lsrs	r3, r3, #8
 800288e:	401d      	ands	r5, r3
 8002890:	e7f1      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0x42>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002892:	68a2      	ldr	r2, [r4, #8]
 8002894:	401a      	ands	r2, r3
 8002896:	2a20      	cmp	r2, #32
 8002898:	d009      	beq.n	80028ae <HAL_RCC_GetSysClockFreq+0x7a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800289a:	68a2      	ldr	r2, [r4, #8]
    sysclockfreq = 0U;
 800289c:	2000      	movs	r0, #0
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800289e:	4013      	ands	r3, r2
 80028a0:	2b18      	cmp	r3, #24
 80028a2:	d1d2      	bne.n	800284a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSI_VALUE;
 80028a4:	20fa      	movs	r0, #250	; 0xfa
 80028a6:	01c0      	lsls	r0, r0, #7
  return sysclockfreq;
 80028a8:	e7cf      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = HSE_VALUE;
 80028aa:	4804      	ldr	r0, [pc, #16]	; (80028bc <HAL_RCC_GetSysClockFreq+0x88>)
 80028ac:	e7cd      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x16>
    sysclockfreq = LSE_VALUE;
 80028ae:	2080      	movs	r0, #128	; 0x80
 80028b0:	0200      	lsls	r0, r0, #8
 80028b2:	e7ca      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x16>
 80028b4:	40021000 	.word	0x40021000
 80028b8:	00f42400 	.word	0x00f42400
 80028bc:	007a1200 	.word	0x007a1200

080028c0 <HAL_RCC_ClockConfig>:
{
 80028c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80028c2:	0004      	movs	r4, r0
 80028c4:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80028c6:	2800      	cmp	r0, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
}
 80028cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ce:	2707      	movs	r7, #7
 80028d0:	4e4a      	ldr	r6, [pc, #296]	; (80029fc <HAL_RCC_ClockConfig+0x13c>)
 80028d2:	6833      	ldr	r3, [r6, #0]
 80028d4:	403b      	ands	r3, r7
 80028d6:	428b      	cmp	r3, r1
 80028d8:	d32a      	bcc.n	8002930 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028da:	6821      	ldr	r1, [r4, #0]
 80028dc:	078b      	lsls	r3, r1, #30
 80028de:	d43b      	bmi.n	8002958 <HAL_RCC_ClockConfig+0x98>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e0:	07cb      	lsls	r3, r1, #31
 80028e2:	d448      	bmi.n	8002976 <HAL_RCC_ClockConfig+0xb6>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e4:	2707      	movs	r7, #7
 80028e6:	6833      	ldr	r3, [r6, #0]
 80028e8:	403b      	ands	r3, r7
 80028ea:	42ab      	cmp	r3, r5
 80028ec:	d90a      	bls.n	8002904 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ee:	6833      	ldr	r3, [r6, #0]
 80028f0:	43bb      	bics	r3, r7
 80028f2:	432b      	orrs	r3, r5
 80028f4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80028f6:	f7fe fc1d 	bl	8001134 <HAL_GetTick>
 80028fa:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028fc:	6833      	ldr	r3, [r6, #0]
 80028fe:	403b      	ands	r3, r7
 8002900:	42ab      	cmp	r3, r5
 8002902:	d16b      	bne.n	80029dc <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002904:	6823      	ldr	r3, [r4, #0]
 8002906:	4d3e      	ldr	r5, [pc, #248]	; (8002a00 <HAL_RCC_ClockConfig+0x140>)
 8002908:	075b      	lsls	r3, r3, #29
 800290a:	d46f      	bmi.n	80029ec <HAL_RCC_ClockConfig+0x12c>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800290c:	f7ff ff92 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 8002910:	68ab      	ldr	r3, [r5, #8]
 8002912:	4a3c      	ldr	r2, [pc, #240]	; (8002a04 <HAL_RCC_ClockConfig+0x144>)
 8002914:	051b      	lsls	r3, r3, #20
 8002916:	0f1b      	lsrs	r3, r3, #28
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	589b      	ldr	r3, [r3, r2]
 800291c:	221f      	movs	r2, #31
 800291e:	4013      	ands	r3, r2
 8002920:	40d8      	lsrs	r0, r3
 8002922:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_RCC_ClockConfig+0x148>)
 8002924:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8002926:	4b39      	ldr	r3, [pc, #228]	; (8002a0c <HAL_RCC_ClockConfig+0x14c>)
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	f7fe fbbb 	bl	80010a4 <HAL_InitTick>
 800292e:	e7cd      	b.n	80028cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002930:	6833      	ldr	r3, [r6, #0]
 8002932:	43bb      	bics	r3, r7
 8002934:	430b      	orrs	r3, r1
 8002936:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002938:	f7fe fbfc 	bl	8001134 <HAL_GetTick>
 800293c:	9001      	str	r0, [sp, #4]
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800293e:	6833      	ldr	r3, [r6, #0]
 8002940:	403b      	ands	r3, r7
 8002942:	42ab      	cmp	r3, r5
 8002944:	d0c9      	beq.n	80028da <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002946:	f7fe fbf5 	bl	8001134 <HAL_GetTick>
 800294a:	9b01      	ldr	r3, [sp, #4]
 800294c:	1ac0      	subs	r0, r0, r3
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_RCC_ClockConfig+0x150>)
 8002950:	4298      	cmp	r0, r3
 8002952:	d9f4      	bls.n	800293e <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8002954:	2003      	movs	r0, #3
 8002956:	e7b9      	b.n	80028cc <HAL_RCC_ClockConfig+0xc>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002958:	4a29      	ldr	r2, [pc, #164]	; (8002a00 <HAL_RCC_ClockConfig+0x140>)
 800295a:	074b      	lsls	r3, r1, #29
 800295c:	d504      	bpl.n	8002968 <HAL_RCC_ClockConfig+0xa8>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800295e:	23e0      	movs	r3, #224	; 0xe0
 8002960:	6890      	ldr	r0, [r2, #8]
 8002962:	01db      	lsls	r3, r3, #7
 8002964:	4303      	orrs	r3, r0
 8002966:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	6893      	ldr	r3, [r2, #8]
 800296a:	482a      	ldr	r0, [pc, #168]	; (8002a14 <HAL_RCC_ClockConfig+0x154>)
 800296c:	4003      	ands	r3, r0
 800296e:	68a0      	ldr	r0, [r4, #8]
 8002970:	4303      	orrs	r3, r0
 8002972:	6093      	str	r3, [r2, #8]
 8002974:	e7b4      	b.n	80028e0 <HAL_RCC_ClockConfig+0x20>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002976:	6862      	ldr	r2, [r4, #4]
 8002978:	4f21      	ldr	r7, [pc, #132]	; (8002a00 <HAL_RCC_ClockConfig+0x140>)
 800297a:	2a01      	cmp	r2, #1
 800297c:	d119      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xf2>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	039b      	lsls	r3, r3, #14
 8002982:	d5a2      	bpl.n	80028ca <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002984:	2107      	movs	r1, #7
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	438b      	bics	r3, r1
 800298a:	4313      	orrs	r3, r2
 800298c:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 800298e:	f7fe fbd1 	bl	8001134 <HAL_GetTick>
 8002992:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002994:	2338      	movs	r3, #56	; 0x38
 8002996:	68ba      	ldr	r2, [r7, #8]
 8002998:	401a      	ands	r2, r3
 800299a:	6863      	ldr	r3, [r4, #4]
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	429a      	cmp	r2, r3
 80029a0:	d0a0      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a2:	f7fe fbc7 	bl	8001134 <HAL_GetTick>
 80029a6:	9b01      	ldr	r3, [sp, #4]
 80029a8:	1ac0      	subs	r0, r0, r3
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_ClockConfig+0x150>)
 80029ac:	4298      	cmp	r0, r3
 80029ae:	d9f1      	bls.n	8002994 <HAL_RCC_ClockConfig+0xd4>
 80029b0:	e7d0      	b.n	8002954 <HAL_RCC_ClockConfig+0x94>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b2:	2a02      	cmp	r2, #2
 80029b4:	d103      	bne.n	80029be <HAL_RCC_ClockConfig+0xfe>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	d4e3      	bmi.n	8002984 <HAL_RCC_ClockConfig+0xc4>
 80029bc:	e785      	b.n	80028ca <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029be:	2a00      	cmp	r2, #0
 80029c0:	d103      	bne.n	80029ca <HAL_RCC_ClockConfig+0x10a>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	055b      	lsls	r3, r3, #21
 80029c6:	d4dd      	bmi.n	8002984 <HAL_RCC_ClockConfig+0xc4>
 80029c8:	e77f      	b.n	80028ca <HAL_RCC_ClockConfig+0xa>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80029ca:	2302      	movs	r3, #2
 80029cc:	2a03      	cmp	r2, #3
 80029ce:	d103      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x118>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029d0:	6e39      	ldr	r1, [r7, #96]	; 0x60
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029d2:	4219      	tst	r1, r3
 80029d4:	d1d6      	bne.n	8002984 <HAL_RCC_ClockConfig+0xc4>
 80029d6:	e778      	b.n	80028ca <HAL_RCC_ClockConfig+0xa>
 80029d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80029da:	e7fa      	b.n	80029d2 <HAL_RCC_ClockConfig+0x112>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fe fbaa 	bl	8001134 <HAL_GetTick>
 80029e0:	9b01      	ldr	r3, [sp, #4]
 80029e2:	1ac0      	subs	r0, r0, r3
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RCC_ClockConfig+0x150>)
 80029e6:	4298      	cmp	r0, r3
 80029e8:	d988      	bls.n	80028fc <HAL_RCC_ClockConfig+0x3c>
 80029ea:	e7b3      	b.n	8002954 <HAL_RCC_ClockConfig+0x94>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80029ec:	68ab      	ldr	r3, [r5, #8]
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <HAL_RCC_ClockConfig+0x158>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	68e2      	ldr	r2, [r4, #12]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	60ab      	str	r3, [r5, #8]
 80029f8:	e788      	b.n	800290c <HAL_RCC_ClockConfig+0x4c>
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	40022000 	.word	0x40022000
 8002a00:	40021000 	.word	0x40021000
 8002a04:	08003ab0 	.word	0x08003ab0
 8002a08:	2000006c 	.word	0x2000006c
 8002a0c:	20000074 	.word	0x20000074
 8002a10:	00001388 	.word	0x00001388
 8002a14:	fffff0ff 	.word	0xfffff0ff
 8002a18:	ffff8fff 	.word	0xffff8fff

08002a1c <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002a1c:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <HAL_RCC_GetPCLK1Freq+0x1c>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a1e:	4a07      	ldr	r2, [pc, #28]	; (8002a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	045b      	lsls	r3, r3, #17
 8002a24:	0f5b      	lsrs	r3, r3, #29
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	589b      	ldr	r3, [r3, r2]
 8002a2a:	221f      	movs	r2, #31
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	4a04      	ldr	r2, [pc, #16]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a30:	6810      	ldr	r0, [r2, #0]
 8002a32:	40d8      	lsrs	r0, r3
}
 8002a34:	4770      	bx	lr
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08003af0 	.word	0x08003af0
 8002a40:	2000006c 	.word	0x2000006c

08002a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a46:	0005      	movs	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a48:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a4a:	2000      	movs	r0, #0
{
 8002a4c:	b085      	sub	sp, #20
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a4e:	039b      	lsls	r3, r3, #14
 8002a50:	d53b      	bpl.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x86>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	4c48      	ldr	r4, [pc, #288]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a56:	0552      	lsls	r2, r2, #21
 8002a58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8002a5a:	9000      	str	r0, [sp, #0]
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a5c:	4213      	tst	r3, r2
 8002a5e:	d108      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a62:	4313      	orrs	r3, r2
 8002a64:	63e3      	str	r3, [r4, #60]	; 0x3c
 8002a66:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a68:	4013      	ands	r3, r2
 8002a6a:	9303      	str	r3, [sp, #12]
 8002a6c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	9300      	str	r3, [sp, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a72:	2780      	movs	r7, #128	; 0x80
 8002a74:	4e41      	ldr	r6, [pc, #260]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x138>)
 8002a76:	007f      	lsls	r7, r7, #1
 8002a78:	6833      	ldr	r3, [r6, #0]
 8002a7a:	433b      	orrs	r3, r7
 8002a7c:	6033      	str	r3, [r6, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a7e:	f7fe fb59 	bl	8001134 <HAL_GetTick>
 8002a82:	9001      	str	r0, [sp, #4]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a84:	6833      	ldr	r3, [r6, #0]
 8002a86:	423b      	tst	r3, r7
 8002a88:	d011      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x6a>
    }

    if (ret == HAL_OK)
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a8a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a8c:	23c0      	movs	r3, #192	; 0xc0
 8002a8e:	0011      	movs	r1, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4e3b      	ldr	r6, [pc, #236]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002a94:	4019      	ands	r1, r3

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a96:	421a      	tst	r2, r3
 8002a98:	d002      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002a9a:	696b      	ldr	r3, [r5, #20]
 8002a9c:	4299      	cmp	r1, r3
 8002a9e:	d14d      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
      }

      if (ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002aa2:	2000      	movs	r0, #0
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aa4:	401e      	ands	r6, r3
 8002aa6:	696b      	ldr	r3, [r5, #20]
 8002aa8:	431e      	orrs	r6, r3
 8002aaa:	65e6      	str	r6, [r4, #92]	; 0x5c
 8002aac:	e006      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7fe fb41 	bl	8001134 <HAL_GetTick>
 8002ab2:	9b01      	ldr	r3, [sp, #4]
 8002ab4:	1ac0      	subs	r0, r0, r3
 8002ab6:	2802      	cmp	r0, #2
 8002ab8:	d9e4      	bls.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x40>
        ret = HAL_TIMEOUT;
 8002aba:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002abc:	9b00      	ldr	r3, [sp, #0]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d103      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ac4:	4a2f      	ldr	r2, [pc, #188]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aca:	682a      	ldr	r2, [r5, #0]
 8002acc:	07d3      	lsls	r3, r2, #31
 8002ace:	d506      	bpl.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad0:	2403      	movs	r4, #3
 8002ad2:	4929      	ldr	r1, [pc, #164]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ad4:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002ad6:	43a3      	bics	r3, r4
 8002ad8:	686c      	ldr	r4, [r5, #4]
 8002ada:	4323      	orrs	r3, r4
 8002adc:	654b      	str	r3, [r1, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ade:	0693      	lsls	r3, r2, #26
 8002ae0:	d506      	bpl.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ae2:	4925      	ldr	r1, [pc, #148]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ae4:	4c28      	ldr	r4, [pc, #160]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002ae6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002ae8:	4023      	ands	r3, r4
 8002aea:	68ac      	ldr	r4, [r5, #8]
 8002aec:	4323      	orrs	r3, r4
 8002aee:	654b      	str	r3, [r1, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002af0:	0453      	lsls	r3, r2, #17
 8002af2:	d50f      	bpl.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af4:	4920      	ldr	r1, [pc, #128]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002af6:	692c      	ldr	r4, [r5, #16]
 8002af8:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	4323      	orrs	r3, r4
 8002b00:	654b      	str	r3, [r1, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	05db      	lsls	r3, r3, #23
 8002b06:	429c      	cmp	r4, r3
 8002b08:	d104      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	68cc      	ldr	r4, [r1, #12]
 8002b0e:	025b      	lsls	r3, r3, #9
 8002b10:	4323      	orrs	r3, r4
 8002b12:	60cb      	str	r3, [r1, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002b14:	0513      	lsls	r3, r2, #20
 8002b16:	d50f      	bpl.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002b18:	4a17      	ldr	r2, [pc, #92]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b1a:	4c1c      	ldr	r4, [pc, #112]	; (8002b8c <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002b1c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002b1e:	68e9      	ldr	r1, [r5, #12]
 8002b20:	4023      	ands	r3, r4
 8002b22:	430b      	orrs	r3, r1
 8002b24:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	01db      	lsls	r3, r3, #7
 8002b2a:	4299      	cmp	r1, r3
 8002b2c:	d104      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002b2e:	2380      	movs	r3, #128	; 0x80
 8002b30:	68d1      	ldr	r1, [r2, #12]
 8002b32:	025b      	lsls	r3, r3, #9
 8002b34:	430b      	orrs	r3, r1
 8002b36:	60d3      	str	r3, [r2, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8002b38:	b005      	add	sp, #20
 8002b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b3c:	2380      	movs	r3, #128	; 0x80
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b3e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b40:	6de0      	ldr	r0, [r4, #92]	; 0x5c
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b42:	0011      	movs	r1, r2
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b44:	025b      	lsls	r3, r3, #9
 8002b46:	4303      	orrs	r3, r0
 8002b48:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b4c:	4810      	ldr	r0, [pc, #64]	; (8002b90 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b4e:	4031      	ands	r1, r6
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b50:	4003      	ands	r3, r0
 8002b52:	65e3      	str	r3, [r4, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8002b54:	65e1      	str	r1, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b56:	07d3      	lsls	r3, r2, #31
 8002b58:	d5a2      	bpl.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        tickstart = HAL_GetTick();
 8002b5a:	f7fe faeb 	bl	8001134 <HAL_GetTick>
 8002b5e:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b60:	2202      	movs	r2, #2
 8002b62:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b64:	4213      	tst	r3, r2
 8002b66:	d19b      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fae4 	bl	8001134 <HAL_GetTick>
 8002b6c:	4b09      	ldr	r3, [pc, #36]	; (8002b94 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002b6e:	1bc0      	subs	r0, r0, r7
 8002b70:	4298      	cmp	r0, r3
 8002b72:	d9f5      	bls.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x11c>
 8002b74:	e7a1      	b.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	40021000 	.word	0x40021000
 8002b7c:	40007000 	.word	0x40007000
 8002b80:	fffffcff 	.word	0xfffffcff
 8002b84:	efffffff 	.word	0xefffffff
 8002b88:	ffffcfff 	.word	0xffffcfff
 8002b8c:	ffff3fff 	.word	0xffff3fff
 8002b90:	fffeffff 	.word	0xfffeffff
 8002b94:	00001388 	.word	0x00001388

08002b98 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002b98:	21a0      	movs	r1, #160	; 0xa0
 8002b9a:	6802      	ldr	r2, [r0, #0]
{
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002b9e:	68d3      	ldr	r3, [r2, #12]
{
 8002ba0:	0004      	movs	r4, r0
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002ba2:	438b      	bics	r3, r1
 8002ba4:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002ba6:	f7fe fac5 	bl	8001134 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002baa:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8002bac:	0005      	movs	r5, r0
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002bae:	2620      	movs	r6, #32
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bb0:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002bb2:	6823      	ldr	r3, [r4, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4233      	tst	r3, r6
 8002bb8:	d001      	beq.n	8002bbe <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002bba:	2000      	movs	r0, #0
}
 8002bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bbe:	f7fe fab9 	bl	8001134 <HAL_GetTick>
 8002bc2:	1b40      	subs	r0, r0, r5
 8002bc4:	42b8      	cmp	r0, r7
 8002bc6:	d9f4      	bls.n	8002bb2 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8002bc8:	2003      	movs	r0, #3
 8002bca:	e7f7      	b.n	8002bbc <HAL_RTC_WaitForSynchro+0x24>

08002bcc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002bce:	2640      	movs	r6, #64	; 0x40
 8002bd0:	6803      	ldr	r3, [r0, #0]
{
 8002bd2:	0005      	movs	r5, r0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002bd4:	68da      	ldr	r2, [r3, #12]
  HAL_StatusTypeDef status = HAL_OK;  
 8002bd6:	2400      	movs	r4, #0
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002bd8:	4232      	tst	r2, r6
 8002bda:	d10e      	bne.n	8002bfa <RTC_EnterInitMode+0x2e>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002bdc:	2280      	movs	r2, #128	; 0x80
 8002bde:	68d9      	ldr	r1, [r3, #12]

    tickstart = HAL_GetTick();
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002be0:	27fa      	movs	r7, #250	; 0xfa
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002be2:	430a      	orrs	r2, r1
 8002be4:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002be6:	f7fe faa5 	bl	8001134 <HAL_GetTick>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bea:	00bf      	lsls	r7, r7, #2
    tickstart = HAL_GetTick();
 8002bec:	9001      	str	r0, [sp, #4]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	4233      	tst	r3, r6
 8002bf4:	d101      	bne.n	8002bfa <RTC_EnterInitMode+0x2e>
 8002bf6:	2c03      	cmp	r4, #3
 8002bf8:	d101      	bne.n	8002bfe <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
}
 8002bfa:	0020      	movs	r0, r4
 8002bfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bfe:	f7fe fa99 	bl	8001134 <HAL_GetTick>
 8002c02:	9b01      	ldr	r3, [sp, #4]
 8002c04:	1ac0      	subs	r0, r0, r3
 8002c06:	42b8      	cmp	r0, r7
 8002c08:	d9f1      	bls.n	8002bee <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c0a:	002b      	movs	r3, r5
 8002c0c:	2403      	movs	r4, #3
 8002c0e:	3329      	adds	r3, #41	; 0x29
 8002c10:	701c      	strb	r4, [r3, #0]
 8002c12:	e7ec      	b.n	8002bee <RTC_EnterInitMode+0x22>

08002c14 <RTC_ExitInitMode>:
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c14:	2280      	movs	r2, #128	; 0x80
{
 8002c16:	b570      	push	{r4, r5, r6, lr}
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c18:	4c0f      	ldr	r4, [pc, #60]	; (8002c58 <RTC_ExitInitMode+0x44>)
{
 8002c1a:	0005      	movs	r5, r0
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c1c:	68e3      	ldr	r3, [r4, #12]
 8002c1e:	4393      	bics	r3, r2
 8002c20:	60e3      	str	r3, [r4, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c22:	69a3      	ldr	r3, [r4, #24]
 8002c24:	3a60      	subs	r2, #96	; 0x60
 8002c26:	4213      	tst	r3, r2
 8002c28:	d107      	bne.n	8002c3a <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c2a:	f7ff ffb5 	bl	8002b98 <HAL_RTC_WaitForSynchro>
 8002c2e:	2800      	cmp	r0, #0
 8002c30:	d002      	beq.n	8002c38 <RTC_ExitInitMode+0x24>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c32:	2003      	movs	r0, #3
 8002c34:	3529      	adds	r5, #41	; 0x29
 8002c36:	7028      	strb	r0, [r5, #0]
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
  }

  return status;
}
 8002c38:	bd70      	pop	{r4, r5, r6, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c3a:	69a3      	ldr	r3, [r4, #24]
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	61a3      	str	r3, [r4, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c40:	f7ff ffaa 	bl	8002b98 <HAL_RTC_WaitForSynchro>
 8002c44:	2800      	cmp	r0, #0
 8002c46:	d002      	beq.n	8002c4e <RTC_ExitInitMode+0x3a>
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c48:	2003      	movs	r0, #3
 8002c4a:	3529      	adds	r5, #41	; 0x29
 8002c4c:	7028      	strb	r0, [r5, #0]
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c4e:	2320      	movs	r3, #32
 8002c50:	69a2      	ldr	r2, [r4, #24]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	61a3      	str	r3, [r4, #24]
  return status;
 8002c56:	e7ef      	b.n	8002c38 <RTC_ExitInitMode+0x24>
 8002c58:	40002800 	.word	0x40002800

08002c5c <HAL_RTC_Init>:
{
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_ERROR;
 8002c60:	2001      	movs	r0, #1
  if(hrtc != NULL)
 8002c62:	2c00      	cmp	r4, #0
 8002c64:	d017      	beq.n	8002c96 <HAL_RTC_Init+0x3a>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002c66:	0025      	movs	r5, r4
 8002c68:	3529      	adds	r5, #41	; 0x29
 8002c6a:	782b      	ldrb	r3, [r5, #0]
 8002c6c:	b2da      	uxtb	r2, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <HAL_RTC_Init+0x28>
      hrtc->Lock = HAL_UNLOCKED;
 8002c72:	0023      	movs	r3, r4
 8002c74:	3328      	adds	r3, #40	; 0x28
 8002c76:	701a      	strb	r2, [r3, #0]
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c78:	2388      	movs	r3, #136	; 0x88
 8002c7a:	021b      	lsls	r3, r3, #8
      HAL_RTC_MspInit(hrtc);
 8002c7c:	0020      	movs	r0, r4
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002c7e:	6063      	str	r3, [r4, #4]
      HAL_RTC_MspInit(hrtc);
 8002c80:	f7fe f8b8 	bl	8000df4 <HAL_RTC_MspInit>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002c84:	2302      	movs	r3, #2
 8002c86:	702b      	strb	r3, [r5, #0]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	68da      	ldr	r2, [r3, #12]
 8002c8c:	06d2      	lsls	r2, r2, #27
 8002c8e:	d503      	bpl.n	8002c98 <HAL_RTC_Init+0x3c>
      hrtc->State = HAL_RTC_STATE_READY;
 8002c90:	2301      	movs	r3, #1
 8002c92:	2000      	movs	r0, #0
 8002c94:	702b      	strb	r3, [r5, #0]
}
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c98:	22ca      	movs	r2, #202	; 0xca
 8002c9a:	625a      	str	r2, [r3, #36]	; 0x24
 8002c9c:	3a77      	subs	r2, #119	; 0x77
      status = RTC_EnterInitMode(hrtc);
 8002c9e:	0020      	movs	r0, r4
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8002ca2:	f7ff ff93 	bl	8002bcc <RTC_EnterInitMode>
      if(status == HAL_OK)
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	d125      	bne.n	8002cf6 <HAL_RTC_Init+0x9a>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	4915      	ldr	r1, [pc, #84]	; (8002d04 <HAL_RTC_Init+0xa8>)
 8002cae:	699a      	ldr	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cb0:	6960      	ldr	r0, [r4, #20]
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002cb2:	400a      	ands	r2, r1
 8002cb4:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002cb6:	68a2      	ldr	r2, [r4, #8]
 8002cb8:	6999      	ldr	r1, [r3, #24]
 8002cba:	4302      	orrs	r2, r0
 8002cbc:	69e0      	ldr	r0, [r4, #28]
 8002cbe:	4302      	orrs	r2, r0
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	619a      	str	r2, [r3, #24]
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002cc4:	6922      	ldr	r2, [r4, #16]
        status = RTC_ExitInitMode(hrtc);
 8002cc6:	0020      	movs	r0, r4
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002cc8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002cca:	68e2      	ldr	r2, [r4, #12]
 8002ccc:	6919      	ldr	r1, [r3, #16]
 8002cce:	0412      	lsls	r2, r2, #16
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	611a      	str	r2, [r3, #16]
        status = RTC_ExitInitMode(hrtc);
 8002cd4:	f7ff ff9e 	bl	8002c14 <RTC_ExitInitMode>
      if (status == HAL_OK)
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d10c      	bne.n	8002cf6 <HAL_RTC_Init+0x9a>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002cdc:	6822      	ldr	r2, [r4, #0]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002cde:	6a26      	ldr	r6, [r4, #32]
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002ce0:	6993      	ldr	r3, [r2, #24]
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	08db      	lsrs	r3, r3, #3
 8002ce6:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002ce8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002cea:	6991      	ldr	r1, [r2, #24]
 8002cec:	4333      	orrs	r3, r6
 8002cee:	69a6      	ldr	r6, [r4, #24]
 8002cf0:	4333      	orrs	r3, r6
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	6193      	str	r3, [r2, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cf6:	22ff      	movs	r2, #255	; 0xff
 8002cf8:	6823      	ldr	r3, [r4, #0]
 8002cfa:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002cfc:	2800      	cmp	r0, #0
 8002cfe:	d0c7      	beq.n	8002c90 <HAL_RTC_Init+0x34>
 8002d00:	e7c9      	b.n	8002c96 <HAL_RTC_Init+0x3a>
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	fb8fffbf 	.word	0xfb8fffbf

08002d08 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d08:	0002      	movs	r2, r0
{
 8002d0a:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8002d0c:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8002d0e:	323d      	adds	r2, #61	; 0x3d
 8002d10:	7811      	ldrb	r1, [r2, #0]
 8002d12:	4281      	cmp	r1, r0
 8002d14:	d115      	bne.n	8002d42 <HAL_TIM_Base_Start+0x3a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d16:	2102      	movs	r1, #2
 8002d18:	7011      	strb	r1, [r2, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <HAL_TIM_Base_Start+0x48>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d002      	beq.n	8002d28 <HAL_TIM_Base_Start+0x20>
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <HAL_TIM_Base_Start+0x4c>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d10d      	bne.n	8002d44 <HAL_TIM_Base_Start+0x3c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	490b      	ldr	r1, [pc, #44]	; (8002d58 <HAL_TIM_Base_Start+0x50>)
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8002d2c:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2e:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d30:	2a06      	cmp	r2, #6
 8002d32:	d006      	beq.n	8002d42 <HAL_TIM_Base_Start+0x3a>
 8002d34:	3907      	subs	r1, #7
 8002d36:	428a      	cmp	r2, r1
 8002d38:	d003      	beq.n	8002d42 <HAL_TIM_Base_Start+0x3a>
      __HAL_TIM_ENABLE(htim);
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	6819      	ldr	r1, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	601a      	str	r2, [r3, #0]
}
 8002d42:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	4310      	orrs	r0, r2
 8002d48:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	e7f9      	b.n	8002d42 <HAL_TIM_Base_Start+0x3a>
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	40012c00 	.word	0x40012c00
 8002d54:	40000400 	.word	0x40000400
 8002d58:	00010007 	.word	0x00010007

08002d5c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d5c:	4a19      	ldr	r2, [pc, #100]	; (8002dc4 <TIM_Base_SetConfig+0x68>)
{
 8002d5e:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8002d60:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d62:	4290      	cmp	r0, r2
 8002d64:	d002      	beq.n	8002d6c <TIM_Base_SetConfig+0x10>
 8002d66:	4c18      	ldr	r4, [pc, #96]	; (8002dc8 <TIM_Base_SetConfig+0x6c>)
 8002d68:	42a0      	cmp	r0, r4
 8002d6a:	d108      	bne.n	8002d7e <TIM_Base_SetConfig+0x22>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d6c:	2470      	movs	r4, #112	; 0x70
 8002d6e:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8002d70:	684c      	ldr	r4, [r1, #4]
 8002d72:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d74:	4290      	cmp	r0, r2
 8002d76:	d00b      	beq.n	8002d90 <TIM_Base_SetConfig+0x34>
 8002d78:	4c13      	ldr	r4, [pc, #76]	; (8002dc8 <TIM_Base_SetConfig+0x6c>)
 8002d7a:	42a0      	cmp	r0, r4
 8002d7c:	d008      	beq.n	8002d90 <TIM_Base_SetConfig+0x34>
 8002d7e:	4c13      	ldr	r4, [pc, #76]	; (8002dcc <TIM_Base_SetConfig+0x70>)
 8002d80:	42a0      	cmp	r0, r4
 8002d82:	d005      	beq.n	8002d90 <TIM_Base_SetConfig+0x34>
 8002d84:	4c12      	ldr	r4, [pc, #72]	; (8002dd0 <TIM_Base_SetConfig+0x74>)
 8002d86:	42a0      	cmp	r0, r4
 8002d88:	d002      	beq.n	8002d90 <TIM_Base_SetConfig+0x34>
 8002d8a:	4c12      	ldr	r4, [pc, #72]	; (8002dd4 <TIM_Base_SetConfig+0x78>)
 8002d8c:	42a0      	cmp	r0, r4
 8002d8e:	d103      	bne.n	8002d98 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d90:	4c11      	ldr	r4, [pc, #68]	; (8002dd8 <TIM_Base_SetConfig+0x7c>)
 8002d92:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d94:	68cc      	ldr	r4, [r1, #12]
 8002d96:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	2480      	movs	r4, #128	; 0x80
 8002d9a:	43a3      	bics	r3, r4
 8002d9c:	694c      	ldr	r4, [r1, #20]
 8002d9e:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 8002da0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002da2:	688b      	ldr	r3, [r1, #8]
 8002da4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002da6:	680b      	ldr	r3, [r1, #0]
 8002da8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002daa:	4290      	cmp	r0, r2
 8002dac:	d005      	beq.n	8002dba <TIM_Base_SetConfig+0x5e>
 8002dae:	4b08      	ldr	r3, [pc, #32]	; (8002dd0 <TIM_Base_SetConfig+0x74>)
 8002db0:	4298      	cmp	r0, r3
 8002db2:	d002      	beq.n	8002dba <TIM_Base_SetConfig+0x5e>
 8002db4:	4b07      	ldr	r3, [pc, #28]	; (8002dd4 <TIM_Base_SetConfig+0x78>)
 8002db6:	4298      	cmp	r0, r3
 8002db8:	d101      	bne.n	8002dbe <TIM_Base_SetConfig+0x62>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dba:	690b      	ldr	r3, [r1, #16]
 8002dbc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	6143      	str	r3, [r0, #20]
}
 8002dc2:	bd10      	pop	{r4, pc}
 8002dc4:	40012c00 	.word	0x40012c00
 8002dc8:	40000400 	.word	0x40000400
 8002dcc:	40002000 	.word	0x40002000
 8002dd0:	40014400 	.word	0x40014400
 8002dd4:	40014800 	.word	0x40014800
 8002dd8:	fffffcff 	.word	0xfffffcff

08002ddc <HAL_TIM_Base_Init>:
{
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002de0:	2001      	movs	r0, #1
  if (htim == NULL)
 8002de2:	2c00      	cmp	r4, #0
 8002de4:	d023      	beq.n	8002e2e <HAL_TIM_Base_Init+0x52>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002de6:	0025      	movs	r5, r4
 8002de8:	353d      	adds	r5, #61	; 0x3d
 8002dea:	782b      	ldrb	r3, [r5, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d105      	bne.n	8002dfe <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8002df2:	0023      	movs	r3, r4
 8002df4:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002df6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8002df8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8002dfa:	f7fe f87f 	bl	8000efc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfe:	2302      	movs	r3, #2
 8002e00:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e02:	6820      	ldr	r0, [r4, #0]
 8002e04:	1d21      	adds	r1, r4, #4
 8002e06:	f7ff ffa9 	bl	8002d5c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e0a:	0022      	movs	r2, r4
 8002e0c:	2301      	movs	r3, #1
  return HAL_OK;
 8002e0e:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e10:	3248      	adds	r2, #72	; 0x48
 8002e12:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e14:	3447      	adds	r4, #71	; 0x47
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e16:	3a0a      	subs	r2, #10
 8002e18:	7013      	strb	r3, [r2, #0]
 8002e1a:	7053      	strb	r3, [r2, #1]
 8002e1c:	7093      	strb	r3, [r2, #2]
 8002e1e:	70d3      	strb	r3, [r2, #3]
 8002e20:	7113      	strb	r3, [r2, #4]
 8002e22:	7153      	strb	r3, [r2, #5]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e24:	7193      	strb	r3, [r2, #6]
 8002e26:	71d3      	strb	r3, [r2, #7]
 8002e28:	7213      	strb	r3, [r2, #8]
 8002e2a:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8002e2c:	702b      	strb	r3, [r5, #0]
}
 8002e2e:	bd70      	pop	{r4, r5, r6, pc}

08002e30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002e30:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e32:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	2201      	movs	r2, #1
 8002e38:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002e3c:	25c0      	movs	r5, #192	; 0xc0
 8002e3e:	6801      	ldr	r1, [r0, #0]
 8002e40:	680b      	ldr	r3, [r1, #0]
 8002e42:	43ab      	bics	r3, r5
 8002e44:	600b      	str	r3, [r1, #0]
 8002e46:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e4a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8002e52:	6802      	ldr	r2, [r0, #0]
 8002e54:	4c04      	ldr	r4, [pc, #16]	; (8002e68 <UART_EndTxTransfer+0x38>)
 8002e56:	6893      	ldr	r3, [r2, #8]
 8002e58:	4023      	ands	r3, r4
 8002e5a:	6093      	str	r3, [r2, #8]
 8002e5c:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e60:	2320      	movs	r3, #32
 8002e62:	3088      	adds	r0, #136	; 0x88
 8002e64:	6003      	str	r3, [r0, #0]
}
 8002e66:	bd30      	pop	{r4, r5, pc}
 8002e68:	ff7fffff 	.word	0xff7fffff

08002e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e6c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e6e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e72:	2201      	movs	r2, #1
 8002e74:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e78:	6801      	ldr	r1, [r0, #0]
 8002e7a:	4d13      	ldr	r5, [pc, #76]	; (8002ec8 <UART_EndRxTransfer+0x5c>)
 8002e7c:	680b      	ldr	r3, [r1, #0]
 8002e7e:	402b      	ands	r3, r5
 8002e80:	600b      	str	r3, [r1, #0]
 8002e82:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e86:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e8e:	6802      	ldr	r2, [r0, #0]
 8002e90:	4c0e      	ldr	r4, [pc, #56]	; (8002ecc <UART_EndRxTransfer+0x60>)
 8002e92:	6893      	ldr	r3, [r2, #8]
 8002e94:	4023      	ands	r3, r4
 8002e96:	6093      	str	r3, [r2, #8]
 8002e98:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e9c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d10a      	bne.n	8002eb8 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea2:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eaa:	2410      	movs	r4, #16
 8002eac:	6802      	ldr	r2, [r0, #0]
 8002eae:	6813      	ldr	r3, [r2, #0]
 8002eb0:	43a3      	bics	r3, r4
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	0003      	movs	r3, r0
 8002eba:	2220      	movs	r2, #32
 8002ebc:	338c      	adds	r3, #140	; 0x8c
 8002ebe:	601a      	str	r2, [r3, #0]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ec4:	6743      	str	r3, [r0, #116]	; 0x74
}
 8002ec6:	bd30      	pop	{r4, r5, pc}
 8002ec8:	fffffedf 	.word	0xfffffedf
 8002ecc:	effffffe 	.word	0xeffffffe

08002ed0 <HAL_UART_TxCpltCallback>:
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_UART_RxCpltCallback>:
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_UART_RxHalfCpltCallback>:
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_UART_ErrorCallback>:
 8002ed6:	4770      	bx	lr

08002ed8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ed8:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002eda:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002edc:	0023      	movs	r3, r4
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002ede:	0022      	movs	r2, r4
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002ee0:	3388      	adds	r3, #136	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002ee2:	328c      	adds	r2, #140	; 0x8c
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002ee4:	681b      	ldr	r3, [r3, #0]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002ee6:	6815      	ldr	r5, [r2, #0]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8002ee8:	6822      	ldr	r2, [r4, #0]
 8002eea:	6892      	ldr	r2, [r2, #8]
 8002eec:	0612      	lsls	r2, r2, #24
 8002eee:	d508      	bpl.n	8002f02 <UART_DMAError+0x2a>
 8002ef0:	2b21      	cmp	r3, #33	; 0x21
 8002ef2:	d106      	bne.n	8002f02 <UART_DMAError+0x2a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8002ef4:	0023      	movs	r3, r4
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	3356      	adds	r3, #86	; 0x56
    UART_EndTxTransfer(huart);
 8002efa:	0020      	movs	r0, r4
    huart->TxXferCount = 0U;
 8002efc:	801a      	strh	r2, [r3, #0]
    UART_EndTxTransfer(huart);
 8002efe:	f7ff ff97 	bl	8002e30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8002f02:	6823      	ldr	r3, [r4, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	065b      	lsls	r3, r3, #25
 8002f08:	d508      	bpl.n	8002f1c <UART_DMAError+0x44>
 8002f0a:	2d22      	cmp	r5, #34	; 0x22
 8002f0c:	d106      	bne.n	8002f1c <UART_DMAError+0x44>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8002f0e:	0023      	movs	r3, r4
 8002f10:	2200      	movs	r2, #0
 8002f12:	335e      	adds	r3, #94	; 0x5e
    UART_EndRxTransfer(huart);
 8002f14:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8002f16:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8002f18:	f7ff ffa8 	bl	8002e6c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f1c:	0022      	movs	r2, r4
 8002f1e:	2310      	movs	r3, #16
 8002f20:	3290      	adds	r2, #144	; 0x90
 8002f22:	6811      	ldr	r1, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f24:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f26:	430b      	orrs	r3, r1
 8002f28:	6013      	str	r3, [r2, #0]
  HAL_UART_ErrorCallback(huart);
 8002f2a:	f7ff ffd4 	bl	8002ed6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f2e:	bd70      	pop	{r4, r5, r6, pc}

08002f30 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002f30:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8002f32:	2300      	movs	r3, #0
 8002f34:	0002      	movs	r2, r0
{
 8002f36:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8002f38:	325e      	adds	r2, #94	; 0x5e
 8002f3a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8002f3c:	3a08      	subs	r2, #8
 8002f3e:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f40:	f7ff ffc9 	bl	8002ed6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f44:	bd10      	pop	{r4, pc}
	...

08002f48 <HAL_UART_IRQHandler>:
{
 8002f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f4a:	6801      	ldr	r1, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f4c:	4dc0      	ldr	r5, [pc, #768]	; (8003250 <HAL_UART_IRQHandler+0x308>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f4e:	69cb      	ldr	r3, [r1, #28]
{
 8002f50:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f52:	680a      	ldr	r2, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f54:	6888      	ldr	r0, [r1, #8]
  if (errorflags == 0U)
 8002f56:	422b      	tst	r3, r5
 8002f58:	d110      	bne.n	8002f7c <HAL_UART_IRQHandler+0x34>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f5a:	2520      	movs	r5, #32
 8002f5c:	422b      	tst	r3, r5
 8002f5e:	d100      	bne.n	8002f62 <HAL_UART_IRQHandler+0x1a>
 8002f60:	e09a      	b.n	8003098 <HAL_UART_IRQHandler+0x150>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f62:	2680      	movs	r6, #128	; 0x80
 8002f64:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f66:	4015      	ands	r5, r2
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f68:	4006      	ands	r6, r0
 8002f6a:	4335      	orrs	r5, r6
 8002f6c:	d100      	bne.n	8002f70 <HAL_UART_IRQHandler+0x28>
 8002f6e:	e093      	b.n	8003098 <HAL_UART_IRQHandler+0x150>
      if (huart->RxISR != NULL)
 8002f70:	6f63      	ldr	r3, [r4, #116]	; 0x74
      huart->TxISR(huart);
 8002f72:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d000      	beq.n	8002f7a <HAL_UART_IRQHandler+0x32>
 8002f78:	e083      	b.n	8003082 <HAL_UART_IRQHandler+0x13a>
 8002f7a:	e083      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f7c:	4db5      	ldr	r5, [pc, #724]	; (8003254 <HAL_UART_IRQHandler+0x30c>)
 8002f7e:	4005      	ands	r5, r0
 8002f80:	46ac      	mov	ip, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f82:	4666      	mov	r6, ip
 8002f84:	4db4      	ldr	r5, [pc, #720]	; (8003258 <HAL_UART_IRQHandler+0x310>)
 8002f86:	4015      	ands	r5, r2
 8002f88:	4335      	orrs	r5, r6
 8002f8a:	d100      	bne.n	8002f8e <HAL_UART_IRQHandler+0x46>
 8002f8c:	e084      	b.n	8003098 <HAL_UART_IRQHandler+0x150>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f8e:	2501      	movs	r5, #1
 8002f90:	422b      	tst	r3, r5
 8002f92:	d007      	beq.n	8002fa4 <HAL_UART_IRQHandler+0x5c>
 8002f94:	05d6      	lsls	r6, r2, #23
 8002f96:	d505      	bpl.n	8002fa4 <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f98:	0026      	movs	r6, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f9a:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f9c:	3690      	adds	r6, #144	; 0x90
 8002f9e:	6837      	ldr	r7, [r6, #0]
 8002fa0:	433d      	orrs	r5, r7
 8002fa2:	6035      	str	r5, [r6, #0]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fa4:	0025      	movs	r5, r4
 8002fa6:	2602      	movs	r6, #2
 8002fa8:	3590      	adds	r5, #144	; 0x90
 8002faa:	9501      	str	r5, [sp, #4]
 8002fac:	4233      	tst	r3, r6
 8002fae:	d007      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x78>
 8002fb0:	07c5      	lsls	r5, r0, #31
 8002fb2:	d505      	bpl.n	8002fc0 <HAL_UART_IRQHandler+0x78>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fb4:	9d01      	ldr	r5, [sp, #4]
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fb6:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fb8:	682f      	ldr	r7, [r5, #0]
 8002fba:	19b6      	adds	r6, r6, r6
 8002fbc:	433e      	orrs	r6, r7
 8002fbe:	602e      	str	r6, [r5, #0]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fc0:	2604      	movs	r6, #4
 8002fc2:	4233      	tst	r3, r6
 8002fc4:	d009      	beq.n	8002fda <HAL_UART_IRQHandler+0x92>
 8002fc6:	07c5      	lsls	r5, r0, #31
 8002fc8:	d507      	bpl.n	8002fda <HAL_UART_IRQHandler+0x92>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fca:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fcc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fce:	3790      	adds	r7, #144	; 0x90
 8002fd0:	683e      	ldr	r6, [r7, #0]
 8002fd2:	0035      	movs	r5, r6
 8002fd4:	2602      	movs	r6, #2
 8002fd6:	432e      	orrs	r6, r5
 8002fd8:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fda:	2608      	movs	r6, #8
 8002fdc:	4233      	tst	r3, r6
 8002fde:	d00a      	beq.n	8002ff6 <HAL_UART_IRQHandler+0xae>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002fe0:	2720      	movs	r7, #32
 8002fe2:	4665      	mov	r5, ip
 8002fe4:	4017      	ands	r7, r2
 8002fe6:	432f      	orrs	r7, r5
 8002fe8:	d005      	beq.n	8002ff6 <HAL_UART_IRQHandler+0xae>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fea:	0027      	movs	r7, r4
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fec:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002fee:	3790      	adds	r7, #144	; 0x90
 8002ff0:	683d      	ldr	r5, [r7, #0]
 8002ff2:	432e      	orrs	r6, r5
 8002ff4:	603e      	str	r6, [r7, #0]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ff6:	2780      	movs	r7, #128	; 0x80
 8002ff8:	0026      	movs	r6, r4
 8002ffa:	013f      	lsls	r7, r7, #4
 8002ffc:	3690      	adds	r6, #144	; 0x90
 8002ffe:	423b      	tst	r3, r7
 8003000:	d006      	beq.n	8003010 <HAL_UART_IRQHandler+0xc8>
 8003002:	0155      	lsls	r5, r2, #5
 8003004:	d504      	bpl.n	8003010 <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003006:	620f      	str	r7, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003008:	2120      	movs	r1, #32
 800300a:	6837      	ldr	r7, [r6, #0]
 800300c:	4339      	orrs	r1, r7
 800300e:	6031      	str	r1, [r6, #0]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003010:	6831      	ldr	r1, [r6, #0]
 8003012:	2900      	cmp	r1, #0
 8003014:	d036      	beq.n	8003084 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003016:	2120      	movs	r1, #32
 8003018:	420b      	tst	r3, r1
 800301a:	d00a      	beq.n	8003032 <HAL_UART_IRQHandler+0xea>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800301c:	4011      	ands	r1, r2
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800301e:	2280      	movs	r2, #128	; 0x80
 8003020:	0552      	lsls	r2, r2, #21
 8003022:	4010      	ands	r0, r2
 8003024:	4301      	orrs	r1, r0
 8003026:	d004      	beq.n	8003032 <HAL_UART_IRQHandler+0xea>
        if (huart->RxISR != NULL)
 8003028:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_UART_IRQHandler+0xea>
          huart->RxISR(huart);
 800302e:	0020      	movs	r0, r4
 8003030:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003032:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8003034:	9b01      	ldr	r3, [sp, #4]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003036:	2740      	movs	r7, #64	; 0x40
      errorcode = huart->ErrorCode;
 8003038:	681b      	ldr	r3, [r3, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800303a:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800303c:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800303e:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003040:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8003042:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003044:	431e      	orrs	r6, r3
 8003046:	d022      	beq.n	800308e <HAL_UART_IRQHandler+0x146>
        UART_EndRxTransfer(huart);
 8003048:	f7ff ff10 	bl	8002e6c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	423b      	tst	r3, r7
 8003052:	d018      	beq.n	8003086 <HAL_UART_IRQHandler+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003054:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003058:	2301      	movs	r3, #1
 800305a:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800305e:	0025      	movs	r5, r4
 8003060:	cd04      	ldmia	r5!, {r2}
 8003062:	6893      	ldr	r3, [r2, #8]
 8003064:	43bb      	bics	r3, r7
 8003066:	6093      	str	r3, [r2, #8]
 8003068:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 800306c:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 800306e:	2800      	cmp	r0, #0
 8003070:	d009      	beq.n	8003086 <HAL_UART_IRQHandler+0x13e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003072:	4b7a      	ldr	r3, [pc, #488]	; (800325c <HAL_UART_IRQHandler+0x314>)
 8003074:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003076:	f7fe fd21 	bl	8001abc <HAL_DMA_Abort_IT>
 800307a:	2800      	cmp	r0, #0
 800307c:	d002      	beq.n	8003084 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800307e:	6fe8      	ldr	r0, [r5, #124]	; 0x7c
 8003080:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003082:	4798      	blx	r3
}
 8003084:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003086:	0020      	movs	r0, r4
 8003088:	f7ff ff25 	bl	8002ed6 <HAL_UART_ErrorCallback>
 800308c:	e7fa      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
        HAL_UART_ErrorCallback(huart);
 800308e:	f7ff ff22 	bl	8002ed6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003092:	9b01      	ldr	r3, [sp, #4]
 8003094:	601e      	str	r6, [r3, #0]
 8003096:	e7f5      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003098:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800309a:	2d01      	cmp	r5, #1
 800309c:	d000      	beq.n	80030a0 <HAL_UART_IRQHandler+0x158>
 800309e:	e09e      	b.n	80031de <HAL_UART_IRQHandler+0x296>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030a0:	2610      	movs	r6, #16
 80030a2:	4233      	tst	r3, r6
 80030a4:	d100      	bne.n	80030a8 <HAL_UART_IRQHandler+0x160>
 80030a6:	e09a      	b.n	80031de <HAL_UART_IRQHandler+0x296>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030a8:	4232      	tst	r2, r6
 80030aa:	d100      	bne.n	80030ae <HAL_UART_IRQHandler+0x166>
 80030ac:	e097      	b.n	80031de <HAL_UART_IRQHandler+0x296>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030ae:	620e      	str	r6, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b0:	688b      	ldr	r3, [r1, #8]
 80030b2:	2240      	movs	r2, #64	; 0x40
 80030b4:	0018      	movs	r0, r3
 80030b6:	4010      	ands	r0, r2
 80030b8:	4213      	tst	r3, r2
 80030ba:	d056      	beq.n	800316a <HAL_UART_IRQHandler+0x222>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030bc:	1d20      	adds	r0, r4, #4
 80030be:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80030c0:	6819      	ldr	r1, [r3, #0]
 80030c2:	684b      	ldr	r3, [r1, #4]
 80030c4:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d0dc      	beq.n	8003084 <HAL_UART_IRQHandler+0x13c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030ca:	0027      	movs	r7, r4
 80030cc:	375c      	adds	r7, #92	; 0x5c
 80030ce:	883f      	ldrh	r7, [r7, #0]
 80030d0:	429f      	cmp	r7, r3
 80030d2:	d9d7      	bls.n	8003084 <HAL_UART_IRQHandler+0x13c>
        huart->RxXferCount = nb_remaining_rx_data;
 80030d4:	0027      	movs	r7, r4
 80030d6:	375e      	adds	r7, #94	; 0x5e
 80030d8:	803b      	strh	r3, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80030da:	6809      	ldr	r1, [r1, #0]
 80030dc:	2320      	movs	r3, #32
 80030de:	000f      	movs	r7, r1
 80030e0:	401f      	ands	r7, r3
 80030e2:	9701      	str	r7, [sp, #4]
 80030e4:	4219      	tst	r1, r3
 80030e6:	d132      	bne.n	800314e <HAL_UART_IRQHandler+0x206>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030f0:	6821      	ldr	r1, [r4, #0]
 80030f2:	4e5b      	ldr	r6, [pc, #364]	; (8003260 <HAL_UART_IRQHandler+0x318>)
 80030f4:	6809      	ldr	r1, [r1, #0]
 80030f6:	4031      	ands	r1, r6
 80030f8:	6826      	ldr	r6, [r4, #0]
 80030fa:	6031      	str	r1, [r6, #0]
 80030fc:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003100:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003104:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003108:	6827      	ldr	r7, [r4, #0]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	43a9      	bics	r1, r5
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003114:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003118:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800311c:	6827      	ldr	r7, [r4, #0]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	4391      	bics	r1, r2
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	f38c 8810 	msr	PRIMASK, ip
          huart->RxState = HAL_UART_STATE_READY;
 8003128:	0022      	movs	r2, r4
 800312a:	328c      	adds	r2, #140	; 0x8c
 800312c:	6013      	str	r3, [r2, #0]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800312e:	9b01      	ldr	r3, [sp, #4]
 8003130:	66e3      	str	r3, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003132:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003136:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800313a:	6822      	ldr	r2, [r4, #0]
 800313c:	350f      	adds	r5, #15
 800313e:	6813      	ldr	r3, [r2, #0]
 8003140:	43ab      	bics	r3, r5
 8003142:	6013      	str	r3, [r2, #0]
 8003144:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003148:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800314a:	f7fe fc79 	bl	8001a40 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800314e:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003150:	0022      	movs	r2, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003152:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003154:	0023      	movs	r3, r4
 8003156:	325c      	adds	r2, #92	; 0x5c
 8003158:	335e      	adds	r3, #94	; 0x5e
 800315a:	881b      	ldrh	r3, [r3, #0]
 800315c:	8811      	ldrh	r1, [r2, #0]
 800315e:	1ac9      	subs	r1, r1, r3
 8003160:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003162:	0020      	movs	r0, r4
 8003164:	f7fd f982 	bl	800046c <HAL_UARTEx_RxEventCallback>
 8003168:	e78c      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800316a:	0022      	movs	r2, r4
 800316c:	325e      	adds	r2, #94	; 0x5e
 800316e:	8813      	ldrh	r3, [r2, #0]
      if ((huart->RxXferCount > 0U)
 8003170:	8812      	ldrh	r2, [r2, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003172:	b29b      	uxth	r3, r3
      if ((huart->RxXferCount > 0U)
 8003174:	2a00      	cmp	r2, #0
 8003176:	d100      	bne.n	800317a <HAL_UART_IRQHandler+0x232>
 8003178:	e784      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800317a:	0022      	movs	r2, r4
 800317c:	325c      	adds	r2, #92	; 0x5c
 800317e:	8811      	ldrh	r1, [r2, #0]
 8003180:	1ac9      	subs	r1, r1, r3
 8003182:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003184:	2900      	cmp	r1, #0
 8003186:	d100      	bne.n	800318a <HAL_UART_IRQHandler+0x242>
 8003188:	e77c      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800318a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318e:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003192:	6822      	ldr	r2, [r4, #0]
 8003194:	4e33      	ldr	r6, [pc, #204]	; (8003264 <HAL_UART_IRQHandler+0x31c>)
 8003196:	6813      	ldr	r3, [r2, #0]
 8003198:	4033      	ands	r3, r6
 800319a:	6013      	str	r3, [r2, #0]
 800319c:	f387 8810 	msr	PRIMASK, r7
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a4:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80031a8:	6822      	ldr	r2, [r4, #0]
 80031aa:	4e2f      	ldr	r6, [pc, #188]	; (8003268 <HAL_UART_IRQHandler+0x320>)
 80031ac:	6893      	ldr	r3, [r2, #8]
 80031ae:	4033      	ands	r3, r6
 80031b0:	6093      	str	r3, [r2, #8]
 80031b2:	f387 8810 	msr	PRIMASK, r7
        huart->RxState = HAL_UART_STATE_READY;
 80031b6:	0023      	movs	r3, r4
 80031b8:	2220      	movs	r2, #32
 80031ba:	338c      	adds	r3, #140	; 0x8c
 80031bc:	601a      	str	r2, [r3, #0]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031be:	66e0      	str	r0, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80031c0:	6760      	str	r0, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031c2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c6:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ca:	2510      	movs	r5, #16
 80031cc:	6822      	ldr	r2, [r4, #0]
 80031ce:	6813      	ldr	r3, [r2, #0]
 80031d0:	43ab      	bics	r3, r5
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031d8:	2302      	movs	r3, #2
 80031da:	6723      	str	r3, [r4, #112]	; 0x70
 80031dc:	e7c1      	b.n	8003162 <HAL_UART_IRQHandler+0x21a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80031de:	2580      	movs	r5, #128	; 0x80
 80031e0:	036d      	lsls	r5, r5, #13
 80031e2:	422b      	tst	r3, r5
 80031e4:	d006      	beq.n	80031f4 <HAL_UART_IRQHandler+0x2ac>
 80031e6:	0246      	lsls	r6, r0, #9
 80031e8:	d504      	bpl.n	80031f4 <HAL_UART_IRQHandler+0x2ac>
    HAL_UARTEx_WakeupCallback(huart);
 80031ea:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031ec:	620d      	str	r5, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80031ee:	f000 fb77 	bl	80038e0 <HAL_UARTEx_WakeupCallback>
    return;
 80031f2:	e747      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80031f4:	2180      	movs	r1, #128	; 0x80
 80031f6:	420b      	tst	r3, r1
 80031f8:	d007      	beq.n	800320a <HAL_UART_IRQHandler+0x2c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80031fa:	2580      	movs	r5, #128	; 0x80
 80031fc:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80031fe:	4011      	ands	r1, r2
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003200:	4028      	ands	r0, r5
 8003202:	4308      	orrs	r0, r1
 8003204:	d001      	beq.n	800320a <HAL_UART_IRQHandler+0x2c2>
    if (huart->TxISR != NULL)
 8003206:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8003208:	e6b3      	b.n	8002f72 <HAL_UART_IRQHandler+0x2a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800320a:	2140      	movs	r1, #64	; 0x40
 800320c:	420b      	tst	r3, r1
 800320e:	d016      	beq.n	800323e <HAL_UART_IRQHandler+0x2f6>
 8003210:	420a      	tst	r2, r1
 8003212:	d014      	beq.n	800323e <HAL_UART_IRQHandler+0x2f6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003214:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003218:	2301      	movs	r3, #1
 800321a:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	6813      	ldr	r3, [r2, #0]
 8003222:	438b      	bics	r3, r1
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800322a:	0023      	movs	r3, r4
 800322c:	2220      	movs	r2, #32
 800322e:	3388      	adds	r3, #136	; 0x88
 8003230:	601a      	str	r2, [r3, #0]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003232:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003234:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003236:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8003238:	f7ff fe4a 	bl	8002ed0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800323c:	e722      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800323e:	0219      	lsls	r1, r3, #8
 8003240:	d514      	bpl.n	800326c <HAL_UART_IRQHandler+0x324>
 8003242:	0051      	lsls	r1, r2, #1
 8003244:	d512      	bpl.n	800326c <HAL_UART_IRQHandler+0x324>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003246:	0020      	movs	r0, r4
 8003248:	f000 fb4c 	bl	80038e4 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800324c:	e71a      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	0000080f 	.word	0x0000080f
 8003254:	10000001 	.word	0x10000001
 8003258:	04000120 	.word	0x04000120
 800325c:	08002f31 	.word	0x08002f31
 8003260:	fffffeff 	.word	0xfffffeff
 8003264:	fffffedf 	.word	0xfffffedf
 8003268:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800326c:	01db      	lsls	r3, r3, #7
 800326e:	d400      	bmi.n	8003272 <HAL_UART_IRQHandler+0x32a>
 8003270:	e708      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
 8003272:	2a00      	cmp	r2, #0
 8003274:	db00      	blt.n	8003278 <HAL_UART_IRQHandler+0x330>
 8003276:	e705      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003278:	0020      	movs	r0, r4
 800327a:	f000 fb32 	bl	80038e2 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800327e:	e701      	b.n	8003084 <HAL_UART_IRQHandler+0x13c>

08003280 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003280:	2301      	movs	r3, #1
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003282:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8003284:	b510      	push	{r4, lr}
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003286:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003288:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800328a:	2b01      	cmp	r3, #1
 800328c:	d106      	bne.n	800329c <UART_DMARxHalfCplt+0x1c>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800328e:	0003      	movs	r3, r0
 8003290:	335c      	adds	r3, #92	; 0x5c
 8003292:	8819      	ldrh	r1, [r3, #0]
 8003294:	0849      	lsrs	r1, r1, #1
 8003296:	f7fd f8e9 	bl	800046c <HAL_UARTEx_RxEventCallback>
}
 800329a:	bd10      	pop	{r4, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800329c:	f7ff fe1a 	bl	8002ed4 <HAL_UART_RxHalfCpltCallback>
}
 80032a0:	e7fb      	b.n	800329a <UART_DMARxHalfCplt+0x1a>
	...

080032a4 <UART_DMAReceiveCplt>:
{
 80032a4:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2220      	movs	r2, #32
 80032aa:	681b      	ldr	r3, [r3, #0]
{
 80032ac:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80032ae:	0019      	movs	r1, r3
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032b0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80032b2:	4011      	ands	r1, r2
 80032b4:	4213      	tst	r3, r2
 80032b6:	d134      	bne.n	8003322 <UART_DMAReceiveCplt+0x7e>
    huart->RxXferCount = 0U;
 80032b8:	0003      	movs	r3, r0
 80032ba:	335e      	adds	r3, #94	; 0x5e
 80032bc:	8019      	strh	r1, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032be:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c2:	2301      	movs	r3, #1
 80032c4:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032c8:	6804      	ldr	r4, [r0, #0]
 80032ca:	4e1d      	ldr	r6, [pc, #116]	; (8003340 <UART_DMAReceiveCplt+0x9c>)
 80032cc:	6821      	ldr	r1, [r4, #0]
 80032ce:	4031      	ands	r1, r6
 80032d0:	6021      	str	r1, [r4, #0]
 80032d2:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032d6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032de:	6804      	ldr	r4, [r0, #0]
 80032e0:	68a1      	ldr	r1, [r4, #8]
 80032e2:	4399      	bics	r1, r3
 80032e4:	60a1      	str	r1, [r4, #8]
 80032e6:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ee:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032f2:	2540      	movs	r5, #64	; 0x40
 80032f4:	6801      	ldr	r1, [r0, #0]
 80032f6:	688b      	ldr	r3, [r1, #8]
 80032f8:	43ab      	bics	r3, r5
 80032fa:	608b      	str	r3, [r1, #8]
 80032fc:	f384 8810 	msr	PRIMASK, r4
    huart->RxState = HAL_UART_STATE_READY;
 8003300:	0003      	movs	r3, r0
 8003302:	338c      	adds	r3, #140	; 0x8c
 8003304:	601a      	str	r2, [r3, #0]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003306:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10a      	bne.n	8003322 <UART_DMAReceiveCplt+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800330c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003310:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003314:	2410      	movs	r4, #16
 8003316:	6802      	ldr	r2, [r0, #0]
 8003318:	6813      	ldr	r3, [r2, #0]
 800331a:	43a3      	bics	r3, r4
 800331c:	6013      	str	r3, [r2, #0]
 800331e:	f381 8810 	msr	PRIMASK, r1
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003322:	2300      	movs	r3, #0
 8003324:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003326:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8003328:	2b01      	cmp	r3, #1
 800332a:	d105      	bne.n	8003338 <UART_DMAReceiveCplt+0x94>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800332c:	0003      	movs	r3, r0
 800332e:	335c      	adds	r3, #92	; 0x5c
 8003330:	8819      	ldrh	r1, [r3, #0]
 8003332:	f7fd f89b 	bl	800046c <HAL_UARTEx_RxEventCallback>
}
 8003336:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_RxCpltCallback(huart);
 8003338:	f7ff fdcb 	bl	8002ed2 <HAL_UART_RxCpltCallback>
}
 800333c:	e7fb      	b.n	8003336 <UART_DMAReceiveCplt+0x92>
 800333e:	46c0      	nop			; (mov r8, r8)
 8003340:	fffffeff 	.word	0xfffffeff

08003344 <UART_SetConfig>:
{
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003348:	6925      	ldr	r5, [r4, #16]
 800334a:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800334c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800334e:	4329      	orrs	r1, r5
 8003350:	6965      	ldr	r5, [r4, #20]
 8003352:	69c3      	ldr	r3, [r0, #28]
 8003354:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003356:	6810      	ldr	r0, [r2, #0]
 8003358:	4d48      	ldr	r5, [pc, #288]	; (800347c <UART_SetConfig+0x138>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800335a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800335c:	4028      	ands	r0, r5
 800335e:	4301      	orrs	r1, r0
 8003360:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003362:	6851      	ldr	r1, [r2, #4]
 8003364:	4846      	ldr	r0, [pc, #280]	; (8003480 <UART_SetConfig+0x13c>)
    tmpreg |= huart->Init.OneBitSampling;
 8003366:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003368:	4001      	ands	r1, r0
 800336a:	68e0      	ldr	r0, [r4, #12]
 800336c:	4301      	orrs	r1, r0
 800336e:	6051      	str	r1, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8003370:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003372:	6890      	ldr	r0, [r2, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8003374:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003376:	4d43      	ldr	r5, [pc, #268]	; (8003484 <UART_SetConfig+0x140>)
 8003378:	4028      	ands	r0, r5
 800337a:	4301      	orrs	r1, r0
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800337c:	200f      	movs	r0, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800337e:	6091      	str	r1, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003380:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003382:	4381      	bics	r1, r0
 8003384:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003386:	4301      	orrs	r1, r0
 8003388:	62d1      	str	r1, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800338a:	493f      	ldr	r1, [pc, #252]	; (8003488 <UART_SetConfig+0x144>)
 800338c:	428a      	cmp	r2, r1
 800338e:	d115      	bne.n	80033bc <UART_SetConfig+0x78>
 8003390:	2103      	movs	r1, #3
 8003392:	4a3e      	ldr	r2, [pc, #248]	; (800348c <UART_SetConfig+0x148>)
 8003394:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003396:	400a      	ands	r2, r1
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	3a01      	subs	r2, #1
 800339c:	0209      	lsls	r1, r1, #8
 800339e:	2a02      	cmp	r2, #2
 80033a0:	d85f      	bhi.n	8003462 <UART_SetConfig+0x11e>
 80033a2:	483b      	ldr	r0, [pc, #236]	; (8003490 <UART_SetConfig+0x14c>)
 80033a4:	5c80      	ldrb	r0, [r0, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a6:	428b      	cmp	r3, r1
 80033a8:	d014      	beq.n	80033d4 <UART_SetConfig+0x90>
    switch (clocksource)
 80033aa:	2808      	cmp	r0, #8
 80033ac:	d857      	bhi.n	800345e <UART_SetConfig+0x11a>
 80033ae:	f7fc fea7 	bl	8000100 <__gnu_thumb1_case_uqi>
 80033b2:	560c      	.short	0x560c
 80033b4:	56515654 	.word	0x56515654
 80033b8:	5656      	.short	0x5656
 80033ba:	3b          	.byte	0x3b
 80033bb:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033bc:	4935      	ldr	r1, [pc, #212]	; (8003494 <UART_SetConfig+0x150>)
 80033be:	428a      	cmp	r2, r1
 80033c0:	d14d      	bne.n	800345e <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033c2:	2280      	movs	r2, #128	; 0x80
 80033c4:	0212      	lsls	r2, r2, #8
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d04d      	beq.n	8003466 <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ca:	f7ff fb27 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80033ce:	2800      	cmp	r0, #0
 80033d0:	d04d      	beq.n	800346e <UART_SetConfig+0x12a>
 80033d2:	e02b      	b.n	800342c <UART_SetConfig+0xe8>
    switch (clocksource)
 80033d4:	2808      	cmp	r0, #8
 80033d6:	d842      	bhi.n	800345e <UART_SetConfig+0x11a>
 80033d8:	f7fc fe92 	bl	8000100 <__gnu_thumb1_case_uqi>
 80033dc:	41084145 	.word	0x41084145
 80033e0:	41414105 	.word	0x41414105
 80033e4:	09          	.byte	0x09
 80033e5:	00          	.byte	0x00
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7ff fa25 	bl	8002834 <HAL_RCC_GetSysClockFreq>
 80033ea:	e03e      	b.n	800346a <UART_SetConfig+0x126>
    switch (clocksource)
 80033ec:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <UART_SetConfig+0x154>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ee:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80033f0:	492a      	ldr	r1, [pc, #168]	; (800349c <UART_SetConfig+0x158>)
 80033f2:	0052      	lsls	r2, r2, #1
 80033f4:	5a51      	ldrh	r1, [r2, r1]
 80033f6:	0018      	movs	r0, r3
 80033f8:	f7fc fe8c 	bl	8000114 <__udivsi3>
 80033fc:	6865      	ldr	r5, [r4, #4]
 80033fe:	0040      	lsls	r0, r0, #1
 8003400:	086b      	lsrs	r3, r5, #1
 8003402:	18c0      	adds	r0, r0, r3
 8003404:	0029      	movs	r1, r5
 8003406:	f7fc fe85 	bl	8000114 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800340a:	0002      	movs	r2, r0
 800340c:	4b24      	ldr	r3, [pc, #144]	; (80034a0 <UART_SetConfig+0x15c>)
 800340e:	3a10      	subs	r2, #16
 8003410:	429a      	cmp	r2, r3
 8003412:	d824      	bhi.n	800345e <UART_SetConfig+0x11a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003414:	230f      	movs	r3, #15
 8003416:	0002      	movs	r2, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003418:	0700      	lsls	r0, r0, #28
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800341a:	439a      	bics	r2, r3
 800341c:	b293      	uxth	r3, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800341e:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8003420:	6822      	ldr	r2, [r4, #0]
 8003422:	4318      	orrs	r0, r3
 8003424:	60d0      	str	r0, [r2, #12]
 8003426:	e022      	b.n	800346e <UART_SetConfig+0x12a>
    switch (clocksource)
 8003428:	2080      	movs	r0, #128	; 0x80
 800342a:	0200      	lsls	r0, r0, #8
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800342c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800342e:	4a1b      	ldr	r2, [pc, #108]	; (800349c <UART_SetConfig+0x158>)
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	5a99      	ldrh	r1, [r3, r2]
 8003434:	f7fc fe6e 	bl	8000114 <__udivsi3>
 8003438:	6865      	ldr	r5, [r4, #4]
 800343a:	086b      	lsrs	r3, r5, #1
 800343c:	18c0      	adds	r0, r0, r3
 800343e:	0029      	movs	r1, r5
 8003440:	f7fc fe68 	bl	8000114 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003444:	0002      	movs	r2, r0
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <UART_SetConfig+0x15c>)
 8003448:	3a10      	subs	r2, #16
 800344a:	429a      	cmp	r2, r3
 800344c:	d807      	bhi.n	800345e <UART_SetConfig+0x11a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800344e:	6823      	ldr	r3, [r4, #0]
 8003450:	60d8      	str	r0, [r3, #12]
 8003452:	e00c      	b.n	800346e <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetSysClockFreq();
 8003454:	f7ff f9ee 	bl	8002834 <HAL_RCC_GetSysClockFreq>
        break;
 8003458:	e7b9      	b.n	80033ce <UART_SetConfig+0x8a>
        pclk = (uint32_t) HSI_VALUE;
 800345a:	480f      	ldr	r0, [pc, #60]	; (8003498 <UART_SetConfig+0x154>)
 800345c:	e7e6      	b.n	800342c <UART_SetConfig+0xe8>
    switch (clocksource)
 800345e:	2001      	movs	r0, #1
 8003460:	e006      	b.n	8003470 <UART_SetConfig+0x12c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003462:	428b      	cmp	r3, r1
 8003464:	d1b1      	bne.n	80033ca <UART_SetConfig+0x86>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003466:	f7ff fad9 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800346a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800346c:	d1bf      	bne.n	80033ee <UART_SetConfig+0xaa>
 800346e:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <UART_SetConfig+0x160>)
 8003472:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8003474:	2300      	movs	r3, #0
 8003476:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8003478:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	cfff69f3 	.word	0xcfff69f3
 8003480:	ffffcfff 	.word	0xffffcfff
 8003484:	11fff4ff 	.word	0x11fff4ff
 8003488:	40013800 	.word	0x40013800
 800348c:	40021000 	.word	0x40021000
 8003490:	08003b10 	.word	0x08003b10
 8003494:	40004400 	.word	0x40004400
 8003498:	00f42400 	.word	0x00f42400
 800349c:	08003b14 	.word	0x08003b14
 80034a0:	0000ffef 	.word	0x0000ffef
 80034a4:	00010001 	.word	0x00010001

080034a8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80034aa:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ac:	07da      	lsls	r2, r3, #31
 80034ae:	d506      	bpl.n	80034be <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034b0:	6801      	ldr	r1, [r0, #0]
 80034b2:	4c28      	ldr	r4, [pc, #160]	; (8003554 <UART_AdvFeatureConfig+0xac>)
 80034b4:	684a      	ldr	r2, [r1, #4]
 80034b6:	4022      	ands	r2, r4
 80034b8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80034ba:	4322      	orrs	r2, r4
 80034bc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034be:	079a      	lsls	r2, r3, #30
 80034c0:	d506      	bpl.n	80034d0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034c2:	6801      	ldr	r1, [r0, #0]
 80034c4:	4c24      	ldr	r4, [pc, #144]	; (8003558 <UART_AdvFeatureConfig+0xb0>)
 80034c6:	684a      	ldr	r2, [r1, #4]
 80034c8:	4022      	ands	r2, r4
 80034ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80034cc:	4322      	orrs	r2, r4
 80034ce:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034d0:	075a      	lsls	r2, r3, #29
 80034d2:	d506      	bpl.n	80034e2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034d4:	6801      	ldr	r1, [r0, #0]
 80034d6:	4c21      	ldr	r4, [pc, #132]	; (800355c <UART_AdvFeatureConfig+0xb4>)
 80034d8:	684a      	ldr	r2, [r1, #4]
 80034da:	4022      	ands	r2, r4
 80034dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80034de:	4322      	orrs	r2, r4
 80034e0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034e2:	071a      	lsls	r2, r3, #28
 80034e4:	d506      	bpl.n	80034f4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034e6:	6801      	ldr	r1, [r0, #0]
 80034e8:	4c1d      	ldr	r4, [pc, #116]	; (8003560 <UART_AdvFeatureConfig+0xb8>)
 80034ea:	684a      	ldr	r2, [r1, #4]
 80034ec:	4022      	ands	r2, r4
 80034ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80034f0:	4322      	orrs	r2, r4
 80034f2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034f4:	06da      	lsls	r2, r3, #27
 80034f6:	d506      	bpl.n	8003506 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034f8:	6801      	ldr	r1, [r0, #0]
 80034fa:	4c1a      	ldr	r4, [pc, #104]	; (8003564 <UART_AdvFeatureConfig+0xbc>)
 80034fc:	688a      	ldr	r2, [r1, #8]
 80034fe:	4022      	ands	r2, r4
 8003500:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003502:	4322      	orrs	r2, r4
 8003504:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003506:	069a      	lsls	r2, r3, #26
 8003508:	d506      	bpl.n	8003518 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800350a:	6801      	ldr	r1, [r0, #0]
 800350c:	4c16      	ldr	r4, [pc, #88]	; (8003568 <UART_AdvFeatureConfig+0xc0>)
 800350e:	688a      	ldr	r2, [r1, #8]
 8003510:	4022      	ands	r2, r4
 8003512:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003514:	4322      	orrs	r2, r4
 8003516:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003518:	065a      	lsls	r2, r3, #25
 800351a:	d510      	bpl.n	800353e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800351c:	6801      	ldr	r1, [r0, #0]
 800351e:	4d13      	ldr	r5, [pc, #76]	; (800356c <UART_AdvFeatureConfig+0xc4>)
 8003520:	684a      	ldr	r2, [r1, #4]
 8003522:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003524:	402a      	ands	r2, r5
 8003526:	4322      	orrs	r2, r4
 8003528:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	0352      	lsls	r2, r2, #13
 800352e:	4294      	cmp	r4, r2
 8003530:	d105      	bne.n	800353e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003532:	684a      	ldr	r2, [r1, #4]
 8003534:	4c0e      	ldr	r4, [pc, #56]	; (8003570 <UART_AdvFeatureConfig+0xc8>)
 8003536:	4022      	ands	r2, r4
 8003538:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800353a:	4322      	orrs	r2, r4
 800353c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800353e:	061b      	lsls	r3, r3, #24
 8003540:	d506      	bpl.n	8003550 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003542:	6802      	ldr	r2, [r0, #0]
 8003544:	490b      	ldr	r1, [pc, #44]	; (8003574 <UART_AdvFeatureConfig+0xcc>)
 8003546:	6853      	ldr	r3, [r2, #4]
 8003548:	400b      	ands	r3, r1
 800354a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800354c:	430b      	orrs	r3, r1
 800354e:	6053      	str	r3, [r2, #4]
}
 8003550:	bd30      	pop	{r4, r5, pc}
 8003552:	46c0      	nop			; (mov r8, r8)
 8003554:	fffdffff 	.word	0xfffdffff
 8003558:	fffeffff 	.word	0xfffeffff
 800355c:	fffbffff 	.word	0xfffbffff
 8003560:	ffff7fff 	.word	0xffff7fff
 8003564:	ffffefff 	.word	0xffffefff
 8003568:	ffffdfff 	.word	0xffffdfff
 800356c:	ffefffff 	.word	0xffefffff
 8003570:	ff9fffff 	.word	0xff9fffff
 8003574:	fff7ffff 	.word	0xfff7ffff

08003578 <UART_WaitOnFlagUntilTimeout>:
{
 8003578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357a:	2780      	movs	r7, #128	; 0x80
{
 800357c:	0004      	movs	r4, r0
 800357e:	000d      	movs	r5, r1
 8003580:	0016      	movs	r6, r2
 8003582:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003584:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	69d3      	ldr	r3, [r2, #28]
 800358a:	402b      	ands	r3, r5
 800358c:	1b5b      	subs	r3, r3, r5
 800358e:	4259      	negs	r1, r3
 8003590:	414b      	adcs	r3, r1
 8003592:	42b3      	cmp	r3, r6
 8003594:	d001      	beq.n	800359a <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8003596:	2000      	movs	r0, #0
 8003598:	e02a      	b.n	80035f0 <UART_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 800359a:	9b08      	ldr	r3, [sp, #32]
 800359c:	3301      	adds	r3, #1
 800359e:	d0f3      	beq.n	8003588 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a0:	f7fd fdc8 	bl	8001134 <HAL_GetTick>
 80035a4:	9b01      	ldr	r3, [sp, #4]
 80035a6:	1ac0      	subs	r0, r0, r3
 80035a8:	9b08      	ldr	r3, [sp, #32]
 80035aa:	4298      	cmp	r0, r3
 80035ac:	d801      	bhi.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x3a>
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d11f      	bne.n	80035f2 <UART_WaitOnFlagUntilTimeout+0x7a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035b2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b6:	2201      	movs	r2, #1
 80035b8:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80035bc:	6821      	ldr	r1, [r4, #0]
 80035be:	4d20      	ldr	r5, [pc, #128]	; (8003640 <UART_WaitOnFlagUntilTimeout+0xc8>)
 80035c0:	680b      	ldr	r3, [r1, #0]
 80035c2:	402b      	ands	r3, r5
 80035c4:	600b      	str	r3, [r1, #0]
 80035c6:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ca:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ce:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d2:	6821      	ldr	r1, [r4, #0]
 80035d4:	688b      	ldr	r3, [r1, #8]
 80035d6:	4393      	bics	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
 80035da:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80035de:	0022      	movs	r2, r4
 80035e0:	2320      	movs	r3, #32
 80035e2:	3288      	adds	r2, #136	; 0x88
 80035e4:	6013      	str	r3, [r2, #0]
        huart->RxState = HAL_UART_STATE_READY;
 80035e6:	6053      	str	r3, [r2, #4]
          __HAL_UNLOCK(huart);
 80035e8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80035ea:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80035ec:	3484      	adds	r4, #132	; 0x84
 80035ee:	7023      	strb	r3, [r4, #0]
}
 80035f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035f2:	2104      	movs	r1, #4
 80035f4:	6823      	ldr	r3, [r4, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	420a      	tst	r2, r1
 80035fa:	d0c4      	beq.n	8003586 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035fc:	69da      	ldr	r2, [r3, #28]
 80035fe:	423a      	tst	r2, r7
 8003600:	d0c1      	beq.n	8003586 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003602:	621f      	str	r7, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003604:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003608:	2201      	movs	r2, #1
 800360a:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800360e:	6821      	ldr	r1, [r4, #0]
 8003610:	4d0b      	ldr	r5, [pc, #44]	; (8003640 <UART_WaitOnFlagUntilTimeout+0xc8>)
 8003612:	680b      	ldr	r3, [r1, #0]
 8003614:	402b      	ands	r3, r5
 8003616:	600b      	str	r3, [r1, #0]
 8003618:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003620:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003624:	6821      	ldr	r1, [r4, #0]
 8003626:	688b      	ldr	r3, [r1, #8]
 8003628:	4393      	bics	r3, r2
 800362a:	608b      	str	r3, [r1, #8]
 800362c:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8003630:	0022      	movs	r2, r4
 8003632:	2320      	movs	r3, #32
 8003634:	3288      	adds	r2, #136	; 0x88
 8003636:	6013      	str	r3, [r2, #0]
          huart->RxState = HAL_UART_STATE_READY;
 8003638:	6053      	str	r3, [r2, #4]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800363a:	6093      	str	r3, [r2, #8]
 800363c:	e7d4      	b.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x70>
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	fffffe5f 	.word	0xfffffe5f

08003644 <HAL_UART_Transmit>:
{
 8003644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003646:	0016      	movs	r6, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003648:	0002      	movs	r2, r0
{
 800364a:	b085      	sub	sp, #20
  if (huart->gState == HAL_UART_STATE_READY)
 800364c:	3288      	adds	r2, #136	; 0x88
{
 800364e:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8003650:	6813      	ldr	r3, [r2, #0]
{
 8003652:	0004      	movs	r4, r0
 8003654:	000d      	movs	r5, r1
    return HAL_BUSY;
 8003656:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8003658:	2b20      	cmp	r3, #32
 800365a:	d146      	bne.n	80036ea <HAL_UART_Transmit+0xa6>
      return  HAL_ERROR;
 800365c:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800365e:	2900      	cmp	r1, #0
 8003660:	d043      	beq.n	80036ea <HAL_UART_Transmit+0xa6>
 8003662:	2e00      	cmp	r6, #0
 8003664:	d041      	beq.n	80036ea <HAL_UART_Transmit+0xa6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	68a1      	ldr	r1, [r4, #8]
 800366a:	015b      	lsls	r3, r3, #5
 800366c:	4299      	cmp	r1, r3
 800366e:	d104      	bne.n	800367a <HAL_UART_Transmit+0x36>
 8003670:	6923      	ldr	r3, [r4, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003676:	4205      	tst	r5, r0
 8003678:	d137      	bne.n	80036ea <HAL_UART_Transmit+0xa6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800367a:	0023      	movs	r3, r4
 800367c:	2100      	movs	r1, #0
 800367e:	3390      	adds	r3, #144	; 0x90
 8003680:	6019      	str	r1, [r3, #0]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003682:	2321      	movs	r3, #33	; 0x21
 8003684:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003686:	f7fd fd55 	bl	8001134 <HAL_GetTick>
    huart->TxXferSize  = Size;
 800368a:	0023      	movs	r3, r4
 800368c:	3354      	adds	r3, #84	; 0x54
 800368e:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8003690:	3302      	adds	r3, #2
 8003692:	801e      	strh	r6, [r3, #0]
 8003694:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 800369a:	0007      	movs	r7, r0
      pdata16bits = NULL;
 800369c:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369e:	015b      	lsls	r3, r3, #5
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d104      	bne.n	80036ae <HAL_UART_Transmit+0x6a>
 80036a4:	6923      	ldr	r3, [r4, #16]
 80036a6:	42b3      	cmp	r3, r6
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Transmit+0x6a>
 80036aa:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 80036ac:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 80036ae:	0023      	movs	r3, r4
 80036b0:	3356      	adds	r3, #86	; 0x56
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10c      	bne.n	80036d4 <HAL_UART_Transmit+0x90>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ba:	9b03      	ldr	r3, [sp, #12]
 80036bc:	2140      	movs	r1, #64	; 0x40
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	0020      	movs	r0, r4
 80036c2:	003b      	movs	r3, r7
 80036c4:	f7ff ff58 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d10d      	bne.n	80036e8 <HAL_UART_Transmit+0xa4>
    huart->gState = HAL_UART_STATE_READY;
 80036cc:	2320      	movs	r3, #32
 80036ce:	3488      	adds	r4, #136	; 0x88
 80036d0:	6023      	str	r3, [r4, #0]
    return HAL_OK;
 80036d2:	e00a      	b.n	80036ea <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036d4:	9b03      	ldr	r3, [sp, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2180      	movs	r1, #128	; 0x80
 80036dc:	003b      	movs	r3, r7
 80036de:	0020      	movs	r0, r4
 80036e0:	f7ff ff4a 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 80036e4:	2800      	cmp	r0, #0
 80036e6:	d002      	beq.n	80036ee <HAL_UART_Transmit+0xaa>
        return HAL_TIMEOUT;
 80036e8:	2003      	movs	r0, #3
}
 80036ea:	b005      	add	sp, #20
 80036ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ee:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80036f0:	2d00      	cmp	r5, #0
 80036f2:	d10b      	bne.n	800370c <HAL_UART_Transmit+0xc8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f4:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 80036f6:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036f8:	05db      	lsls	r3, r3, #23
 80036fa:	0ddb      	lsrs	r3, r3, #23
 80036fc:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 80036fe:	9b02      	ldr	r3, [sp, #8]
 8003700:	9a02      	ldr	r2, [sp, #8]
 8003702:	881b      	ldrh	r3, [r3, #0]
 8003704:	3b01      	subs	r3, #1
 8003706:	b29b      	uxth	r3, r3
 8003708:	8013      	strh	r3, [r2, #0]
 800370a:	e7d0      	b.n	80036ae <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800370c:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 800370e:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003710:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 8003712:	e7f4      	b.n	80036fe <HAL_UART_Transmit+0xba>

08003714 <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	0003      	movs	r3, r0
{
 8003716:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003718:	2600      	movs	r6, #0
{
 800371a:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	3390      	adds	r3, #144	; 0x90
 800371e:	601e      	str	r6, [r3, #0]
  tickstart = HAL_GetTick();
 8003720:	f7fd fd08 	bl	8001134 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003724:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003726:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	071b      	lsls	r3, r3, #28
 800372c:	d419      	bmi.n	8003762 <UART_CheckIdleState+0x4e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	075b      	lsls	r3, r3, #29
 8003734:	d50a      	bpl.n	800374c <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003736:	2180      	movs	r1, #128	; 0x80
 8003738:	4b10      	ldr	r3, [pc, #64]	; (800377c <UART_CheckIdleState+0x68>)
 800373a:	2200      	movs	r2, #0
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	0020      	movs	r0, r4
 8003740:	002b      	movs	r3, r5
 8003742:	03c9      	lsls	r1, r1, #15
 8003744:	f7ff ff18 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8003748:	2800      	cmp	r0, #0
 800374a:	d115      	bne.n	8003778 <UART_CheckIdleState+0x64>
  huart->gState = HAL_UART_STATE_READY;
 800374c:	0022      	movs	r2, r4
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003750:	2320      	movs	r3, #32
 8003752:	3288      	adds	r2, #136	; 0x88
 8003754:	6013      	str	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_READY;
 8003756:	6053      	str	r3, [r2, #4]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800375a:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800375c:	3484      	adds	r4, #132	; 0x84
 800375e:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003760:	e00b      	b.n	800377a <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003762:	2180      	movs	r1, #128	; 0x80
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <UART_CheckIdleState+0x68>)
 8003766:	0032      	movs	r2, r6
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	0389      	lsls	r1, r1, #14
 800376c:	0003      	movs	r3, r0
 800376e:	0020      	movs	r0, r4
 8003770:	f7ff ff02 	bl	8003578 <UART_WaitOnFlagUntilTimeout>
 8003774:	2800      	cmp	r0, #0
 8003776:	d0da      	beq.n	800372e <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003778:	2003      	movs	r0, #3
}
 800377a:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800377c:	01ffffff 	.word	0x01ffffff

08003780 <HAL_UART_Init>:
{
 8003780:	b570      	push	{r4, r5, r6, lr}
 8003782:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003784:	d101      	bne.n	800378a <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003786:	2001      	movs	r0, #1
}
 8003788:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 800378a:	0005      	movs	r5, r0
 800378c:	3588      	adds	r5, #136	; 0x88
 800378e:	682b      	ldr	r3, [r5, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d104      	bne.n	800379e <HAL_UART_Init+0x1e>
    huart->Lock = HAL_UNLOCKED;
 8003794:	0002      	movs	r2, r0
 8003796:	3284      	adds	r2, #132	; 0x84
 8003798:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800379a:	f7fd fbfb 	bl	8000f94 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800379e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80037a0:	2101      	movs	r1, #1
 80037a2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80037a4:	602b      	str	r3, [r5, #0]
  __HAL_UART_DISABLE(huart);
 80037a6:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a8:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 80037aa:	438b      	bics	r3, r1
 80037ac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ae:	f7ff fdc9 	bl	8003344 <UART_SetConfig>
 80037b2:	2801      	cmp	r0, #1
 80037b4:	d0e7      	beq.n	8003786 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <HAL_UART_Init+0x42>
    UART_AdvFeatureConfig(huart);
 80037bc:	0020      	movs	r0, r4
 80037be:	f7ff fe73 	bl	80034a8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	4907      	ldr	r1, [pc, #28]	; (80037e4 <HAL_UART_Init+0x64>)
 80037c6:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 80037c8:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ca:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037cc:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	438a      	bics	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80037d6:	2201      	movs	r2, #1
 80037d8:	6819      	ldr	r1, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80037de:	f7ff ff99 	bl	8003714 <UART_CheckIdleState>
 80037e2:	e7d1      	b.n	8003788 <HAL_UART_Init+0x8>
 80037e4:	ffffb7ff 	.word	0xffffb7ff

080037e8 <UART_Start_Receive_DMA>:
{
 80037e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ea:	0013      	movs	r3, r2
  huart->RxXferSize = Size;
 80037ec:	0002      	movs	r2, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	0006      	movs	r6, r0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037f0:	0005      	movs	r5, r0
  huart->RxXferSize = Size;
 80037f2:	325c      	adds	r2, #92	; 0x5c
  huart->pRxBuffPtr = pData;
 80037f4:	6581      	str	r1, [r0, #88]	; 0x58
{
 80037f6:	000f      	movs	r7, r1
  huart->RxXferSize = Size;
 80037f8:	8013      	strh	r3, [r2, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037fa:	2122      	movs	r1, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037fc:	2200      	movs	r2, #0
 80037fe:	3690      	adds	r6, #144	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003800:	358c      	adds	r5, #140	; 0x8c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003802:	6032      	str	r2, [r6, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003804:	6029      	str	r1, [r5, #0]
  if (huart->hdmarx != NULL)
 8003806:	1d01      	adds	r1, r0, #4
{
 8003808:	0004      	movs	r4, r0
  if (huart->hdmarx != NULL)
 800380a:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
 800380c:	4290      	cmp	r0, r2
 800380e:	d013      	beq.n	8003838 <UART_Start_Receive_DMA+0x50>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003810:	491d      	ldr	r1, [pc, #116]	; (8003888 <UART_Start_Receive_DMA+0xa0>)
    huart->hdmarx->XferAbortCallback = NULL;
 8003812:	6382      	str	r2, [r0, #56]	; 0x38
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003814:	62c1      	str	r1, [r0, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003816:	491d      	ldr	r1, [pc, #116]	; (800388c <UART_Start_Receive_DMA+0xa4>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003818:	003a      	movs	r2, r7
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800381a:	6301      	str	r1, [r0, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800381c:	491c      	ldr	r1, [pc, #112]	; (8003890 <UART_Start_Receive_DMA+0xa8>)
 800381e:	6341      	str	r1, [r0, #52]	; 0x34
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003820:	6821      	ldr	r1, [r4, #0]
 8003822:	3124      	adds	r1, #36	; 0x24
 8003824:	f7fe f8c2 	bl	80019ac <HAL_DMA_Start_IT>
 8003828:	2800      	cmp	r0, #0
 800382a:	d005      	beq.n	8003838 <UART_Start_Receive_DMA+0x50>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800382c:	2310      	movs	r3, #16
      return HAL_ERROR;
 800382e:	2001      	movs	r0, #1
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003830:	6033      	str	r3, [r6, #0]
      huart->RxState = HAL_UART_STATE_READY;
 8003832:	18db      	adds	r3, r3, r3
 8003834:	602b      	str	r3, [r5, #0]
}
 8003836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003838:	6923      	ldr	r3, [r4, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00b      	beq.n	8003856 <UART_Start_Receive_DMA+0x6e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	2301      	movs	r3, #1
 8003844:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003848:	6822      	ldr	r2, [r4, #0]
 800384a:	33ff      	adds	r3, #255	; 0xff
 800384c:	6810      	ldr	r0, [r2, #0]
 800384e:	4303      	orrs	r3, r0
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003856:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385a:	2301      	movs	r3, #1
 800385c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003860:	6821      	ldr	r1, [r4, #0]
 8003862:	688a      	ldr	r2, [r1, #8]
 8003864:	431a      	orrs	r2, r3
 8003866:	608a      	str	r2, [r1, #8]
 8003868:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003870:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003874:	6822      	ldr	r2, [r4, #0]
 8003876:	333f      	adds	r3, #63	; 0x3f
 8003878:	6890      	ldr	r0, [r2, #8]
 800387a:	4303      	orrs	r3, r0
 800387c:	6093      	str	r3, [r2, #8]
 800387e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8003882:	2000      	movs	r0, #0
 8003884:	e7d7      	b.n	8003836 <UART_Start_Receive_DMA+0x4e>
 8003886:	46c0      	nop			; (mov r8, r8)
 8003888:	080032a5 	.word	0x080032a5
 800388c:	08003281 	.word	0x08003281
 8003890:	08002ed9 	.word	0x08002ed9

08003894 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003896:	6e43      	ldr	r3, [r0, #100]	; 0x64
{
 8003898:	0004      	movs	r4, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <UARTEx_SetNbDataToProcess+0x40>)
 80038a0:	6683      	str	r3, [r0, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80038a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038a4:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038a6:	4e0c      	ldr	r6, [pc, #48]	; (80038d8 <UARTEx_SetNbDataToProcess+0x44>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038a8:	689f      	ldr	r7, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038aa:	689b      	ldr	r3, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80038ac:	4d0b      	ldr	r5, [pc, #44]	; (80038dc <UARTEx_SetNbDataToProcess+0x48>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80038ae:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b0:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[tx_fifo_threshold];
 80038b2:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038b4:	00c0      	lsls	r0, r0, #3
 80038b6:	f7fc fcb7 	bl	8000228 <__divsi3>
 80038ba:	0023      	movs	r3, r4
 80038bc:	336a      	adds	r3, #106	; 0x6a
 80038be:	8018      	strh	r0, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80038c0:	013b      	lsls	r3, r7, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038c2:	0f5b      	lsrs	r3, r3, #29
 80038c4:	5cf0      	ldrb	r0, [r6, r3]
                               (uint16_t)denominator[rx_fifo_threshold];
 80038c6:	5ce9      	ldrb	r1, [r5, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038c8:	00c0      	lsls	r0, r0, #3
 80038ca:	f7fc fcad 	bl	8000228 <__divsi3>
 80038ce:	3468      	adds	r4, #104	; 0x68
 80038d0:	8020      	strh	r0, [r4, #0]
}
 80038d2:	e7e6      	b.n	80038a2 <UARTEx_SetNbDataToProcess+0xe>
 80038d4:	00010001 	.word	0x00010001
 80038d8:	08003b34 	.word	0x08003b34
 80038dc:	08003b2c 	.word	0x08003b2c

080038e0 <HAL_UARTEx_WakeupCallback>:
}
 80038e0:	4770      	bx	lr

080038e2 <HAL_UARTEx_RxFifoFullCallback>:
 80038e2:	4770      	bx	lr

080038e4 <HAL_UARTEx_TxFifoEmptyCallback>:
 80038e4:	4770      	bx	lr
	...

080038e8 <HAL_UARTEx_DisableFifoMode>:
{
 80038e8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 80038ea:	0004      	movs	r4, r0
 80038ec:	3484      	adds	r4, #132	; 0x84
 80038ee:	7822      	ldrb	r2, [r4, #0]
{
 80038f0:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 80038f2:	2002      	movs	r0, #2
 80038f4:	2a01      	cmp	r2, #1
 80038f6:	d011      	beq.n	800391c <HAL_UARTEx_DisableFifoMode+0x34>
  huart->gState = HAL_UART_STATE_BUSY;
 80038f8:	001d      	movs	r5, r3
 80038fa:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80038fc:	2601      	movs	r6, #1
  huart->gState = HAL_UART_STATE_BUSY;
 80038fe:	3588      	adds	r5, #136	; 0x88
 8003900:	602a      	str	r2, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003906:	6810      	ldr	r0, [r2, #0]
 8003908:	43b0      	bics	r0, r6
 800390a:	6010      	str	r0, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800390c:	4804      	ldr	r0, [pc, #16]	; (8003920 <HAL_UARTEx_DisableFifoMode+0x38>)
 800390e:	4001      	ands	r1, r0
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003910:	2000      	movs	r0, #0
 8003912:	6658      	str	r0, [r3, #100]	; 0x64
  huart->gState = HAL_UART_STATE_READY;
 8003914:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003916:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003918:	602b      	str	r3, [r5, #0]
  __HAL_UNLOCK(huart);
 800391a:	7020      	strb	r0, [r4, #0]
}
 800391c:	bd70      	pop	{r4, r5, r6, pc}
 800391e:	46c0      	nop			; (mov r8, r8)
 8003920:	dfffffff 	.word	0xdfffffff

08003924 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003926:	0004      	movs	r4, r0
  __HAL_LOCK(huart);
 8003928:	0025      	movs	r5, r4
 800392a:	3584      	adds	r5, #132	; 0x84
 800392c:	782a      	ldrb	r2, [r5, #0]
{
 800392e:	0008      	movs	r0, r1
  __HAL_LOCK(huart);
 8003930:	2302      	movs	r3, #2
 8003932:	2a01      	cmp	r2, #1
 8003934:	d018      	beq.n	8003968 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8003936:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8003938:	0026      	movs	r6, r4
  __HAL_LOCK(huart);
 800393a:	7029      	strb	r1, [r5, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800393c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800393e:	3688      	adds	r6, #136	; 0x88
 8003940:	3322      	adds	r3, #34	; 0x22
 8003942:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003944:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003946:	6813      	ldr	r3, [r2, #0]
 8003948:	438b      	bics	r3, r1
 800394a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800394c:	6893      	ldr	r3, [r2, #8]
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	08d9      	lsrs	r1, r3, #3
 8003952:	4301      	orrs	r1, r0
 8003954:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003956:	0020      	movs	r0, r4
 8003958:	f7ff ff9c 	bl	8003894 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003960:	2320      	movs	r3, #32
 8003962:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 8003964:	2300      	movs	r3, #0
 8003966:	702b      	strb	r3, [r5, #0]
}
 8003968:	0018      	movs	r0, r3
 800396a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800396c <HAL_UARTEx_SetRxFifoThreshold>:
{
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(huart);
 800396e:	0005      	movs	r5, r0
 8003970:	3584      	adds	r5, #132	; 0x84
 8003972:	782b      	ldrb	r3, [r5, #0]
{
 8003974:	0004      	movs	r4, r0
 8003976:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003978:	2002      	movs	r0, #2
 800397a:	2b01      	cmp	r3, #1
 800397c:	d018      	beq.n	80039b0 <HAL_UARTEx_SetRxFifoThreshold+0x44>
  huart->gState = HAL_UART_STATE_BUSY;
 800397e:	0026      	movs	r6, r4
 8003980:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8003982:	3801      	subs	r0, #1
 8003984:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003986:	3688      	adds	r6, #136	; 0x88
 8003988:	6033      	str	r3, [r6, #0]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800398a:	6823      	ldr	r3, [r4, #0]
 800398c:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800398e:	6819      	ldr	r1, [r3, #0]
 8003990:	4381      	bics	r1, r0
 8003992:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003994:	6899      	ldr	r1, [r3, #8]
 8003996:	4807      	ldr	r0, [pc, #28]	; (80039b4 <HAL_UARTEx_SetRxFifoThreshold+0x48>)
 8003998:	4001      	ands	r1, r0
 800399a:	4311      	orrs	r1, r2
  UARTEx_SetNbDataToProcess(huart);
 800399c:	0020      	movs	r0, r4
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800399e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 80039a0:	f7ff ff78 	bl	8003894 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039a4:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(huart);
 80039a6:	2000      	movs	r0, #0
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80039a8:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80039aa:	2320      	movs	r3, #32
 80039ac:	6033      	str	r3, [r6, #0]
  __HAL_UNLOCK(huart);
 80039ae:	7028      	strb	r0, [r5, #0]
}
 80039b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	f1ffffff 	.word	0xf1ffffff

080039b8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80039b8:	0003      	movs	r3, r0
 80039ba:	338c      	adds	r3, #140	; 0x8c
 80039bc:	681b      	ldr	r3, [r3, #0]
{
 80039be:	b570      	push	{r4, r5, r6, lr}
 80039c0:	0004      	movs	r4, r0
    return HAL_BUSY;
 80039c2:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80039c4:	2b20      	cmp	r3, #32
 80039c6:	d102      	bne.n	80039ce <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
    if ((pData == NULL) || (Size == 0U))
 80039c8:	2900      	cmp	r1, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_UARTEx_ReceiveToIdle_DMA+0x18>
      return HAL_ERROR;
 80039cc:	2001      	movs	r0, #1
}
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
    if ((pData == NULL) || (Size == 0U))
 80039d0:	2a00      	cmp	r2, #0
 80039d2:	d0fb      	beq.n	80039cc <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039d4:	2080      	movs	r0, #128	; 0x80
 80039d6:	68a5      	ldr	r5, [r4, #8]
 80039d8:	2301      	movs	r3, #1
 80039da:	0140      	lsls	r0, r0, #5
 80039dc:	4285      	cmp	r5, r0
 80039de:	d104      	bne.n	80039ea <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
 80039e0:	6920      	ldr	r0, [r4, #16]
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d101      	bne.n	80039ea <HAL_UARTEx_ReceiveToIdle_DMA+0x32>
      if ((((uint32_t)pData) & 1U) != 0U)
 80039e6:	4219      	tst	r1, r3
 80039e8:	d1f0      	bne.n	80039cc <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80039ea:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039ec:	2300      	movs	r3, #0
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80039ee:	0020      	movs	r0, r4
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039f0:	6723      	str	r3, [r4, #112]	; 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80039f2:	f7ff fef9 	bl	80037e8 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d1e9      	bne.n	80039ce <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80039fc:	2a01      	cmp	r2, #1
 80039fe:	d1e5      	bne.n	80039cc <HAL_UARTEx_ReceiveToIdle_DMA+0x14>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a00:	2310      	movs	r3, #16
 8003a02:	6821      	ldr	r1, [r4, #0]
 8003a04:	620b      	str	r3, [r1, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a06:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0a:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0e:	6822      	ldr	r2, [r4, #0]
 8003a10:	6814      	ldr	r4, [r2, #0]
 8003a12:	4323      	orrs	r3, r4
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	f381 8810 	msr	PRIMASK, r1
}
 8003a1a:	e7d8      	b.n	80039ce <HAL_UARTEx_ReceiveToIdle_DMA+0x16>

08003a1c <__libc_init_array>:
 8003a1c:	b570      	push	{r4, r5, r6, lr}
 8003a1e:	2600      	movs	r6, #0
 8003a20:	4d0c      	ldr	r5, [pc, #48]	; (8003a54 <__libc_init_array+0x38>)
 8003a22:	4c0d      	ldr	r4, [pc, #52]	; (8003a58 <__libc_init_array+0x3c>)
 8003a24:	1b64      	subs	r4, r4, r5
 8003a26:	10a4      	asrs	r4, r4, #2
 8003a28:	42a6      	cmp	r6, r4
 8003a2a:	d109      	bne.n	8003a40 <__libc_init_array+0x24>
 8003a2c:	2600      	movs	r6, #0
 8003a2e:	f000 f821 	bl	8003a74 <_init>
 8003a32:	4d0a      	ldr	r5, [pc, #40]	; (8003a5c <__libc_init_array+0x40>)
 8003a34:	4c0a      	ldr	r4, [pc, #40]	; (8003a60 <__libc_init_array+0x44>)
 8003a36:	1b64      	subs	r4, r4, r5
 8003a38:	10a4      	asrs	r4, r4, #2
 8003a3a:	42a6      	cmp	r6, r4
 8003a3c:	d105      	bne.n	8003a4a <__libc_init_array+0x2e>
 8003a3e:	bd70      	pop	{r4, r5, r6, pc}
 8003a40:	00b3      	lsls	r3, r6, #2
 8003a42:	58eb      	ldr	r3, [r5, r3]
 8003a44:	4798      	blx	r3
 8003a46:	3601      	adds	r6, #1
 8003a48:	e7ee      	b.n	8003a28 <__libc_init_array+0xc>
 8003a4a:	00b3      	lsls	r3, r6, #2
 8003a4c:	58eb      	ldr	r3, [r5, r3]
 8003a4e:	4798      	blx	r3
 8003a50:	3601      	adds	r6, #1
 8003a52:	e7f2      	b.n	8003a3a <__libc_init_array+0x1e>
 8003a54:	08003b3c 	.word	0x08003b3c
 8003a58:	08003b3c 	.word	0x08003b3c
 8003a5c:	08003b3c 	.word	0x08003b3c
 8003a60:	08003b40 	.word	0x08003b40

08003a64 <memset>:
 8003a64:	0003      	movs	r3, r0
 8003a66:	1882      	adds	r2, r0, r2
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <memset+0xa>
 8003a6c:	4770      	bx	lr
 8003a6e:	7019      	strb	r1, [r3, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	e7f9      	b.n	8003a68 <memset+0x4>

08003a74 <_init>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr

08003a80 <_fini>:
 8003a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a82:	46c0      	nop			; (mov r8, r8)
 8003a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a86:	bc08      	pop	{r3}
 8003a88:	469e      	mov	lr, r3
 8003a8a:	4770      	bx	lr
