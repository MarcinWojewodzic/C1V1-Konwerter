
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c70  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004d28  08004d28  00014d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e10  08004e10  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08004e10  08004e10  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e10  08004e10  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e14  08004e14  00014e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08004e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000038  08004e50  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000288  08004e50  00020288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001642e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033e6  00000000  00000000  0003648e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00039878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001090  00000000  00000000  0003aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018048  00000000  00000000  0003bb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018bd7  00000000  00000000  00053b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092d5b  00000000  00000000  0006c72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff48a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f3c  00000000  00000000  000ff4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000038 	.word	0x20000038
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004d10 	.word	0x08004d10

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000003c 	.word	0x2000003c
 80000fc:	08004d10 	.word	0x08004d10

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <SM_MainFunction>:
bh1750_t Bh          = { 0 };
uint8_t SizeUartData = 0;
uint8_t data[100];

void SM_MainFunction()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
   if(HAL_GetTick() - SmPtr.LastTick > 1000)
 80003f0:	f000 fdbc 	bl	8000f6c <HAL_GetTick>
 80003f4:	0002      	movs	r2, r0
 80003f6:	4b10      	ldr	r3, [pc, #64]	; (8000438 <SM_MainFunction+0x4c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	1ad2      	subs	r2, r2, r3
 80003fc:	23fa      	movs	r3, #250	; 0xfa
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	429a      	cmp	r2, r3
 8000402:	d915      	bls.n	8000430 <SM_MainFunction+0x44>
   {
      SM_ChangeState();
 8000404:	f000 f81c 	bl	8000440 <SM_ChangeState>
      SmPtr.LastTick = HAL_GetTick();
 8000408:	f000 fdb0 	bl	8000f6c <HAL_GetTick>
 800040c:	0002      	movs	r2, r0
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <SM_MainFunction+0x4c>)
 8000410:	601a      	str	r2, [r3, #0]
      if(Function[SmPtr.State].SmFunction != NULL)
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <SM_MainFunction+0x4c>)
 8000414:	791b      	ldrb	r3, [r3, #4]
 8000416:	001a      	movs	r2, r3
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <SM_MainFunction+0x50>)
 800041a:	0092      	lsls	r2, r2, #2
 800041c:	58d3      	ldr	r3, [r2, r3]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d006      	beq.n	8000430 <SM_MainFunction+0x44>
      {
         Function[SmPtr.State].SmFunction();
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SM_MainFunction+0x4c>)
 8000424:	791b      	ldrb	r3, [r3, #4]
 8000426:	001a      	movs	r2, r3
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <SM_MainFunction+0x50>)
 800042a:	0092      	lsls	r2, r2, #2
 800042c:	58d3      	ldr	r3, [r2, r3]
 800042e:	4798      	blx	r3
      }
   }
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	20000054 	.word	0x20000054
 800043c:	20000010 	.word	0x20000010

08000440 <SM_ChangeState>:
static void SM_ChangeState()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	e022      	b.n	8000492 <SM_ChangeState+0x52>
   {
      if(SmPtr.State == TransitionTable[i].Source && SmPtr.NewEvent == TransitionTable[i].Event)
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <SM_ChangeState+0x68>)
 800044e:	7919      	ldrb	r1, [r3, #4]
 8000450:	4816      	ldr	r0, [pc, #88]	; (80004ac <SM_ChangeState+0x6c>)
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	0013      	movs	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	189b      	adds	r3, r3, r2
 800045a:	5c1b      	ldrb	r3, [r3, r0]
 800045c:	4299      	cmp	r1, r3
 800045e:	d115      	bne.n	800048c <SM_ChangeState+0x4c>
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <SM_ChangeState+0x68>)
 8000462:	7959      	ldrb	r1, [r3, #5]
 8000464:	4811      	ldr	r0, [pc, #68]	; (80004ac <SM_ChangeState+0x6c>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	0013      	movs	r3, r2
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	189b      	adds	r3, r3, r2
 800046e:	18c3      	adds	r3, r0, r3
 8000470:	3302      	adds	r3, #2
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4299      	cmp	r1, r3
 8000476:	d109      	bne.n	800048c <SM_ChangeState+0x4c>
      {
         SmPtr.State = TransitionTable[i].Destination;
 8000478:	490c      	ldr	r1, [pc, #48]	; (80004ac <SM_ChangeState+0x6c>)
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	0013      	movs	r3, r2
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	189b      	adds	r3, r3, r2
 8000482:	18cb      	adds	r3, r1, r3
 8000484:	3301      	adds	r3, #1
 8000486:	781a      	ldrb	r2, [r3, #0]
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <SM_ChangeState+0x68>)
 800048a:	711a      	strb	r2, [r3, #4]
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3301      	adds	r3, #1
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b04      	cmp	r3, #4
 8000496:	d9d9      	bls.n	800044c <SM_ChangeState+0xc>
      }
   }
   SmPtr.NewEvent = SM_EVENT_NOTHING;
 8000498:	4b03      	ldr	r3, [pc, #12]	; (80004a8 <SM_ChangeState+0x68>)
 800049a:	2200      	movs	r2, #0
 800049c:	715a      	strb	r2, [r3, #5]
}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	20000054 	.word	0x20000054
 80004ac:	20000000 	.word	0x20000000

080004b0 <SM_InitializeFunction>:
static void SM_InitializeFunction()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
   bh1750_Init(&Bh, &hi2c2, 35, One_Time_H_Resolution_Mode);
 80004b4:	4918      	ldr	r1, [pc, #96]	; (8000518 <SM_InitializeFunction+0x68>)
 80004b6:	4819      	ldr	r0, [pc, #100]	; (800051c <SM_InitializeFunction+0x6c>)
 80004b8:	2320      	movs	r3, #32
 80004ba:	2223      	movs	r2, #35	; 0x23
 80004bc:	f000 f92d 	bl	800071a <bh1750_Init>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 80004c0:	2380      	movs	r3, #128	; 0x80
 80004c2:	0199      	lsls	r1, r3, #6
 80004c4:	23a0      	movs	r3, #160	; 0xa0
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	2200      	movs	r2, #0
 80004ca:	0018      	movs	r0, r3
 80004cc:	f001 faf8 	bl	8001ac0 <HAL_GPIO_WritePin>
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, data, 100);
 80004d0:	4913      	ldr	r1, [pc, #76]	; (8000520 <SM_InitializeFunction+0x70>)
 80004d2:	4b14      	ldr	r3, [pc, #80]	; (8000524 <SM_InitializeFunction+0x74>)
 80004d4:	2264      	movs	r2, #100	; 0x64
 80004d6:	0018      	movs	r0, r3
 80004d8:	f004 fb28 	bl	8004b2c <HAL_UARTEx_ReceiveToIdle_DMA>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	0199      	lsls	r1, r3, #6
 80004e0:	23a0      	movs	r3, #160	; 0xa0
 80004e2:	05db      	lsls	r3, r3, #23
 80004e4:	2201      	movs	r2, #1
 80004e6:	0018      	movs	r0, r3
 80004e8:	f001 faea 	bl	8001ac0 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(&huart1, (uint8_t *)INITIALIZED_COMPLETE, sizeof(INITIALIZED_COMPLETE) - 1, 1000);
 80004ec:	23fa      	movs	r3, #250	; 0xfa
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	490d      	ldr	r1, [pc, #52]	; (8000528 <SM_InitializeFunction+0x78>)
 80004f2:	480c      	ldr	r0, [pc, #48]	; (8000524 <SM_InitializeFunction+0x74>)
 80004f4:	2216      	movs	r2, #22
 80004f6:	f003 f8a3 	bl	8003640 <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	0199      	lsls	r1, r3, #6
 80004fe:	23a0      	movs	r3, #160	; 0xa0
 8000500:	05db      	lsls	r3, r3, #23
 8000502:	2200      	movs	r2, #0
 8000504:	0018      	movs	r0, r3
 8000506:	f001 fadb 	bl	8001ac0 <HAL_GPIO_WritePin>
   SmPtr.NewEvent = SM_EVENT_INITIALIZE_OK;
 800050a:	4b08      	ldr	r3, [pc, #32]	; (800052c <SM_InitializeFunction+0x7c>)
 800050c:	2201      	movs	r2, #1
 800050e:	715a      	strb	r2, [r3, #5]
}
 8000510:	46c0      	nop			; (mov r8, r8)
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)
 8000518:	200000c8 	.word	0x200000c8
 800051c:	2000005c 	.word	0x2000005c
 8000520:	20000064 	.word	0x20000064
 8000524:	20000194 	.word	0x20000194
 8000528:	08004d28 	.word	0x08004d28
 800052c:	20000054 	.word	0x20000054

08000530 <SM_RunningFunction>:
static void SM_RunningFunction()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	0199      	lsls	r1, r3, #6
 8000538:	23a0      	movs	r3, #160	; 0xa0
 800053a:	05db      	lsls	r3, r3, #23
 800053c:	2201      	movs	r2, #1
 800053e:	0018      	movs	r0, r3
 8000540:	f001 fabe 	bl	8001ac0 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(&huart1, (uint8_t *)STATE_ID_RUNNING, sizeof(STATE_ID_RUNNING) - 1, 1000);
 8000544:	23fa      	movs	r3, #250	; 0xfa
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4909      	ldr	r1, [pc, #36]	; (8000570 <SM_RunningFunction+0x40>)
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <SM_RunningFunction+0x44>)
 800054c:	220e      	movs	r2, #14
 800054e:	f003 f877 	bl	8003640 <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	0199      	lsls	r1, r3, #6
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2200      	movs	r2, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f001 faaf 	bl	8001ac0 <HAL_GPIO_WritePin>
   SmPtr.NewEvent = SM_EVENT_START_CONVESION;
 8000562:	4b05      	ldr	r3, [pc, #20]	; (8000578 <SM_RunningFunction+0x48>)
 8000564:	2202      	movs	r2, #2
 8000566:	715a      	strb	r2, [r3, #5]
}
 8000568:	46c0      	nop			; (mov r8, r8)
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	08004d40 	.word	0x08004d40
 8000574:	20000194 	.word	0x20000194
 8000578:	20000054 	.word	0x20000054

0800057c <SM_WaitForMeasurmentIsFinished>:
static void SM_WaitForMeasurmentIsFinished()
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 8000580:	2380      	movs	r3, #128	; 0x80
 8000582:	0199      	lsls	r1, r3, #6
 8000584:	23a0      	movs	r3, #160	; 0xa0
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	2201      	movs	r2, #1
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fa98 	bl	8001ac0 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(&huart1, (uint8_t *)STATE_ID_WAIT_FOR_MEASURMENT_IS_FINISHED, sizeof(STATE_ID_WAIT_FOR_MEASURMENT_IS_FINISHED) - 1, 1000);
 8000590:	23fa      	movs	r3, #250	; 0xfa
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	4909      	ldr	r1, [pc, #36]	; (80005bc <SM_WaitForMeasurmentIsFinished+0x40>)
 8000596:	480a      	ldr	r0, [pc, #40]	; (80005c0 <SM_WaitForMeasurmentIsFinished+0x44>)
 8000598:	2226      	movs	r2, #38	; 0x26
 800059a:	f003 f851 	bl	8003640 <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 800059e:	2380      	movs	r3, #128	; 0x80
 80005a0:	0199      	lsls	r1, r3, #6
 80005a2:	23a0      	movs	r3, #160	; 0xa0
 80005a4:	05db      	lsls	r3, r3, #23
 80005a6:	2200      	movs	r2, #0
 80005a8:	0018      	movs	r0, r3
 80005aa:	f001 fa89 	bl	8001ac0 <HAL_GPIO_WritePin>
   SmPtr.NewEvent = SM_EVENT_END_RUNNING;
 80005ae:	4b05      	ldr	r3, [pc, #20]	; (80005c4 <SM_WaitForMeasurmentIsFinished+0x48>)
 80005b0:	2203      	movs	r2, #3
 80005b2:	715a      	strb	r2, [r3, #5]
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	08004d50 	.word	0x08004d50
 80005c0:	20000194 	.word	0x20000194
 80005c4:	20000054 	.word	0x20000054

080005c8 <SM_SleppFunction>:
static void SM_SleppFunction()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	0199      	lsls	r1, r3, #6
 80005d0:	23a0      	movs	r3, #160	; 0xa0
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	2201      	movs	r2, #1
 80005d6:	0018      	movs	r0, r3
 80005d8:	f001 fa72 	bl	8001ac0 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(&huart1, (uint8_t *)STATE_ID_SLEEP, sizeof(STATE_ID_SLEEP) - 1, 1000);
 80005dc:	23fa      	movs	r3, #250	; 0xfa
 80005de:	009b      	lsls	r3, r3, #2
 80005e0:	490d      	ldr	r1, [pc, #52]	; (8000618 <SM_SleppFunction+0x50>)
 80005e2:	480e      	ldr	r0, [pc, #56]	; (800061c <SM_SleppFunction+0x54>)
 80005e4:	220c      	movs	r2, #12
 80005e6:	f003 f82b 	bl	8003640 <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	0199      	lsls	r1, r3, #6
 80005ee:	23a0      	movs	r3, #160	; 0xa0
 80005f0:	05db      	lsls	r3, r3, #23
 80005f2:	2200      	movs	r2, #0
 80005f4:	0018      	movs	r0, r3
 80005f6:	f001 fa63 	bl	8001ac0 <HAL_GPIO_WritePin>
   HAL_SuspendTick();
 80005fa:	f000 fce5 	bl	8000fc8 <HAL_SuspendTick>
   HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80005fe:	2101      	movs	r1, #1
 8000600:	2000      	movs	r0, #0
 8000602:	f001 fec7 	bl	8002394 <HAL_PWR_EnterSLEEPMode>
   HAL_ResumeTick();
 8000606:	f000 fced 	bl	8000fe4 <HAL_ResumeTick>
   SmPtr.NewEvent = SM_EVENT_END_SLEEP;
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <SM_SleppFunction+0x58>)
 800060c:	2204      	movs	r2, #4
 800060e:	715a      	strb	r2, [r3, #5]
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	08004d78 	.word	0x08004d78
 800061c:	20000194 	.word	0x20000194
 8000620:	20000054 	.word	0x20000054

08000624 <SM_ParseUartFunction>:
static void SM_ParseUartFunction()
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
}
 8000628:	46c0      	nop			; (mov r8, r8)
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}

0800062e <SM_DebugFunction>:
static void SM_DebugFunction()
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <SM_ErrorFunction>:
static void SM_ErrorFunction()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
}
 800063c:	46c0      	nop			; (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	000a      	movs	r2, r1
 800064e:	1cbb      	adds	r3, r7, #2
 8000650:	801a      	strh	r2, [r3, #0]
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 8000652:	2380      	movs	r3, #128	; 0x80
 8000654:	0199      	lsls	r1, r3, #6
 8000656:	23a0      	movs	r3, #160	; 0xa0
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2201      	movs	r2, #1
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fa2f 	bl	8001ac0 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(huart, data, Size, 1000);
 8000662:	23fa      	movs	r3, #250	; 0xfa
 8000664:	009c      	lsls	r4, r3, #2
 8000666:	1cbb      	adds	r3, r7, #2
 8000668:	881a      	ldrh	r2, [r3, #0]
 800066a:	490c      	ldr	r1, [pc, #48]	; (800069c <HAL_UARTEx_RxEventCallback+0x58>)
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	0023      	movs	r3, r4
 8000670:	f002 ffe6 	bl	8003640 <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	0199      	lsls	r1, r3, #6
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	2200      	movs	r2, #0
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fa1e 	bl	8001ac0 <HAL_GPIO_WritePin>
   HAL_UARTEx_ReceiveToIdle_DMA(huart, data, 1000);
 8000684:	23fa      	movs	r3, #250	; 0xfa
 8000686:	009a      	lsls	r2, r3, #2
 8000688:	4904      	ldr	r1, [pc, #16]	; (800069c <HAL_UARTEx_RxEventCallback+0x58>)
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	0018      	movs	r0, r3
 800068e:	f004 fa4d 	bl	8004b2c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	b003      	add	sp, #12
 8000698:	bd90      	pop	{r4, r7, pc}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	20000064 	.word	0x20000064

080006a0 <bh1750_TransmitData>:
 *      Author: Marcin
 */
#include "main.h"
#include "bh1750.h"
void bh1750_TransmitData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
 80006a0:	b590      	push	{r4, r7, lr}
 80006a2:	b087      	sub	sp, #28
 80006a4:	af02      	add	r7, sp, #8
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	791b      	ldrb	r3, [r3, #4]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	18db      	adds	r3, r3, r3
 80006ba:	b299      	uxth	r1, r3
 80006bc:	1dfb      	adds	r3, r7, #7
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b29c      	uxth	r4, r3
 80006c2:	68ba      	ldr	r2, [r7, #8]
 80006c4:	23fa      	movs	r3, #250	; 0xfa
 80006c6:	009b      	lsls	r3, r3, #2
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	0023      	movs	r3, r4
 80006cc:	f001 faac 	bl	8001c28 <HAL_I2C_Master_Transmit>
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b005      	add	sp, #20
 80006d6:	bd90      	pop	{r4, r7, pc}

080006d8 <bh1750_ChangeState>:
void bh1750_ReceiveData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
	HAL_I2C_Master_Receive(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
}
void bh1750_ChangeState(bh1750_t *bh,bh1750State_t s)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	000a      	movs	r2, r1
 80006e2:	1cfb      	adds	r3, r7, #3
 80006e4:	701a      	strb	r2, [r3, #0]
	if(s==Continuously_H_Resolution_Mode||s==Continuously_H_Resolution_Mode2||s==Continuously_L_Resolution_Mode)
 80006e6:	1cfb      	adds	r3, r7, #3
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b10      	cmp	r3, #16
 80006ec:	d007      	beq.n	80006fe <bh1750_ChangeState+0x26>
 80006ee:	1cfb      	adds	r3, r7, #3
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	2b11      	cmp	r3, #17
 80006f4:	d003      	beq.n	80006fe <bh1750_ChangeState+0x26>
 80006f6:	1cfb      	adds	r3, r7, #3
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b13      	cmp	r3, #19
 80006fc:	d105      	bne.n	800070a <bh1750_ChangeState+0x32>
	bh1750_TransmitData(bh,&s,1);
 80006fe:	1cf9      	adds	r1, r7, #3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2201      	movs	r2, #1
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff ffcb 	bl	80006a0 <bh1750_TransmitData>
	bh->state=s;
 800070a:	1cfb      	adds	r3, r7, #3
 800070c:	781a      	ldrb	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	715a      	strb	r2, [r3, #5]
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}

0800071a <bh1750_Init>:
	HAL_Delay(200);
	uint16_t rowMeasurment=bh1750_ReadMeasurment(bh);
	return rowMeasurment;
}
void bh1750_Init(bh1750_t *bh,I2C_HandleTypeDef* i2c,uint8_t addres,bh1750State_t s)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b084      	sub	sp, #16
 800071e:	af00      	add	r7, sp, #0
 8000720:	60f8      	str	r0, [r7, #12]
 8000722:	60b9      	str	r1, [r7, #8]
 8000724:	0019      	movs	r1, r3
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	701a      	strb	r2, [r3, #0]
 800072a:	1dbb      	adds	r3, r7, #6
 800072c:	1c0a      	adds	r2, r1, #0
 800072e:	701a      	strb	r2, [r3, #0]
	bh->bh_i2c=i2c;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	601a      	str	r2, [r3, #0]
	bh->addr=addres;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	1dfa      	adds	r2, r7, #7
 800073a:	7812      	ldrb	r2, [r2, #0]
 800073c:	711a      	strb	r2, [r3, #4]
	if(s!=0)
 800073e:	1dbb      	adds	r3, r7, #6
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d006      	beq.n	8000754 <bh1750_Init+0x3a>
	bh1750_ChangeState(bh, s);
 8000746:	1dbb      	adds	r3, r7, #6
 8000748:	781a      	ldrb	r2, [r3, #0]
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f7ff ffc2 	bl	80006d8 <bh1750_ChangeState>
	bh->state=s;
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	1dba      	adds	r2, r7, #6
 8000758:	7812      	ldrb	r2, [r2, #0]
 800075a:	715a      	strb	r2, [r3, #5]
}
 800075c:	46c0      	nop			; (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	b004      	add	sp, #16
 8000762:	bd80      	pop	{r7, pc}

08000764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_DMA_Init+0x28>)
 800076c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800076e:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_DMA_Init+0x28>)
 8000770:	2101      	movs	r1, #1
 8000772:	430a      	orrs	r2, r1
 8000774:	639a      	str	r2, [r3, #56]	; 0x38
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <MX_DMA_Init+0x28>)
 8000778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800077a:	2201      	movs	r2, #1
 800077c:	4013      	ands	r3, r2
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]

}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	40021000 	.word	0x40021000

08000790 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	240c      	movs	r4, #12
 8000798:	193b      	adds	r3, r7, r4
 800079a:	0018      	movs	r0, r3
 800079c:	2314      	movs	r3, #20
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f004 faad 	bl	8004d00 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_GPIO_Init+0x88>)
 80007a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_GPIO_Init+0x88>)
 80007ac:	2102      	movs	r1, #2
 80007ae:	430a      	orrs	r2, r1
 80007b0:	635a      	str	r2, [r3, #52]	; 0x34
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_GPIO_Init+0x88>)
 80007b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007b6:	2202      	movs	r2, #2
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_GPIO_Init+0x88>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_GPIO_Init+0x88>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_GPIO_Init+0x88>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ce:	2201      	movs	r2, #1
 80007d0:	4013      	ands	r3, r2
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 80007d6:	2380      	movs	r3, #128	; 0x80
 80007d8:	0199      	lsls	r1, r3, #6
 80007da:	23a0      	movs	r3, #160	; 0xa0
 80007dc:	05db      	lsls	r3, r3, #23
 80007de:	2200      	movs	r2, #0
 80007e0:	0018      	movs	r0, r3
 80007e2:	f001 f96d 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_Selector_Pin;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2280      	movs	r2, #128	; 0x80
 80007ea:	0192      	lsls	r2, r2, #6
 80007ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2201      	movs	r2, #1
 80007f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	193b      	adds	r3, r7, r4
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MAX485_Selector_GPIO_Port, &GPIO_InitStruct);
 8000800:	193a      	adds	r2, r7, r4
 8000802:	23a0      	movs	r3, #160	; 0xa0
 8000804:	05db      	lsls	r3, r3, #23
 8000806:	0011      	movs	r1, r2
 8000808:	0018      	movs	r0, r3
 800080a:	f000 fff5 	bl	80017f8 <HAL_GPIO_Init>

}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b009      	add	sp, #36	; 0x24
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40021000 	.word	0x40021000

0800081c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <MX_I2C2_Init+0x74>)
 8000822:	4a1c      	ldr	r2, [pc, #112]	; (8000894 <MX_I2C2_Init+0x78>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_I2C2_Init+0x74>)
 8000828:	4a1b      	ldr	r2, [pc, #108]	; (8000898 <MX_I2C2_Init+0x7c>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800082c:	4b18      	ldr	r3, [pc, #96]	; (8000890 <MX_I2C2_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000832:	4b17      	ldr	r3, [pc, #92]	; (8000890 <MX_I2C2_Init+0x74>)
 8000834:	2201      	movs	r2, #1
 8000836:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <MX_I2C2_Init+0x74>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800083e:	4b14      	ldr	r3, [pc, #80]	; (8000890 <MX_I2C2_Init+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <MX_I2C2_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <MX_I2C2_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_I2C2_Init+0x74>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <MX_I2C2_Init+0x74>)
 8000858:	0018      	movs	r0, r3
 800085a:	f001 f94f 	bl	8001afc <HAL_I2C_Init>
 800085e:	1e03      	subs	r3, r0, #0
 8000860:	d001      	beq.n	8000866 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000862:	f000 f8ec 	bl	8000a3e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000866:	4b0a      	ldr	r3, [pc, #40]	; (8000890 <MX_I2C2_Init+0x74>)
 8000868:	2100      	movs	r1, #0
 800086a:	0018      	movs	r0, r3
 800086c:	f001 fcfa 	bl	8002264 <HAL_I2CEx_ConfigAnalogFilter>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d001      	beq.n	8000878 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000874:	f000 f8e3 	bl	8000a3e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <MX_I2C2_Init+0x74>)
 800087a:	2100      	movs	r1, #0
 800087c:	0018      	movs	r0, r3
 800087e:	f001 fd3d 	bl	80022fc <HAL_I2CEx_ConfigDigitalFilter>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000886:	f000 f8da 	bl	8000a3e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000c8 	.word	0x200000c8
 8000894:	40005800 	.word	0x40005800
 8000898:	00303d5b 	.word	0x00303d5b

0800089c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b08b      	sub	sp, #44	; 0x2c
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a4:	2414      	movs	r4, #20
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	0018      	movs	r0, r3
 80008aa:	2314      	movs	r3, #20
 80008ac:	001a      	movs	r2, r3
 80008ae:	2100      	movs	r1, #0
 80008b0:	f004 fa26 	bl	8004d00 <memset>
  if(i2cHandle->Instance==I2C2)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a1c      	ldr	r2, [pc, #112]	; (800092c <HAL_I2C_MspInit+0x90>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d131      	bne.n	8000922 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <HAL_I2C_MspInit+0x94>)
 80008c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008c2:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_I2C_MspInit+0x94>)
 80008c4:	2101      	movs	r1, #1
 80008c6:	430a      	orrs	r2, r1
 80008c8:	635a      	str	r2, [r3, #52]	; 0x34
 80008ca:	4b19      	ldr	r3, [pc, #100]	; (8000930 <HAL_I2C_MspInit+0x94>)
 80008cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ce:	2201      	movs	r2, #1
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	22c0      	movs	r2, #192	; 0xc0
 80008da:	0152      	lsls	r2, r2, #5
 80008dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008de:	0021      	movs	r1, r4
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2212      	movs	r2, #18
 80008e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2206      	movs	r2, #6
 80008f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	187a      	adds	r2, r7, r1
 80008fa:	23a0      	movs	r3, #160	; 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f000 ff79 	bl	80017f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <HAL_I2C_MspInit+0x94>)
 8000908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_I2C_MspInit+0x94>)
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	03c9      	lsls	r1, r1, #15
 8000910:	430a      	orrs	r2, r1
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_I2C_MspInit+0x94>)
 8000916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	03db      	lsls	r3, r3, #15
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b00b      	add	sp, #44	; 0x2c
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40005800 	.word	0x40005800
 8000930:	40021000 	.word	0x40021000

08000934 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000938:	f000 fa9c 	bl	8000e74 <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 800093c:	f000 f81e 	bl	800097c <SystemClock_Config>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000940:	f7ff ff26 	bl	8000790 <MX_GPIO_Init>
   MX_DMA_Init();
 8000944:	f7ff ff0e 	bl	8000764 <MX_DMA_Init>
   MX_I2C2_Init();
 8000948:	f7ff ff68 	bl	800081c <MX_I2C2_Init>
   MX_RTC_Init();
 800094c:	f000 f87c 	bl	8000a48 <MX_RTC_Init>
   MX_TIM17_Init();
 8000950:	f000 f940 	bl	8000bd4 <MX_TIM17_Init>
   MX_USART1_UART_Init();
 8000954:	f000 f986 	bl	8000c64 <MX_USART1_UART_Init>

   /* Initialize interrupts */
   MX_NVIC_Init();
 8000958:	f000 f85c 	bl	8000a14 <MX_NVIC_Init>
   /* USER CODE BEGIN 2 */
   HAL_TIM_Base_Start(&htim17);
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <main+0x40>)
 800095e:	0018      	movs	r0, r3
 8000960:	f002 fd66 	bl	8003430 <HAL_TIM_Base_Start>
   HAL_Delay(10000);
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <main+0x44>)
 8000966:	0018      	movs	r0, r3
 8000968:	f000 fb0a 	bl	8000f80 <HAL_Delay>

   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   while(1)
   {
      SM_MainFunction();
 800096c:	f7ff fd3e 	bl	80003ec <SM_MainFunction>
 8000970:	e7fc      	b.n	800096c <main+0x38>
 8000972:	46c0      	nop			; (mov r8, r8)
 8000974:	20000148 	.word	0x20000148
 8000978:	00002710 	.word	0x00002710

0800097c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b093      	sub	sp, #76	; 0x4c
 8000980:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000982:	2414      	movs	r4, #20
 8000984:	193b      	adds	r3, r7, r4
 8000986:	0018      	movs	r0, r3
 8000988:	2334      	movs	r3, #52	; 0x34
 800098a:	001a      	movs	r2, r3
 800098c:	2100      	movs	r1, #0
 800098e:	f004 f9b7 	bl	8004d00 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000992:	1d3b      	adds	r3, r7, #4
 8000994:	0018      	movs	r0, r3
 8000996:	2310      	movs	r3, #16
 8000998:	001a      	movs	r2, r3
 800099a:	2100      	movs	r1, #0
 800099c:	f004 f9b0 	bl	8004d00 <memset>

   /** Configure the main internal regulator output voltage
    */
   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2380      	movs	r3, #128	; 0x80
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 fd2b 	bl	8002400 <HAL_PWREx_ControlVoltageScaling>

   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 80009aa:	193b      	adds	r3, r7, r4
 80009ac:	220a      	movs	r2, #10
 80009ae:	601a      	str	r2, [r3, #0]
   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80009b0:	193b      	adds	r3, r7, r4
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	0052      	lsls	r2, r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
   RCC_OscInitStruct.HSIDiv              = RCC_HSI_DIV1;
 80009b8:	0021      	movs	r1, r4
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2240      	movs	r2, #64	; 0x40
 80009c4:	615a      	str	r2, [r3, #20]
   RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2201      	movs	r2, #1
 80009ca:	619a      	str	r2, [r3, #24]
   RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 fda3 	bl	8002520 <HAL_RCC_OscConfig>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x66>
   {
      Error_Handler();
 80009de:	f000 f82e 	bl	8000a3e <Error_Handler>
   }

   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2207      	movs	r2, #7
 80009e6:	601a      	str	r2, [r3, #0]
   RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
   RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]

   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2100      	movs	r1, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f89e 	bl	8002b40 <HAL_RCC_ClockConfig>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x90>
   {
      Error_Handler();
 8000a08:	f000 f819 	bl	8000a3e <Error_Handler>
   }
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b013      	add	sp, #76	; 0x4c
 8000a12:	bd90      	pop	{r4, r7, pc}

08000a14 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
   /* DMA1_Channel1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	2009      	movs	r0, #9
 8000a1e:	f000 fb9b 	bl	8001158 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a22:	2009      	movs	r0, #9
 8000a24:	f000 fbad 	bl	8001182 <HAL_NVIC_EnableIRQ>
   /* USART1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	201b      	movs	r0, #27
 8000a2e:	f000 fb93 	bl	8001158 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a32:	201b      	movs	r0, #27
 8000a34:	f000 fba5 	bl	8001182 <HAL_NVIC_EnableIRQ>
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a42:	b672      	cpsid	i
}
 8000a44:	46c0      	nop			; (mov r8, r8)
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8000a46:	e7fe      	b.n	8000a46 <Error_Handler+0x8>

08000a48 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a4c:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a4e:	4a14      	ldr	r2, [pc, #80]	; (8000aa0 <MX_RTC_Init+0x58>)
 8000a50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a58:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a5a:	227f      	movs	r2, #127	; 0x7f
 8000a5c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a60:	22ff      	movs	r2, #255	; 0xff
 8000a62:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a78:	2280      	movs	r2, #128	; 0x80
 8000a7a:	05d2      	lsls	r2, r2, #23
 8000a7c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <MX_RTC_Init+0x54>)
 8000a86:	0018      	movs	r0, r3
 8000a88:	f002 fb2a 	bl	80030e0 <HAL_RTC_Init>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000a90:	f7ff ffd5 	bl	8000a3e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	2000011c 	.word	0x2000011c
 8000aa0:	40002800 	.word	0x40002800

08000aa4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000aa4:	b590      	push	{r4, r7, lr}
 8000aa6:	b08b      	sub	sp, #44	; 0x2c
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	2410      	movs	r4, #16
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	2318      	movs	r3, #24
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	f004 f922 	bl	8004d00 <memset>
  if(rtcHandle->Instance==RTC)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a15      	ldr	r2, [pc, #84]	; (8000b18 <HAL_RTC_MspInit+0x74>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d124      	bne.n	8000b10 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0292      	lsls	r2, r2, #10
 8000acc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2280      	movs	r2, #128	; 0x80
 8000ad2:	0092      	lsls	r2, r2, #2
 8000ad4:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f002 f9db 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000ae2:	f7ff ffac 	bl	8000a3e <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <HAL_RTC_MspInit+0x78>)
 8000ae8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <HAL_RTC_MspInit+0x78>)
 8000aec:	2180      	movs	r1, #128	; 0x80
 8000aee:	0209      	lsls	r1, r1, #8
 8000af0:	430a      	orrs	r2, r1
 8000af2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <HAL_RTC_MspInit+0x78>)
 8000af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <HAL_RTC_MspInit+0x78>)
 8000afa:	2180      	movs	r1, #128	; 0x80
 8000afc:	00c9      	lsls	r1, r1, #3
 8000afe:	430a      	orrs	r2, r1
 8000b00:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_RTC_MspInit+0x78>)
 8000b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b06:	2380      	movs	r3, #128	; 0x80
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b00b      	add	sp, #44	; 0x2c
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	40002800 	.word	0x40002800
 8000b1c:	40021000 	.word	0x40021000

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <HAL_MspInit+0x44>)
 8000b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_MspInit+0x44>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	641a      	str	r2, [r3, #64]	; 0x40
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <HAL_MspInit+0x44>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	2201      	movs	r2, #1
 8000b38:	4013      	ands	r3, r2
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <HAL_MspInit+0x44>)
 8000b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_MspInit+0x44>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	0549      	lsls	r1, r1, #21
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_MspInit+0x44>)
 8000b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b50:	2380      	movs	r3, #128	; 0x80
 8000b52:	055b      	lsls	r3, r3, #21
 8000b54:	4013      	ands	r3, r2
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	b002      	add	sp, #8
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	40021000 	.word	0x40021000

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <NMI_Handler+0x4>

08000b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <HardFault_Handler+0x4>

08000b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b78:	46c0      	nop			; (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8c:	f000 f9dc 	bl	8000f48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b90:	46c0      	nop			; (mov r8, r8)
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b9c:	4b03      	ldr	r3, [pc, #12]	; (8000bac <DMA1_Channel1_IRQHandler+0x14>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 fce8 	bl	8001574 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	20000228 	.word	0x20000228

08000bb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <USART1_IRQHandler+0x14>)
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f002 fdde 	bl	8003778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	20000194 	.word	0x20000194

08000bc8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	46c0      	nop			; (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <MX_TIM17_Init+0x48>)
 8000bdc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000be0:	220f      	movs	r2, #15
 8000be2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000bec:	4a0c      	ldr	r2, [pc, #48]	; (8000c20 <MX_TIM17_Init+0x4c>)
 8000bee:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f002 fbbb 	bl	8003380 <HAL_TIM_Base_Init>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000c0e:	f7ff ff16 	bl	8000a3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000148 	.word	0x20000148
 8000c1c:	40014800 	.word	0x40014800
 8000c20:	0000ffff 	.word	0x0000ffff

08000c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <HAL_TIM_Base_MspInit+0x38>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d10d      	bne.n	8000c52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_TIM_Base_MspInit+0x3c>)
 8000c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <HAL_TIM_Base_MspInit+0x3c>)
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	02c9      	lsls	r1, r1, #11
 8000c40:	430a      	orrs	r2, r1
 8000c42:	641a      	str	r2, [r3, #64]	; 0x40
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <HAL_TIM_Base_MspInit+0x3c>)
 8000c46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c48:	2380      	movs	r3, #128	; 0x80
 8000c4a:	02db      	lsls	r3, r3, #11
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b004      	add	sp, #16
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	40014800 	.word	0x40014800
 8000c60:	40021000 	.word	0x40021000

08000c64 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c6a:	4a24      	ldr	r2, [pc, #144]	; (8000cfc <MX_USART1_UART_Init+0x98>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 2400;
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c70:	2296      	movs	r2, #150	; 0x96
 8000c72:	0112      	lsls	r2, r2, #4
 8000c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b1b      	ldr	r3, [pc, #108]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b18      	ldr	r3, [pc, #96]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9a:	4b17      	ldr	r3, [pc, #92]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ca0:	4b15      	ldr	r3, [pc, #84]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f002 fc70 	bl	8003594 <HAL_UART_Init>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cb8:	f7ff fec1 	bl	8000a3e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	f003 feb1 	bl	8004a28 <HAL_UARTEx_SetTxFifoThreshold>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d001      	beq.n	8000cce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cca:	f7ff feb8 	bl	8000a3e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cce:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f003 fee8 	bl	8004aa8 <HAL_UARTEx_SetRxFifoThreshold>
 8000cd8:	1e03      	subs	r3, r0, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cdc:	f7ff feaf 	bl	8000a3e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <MX_USART1_UART_Init+0x94>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f003 fe66 	bl	80049b4 <HAL_UARTEx_DisableFifoMode>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cec:	f7ff fea7 	bl	8000a3e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	20000194 	.word	0x20000194
 8000cfc:	40013800 	.word	0x40013800

08000d00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b091      	sub	sp, #68	; 0x44
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d08:	232c      	movs	r3, #44	; 0x2c
 8000d0a:	18fb      	adds	r3, r7, r3
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	2314      	movs	r3, #20
 8000d10:	001a      	movs	r2, r3
 8000d12:	2100      	movs	r1, #0
 8000d14:	f003 fff4 	bl	8004d00 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d18:	2414      	movs	r4, #20
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	2318      	movs	r3, #24
 8000d20:	001a      	movs	r2, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	f003 ffec 	bl	8004d00 <memset>
  if(uartHandle->Instance==USART1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a37      	ldr	r2, [pc, #220]	; (8000e0c <HAL_UART_MspInit+0x10c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d167      	bne.n	8000e02 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	2201      	movs	r2, #1
 8000d36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d3e:	193b      	adds	r3, r7, r4
 8000d40:	0018      	movs	r0, r3
 8000d42:	f002 f8a7 	bl	8002e94 <HAL_RCCEx_PeriphCLKConfig>
 8000d46:	1e03      	subs	r3, r0, #0
 8000d48:	d001      	beq.n	8000d4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d4a:	f7ff fe78 	bl	8000a3e <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d4e:	4b30      	ldr	r3, [pc, #192]	; (8000e10 <HAL_UART_MspInit+0x110>)
 8000d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d52:	4b2f      	ldr	r3, [pc, #188]	; (8000e10 <HAL_UART_MspInit+0x110>)
 8000d54:	2180      	movs	r1, #128	; 0x80
 8000d56:	01c9      	lsls	r1, r1, #7
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	641a      	str	r2, [r3, #64]	; 0x40
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <HAL_UART_MspInit+0x110>)
 8000d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	01db      	lsls	r3, r3, #7
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <HAL_UART_MspInit+0x110>)
 8000d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <HAL_UART_MspInit+0x110>)
 8000d70:	2102      	movs	r1, #2
 8000d72:	430a      	orrs	r2, r1
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <HAL_UART_MspInit+0x110>)
 8000d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7a:	2202      	movs	r2, #2
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000d82:	212c      	movs	r1, #44	; 0x2c
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	22c0      	movs	r2, #192	; 0xc0
 8000d88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000d9c:	187b      	adds	r3, r7, r1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da2:	187b      	adds	r3, r7, r1
 8000da4:	4a1b      	ldr	r2, [pc, #108]	; (8000e14 <HAL_UART_MspInit+0x114>)
 8000da6:	0019      	movs	r1, r3
 8000da8:	0010      	movs	r0, r2
 8000daa:	f000 fd25 	bl	80017f8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000db0:	4a1a      	ldr	r2, [pc, #104]	; (8000e1c <HAL_UART_MspInit+0x11c>)
 8000db2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000db6:	2232      	movs	r2, #50	; 0x32
 8000db8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000dc8:	2280      	movs	r2, #128	; 0x80
 8000dca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f000 f9e8 	bl	80011bc <HAL_DMA_Init>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000df0:	f7ff fe25 	bl	8000a3e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	4a07      	ldr	r2, [pc, #28]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000dfa:	505a      	str	r2, [r3, r1]
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_UART_MspInit+0x118>)
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b011      	add	sp, #68	; 0x44
 8000e08:	bd90      	pop	{r4, r7, pc}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	40013800 	.word	0x40013800
 8000e10:	40021000 	.word	0x40021000
 8000e14:	50000400 	.word	0x50000400
 8000e18:	20000228 	.word	0x20000228
 8000e1c:	40020008 	.word	0x40020008

08000e20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e24:	f7ff fed0 	bl	8000bc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e28:	480c      	ldr	r0, [pc, #48]	; (8000e5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e2a:	490d      	ldr	r1, [pc, #52]	; (8000e60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <LoopForever+0xe>)
  movs r3, #0
 8000e2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e30:	e002      	b.n	8000e38 <LoopCopyDataInit>

08000e32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e36:	3304      	adds	r3, #4

08000e38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e3c:	d3f9      	bcc.n	8000e32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e40:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <LoopForever+0x16>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e44:	e001      	b.n	8000e4a <LoopFillZerobss>

08000e46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e48:	3204      	adds	r2, #4

08000e4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e4c:	d3fb      	bcc.n	8000e46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4e:	f003 ff33 	bl	8004cb8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e52:	f7ff fd6f 	bl	8000934 <main>

08000e56 <LoopForever>:

LoopForever:
  b LoopForever
 8000e56:	e7fe      	b.n	8000e56 <LoopForever>
  ldr   r0, =_estack
 8000e58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e60:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000e64:	08004e18 	.word	0x08004e18
  ldr r2, =_sbss
 8000e68:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000e6c:	20000288 	.word	0x20000288

08000e70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e70:	e7fe      	b.n	8000e70 <ADC1_IRQHandler>
	...

08000e74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	4b0b      	ldr	r3, [pc, #44]	; (8000eb0 <HAL_Init+0x3c>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_Init+0x3c>)
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0049      	lsls	r1, r1, #1
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8e:	2003      	movs	r0, #3
 8000e90:	f000 f810 	bl	8000eb4 <HAL_InitTick>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d003      	beq.n	8000ea0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]
 8000e9e:	e001      	b.n	8000ea4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000ea0:	f7ff fe3e 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
}
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b002      	add	sp, #8
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40022000 	.word	0x40022000

08000eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ebc:	230f      	movs	r3, #15
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <HAL_InitTick+0x88>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d02b      	beq.n	8000f24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ecc:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <HAL_InitTick+0x8c>)
 8000ece:	681c      	ldr	r4, [r3, #0]
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <HAL_InitTick+0x88>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	0019      	movs	r1, r3
 8000ed6:	23fa      	movs	r3, #250	; 0xfa
 8000ed8:	0098      	lsls	r0, r3, #2
 8000eda:	f7ff f911 	bl	8000100 <__udivsi3>
 8000ede:	0003      	movs	r3, r0
 8000ee0:	0019      	movs	r1, r3
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f7ff f90c 	bl	8000100 <__udivsi3>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	0018      	movs	r0, r3
 8000eec:	f000 f959 	bl	80011a2 <HAL_SYSTICK_Config>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d112      	bne.n	8000f1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d80a      	bhi.n	8000f10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efa:	6879      	ldr	r1, [r7, #4]
 8000efc:	2301      	movs	r3, #1
 8000efe:	425b      	negs	r3, r3
 8000f00:	2200      	movs	r2, #0
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 f928 	bl	8001158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <HAL_InitTick+0x90>)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	e00d      	b.n	8000f2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f10:	230f      	movs	r3, #15
 8000f12:	18fb      	adds	r3, r7, r3
 8000f14:	2201      	movs	r2, #1
 8000f16:	701a      	strb	r2, [r3, #0]
 8000f18:	e008      	b.n	8000f2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f1a:	230f      	movs	r3, #15
 8000f1c:	18fb      	adds	r3, r7, r3
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
 8000f22:	e003      	b.n	8000f2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f24:	230f      	movs	r3, #15
 8000f26:	18fb      	adds	r3, r7, r3
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	18fb      	adds	r3, r7, r3
 8000f30:	781b      	ldrb	r3, [r3, #0]
}
 8000f32:	0018      	movs	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b005      	add	sp, #20
 8000f38:	bd90      	pop	{r4, r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	20000034 	.word	0x20000034
 8000f40:	2000002c 	.word	0x2000002c
 8000f44:	20000030 	.word	0x20000030

08000f48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x1c>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	001a      	movs	r2, r3
 8000f52:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_IncTick+0x20>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	18d2      	adds	r2, r2, r3
 8000f58:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <HAL_IncTick+0x20>)
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	20000034 	.word	0x20000034
 8000f68:	20000284 	.word	0x20000284

08000f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f70:	4b02      	ldr	r3, [pc, #8]	; (8000f7c <HAL_GetTick+0x10>)
 8000f72:	681b      	ldr	r3, [r3, #0]
}
 8000f74:	0018      	movs	r0, r3
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	20000284 	.word	0x20000284

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff fff0 	bl	8000f6c <HAL_GetTick>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	3301      	adds	r3, #1
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	001a      	movs	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	189b      	adds	r3, r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	f7ff ffe0 	bl	8000f6c <HAL_GetTick>
 8000fac:	0002      	movs	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b004      	add	sp, #16
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	20000034 	.word	0x20000034

08000fc8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_SuspendTick+0x18>)
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_SuspendTick+0x18>)
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	438a      	bics	r2, r1
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	e000e010 	.word	0xe000e010

08000fe4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <HAL_ResumeTick+0x18>)
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_ResumeTick+0x18>)
 8000fee:	2102      	movs	r1, #2
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]
}
 8000ff4:	46c0      	nop			; (mov r8, r8)
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	0002      	movs	r2, r0
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b7f      	cmp	r3, #127	; 0x7f
 8001012:	d809      	bhi.n	8001028 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001014:	1dfb      	adds	r3, r7, #7
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	001a      	movs	r2, r3
 800101a:	231f      	movs	r3, #31
 800101c:	401a      	ands	r2, r3
 800101e:	4b04      	ldr	r3, [pc, #16]	; (8001030 <__NVIC_EnableIRQ+0x30>)
 8001020:	2101      	movs	r1, #1
 8001022:	4091      	lsls	r1, r2
 8001024:	000a      	movs	r2, r1
 8001026:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}
 8001030:	e000e100 	.word	0xe000e100

08001034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	0002      	movs	r2, r0
 800103c:	6039      	str	r1, [r7, #0]
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b7f      	cmp	r3, #127	; 0x7f
 8001048:	d828      	bhi.n	800109c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800104a:	4a2f      	ldr	r2, [pc, #188]	; (8001108 <__NVIC_SetPriority+0xd4>)
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	089b      	lsrs	r3, r3, #2
 8001054:	33c0      	adds	r3, #192	; 0xc0
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	589b      	ldr	r3, [r3, r2]
 800105a:	1dfa      	adds	r2, r7, #7
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	0011      	movs	r1, r2
 8001060:	2203      	movs	r2, #3
 8001062:	400a      	ands	r2, r1
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	21ff      	movs	r1, #255	; 0xff
 8001068:	4091      	lsls	r1, r2
 800106a:	000a      	movs	r2, r1
 800106c:	43d2      	mvns	r2, r2
 800106e:	401a      	ands	r2, r3
 8001070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	019b      	lsls	r3, r3, #6
 8001076:	22ff      	movs	r2, #255	; 0xff
 8001078:	401a      	ands	r2, r3
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	0018      	movs	r0, r3
 8001080:	2303      	movs	r3, #3
 8001082:	4003      	ands	r3, r0
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001088:	481f      	ldr	r0, [pc, #124]	; (8001108 <__NVIC_SetPriority+0xd4>)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b25b      	sxtb	r3, r3
 8001090:	089b      	lsrs	r3, r3, #2
 8001092:	430a      	orrs	r2, r1
 8001094:	33c0      	adds	r3, #192	; 0xc0
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800109a:	e031      	b.n	8001100 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <__NVIC_SetPriority+0xd8>)
 800109e:	1dfb      	adds	r3, r7, #7
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	0019      	movs	r1, r3
 80010a4:	230f      	movs	r3, #15
 80010a6:	400b      	ands	r3, r1
 80010a8:	3b08      	subs	r3, #8
 80010aa:	089b      	lsrs	r3, r3, #2
 80010ac:	3306      	adds	r3, #6
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	18d3      	adds	r3, r2, r3
 80010b2:	3304      	adds	r3, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	1dfa      	adds	r2, r7, #7
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	0011      	movs	r1, r2
 80010bc:	2203      	movs	r2, #3
 80010be:	400a      	ands	r2, r1
 80010c0:	00d2      	lsls	r2, r2, #3
 80010c2:	21ff      	movs	r1, #255	; 0xff
 80010c4:	4091      	lsls	r1, r2
 80010c6:	000a      	movs	r2, r1
 80010c8:	43d2      	mvns	r2, r2
 80010ca:	401a      	ands	r2, r3
 80010cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	22ff      	movs	r2, #255	; 0xff
 80010d4:	401a      	ands	r2, r3
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	0018      	movs	r0, r3
 80010dc:	2303      	movs	r3, #3
 80010de:	4003      	ands	r3, r0
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e4:	4809      	ldr	r0, [pc, #36]	; (800110c <__NVIC_SetPriority+0xd8>)
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	001c      	movs	r4, r3
 80010ec:	230f      	movs	r3, #15
 80010ee:	4023      	ands	r3, r4
 80010f0:	3b08      	subs	r3, #8
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	430a      	orrs	r2, r1
 80010f6:	3306      	adds	r3, #6
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	18c3      	adds	r3, r0, r3
 80010fc:	3304      	adds	r3, #4
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46bd      	mov	sp, r7
 8001104:	b003      	add	sp, #12
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	1e5a      	subs	r2, r3, #1
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	045b      	lsls	r3, r3, #17
 8001120:	429a      	cmp	r2, r3
 8001122:	d301      	bcc.n	8001128 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001124:	2301      	movs	r3, #1
 8001126:	e010      	b.n	800114a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <SysTick_Config+0x44>)
 800112a:	687a      	ldr	r2, [r7, #4]
 800112c:	3a01      	subs	r2, #1
 800112e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001130:	2301      	movs	r3, #1
 8001132:	425b      	negs	r3, r3
 8001134:	2103      	movs	r1, #3
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff ff7c 	bl	8001034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x44>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x44>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	0018      	movs	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	b002      	add	sp, #8
 8001150:	bd80      	pop	{r7, pc}
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	60b9      	str	r1, [r7, #8]
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	210f      	movs	r1, #15
 8001164:	187b      	adds	r3, r7, r1
 8001166:	1c02      	adds	r2, r0, #0
 8001168:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	187b      	adds	r3, r7, r1
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	b25b      	sxtb	r3, r3
 8001172:	0011      	movs	r1, r2
 8001174:	0018      	movs	r0, r3
 8001176:	f7ff ff5d 	bl	8001034 <__NVIC_SetPriority>
}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b004      	add	sp, #16
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	0002      	movs	r2, r0
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	b25b      	sxtb	r3, r3
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff ff33 	bl	8001000 <__NVIC_EnableIRQ>
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46bd      	mov	sp, r7
 800119e:	b002      	add	sp, #8
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff ffaf 	bl	8001110 <SysTick_Config>
 80011b2:	0003      	movs	r3, r0
}
 80011b4:	0018      	movs	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b002      	add	sp, #8
 80011ba:	bd80      	pop	{r7, pc}

080011bc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d101      	bne.n	80011ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e077      	b.n	80012be <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a3d      	ldr	r2, [pc, #244]	; (80012c8 <HAL_DMA_Init+0x10c>)
 80011d4:	4694      	mov	ip, r2
 80011d6:	4463      	add	r3, ip
 80011d8:	2114      	movs	r1, #20
 80011da:	0018      	movs	r0, r3
 80011dc:	f7fe ff90 	bl	8000100 <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	009a      	lsls	r2, r3, #2
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2225      	movs	r2, #37	; 0x25
 80011ec:	2102      	movs	r1, #2
 80011ee:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4934      	ldr	r1, [pc, #208]	; (80012cc <HAL_DMA_Init+0x110>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689a      	ldr	r2, [r3, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	431a      	orrs	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	431a      	orrs	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	431a      	orrs	r2, r3
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	0018      	movs	r0, r3
 800123a:	f000 fa8d 	bl	8001758 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	01db      	lsls	r3, r3, #7
 8001246:	429a      	cmp	r2, r3
 8001248:	d102      	bne.n	8001250 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	213f      	movs	r1, #63	; 0x3f
 800125a:	400a      	ands	r2, r1
 800125c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001266:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d011      	beq.n	8001294 <HAL_DMA_Init+0xd8>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	2b04      	cmp	r3, #4
 8001276:	d80d      	bhi.n	8001294 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	0018      	movs	r0, r3
 800127c:	f000 fa98 	bl	80017b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	e008      	b.n	80012a6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2225      	movs	r2, #37	; 0x25
 80012b0:	2101      	movs	r1, #1
 80012b2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2224      	movs	r2, #36	; 0x24
 80012b8:	2100      	movs	r1, #0
 80012ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	bffdfff8 	.word	0xbffdfff8
 80012cc:	ffff800f 	.word	0xffff800f

080012d0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012de:	2317      	movs	r3, #23
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2224      	movs	r2, #36	; 0x24
 80012ea:	5c9b      	ldrb	r3, [r3, r2]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_DMA_Start_IT+0x24>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e06f      	b.n	80013d4 <HAL_DMA_Start_IT+0x104>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2224      	movs	r2, #36	; 0x24
 80012f8:	2101      	movs	r1, #1
 80012fa:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2225      	movs	r2, #37	; 0x25
 8001300:	5c9b      	ldrb	r3, [r3, r2]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d157      	bne.n	80013b8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2225      	movs	r2, #37	; 0x25
 800130c:	2102      	movs	r1, #2
 800130e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	438a      	bics	r2, r1
 8001324:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	68b9      	ldr	r1, [r7, #8]
 800132c:	68f8      	ldr	r0, [r7, #12]
 800132e:	f000 f9d3 	bl	80016d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	2b00      	cmp	r3, #0
 8001338:	d008      	beq.n	800134c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	210e      	movs	r1, #14
 8001346:	430a      	orrs	r2, r1
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	e00f      	b.n	800136c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2104      	movs	r1, #4
 8001358:	438a      	bics	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	210a      	movs	r1, #10
 8001368:	430a      	orrs	r2, r1
 800136a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	2380      	movs	r3, #128	; 0x80
 8001374:	025b      	lsls	r3, r3, #9
 8001376:	4013      	ands	r3, r2
 8001378:	d008      	beq.n	800138c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	2180      	movs	r1, #128	; 0x80
 8001386:	0049      	lsls	r1, r1, #1
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001390:	2b00      	cmp	r3, #0
 8001392:	d008      	beq.n	80013a6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0049      	lsls	r1, r1, #1
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2101      	movs	r1, #1
 80013b2:	430a      	orrs	r2, r1
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	e00a      	b.n	80013ce <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	2224      	movs	r2, #36	; 0x24
 80013c2:	2100      	movs	r1, #0
 80013c4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80013c6:	2317      	movs	r3, #23
 80013c8:	18fb      	adds	r3, r7, r3
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80013ce:	2317      	movs	r3, #23
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	781b      	ldrb	r3, [r3, #0]
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b006      	add	sp, #24
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e050      	b.n	8001490 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2225      	movs	r2, #37	; 0x25
 80013f2:	5c9b      	ldrb	r3, [r3, r2]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d008      	beq.n	800140c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2204      	movs	r2, #4
 80013fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2224      	movs	r2, #36	; 0x24
 8001404:	2100      	movs	r1, #0
 8001406:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e041      	b.n	8001490 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	210e      	movs	r1, #14
 8001418:	438a      	bics	r2, r1
 800141a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	491c      	ldr	r1, [pc, #112]	; (8001498 <HAL_DMA_Abort+0xbc>)
 8001428:	400a      	ands	r2, r1
 800142a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2101      	movs	r1, #1
 8001438:	438a      	bics	r2, r1
 800143a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800143c:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_DMA_Abort+0xc0>)
 800143e:	6859      	ldr	r1, [r3, #4]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	221c      	movs	r2, #28
 8001446:	4013      	ands	r3, r2
 8001448:	2201      	movs	r2, #1
 800144a:	409a      	lsls	r2, r3
 800144c:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_DMA_Abort+0xc0>)
 800144e:	430a      	orrs	r2, r1
 8001450:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800145a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00c      	beq.n	800147e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146e:	490a      	ldr	r1, [pc, #40]	; (8001498 <HAL_DMA_Abort+0xbc>)
 8001470:	400a      	ands	r2, r1
 8001472:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800147c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2225      	movs	r2, #37	; 0x25
 8001482:	2101      	movs	r1, #1
 8001484:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2224      	movs	r2, #36	; 0x24
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}
 8001498:	fffffeff 	.word	0xfffffeff
 800149c:	40020000 	.word	0x40020000

080014a0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014a8:	210f      	movs	r1, #15
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2225      	movs	r2, #37	; 0x25
 80014b4:	5c9b      	ldrb	r3, [r3, r2]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d006      	beq.n	80014ca <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2204      	movs	r2, #4
 80014c0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	2201      	movs	r2, #1
 80014c6:	701a      	strb	r2, [r3, #0]
 80014c8:	e049      	b.n	800155e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	210e      	movs	r1, #14
 80014d6:	438a      	bics	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	438a      	bics	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f4:	491d      	ldr	r1, [pc, #116]	; (800156c <HAL_DMA_Abort_IT+0xcc>)
 80014f6:	400a      	ands	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <HAL_DMA_Abort_IT+0xd0>)
 80014fc:	6859      	ldr	r1, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	221c      	movs	r2, #28
 8001504:	4013      	ands	r3, r2
 8001506:	2201      	movs	r2, #1
 8001508:	409a      	lsls	r2, r3
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <HAL_DMA_Abort_IT+0xd0>)
 800150c:	430a      	orrs	r2, r1
 800150e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001518:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00c      	beq.n	800153c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800152c:	490f      	ldr	r1, [pc, #60]	; (800156c <HAL_DMA_Abort_IT+0xcc>)
 800152e:	400a      	ands	r2, r1
 8001530:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800153a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2225      	movs	r2, #37	; 0x25
 8001540:	2101      	movs	r1, #1
 8001542:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2224      	movs	r2, #36	; 0x24
 8001548:	2100      	movs	r1, #0
 800154a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	0010      	movs	r0, r2
 800155c:	4798      	blx	r3
    }
  }
  return status;
 800155e:	230f      	movs	r3, #15
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	781b      	ldrb	r3, [r3, #0]
}
 8001564:	0018      	movs	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	b004      	add	sp, #16
 800156a:	bd80      	pop	{r7, pc}
 800156c:	fffffeff 	.word	0xfffffeff
 8001570:	40020000 	.word	0x40020000

08001574 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800157c:	4b55      	ldr	r3, [pc, #340]	; (80016d4 <HAL_DMA_IRQHandler+0x160>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	221c      	movs	r2, #28
 8001590:	4013      	ands	r3, r2
 8001592:	2204      	movs	r2, #4
 8001594:	409a      	lsls	r2, r3
 8001596:	0013      	movs	r3, r2
 8001598:	68fa      	ldr	r2, [r7, #12]
 800159a:	4013      	ands	r3, r2
 800159c:	d027      	beq.n	80015ee <HAL_DMA_IRQHandler+0x7a>
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	2204      	movs	r2, #4
 80015a2:	4013      	ands	r3, r2
 80015a4:	d023      	beq.n	80015ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2220      	movs	r2, #32
 80015ae:	4013      	ands	r3, r2
 80015b0:	d107      	bne.n	80015c2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2104      	movs	r1, #4
 80015be:	438a      	bics	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80015c2:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <HAL_DMA_IRQHandler+0x160>)
 80015c4:	6859      	ldr	r1, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	221c      	movs	r2, #28
 80015cc:	4013      	ands	r3, r2
 80015ce:	2204      	movs	r2, #4
 80015d0:	409a      	lsls	r2, r3
 80015d2:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <HAL_DMA_IRQHandler+0x160>)
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d100      	bne.n	80015e2 <HAL_DMA_IRQHandler+0x6e>
 80015e0:	e073      	b.n	80016ca <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	0010      	movs	r0, r2
 80015ea:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80015ec:	e06d      	b.n	80016ca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	221c      	movs	r2, #28
 80015f4:	4013      	ands	r3, r2
 80015f6:	2202      	movs	r2, #2
 80015f8:	409a      	lsls	r2, r3
 80015fa:	0013      	movs	r3, r2
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4013      	ands	r3, r2
 8001600:	d02e      	beq.n	8001660 <HAL_DMA_IRQHandler+0xec>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d02a      	beq.n	8001660 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2220      	movs	r2, #32
 8001612:	4013      	ands	r3, r2
 8001614:	d10b      	bne.n	800162e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	210a      	movs	r1, #10
 8001622:	438a      	bics	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2225      	movs	r2, #37	; 0x25
 800162a:	2101      	movs	r1, #1
 800162c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_DMA_IRQHandler+0x160>)
 8001630:	6859      	ldr	r1, [r3, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	221c      	movs	r2, #28
 8001638:	4013      	ands	r3, r2
 800163a:	2202      	movs	r2, #2
 800163c:	409a      	lsls	r2, r3
 800163e:	4b25      	ldr	r3, [pc, #148]	; (80016d4 <HAL_DMA_IRQHandler+0x160>)
 8001640:	430a      	orrs	r2, r1
 8001642:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2224      	movs	r2, #36	; 0x24
 8001648:	2100      	movs	r1, #0
 800164a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	2b00      	cmp	r3, #0
 8001652:	d03a      	beq.n	80016ca <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001658:	687a      	ldr	r2, [r7, #4]
 800165a:	0010      	movs	r0, r2
 800165c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800165e:	e034      	b.n	80016ca <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	221c      	movs	r2, #28
 8001666:	4013      	ands	r3, r2
 8001668:	2208      	movs	r2, #8
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	d02b      	beq.n	80016cc <HAL_DMA_IRQHandler+0x158>
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2208      	movs	r2, #8
 8001678:	4013      	ands	r3, r2
 800167a:	d027      	beq.n	80016cc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	210e      	movs	r1, #14
 8001688:	438a      	bics	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_DMA_IRQHandler+0x160>)
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	221c      	movs	r2, #28
 8001696:	4013      	ands	r3, r2
 8001698:	2201      	movs	r2, #1
 800169a:	409a      	lsls	r2, r3
 800169c:	4b0d      	ldr	r3, [pc, #52]	; (80016d4 <HAL_DMA_IRQHandler+0x160>)
 800169e:	430a      	orrs	r2, r1
 80016a0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2225      	movs	r2, #37	; 0x25
 80016ac:	2101      	movs	r1, #1
 80016ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	0010      	movs	r0, r2
 80016c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46c0      	nop			; (mov r8, r8)
}
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b004      	add	sp, #16
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40020000 	.word	0x40020000

080016d8 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
 80016e4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80016ee:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001700:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001702:	4b14      	ldr	r3, [pc, #80]	; (8001754 <DMA_SetConfig+0x7c>)
 8001704:	6859      	ldr	r1, [r3, #4]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	221c      	movs	r2, #28
 800170c:	4013      	ands	r3, r2
 800170e:	2201      	movs	r2, #1
 8001710:	409a      	lsls	r2, r3
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <DMA_SetConfig+0x7c>)
 8001714:	430a      	orrs	r2, r1
 8001716:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b10      	cmp	r3, #16
 8001726:	d108      	bne.n	800173a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68ba      	ldr	r2, [r7, #8]
 8001736:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001738:	e007      	b.n	800174a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	60da      	str	r2, [r3, #12]
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b004      	add	sp, #16
 8001750:	bd80      	pop	{r7, pc}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	40020000 	.word	0x40020000

08001758 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001768:	4694      	mov	ip, r2
 800176a:	4463      	add	r3, ip
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	001a      	movs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	001a      	movs	r2, r3
 800177a:	23ff      	movs	r3, #255	; 0xff
 800177c:	4013      	ands	r3, r2
 800177e:	3b08      	subs	r3, #8
 8001780:	2114      	movs	r1, #20
 8001782:	0018      	movs	r0, r3
 8001784:	f7fe fcbc 	bl	8000100 <__udivsi3>
 8001788:	0003      	movs	r3, r0
 800178a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a07      	ldr	r2, [pc, #28]	; (80017ac <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001790:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	221f      	movs	r2, #31
 8001796:	4013      	ands	r3, r2
 8001798:	2201      	movs	r2, #1
 800179a:	409a      	lsls	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b004      	add	sp, #16
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	10008200 	.word	0x10008200
 80017ac:	40020880 	.word	0x40020880

080017b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	223f      	movs	r2, #63	; 0x3f
 80017be:	4013      	ands	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017c6:	4694      	mov	ip, r2
 80017c8:	4463      	add	r3, ip
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	001a      	movs	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3b01      	subs	r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	4013      	ands	r3, r2
 80017e0:	2201      	movs	r2, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80017e8:	46c0      	nop			; (mov r8, r8)
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b004      	add	sp, #16
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	1000823f 	.word	0x1000823f
 80017f4:	40020940 	.word	0x40020940

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	e147      	b.n	8001a98 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2101      	movs	r1, #1
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4091      	lsls	r1, r2
 8001812:	000a      	movs	r2, r1
 8001814:	4013      	ands	r3, r2
 8001816:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d100      	bne.n	8001820 <HAL_GPIO_Init+0x28>
 800181e:	e138      	b.n	8001a92 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2203      	movs	r2, #3
 8001826:	4013      	ands	r3, r2
 8001828:	2b01      	cmp	r3, #1
 800182a:	d005      	beq.n	8001838 <HAL_GPIO_Init+0x40>
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2203      	movs	r2, #3
 8001832:	4013      	ands	r3, r2
 8001834:	2b02      	cmp	r3, #2
 8001836:	d130      	bne.n	800189a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	409a      	lsls	r2, r3
 8001846:	0013      	movs	r3, r2
 8001848:	43da      	mvns	r2, r3
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800186e:	2201      	movs	r2, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	43da      	mvns	r2, r3
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	2201      	movs	r2, #1
 8001886:	401a      	ands	r2, r3
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	409a      	lsls	r2, r3
 800188c:	0013      	movs	r3, r2
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	2203      	movs	r2, #3
 80018a0:	4013      	ands	r3, r2
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d017      	beq.n	80018d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	2203      	movs	r2, #3
 80018b2:	409a      	lsls	r2, r3
 80018b4:	0013      	movs	r3, r2
 80018b6:	43da      	mvns	r2, r3
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4013      	ands	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	689a      	ldr	r2, [r3, #8]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2203      	movs	r2, #3
 80018dc:	4013      	ands	r3, r2
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d123      	bne.n	800192a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	409a      	lsls	r2, r3
 80018fc:	0013      	movs	r3, r2
 80018fe:	43da      	mvns	r2, r3
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691a      	ldr	r2, [r3, #16]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2107      	movs	r1, #7
 800190e:	400b      	ands	r3, r1
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	409a      	lsls	r2, r3
 8001914:	0013      	movs	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4313      	orrs	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	6939      	ldr	r1, [r7, #16]
 8001928:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	2203      	movs	r2, #3
 8001936:	409a      	lsls	r2, r3
 8001938:	0013      	movs	r3, r2
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2203      	movs	r2, #3
 8001948:	401a      	ands	r2, r3
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	23c0      	movs	r3, #192	; 0xc0
 8001964:	029b      	lsls	r3, r3, #10
 8001966:	4013      	ands	r3, r2
 8001968:	d100      	bne.n	800196c <HAL_GPIO_Init+0x174>
 800196a:	e092      	b.n	8001a92 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800196c:	4a50      	ldr	r2, [pc, #320]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	089b      	lsrs	r3, r3, #2
 8001972:	3318      	adds	r3, #24
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	589b      	ldr	r3, [r3, r2]
 8001978:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2203      	movs	r2, #3
 800197e:	4013      	ands	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	220f      	movs	r2, #15
 8001984:	409a      	lsls	r2, r3
 8001986:	0013      	movs	r3, r2
 8001988:	43da      	mvns	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	23a0      	movs	r3, #160	; 0xa0
 8001994:	05db      	lsls	r3, r3, #23
 8001996:	429a      	cmp	r2, r3
 8001998:	d013      	beq.n	80019c2 <HAL_GPIO_Init+0x1ca>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a45      	ldr	r2, [pc, #276]	; (8001ab4 <HAL_GPIO_Init+0x2bc>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d00d      	beq.n	80019be <HAL_GPIO_Init+0x1c6>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a44      	ldr	r2, [pc, #272]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d007      	beq.n	80019ba <HAL_GPIO_Init+0x1c2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a43      	ldr	r2, [pc, #268]	; (8001abc <HAL_GPIO_Init+0x2c4>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d101      	bne.n	80019b6 <HAL_GPIO_Init+0x1be>
 80019b2:	2303      	movs	r3, #3
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x1cc>
 80019b6:	2305      	movs	r3, #5
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x1cc>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x1cc>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x1cc>
 80019c2:	2300      	movs	r3, #0
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	2103      	movs	r1, #3
 80019c8:	400a      	ands	r2, r1
 80019ca:	00d2      	lsls	r2, r2, #3
 80019cc:	4093      	lsls	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80019d4:	4936      	ldr	r1, [pc, #216]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3318      	adds	r3, #24
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685a      	ldr	r2, [r3, #4]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	035b      	lsls	r3, r3, #13
 80019fa:	4013      	ands	r3, r2
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a06:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001a0c:	4b28      	ldr	r3, [pc, #160]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43da      	mvns	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	2380      	movs	r3, #128	; 0x80
 8001a22:	039b      	lsls	r3, r3, #14
 8001a24:	4013      	ands	r3, r2
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a38:	2384      	movs	r3, #132	; 0x84
 8001a3a:	58d3      	ldr	r3, [r2, r3]
 8001a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	43da      	mvns	r2, r3
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685a      	ldr	r2, [r3, #4]
 8001a4c:	2380      	movs	r3, #128	; 0x80
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	4013      	ands	r3, r2
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a5c:	4914      	ldr	r1, [pc, #80]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a5e:	2284      	movs	r2, #132	; 0x84
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001a64:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	58d3      	ldr	r3, [r2, r3]
 8001a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	025b      	lsls	r3, r3, #9
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001a82:	693a      	ldr	r2, [r7, #16]
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a8a:	4909      	ldr	r1, [pc, #36]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	40da      	lsrs	r2, r3
 8001aa0:	1e13      	subs	r3, r2, #0
 8001aa2:	d000      	beq.n	8001aa6 <HAL_GPIO_Init+0x2ae>
 8001aa4:	e6b0      	b.n	8001808 <HAL_GPIO_Init+0x10>
  }
}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	46c0      	nop			; (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b006      	add	sp, #24
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40021800 	.word	0x40021800
 8001ab4:	50000400 	.word	0x50000400
 8001ab8:	50000800 	.word	0x50000800
 8001abc:	50000c00 	.word	0x50000c00

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	0008      	movs	r0, r1
 8001aca:	0011      	movs	r1, r2
 8001acc:	1cbb      	adds	r3, r7, #2
 8001ace:	1c02      	adds	r2, r0, #0
 8001ad0:	801a      	strh	r2, [r3, #0]
 8001ad2:	1c7b      	adds	r3, r7, #1
 8001ad4:	1c0a      	adds	r2, r1, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ad8:	1c7b      	adds	r3, r7, #1
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d004      	beq.n	8001aea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ae0:	1cbb      	adds	r3, r7, #2
 8001ae2:	881a      	ldrh	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ae8:	e003      	b.n	8001af2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001aea:	1cbb      	adds	r3, r7, #2
 8001aec:	881a      	ldrh	r2, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	b002      	add	sp, #8
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e082      	b.n	8001c14 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2241      	movs	r2, #65	; 0x41
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d107      	bne.n	8001b2a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2240      	movs	r2, #64	; 0x40
 8001b1e:	2100      	movs	r1, #0
 8001b20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f7fe feb9 	bl	800089c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2241      	movs	r2, #65	; 0x41
 8001b2e:	2124      	movs	r1, #36	; 0x24
 8001b30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	438a      	bics	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4934      	ldr	r1, [pc, #208]	; (8001c1c <HAL_I2C_Init+0x120>)
 8001b4c:	400a      	ands	r2, r1
 8001b4e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4931      	ldr	r1, [pc, #196]	; (8001c20 <HAL_I2C_Init+0x124>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d108      	bne.n	8001b7a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2180      	movs	r1, #128	; 0x80
 8001b72:	0209      	lsls	r1, r1, #8
 8001b74:	430a      	orrs	r2, r1
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	e007      	b.n	8001b8a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2184      	movs	r1, #132	; 0x84
 8001b84:	0209      	lsls	r1, r1, #8
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d104      	bne.n	8001b9c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2280      	movs	r2, #128	; 0x80
 8001b98:	0112      	lsls	r2, r2, #4
 8001b9a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	491f      	ldr	r1, [pc, #124]	; (8001c24 <HAL_I2C_Init+0x128>)
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	491a      	ldr	r1, [pc, #104]	; (8001c20 <HAL_I2C_Init+0x124>)
 8001bb8:	400a      	ands	r2, r1
 8001bba:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	431a      	orrs	r2, r3
 8001bc6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69d9      	ldr	r1, [r3, #28]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a1a      	ldr	r2, [r3, #32]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2241      	movs	r2, #65	; 0x41
 8001c00:	2120      	movs	r1, #32
 8001c02:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2242      	movs	r2, #66	; 0x42
 8001c0e:	2100      	movs	r1, #0
 8001c10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	0018      	movs	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b002      	add	sp, #8
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	f0ffffff 	.word	0xf0ffffff
 8001c20:	ffff7fff 	.word	0xffff7fff
 8001c24:	02008000 	.word	0x02008000

08001c28 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	0008      	movs	r0, r1
 8001c32:	607a      	str	r2, [r7, #4]
 8001c34:	0019      	movs	r1, r3
 8001c36:	230a      	movs	r3, #10
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	1c02      	adds	r2, r0, #0
 8001c3c:	801a      	strh	r2, [r3, #0]
 8001c3e:	2308      	movs	r3, #8
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	1c0a      	adds	r2, r1, #0
 8001c44:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2241      	movs	r2, #65	; 0x41
 8001c4a:	5c9b      	ldrb	r3, [r3, r2]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	d000      	beq.n	8001c54 <HAL_I2C_Master_Transmit+0x2c>
 8001c52:	e0e7      	b.n	8001e24 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2240      	movs	r2, #64	; 0x40
 8001c58:	5c9b      	ldrb	r3, [r3, r2]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d101      	bne.n	8001c62 <HAL_I2C_Master_Transmit+0x3a>
 8001c5e:	2302      	movs	r3, #2
 8001c60:	e0e1      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1fe>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	2101      	movs	r1, #1
 8001c68:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c6a:	f7ff f97f 	bl	8000f6c <HAL_GetTick>
 8001c6e:	0003      	movs	r3, r0
 8001c70:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	0219      	lsls	r1, r3, #8
 8001c76:	68f8      	ldr	r0, [r7, #12]
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2319      	movs	r3, #25
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f000 f8fc 	bl	8001e7c <I2C_WaitOnFlagUntilTimeout>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0cc      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2241      	movs	r2, #65	; 0x41
 8001c90:	2121      	movs	r1, #33	; 0x21
 8001c92:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2242      	movs	r2, #66	; 0x42
 8001c98:	2110      	movs	r1, #16
 8001c9a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2208      	movs	r2, #8
 8001cac:	18ba      	adds	r2, r7, r2
 8001cae:	8812      	ldrh	r2, [r2, #0]
 8001cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2bff      	cmp	r3, #255	; 0xff
 8001cc0:	d911      	bls.n	8001ce6 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	22ff      	movs	r2, #255	; 0xff
 8001cc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	045c      	lsls	r4, r3, #17
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	18fb      	adds	r3, r7, r3
 8001cd6:	8819      	ldrh	r1, [r3, #0]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	4b55      	ldr	r3, [pc, #340]	; (8001e30 <HAL_I2C_Master_Transmit+0x208>)
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	0023      	movs	r3, r4
 8001ce0:	f000 fa86 	bl	80021f0 <I2C_TransferConfig>
 8001ce4:	e075      	b.n	8001dd2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	049c      	lsls	r4, r3, #18
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	8819      	ldrh	r1, [r3, #0]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	4b4b      	ldr	r3, [pc, #300]	; (8001e30 <HAL_I2C_Master_Transmit+0x208>)
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	0023      	movs	r3, r4
 8001d08:	f000 fa72 	bl	80021f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d0c:	e061      	b.n	8001dd2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 f8f0 	bl	8001efa <I2C_WaitOnTXISFlagUntilTimeout>
 8001d1a:	1e03      	subs	r3, r0, #0
 8001d1c:	d001      	beq.n	8001d22 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e081      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	781a      	ldrb	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d03a      	beq.n	8001dd2 <HAL_I2C_Master_Transmit+0x1aa>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d136      	bne.n	8001dd2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d66:	68f8      	ldr	r0, [r7, #12]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	f000 f883 	bl	8001e7c <I2C_WaitOnFlagUntilTimeout>
 8001d76:	1e03      	subs	r3, r0, #0
 8001d78:	d001      	beq.n	8001d7e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e053      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	2bff      	cmp	r3, #255	; 0xff
 8001d86:	d911      	bls.n	8001dac <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	22ff      	movs	r2, #255	; 0xff
 8001d8c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	045c      	lsls	r4, r3, #17
 8001d98:	230a      	movs	r3, #10
 8001d9a:	18fb      	adds	r3, r7, r3
 8001d9c:	8819      	ldrh	r1, [r3, #0]
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	2300      	movs	r3, #0
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	0023      	movs	r3, r4
 8001da6:	f000 fa23 	bl	80021f0 <I2C_TransferConfig>
 8001daa:	e012      	b.n	8001dd2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	049c      	lsls	r4, r3, #18
 8001dc0:	230a      	movs	r3, #10
 8001dc2:	18fb      	adds	r3, r7, r3
 8001dc4:	8819      	ldrh	r1, [r3, #0]
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	0023      	movs	r3, r4
 8001dce:	f000 fa0f 	bl	80021f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d198      	bne.n	8001d0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f8c8 	bl	8001f78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001de8:	1e03      	subs	r3, r0, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e01a      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2220      	movs	r2, #32
 8001df6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	490c      	ldr	r1, [pc, #48]	; (8001e34 <HAL_I2C_Master_Transmit+0x20c>)
 8001e04:	400a      	ands	r2, r1
 8001e06:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2241      	movs	r2, #65	; 0x41
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2242      	movs	r2, #66	; 0x42
 8001e14:	2100      	movs	r1, #0
 8001e16:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
  }
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b007      	add	sp, #28
 8001e2c:	bd90      	pop	{r4, r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	80002000 	.word	0x80002000
 8001e34:	fe00e800 	.word	0xfe00e800

08001e38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2202      	movs	r2, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d103      	bne.n	8001e56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d007      	beq.n	8001e74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	699a      	ldr	r2, [r3, #24]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	619a      	str	r2, [r3, #24]
  }
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b002      	add	sp, #8
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	603b      	str	r3, [r7, #0]
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e8c:	e021      	b.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	3301      	adds	r3, #1
 8001e92:	d01e      	beq.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e94:	f7ff f86a 	bl	8000f6c <HAL_GetTick>
 8001e98:	0002      	movs	r2, r0
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d302      	bcc.n	8001eaa <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d113      	bne.n	8001ed2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eae:	2220      	movs	r2, #32
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2241      	movs	r2, #65	; 0x41
 8001eba:	2120      	movs	r1, #32
 8001ebc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2242      	movs	r2, #66	; 0x42
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2240      	movs	r2, #64	; 0x40
 8001eca:	2100      	movs	r1, #0
 8001ecc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e00f      	b.n	8001ef2 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	68ba      	ldr	r2, [r7, #8]
 8001eda:	4013      	ands	r3, r2
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	425a      	negs	r2, r3
 8001ee2:	4153      	adcs	r3, r2
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	001a      	movs	r2, r3
 8001ee8:	1dfb      	adds	r3, r7, #7
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d0ce      	beq.n	8001e8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	0018      	movs	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b004      	add	sp, #16
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b084      	sub	sp, #16
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f06:	e02b      	b.n	8001f60 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f08:	687a      	ldr	r2, [r7, #4]
 8001f0a:	68b9      	ldr	r1, [r7, #8]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	0018      	movs	r0, r3
 8001f10:	f000 f86e 	bl	8001ff0 <I2C_IsErrorOccurred>
 8001f14:	1e03      	subs	r3, r0, #0
 8001f16:	d001      	beq.n	8001f1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e029      	b.n	8001f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	d01e      	beq.n	8001f60 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f22:	f7ff f823 	bl	8000f6c <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	68ba      	ldr	r2, [r7, #8]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d302      	bcc.n	8001f38 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d113      	bne.n	8001f60 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2241      	movs	r2, #65	; 0x41
 8001f48:	2120      	movs	r1, #32
 8001f4a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2242      	movs	r2, #66	; 0x42
 8001f50:	2100      	movs	r1, #0
 8001f52:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2240      	movs	r2, #64	; 0x40
 8001f58:	2100      	movs	r1, #0
 8001f5a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e007      	b.n	8001f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	2202      	movs	r2, #2
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d1cc      	bne.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f84:	e028      	b.n	8001fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 f82f 	bl	8001ff0 <I2C_IsErrorOccurred>
 8001f92:	1e03      	subs	r3, r0, #0
 8001f94:	d001      	beq.n	8001f9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e026      	b.n	8001fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f9a:	f7fe ffe7 	bl	8000f6c <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	68ba      	ldr	r2, [r7, #8]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d302      	bcc.n	8001fb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d113      	bne.n	8001fd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2241      	movs	r2, #65	; 0x41
 8001fc0:	2120      	movs	r1, #32
 8001fc2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2242      	movs	r2, #66	; 0x42
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e007      	b.n	8001fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b20      	cmp	r3, #32
 8001fe4:	d1cf      	bne.n	8001f86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b004      	add	sp, #16
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b08b      	sub	sp, #44	; 0x2c
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2327      	movs	r3, #39	; 0x27
 8001ffe:	18fb      	adds	r3, r7, r3
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2210      	movs	r2, #16
 8002018:	4013      	ands	r3, r2
 800201a:	d100      	bne.n	800201e <I2C_IsErrorOccurred+0x2e>
 800201c:	e082      	b.n	8002124 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2210      	movs	r2, #16
 8002024:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002026:	e060      	b.n	80020ea <I2C_IsErrorOccurred+0xfa>
 8002028:	2427      	movs	r4, #39	; 0x27
 800202a:	193b      	adds	r3, r7, r4
 800202c:	193a      	adds	r2, r7, r4
 800202e:	7812      	ldrb	r2, [r2, #0]
 8002030:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3301      	adds	r3, #1
 8002036:	d058      	beq.n	80020ea <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002038:	f7fe ff98 	bl	8000f6c <HAL_GetTick>
 800203c:	0002      	movs	r2, r0
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	429a      	cmp	r2, r3
 8002046:	d306      	bcc.n	8002056 <I2C_IsErrorOccurred+0x66>
 8002048:	193b      	adds	r3, r7, r4
 800204a:	193a      	adds	r2, r7, r4
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d149      	bne.n	80020ea <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	01db      	lsls	r3, r3, #7
 8002060:	4013      	ands	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002064:	2013      	movs	r0, #19
 8002066:	183b      	adds	r3, r7, r0
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	2142      	movs	r1, #66	; 0x42
 800206c:	5c52      	ldrb	r2, [r2, r1]
 800206e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	2380      	movs	r3, #128	; 0x80
 8002078:	021b      	lsls	r3, r3, #8
 800207a:	401a      	ands	r2, r3
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	021b      	lsls	r3, r3, #8
 8002080:	429a      	cmp	r2, r3
 8002082:	d126      	bne.n	80020d2 <I2C_IsErrorOccurred+0xe2>
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	01db      	lsls	r3, r3, #7
 800208a:	429a      	cmp	r2, r3
 800208c:	d021      	beq.n	80020d2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 800208e:	183b      	adds	r3, r7, r0
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b20      	cmp	r3, #32
 8002094:	d01d      	beq.n	80020d2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	01c9      	lsls	r1, r1, #7
 80020a4:	430a      	orrs	r2, r1
 80020a6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020a8:	f7fe ff60 	bl	8000f6c <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020b0:	e00f      	b.n	80020d2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020b2:	f7fe ff5b 	bl	8000f6c <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b19      	cmp	r3, #25
 80020be:	d908      	bls.n	80020d2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80020c0:	6a3b      	ldr	r3, [r7, #32]
 80020c2:	2220      	movs	r2, #32
 80020c4:	4313      	orrs	r3, r2
 80020c6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020c8:	2327      	movs	r3, #39	; 0x27
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]

              break;
 80020d0:	e00b      	b.n	80020ea <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	2220      	movs	r2, #32
 80020da:	4013      	ands	r3, r2
 80020dc:	2127      	movs	r1, #39	; 0x27
 80020de:	187a      	adds	r2, r7, r1
 80020e0:	1879      	adds	r1, r7, r1
 80020e2:	7809      	ldrb	r1, [r1, #0]
 80020e4:	7011      	strb	r1, [r2, #0]
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d1e3      	bne.n	80020b2 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2220      	movs	r2, #32
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d004      	beq.n	8002102 <I2C_IsErrorOccurred+0x112>
 80020f8:	2327      	movs	r3, #39	; 0x27
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d092      	beq.n	8002028 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002102:	2327      	movs	r3, #39	; 0x27
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d103      	bne.n	8002114 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2220      	movs	r2, #32
 8002112:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	2204      	movs	r2, #4
 8002118:	4313      	orrs	r3, r2
 800211a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800211c:	2327      	movs	r3, #39	; 0x27
 800211e:	18fb      	adds	r3, r7, r3
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	4013      	ands	r3, r2
 8002134:	d00c      	beq.n	8002150 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	2201      	movs	r2, #1
 800213a:	4313      	orrs	r3, r2
 800213c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	0052      	lsls	r2, r2, #1
 8002146:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002148:	2327      	movs	r3, #39	; 0x27
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	2380      	movs	r3, #128	; 0x80
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4013      	ands	r3, r2
 8002158:	d00c      	beq.n	8002174 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	2208      	movs	r2, #8
 800215e:	4313      	orrs	r3, r2
 8002160:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2280      	movs	r2, #128	; 0x80
 8002168:	00d2      	lsls	r2, r2, #3
 800216a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800216c:	2327      	movs	r3, #39	; 0x27
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	2201      	movs	r2, #1
 8002172:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4013      	ands	r3, r2
 800217c:	d00c      	beq.n	8002198 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800217e:	6a3b      	ldr	r3, [r7, #32]
 8002180:	2202      	movs	r2, #2
 8002182:	4313      	orrs	r3, r2
 8002184:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002190:	2327      	movs	r3, #39	; 0x27
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	2201      	movs	r2, #1
 8002196:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002198:	2327      	movs	r3, #39	; 0x27
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01d      	beq.n	80021de <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	0018      	movs	r0, r3
 80021a6:	f7ff fe47 	bl	8001e38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	490d      	ldr	r1, [pc, #52]	; (80021ec <I2C_IsErrorOccurred+0x1fc>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2241      	movs	r2, #65	; 0x41
 80021ca:	2120      	movs	r1, #32
 80021cc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2242      	movs	r2, #66	; 0x42
 80021d2:	2100      	movs	r1, #0
 80021d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2240      	movs	r2, #64	; 0x40
 80021da:	2100      	movs	r1, #0
 80021dc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80021de:	2327      	movs	r3, #39	; 0x27
 80021e0:	18fb      	adds	r3, r7, r3
 80021e2:	781b      	ldrb	r3, [r3, #0]
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b00b      	add	sp, #44	; 0x2c
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	fe00e800 	.word	0xfe00e800

080021f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	0008      	movs	r0, r1
 80021fa:	0011      	movs	r1, r2
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	240a      	movs	r4, #10
 8002200:	193b      	adds	r3, r7, r4
 8002202:	1c02      	adds	r2, r0, #0
 8002204:	801a      	strh	r2, [r3, #0]
 8002206:	2009      	movs	r0, #9
 8002208:	183b      	adds	r3, r7, r0
 800220a:	1c0a      	adds	r2, r1, #0
 800220c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800220e:	193b      	adds	r3, r7, r4
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	059b      	lsls	r3, r3, #22
 8002214:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002216:	183b      	adds	r3, r7, r0
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	0419      	lsls	r1, r3, #16
 800221c:	23ff      	movs	r3, #255	; 0xff
 800221e:	041b      	lsls	r3, r3, #16
 8002220:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002222:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222a:	4313      	orrs	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	085b      	lsrs	r3, r3, #1
 8002230:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800223a:	0d51      	lsrs	r1, r2, #21
 800223c:	2280      	movs	r2, #128	; 0x80
 800223e:	00d2      	lsls	r2, r2, #3
 8002240:	400a      	ands	r2, r1
 8002242:	4907      	ldr	r1, [pc, #28]	; (8002260 <I2C_TransferConfig+0x70>)
 8002244:	430a      	orrs	r2, r1
 8002246:	43d2      	mvns	r2, r2
 8002248:	401a      	ands	r2, r3
 800224a:	0011      	movs	r1, r2
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	430a      	orrs	r2, r1
 8002254:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002256:	46c0      	nop			; (mov r8, r8)
 8002258:	46bd      	mov	sp, r7
 800225a:	b007      	add	sp, #28
 800225c:	bd90      	pop	{r4, r7, pc}
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	03ff63ff 	.word	0x03ff63ff

08002264 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2241      	movs	r2, #65	; 0x41
 8002272:	5c9b      	ldrb	r3, [r3, r2]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b20      	cmp	r3, #32
 8002278:	d138      	bne.n	80022ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2240      	movs	r2, #64	; 0x40
 800227e:	5c9b      	ldrb	r3, [r3, r2]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d101      	bne.n	8002288 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002284:	2302      	movs	r3, #2
 8002286:	e032      	b.n	80022ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2240      	movs	r2, #64	; 0x40
 800228c:	2101      	movs	r1, #1
 800228e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2241      	movs	r2, #65	; 0x41
 8002294:	2124      	movs	r1, #36	; 0x24
 8002296:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2101      	movs	r1, #1
 80022a4:	438a      	bics	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4911      	ldr	r1, [pc, #68]	; (80022f8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	430a      	orrs	r2, r1
 80022c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2101      	movs	r1, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2241      	movs	r2, #65	; 0x41
 80022dc:	2120      	movs	r1, #32
 80022de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2240      	movs	r2, #64	; 0x40
 80022e4:	2100      	movs	r1, #0
 80022e6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e000      	b.n	80022ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022ec:	2302      	movs	r3, #2
  }
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b002      	add	sp, #8
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	ffffefff 	.word	0xffffefff

080022fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2241      	movs	r2, #65	; 0x41
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b20      	cmp	r3, #32
 8002310:	d139      	bne.n	8002386 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2240      	movs	r2, #64	; 0x40
 8002316:	5c9b      	ldrb	r3, [r3, r2]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d101      	bne.n	8002320 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800231c:	2302      	movs	r3, #2
 800231e:	e033      	b.n	8002388 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2240      	movs	r2, #64	; 0x40
 8002324:	2101      	movs	r1, #1
 8002326:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2241      	movs	r2, #65	; 0x41
 800232c:	2124      	movs	r1, #36	; 0x24
 800232e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2101      	movs	r1, #1
 800233c:	438a      	bics	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	4a11      	ldr	r2, [pc, #68]	; (8002390 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	68fa      	ldr	r2, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2101      	movs	r1, #1
 800236e:	430a      	orrs	r2, r1
 8002370:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2241      	movs	r2, #65	; 0x41
 8002376:	2120      	movs	r1, #32
 8002378:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2240      	movs	r2, #64	; 0x40
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	e000      	b.n	8002388 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
  }
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b004      	add	sp, #16
 800238e:	bd80      	pop	{r7, pc}
 8002390:	fffff0ff 	.word	0xfffff0ff

08002394 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	000a      	movs	r2, r1
 800239e:	1cfb      	adds	r3, r7, #3
 80023a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 80023a8:	4b13      	ldr	r3, [pc, #76]	; (80023f8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d10c      	bne.n	80023ce <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80023b4:	f000 f864 	bl	8002480 <HAL_PWREx_EnableLowPowerRunMode>
 80023b8:	e009      	b.n	80023ce <HAL_PWR_EnterSLEEPMode+0x3a>
    }
  }
  else
  {
    /* If in low-power run mode at this point, exit it */
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 80023ba:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_PWR_EnterSLEEPMode+0x64>)
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	2380      	movs	r3, #128	; 0x80
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4013      	ands	r3, r2
 80023c4:	d003      	beq.n	80023ce <HAL_PWR_EnterSLEEPMode+0x3a>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80023c6:	f000 f869 	bl	800249c <HAL_PWREx_DisableLowPowerRunMode>
 80023ca:	1e03      	subs	r3, r0, #0
 80023cc:	d10f      	bne.n	80023ee <HAL_PWR_EnterSLEEPMode+0x5a>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <HAL_PWR_EnterSLEEPMode+0x68>)
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <HAL_PWR_EnterSLEEPMode+0x68>)
 80023d4:	2104      	movs	r1, #4
 80023d6:	438a      	bics	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80023da:	1cfb      	adds	r3, r7, #3
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80023e2:	bf30      	wfi
 80023e4:	e004      	b.n	80023f0 <HAL_PWR_EnterSLEEPMode+0x5c>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80023e6:	bf40      	sev
    __WFE();
 80023e8:	bf20      	wfe
    __WFE();
 80023ea:	bf20      	wfe
 80023ec:	e000      	b.n	80023f0 <HAL_PWR_EnterSLEEPMode+0x5c>
        return ;
 80023ee:	46c0      	nop			; (mov r8, r8)
  }
}
 80023f0:	46bd      	mov	sp, r7
 80023f2:	b002      	add	sp, #8
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	46c0      	nop			; (mov r8, r8)
 80023f8:	40007000 	.word	0x40007000
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b084      	sub	sp, #16
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	4b17      	ldr	r3, [pc, #92]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d11f      	bne.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	0013      	movs	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	189b      	adds	r3, r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4912      	ldr	r1, [pc, #72]	; (800247c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002432:	0018      	movs	r0, r3
 8002434:	f7fd fe64 	bl	8000100 <__udivsi3>
 8002438:	0003      	movs	r3, r0
 800243a:	3301      	adds	r3, #1
 800243c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800243e:	e008      	b.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	3b01      	subs	r3, #1
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e001      	b.n	8002452 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e009      	b.n	8002466 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002452:	4b07      	ldr	r3, [pc, #28]	; (8002470 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002454:	695a      	ldr	r2, [r3, #20]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	401a      	ands	r2, r3
 800245c:	2380      	movs	r3, #128	; 0x80
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	429a      	cmp	r2, r3
 8002462:	d0ed      	beq.n	8002440 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b004      	add	sp, #16
 800246c:	bd80      	pop	{r7, pc}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	40007000 	.word	0x40007000
 8002474:	fffff9ff 	.word	0xfffff9ff
 8002478:	2000002c 	.word	0x2000002c
 800247c:	000f4240 	.word	0x000f4240

08002480 <HAL_PWREx_EnableLowPowerRunMode>:
  *        low power run mode
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002484:	4b04      	ldr	r3, [pc, #16]	; (8002498 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800248a:	2180      	movs	r1, #128	; 0x80
 800248c:	01c9      	lsls	r1, r1, #7
 800248e:	430a      	orrs	r2, r1
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	46c0      	nop			; (mov r8, r8)
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40007000 	.word	0x40007000

0800249c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80024a2:	4b15      	ldr	r3, [pc, #84]	; (80024f8 <HAL_PWREx_DisableLowPowerRunMode+0x5c>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	0013      	movs	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	189b      	adds	r3, r3, r2
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4913      	ldr	r1, [pc, #76]	; (80024fc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7fd fe25 	bl	8000100 <__udivsi3>
 80024b6:	0003      	movs	r3, r0
 80024b8:	3301      	adds	r3, #1
 80024ba:	607b      	str	r3, [r7, #4]

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80024c2:	4910      	ldr	r1, [pc, #64]	; (8002504 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80024c4:	400a      	ands	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80024c8:	e008      	b.n	80024dc <HAL_PWREx_DisableLowPowerRunMode+0x40>
  {
    if (wait_loop_index != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
    {
      wait_loop_index--;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	607b      	str	r3, [r7, #4]
 80024d6:	e001      	b.n	80024dc <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
    else
    {
      return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e009      	b.n	80024f0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80024dc:	4b08      	ldr	r3, [pc, #32]	; (8002500 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	401a      	ands	r2, r3
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d0ed      	beq.n	80024ca <HAL_PWREx_DisableLowPowerRunMode+0x2e>
    }
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	0018      	movs	r0, r3
 80024f2:	46bd      	mov	sp, r7
 80024f4:	b002      	add	sp, #8
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	2000002c 	.word	0x2000002c
 80024fc:	000f4240 	.word	0x000f4240
 8002500:	40007000 	.word	0x40007000
 8002504:	ffffbfff 	.word	0xffffbfff

08002508 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <LL_RCC_GetAPB1Prescaler+0x14>)
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	23e0      	movs	r3, #224	; 0xe0
 8002512:	01db      	lsls	r3, r3, #7
 8002514:	4013      	ands	r3, r2
}
 8002516:	0018      	movs	r0, r3
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e2f3      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	4013      	ands	r3, r2
 800253a:	d100      	bne.n	800253e <HAL_RCC_OscConfig+0x1e>
 800253c:	e07c      	b.n	8002638 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800253e:	4bc3      	ldr	r3, [pc, #780]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2238      	movs	r2, #56	; 0x38
 8002544:	4013      	ands	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002548:	4bc0      	ldr	r3, [pc, #768]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	2203      	movs	r2, #3
 800254e:	4013      	ands	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b10      	cmp	r3, #16
 8002556:	d102      	bne.n	800255e <HAL_RCC_OscConfig+0x3e>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d002      	beq.n	8002564 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d10b      	bne.n	800257c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002564:	4bb9      	ldr	r3, [pc, #740]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	2380      	movs	r3, #128	; 0x80
 800256a:	029b      	lsls	r3, r3, #10
 800256c:	4013      	ands	r3, r2
 800256e:	d062      	beq.n	8002636 <HAL_RCC_OscConfig+0x116>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d15e      	bne.n	8002636 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e2ce      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	2380      	movs	r3, #128	; 0x80
 8002582:	025b      	lsls	r3, r3, #9
 8002584:	429a      	cmp	r2, r3
 8002586:	d107      	bne.n	8002598 <HAL_RCC_OscConfig+0x78>
 8002588:	4bb0      	ldr	r3, [pc, #704]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4baf      	ldr	r3, [pc, #700]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	0249      	lsls	r1, r1, #9
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e020      	b.n	80025da <HAL_RCC_OscConfig+0xba>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	23a0      	movs	r3, #160	; 0xa0
 800259e:	02db      	lsls	r3, r3, #11
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10e      	bne.n	80025c2 <HAL_RCC_OscConfig+0xa2>
 80025a4:	4ba9      	ldr	r3, [pc, #676]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	4ba8      	ldr	r3, [pc, #672]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80025aa:	2180      	movs	r1, #128	; 0x80
 80025ac:	02c9      	lsls	r1, r1, #11
 80025ae:	430a      	orrs	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	4ba6      	ldr	r3, [pc, #664]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	4ba5      	ldr	r3, [pc, #660]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80025b8:	2180      	movs	r1, #128	; 0x80
 80025ba:	0249      	lsls	r1, r1, #9
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0xba>
 80025c2:	4ba2      	ldr	r3, [pc, #648]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	4ba1      	ldr	r3, [pc, #644]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80025c8:	49a1      	ldr	r1, [pc, #644]	; (8002850 <HAL_RCC_OscConfig+0x330>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	4b9f      	ldr	r3, [pc, #636]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b9e      	ldr	r3, [pc, #632]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80025d4:	499f      	ldr	r1, [pc, #636]	; (8002854 <HAL_RCC_OscConfig+0x334>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d014      	beq.n	800260c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e2:	f7fe fcc3 	bl	8000f6c <HAL_GetTick>
 80025e6:	0003      	movs	r3, r0
 80025e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ec:	f7fe fcbe 	bl	8000f6c <HAL_GetTick>
 80025f0:	0002      	movs	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b64      	cmp	r3, #100	; 0x64
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e28d      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025fe:	4b93      	ldr	r3, [pc, #588]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	029b      	lsls	r3, r3, #10
 8002606:	4013      	ands	r3, r2
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0xcc>
 800260a:	e015      	b.n	8002638 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7fe fcae 	bl	8000f6c <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002616:	f7fe fca9 	bl	8000f6c <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b64      	cmp	r3, #100	; 0x64
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e278      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002628:	4b88      	ldr	r3, [pc, #544]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	; 0x80
 800262e:	029b      	lsls	r3, r3, #10
 8002630:	4013      	ands	r3, r2
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0xf6>
 8002634:	e000      	b.n	8002638 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002636:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2202      	movs	r2, #2
 800263e:	4013      	ands	r3, r2
 8002640:	d100      	bne.n	8002644 <HAL_RCC_OscConfig+0x124>
 8002642:	e099      	b.n	8002778 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002644:	4b81      	ldr	r3, [pc, #516]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2238      	movs	r2, #56	; 0x38
 800264a:	4013      	ands	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264e:	4b7f      	ldr	r3, [pc, #508]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2203      	movs	r2, #3
 8002654:	4013      	ands	r3, r2
 8002656:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	2b10      	cmp	r3, #16
 800265c:	d102      	bne.n	8002664 <HAL_RCC_OscConfig+0x144>
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b02      	cmp	r3, #2
 8002662:	d002      	beq.n	800266a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d135      	bne.n	80026d6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800266a:	4b78      	ldr	r3, [pc, #480]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4013      	ands	r3, r2
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x162>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e24b      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b72      	ldr	r3, [pc, #456]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4a74      	ldr	r2, [pc, #464]	; (8002858 <HAL_RCC_OscConfig+0x338>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	021a      	lsls	r2, r3, #8
 8002692:	4b6e      	ldr	r3, [pc, #440]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002694:	430a      	orrs	r2, r1
 8002696:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d112      	bne.n	80026c4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800269e:	4b6b      	ldr	r3, [pc, #428]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6e      	ldr	r2, [pc, #440]	; (800285c <HAL_RCC_OscConfig+0x33c>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	0019      	movs	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691a      	ldr	r2, [r3, #16]
 80026ac:	4b67      	ldr	r3, [pc, #412]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80026ae:	430a      	orrs	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80026b2:	4b66      	ldr	r3, [pc, #408]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	0adb      	lsrs	r3, r3, #11
 80026b8:	2207      	movs	r2, #7
 80026ba:	4013      	ands	r3, r2
 80026bc:	4a68      	ldr	r2, [pc, #416]	; (8002860 <HAL_RCC_OscConfig+0x340>)
 80026be:	40da      	lsrs	r2, r3
 80026c0:	4b68      	ldr	r3, [pc, #416]	; (8002864 <HAL_RCC_OscConfig+0x344>)
 80026c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x348>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f7fe fbf3 	bl	8000eb4 <HAL_InitTick>
 80026ce:	1e03      	subs	r3, r0, #0
 80026d0:	d051      	beq.n	8002776 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e221      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d030      	beq.n	8002740 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80026de:	4b5b      	ldr	r3, [pc, #364]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a5e      	ldr	r2, [pc, #376]	; (800285c <HAL_RCC_OscConfig+0x33c>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	4b57      	ldr	r3, [pc, #348]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80026f2:	4b56      	ldr	r3, [pc, #344]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4b55      	ldr	r3, [pc, #340]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80026f8:	2180      	movs	r1, #128	; 0x80
 80026fa:	0049      	lsls	r1, r1, #1
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7fe fc34 	bl	8000f6c <HAL_GetTick>
 8002704:	0003      	movs	r3, r0
 8002706:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270a:	f7fe fc2f 	bl	8000f6c <HAL_GetTick>
 800270e:	0002      	movs	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1fe      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800271c:	4b4b      	ldr	r3, [pc, #300]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4013      	ands	r3, r2
 8002726:	d0f0      	beq.n	800270a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b48      	ldr	r3, [pc, #288]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a4a      	ldr	r2, [pc, #296]	; (8002858 <HAL_RCC_OscConfig+0x338>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	021a      	lsls	r2, r3, #8
 8002738:	4b44      	ldr	r3, [pc, #272]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800273a:	430a      	orrs	r2, r1
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	e01b      	b.n	8002778 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002740:	4b42      	ldr	r3, [pc, #264]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	4b41      	ldr	r3, [pc, #260]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002746:	4949      	ldr	r1, [pc, #292]	; (800286c <HAL_RCC_OscConfig+0x34c>)
 8002748:	400a      	ands	r2, r1
 800274a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7fe fc0e 	bl	8000f6c <HAL_GetTick>
 8002750:	0003      	movs	r3, r0
 8002752:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002756:	f7fe fc09 	bl	8000f6c <HAL_GetTick>
 800275a:	0002      	movs	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1d8      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4013      	ands	r3, r2
 8002772:	d1f0      	bne.n	8002756 <HAL_RCC_OscConfig+0x236>
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002776:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2208      	movs	r2, #8
 800277e:	4013      	ands	r3, r2
 8002780:	d047      	beq.n	8002812 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002782:	4b32      	ldr	r3, [pc, #200]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2238      	movs	r2, #56	; 0x38
 8002788:	4013      	ands	r3, r2
 800278a:	2b18      	cmp	r3, #24
 800278c:	d10a      	bne.n	80027a4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	2202      	movs	r2, #2
 8002794:	4013      	ands	r3, r2
 8002796:	d03c      	beq.n	8002812 <HAL_RCC_OscConfig+0x2f2>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d138      	bne.n	8002812 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e1ba      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d019      	beq.n	80027e0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80027ac:	4b27      	ldr	r3, [pc, #156]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80027ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80027b2:	2101      	movs	r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7fe fbd8 	bl	8000f6c <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c2:	f7fe fbd3 	bl	8000f6c <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e1a2      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027d4:	4b1d      	ldr	r3, [pc, #116]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80027d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027d8:	2202      	movs	r2, #2
 80027da:	4013      	ands	r3, r2
 80027dc:	d0f1      	beq.n	80027c2 <HAL_RCC_OscConfig+0x2a2>
 80027de:	e018      	b.n	8002812 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80027e2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027e4:	4b19      	ldr	r3, [pc, #100]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 80027e6:	2101      	movs	r1, #1
 80027e8:	438a      	bics	r2, r1
 80027ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fbbe 	bl	8000f6c <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f6:	f7fe fbb9 	bl	8000f6c <HAL_GetTick>
 80027fa:	0002      	movs	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e188      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002808:	4b10      	ldr	r3, [pc, #64]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 800280a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280c:	2202      	movs	r2, #2
 800280e:	4013      	ands	r3, r2
 8002810:	d1f1      	bne.n	80027f6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2204      	movs	r2, #4
 8002818:	4013      	ands	r3, r2
 800281a:	d100      	bne.n	800281e <HAL_RCC_OscConfig+0x2fe>
 800281c:	e0c6      	b.n	80029ac <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	231f      	movs	r3, #31
 8002820:	18fb      	adds	r3, r7, r3
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	2238      	movs	r2, #56	; 0x38
 800282c:	4013      	ands	r3, r2
 800282e:	2b20      	cmp	r3, #32
 8002830:	d11e      	bne.n	8002870 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_RCC_OscConfig+0x32c>)
 8002834:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002836:	2202      	movs	r2, #2
 8002838:	4013      	ands	r3, r2
 800283a:	d100      	bne.n	800283e <HAL_RCC_OscConfig+0x31e>
 800283c:	e0b6      	b.n	80029ac <HAL_RCC_OscConfig+0x48c>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d000      	beq.n	8002848 <HAL_RCC_OscConfig+0x328>
 8002846:	e0b1      	b.n	80029ac <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e166      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
 800284c:	40021000 	.word	0x40021000
 8002850:	fffeffff 	.word	0xfffeffff
 8002854:	fffbffff 	.word	0xfffbffff
 8002858:	ffff80ff 	.word	0xffff80ff
 800285c:	ffffc7ff 	.word	0xffffc7ff
 8002860:	00f42400 	.word	0x00f42400
 8002864:	2000002c 	.word	0x2000002c
 8002868:	20000030 	.word	0x20000030
 800286c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002870:	4bac      	ldr	r3, [pc, #688]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	055b      	lsls	r3, r3, #21
 8002878:	4013      	ands	r3, r2
 800287a:	d101      	bne.n	8002880 <HAL_RCC_OscConfig+0x360>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <HAL_RCC_OscConfig+0x362>
 8002880:	2300      	movs	r3, #0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d011      	beq.n	80028aa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002886:	4ba7      	ldr	r3, [pc, #668]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800288a:	4ba6      	ldr	r3, [pc, #664]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 800288c:	2180      	movs	r1, #128	; 0x80
 800288e:	0549      	lsls	r1, r1, #21
 8002890:	430a      	orrs	r2, r1
 8002892:	63da      	str	r2, [r3, #60]	; 0x3c
 8002894:	4ba3      	ldr	r3, [pc, #652]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002896:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	055b      	lsls	r3, r3, #21
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80028a2:	231f      	movs	r3, #31
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	2201      	movs	r2, #1
 80028a8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028aa:	4b9f      	ldr	r3, [pc, #636]	; (8002b28 <HAL_RCC_OscConfig+0x608>)
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	d11a      	bne.n	80028ec <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028b6:	4b9c      	ldr	r3, [pc, #624]	; (8002b28 <HAL_RCC_OscConfig+0x608>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b9b      	ldr	r3, [pc, #620]	; (8002b28 <HAL_RCC_OscConfig+0x608>)
 80028bc:	2180      	movs	r1, #128	; 0x80
 80028be:	0049      	lsls	r1, r1, #1
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80028c4:	f7fe fb52 	bl	8000f6c <HAL_GetTick>
 80028c8:	0003      	movs	r3, r0
 80028ca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe fb4d 	bl	8000f6c <HAL_GetTick>
 80028d2:	0002      	movs	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e11c      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e0:	4b91      	ldr	r3, [pc, #580]	; (8002b28 <HAL_RCC_OscConfig+0x608>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4013      	ands	r3, r2
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d106      	bne.n	8002902 <HAL_RCC_OscConfig+0x3e2>
 80028f4:	4b8b      	ldr	r3, [pc, #556]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 80028f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028f8:	4b8a      	ldr	r3, [pc, #552]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 80028fa:	2101      	movs	r1, #1
 80028fc:	430a      	orrs	r2, r1
 80028fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8002900:	e01c      	b.n	800293c <HAL_RCC_OscConfig+0x41c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b05      	cmp	r3, #5
 8002908:	d10c      	bne.n	8002924 <HAL_RCC_OscConfig+0x404>
 800290a:	4b86      	ldr	r3, [pc, #536]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 800290c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800290e:	4b85      	ldr	r3, [pc, #532]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002910:	2104      	movs	r1, #4
 8002912:	430a      	orrs	r2, r1
 8002914:	65da      	str	r2, [r3, #92]	; 0x5c
 8002916:	4b83      	ldr	r3, [pc, #524]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002918:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800291a:	4b82      	ldr	r3, [pc, #520]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 800291c:	2101      	movs	r1, #1
 800291e:	430a      	orrs	r2, r1
 8002920:	65da      	str	r2, [r3, #92]	; 0x5c
 8002922:	e00b      	b.n	800293c <HAL_RCC_OscConfig+0x41c>
 8002924:	4b7f      	ldr	r3, [pc, #508]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002926:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002928:	4b7e      	ldr	r3, [pc, #504]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 800292a:	2101      	movs	r1, #1
 800292c:	438a      	bics	r2, r1
 800292e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002930:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002934:	4b7b      	ldr	r3, [pc, #492]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002936:	2104      	movs	r1, #4
 8002938:	438a      	bics	r2, r1
 800293a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d014      	beq.n	800296e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002944:	f7fe fb12 	bl	8000f6c <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294c:	e009      	b.n	8002962 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fb0d 	bl	8000f6c <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	4a74      	ldr	r2, [pc, #464]	; (8002b2c <HAL_RCC_OscConfig+0x60c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e0db      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002962:	4b70      	ldr	r3, [pc, #448]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2202      	movs	r2, #2
 8002968:	4013      	ands	r3, r2
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x42e>
 800296c:	e013      	b.n	8002996 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe fafd 	bl	8000f6c <HAL_GetTick>
 8002972:	0003      	movs	r3, r0
 8002974:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002976:	e009      	b.n	800298c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002978:	f7fe faf8 	bl	8000f6c <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	4a6a      	ldr	r2, [pc, #424]	; (8002b2c <HAL_RCC_OscConfig+0x60c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0c6      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800298c:	4b65      	ldr	r3, [pc, #404]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 800298e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002990:	2202      	movs	r2, #2
 8002992:	4013      	ands	r3, r2
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002996:	231f      	movs	r3, #31
 8002998:	18fb      	adds	r3, r7, r3
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d105      	bne.n	80029ac <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	4b60      	ldr	r3, [pc, #384]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 80029a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029a4:	4b5f      	ldr	r3, [pc, #380]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 80029a6:	4962      	ldr	r1, [pc, #392]	; (8002b30 <HAL_RCC_OscConfig+0x610>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	69db      	ldr	r3, [r3, #28]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d100      	bne.n	80029b6 <HAL_RCC_OscConfig+0x496>
 80029b4:	e0b0      	b.n	8002b18 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b6:	4b5b      	ldr	r3, [pc, #364]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2238      	movs	r2, #56	; 0x38
 80029bc:	4013      	ands	r3, r2
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d100      	bne.n	80029c4 <HAL_RCC_OscConfig+0x4a4>
 80029c2:	e078      	b.n	8002ab6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d153      	bne.n	8002a74 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b55      	ldr	r3, [pc, #340]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b54      	ldr	r3, [pc, #336]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 80029d2:	4958      	ldr	r1, [pc, #352]	; (8002b34 <HAL_RCC_OscConfig+0x614>)
 80029d4:	400a      	ands	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fac8 	bl	8000f6c <HAL_GetTick>
 80029dc:	0003      	movs	r3, r0
 80029de:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe fac3 	bl	8000f6c <HAL_GetTick>
 80029e6:	0002      	movs	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e092      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f4:	4b4b      	ldr	r3, [pc, #300]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	049b      	lsls	r3, r3, #18
 80029fc:	4013      	ands	r3, r2
 80029fe:	d1f0      	bne.n	80029e2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a00:	4b48      	ldr	r3, [pc, #288]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	4a4c      	ldr	r2, [pc, #304]	; (8002b38 <HAL_RCC_OscConfig+0x618>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	0019      	movs	r1, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1a      	ldr	r2, [r3, #32]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	431a      	orrs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a18:	021b      	lsls	r3, r3, #8
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a26:	431a      	orrs	r2, r3
 8002a28:	4b3e      	ldr	r3, [pc, #248]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2e:	4b3d      	ldr	r3, [pc, #244]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	4b3c      	ldr	r3, [pc, #240]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a34:	2180      	movs	r1, #128	; 0x80
 8002a36:	0449      	lsls	r1, r1, #17
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002a3c:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a42:	2180      	movs	r1, #128	; 0x80
 8002a44:	0549      	lsls	r1, r1, #21
 8002a46:	430a      	orrs	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4a:	f7fe fa8f 	bl	8000f6c <HAL_GetTick>
 8002a4e:	0003      	movs	r3, r0
 8002a50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a54:	f7fe fa8a 	bl	8000f6c <HAL_GetTick>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e059      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a66:	4b2f      	ldr	r3, [pc, #188]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	049b      	lsls	r3, r3, #18
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d0f0      	beq.n	8002a54 <HAL_RCC_OscConfig+0x534>
 8002a72:	e051      	b.n	8002b18 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a74:	4b2b      	ldr	r3, [pc, #172]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	4b2a      	ldr	r3, [pc, #168]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a7a:	492e      	ldr	r1, [pc, #184]	; (8002b34 <HAL_RCC_OscConfig+0x614>)
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fa74 	bl	8000f6c <HAL_GetTick>
 8002a84:	0003      	movs	r3, r0
 8002a86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8a:	f7fe fa6f 	bl	8000f6c <HAL_GetTick>
 8002a8e:	0002      	movs	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e03e      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a9c:	4b21      	ldr	r3, [pc, #132]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	049b      	lsls	r3, r3, #18
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002aae:	4923      	ldr	r1, [pc, #140]	; (8002b3c <HAL_RCC_OscConfig+0x61c>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	60da      	str	r2, [r3, #12]
 8002ab4:	e030      	b.n	8002b18 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	69db      	ldr	r3, [r3, #28]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e02b      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002ac2:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <HAL_RCC_OscConfig+0x604>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	2203      	movs	r2, #3
 8002acc:	401a      	ands	r2, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6a1b      	ldr	r3, [r3, #32]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d11e      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2270      	movs	r2, #112	; 0x70
 8002ada:	401a      	ands	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d117      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	23fe      	movs	r3, #254	; 0xfe
 8002ae8:	01db      	lsls	r3, r3, #7
 8002aea:	401a      	ands	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d10e      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	23f8      	movs	r3, #248	; 0xf8
 8002afa:	039b      	lsls	r3, r3, #14
 8002afc:	401a      	ands	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d106      	bne.n	8002b14 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	0f5b      	lsrs	r3, r3, #29
 8002b0a:	075a      	lsls	r2, r3, #29
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e000      	b.n	8002b1a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b008      	add	sp, #32
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	40021000 	.word	0x40021000
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	00001388 	.word	0x00001388
 8002b30:	efffffff 	.word	0xefffffff
 8002b34:	feffffff 	.word	0xfeffffff
 8002b38:	1fc1808c 	.word	0x1fc1808c
 8002b3c:	effefffc 	.word	0xeffefffc

08002b40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e0e9      	b.n	8002d28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b54:	4b76      	ldr	r3, [pc, #472]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2207      	movs	r2, #7
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d91e      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b73      	ldr	r3, [pc, #460]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2207      	movs	r2, #7
 8002b68:	4393      	bics	r3, r2
 8002b6a:	0019      	movs	r1, r3
 8002b6c:	4b70      	ldr	r3, [pc, #448]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b74:	f7fe f9fa 	bl	8000f6c <HAL_GetTick>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b7c:	e009      	b.n	8002b92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b7e:	f7fe f9f5 	bl	8000f6c <HAL_GetTick>
 8002b82:	0002      	movs	r2, r0
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	4a6a      	ldr	r2, [pc, #424]	; (8002d34 <HAL_RCC_ClockConfig+0x1f4>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e0ca      	b.n	8002d28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002b92:	4b67      	ldr	r3, [pc, #412]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2207      	movs	r2, #7
 8002b98:	4013      	ands	r3, r2
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d1ee      	bne.n	8002b7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d015      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2204      	movs	r2, #4
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d006      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002bb4:	4b60      	ldr	r3, [pc, #384]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002bba:	21e0      	movs	r1, #224	; 0xe0
 8002bbc:	01c9      	lsls	r1, r1, #7
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bc2:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	4a5d      	ldr	r2, [pc, #372]	; (8002d3c <HAL_RCC_ClockConfig+0x1fc>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	4b59      	ldr	r3, [pc, #356]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d057      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d107      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002be8:	4b53      	ldr	r3, [pc, #332]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	029b      	lsls	r3, r3, #10
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d12b      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e097      	b.n	8002d28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d107      	bne.n	8002c10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c00:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	2380      	movs	r3, #128	; 0x80
 8002c06:	049b      	lsls	r3, r3, #18
 8002c08:	4013      	ands	r3, r2
 8002c0a:	d11f      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e08b      	b.n	8002d28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c18:	4b47      	ldr	r3, [pc, #284]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4013      	ands	r3, r2
 8002c22:	d113      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e07f      	b.n	8002d28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d106      	bne.n	8002c3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c30:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c34:	2202      	movs	r2, #2
 8002c36:	4013      	ands	r3, r2
 8002c38:	d108      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e074      	b.n	8002d28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3e:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	2202      	movs	r2, #2
 8002c44:	4013      	ands	r3, r2
 8002c46:	d101      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e06d      	b.n	8002d28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2207      	movs	r2, #7
 8002c52:	4393      	bics	r3, r2
 8002c54:	0019      	movs	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c60:	f7fe f984 	bl	8000f6c <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c68:	e009      	b.n	8002c7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6a:	f7fe f97f 	bl	8000f6c <HAL_GetTick>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	4a2f      	ldr	r2, [pc, #188]	; (8002d34 <HAL_RCC_ClockConfig+0x1f4>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e054      	b.n	8002d28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7e:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2238      	movs	r2, #56	; 0x38
 8002c84:	401a      	ands	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d1ec      	bne.n	8002c6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c90:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2207      	movs	r2, #7
 8002c96:	4013      	ands	r3, r2
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d21e      	bcs.n	8002cdc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2207      	movs	r2, #7
 8002ca4:	4393      	bics	r3, r2
 8002ca6:	0019      	movs	r1, r3
 8002ca8:	4b21      	ldr	r3, [pc, #132]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cb0:	f7fe f95c 	bl	8000f6c <HAL_GetTick>
 8002cb4:	0003      	movs	r3, r0
 8002cb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cb8:	e009      	b.n	8002cce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cba:	f7fe f957 	bl	8000f6c <HAL_GetTick>
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	4a1b      	ldr	r2, [pc, #108]	; (8002d34 <HAL_RCC_ClockConfig+0x1f4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e02c      	b.n	8002d28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2207      	movs	r2, #7
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1ee      	bne.n	8002cba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002ce6:	4b14      	ldr	r3, [pc, #80]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	4a15      	ldr	r2, [pc, #84]	; (8002d40 <HAL_RCC_ClockConfig+0x200>)
 8002cec:	4013      	ands	r3, r2
 8002cee:	0019      	movs	r1, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002cfa:	f000 f829 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002cfe:	0001      	movs	r1, r0
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <HAL_RCC_ClockConfig+0x1f8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	220f      	movs	r2, #15
 8002d08:	401a      	ands	r2, r3
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_RCC_ClockConfig+0x204>)
 8002d0c:	0092      	lsls	r2, r2, #2
 8002d0e:	58d3      	ldr	r3, [r2, r3]
 8002d10:	221f      	movs	r2, #31
 8002d12:	4013      	ands	r3, r2
 8002d14:	000a      	movs	r2, r1
 8002d16:	40da      	lsrs	r2, r3
 8002d18:	4b0b      	ldr	r3, [pc, #44]	; (8002d48 <HAL_RCC_ClockConfig+0x208>)
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCC_ClockConfig+0x20c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7fe f8c7 	bl	8000eb4 <HAL_InitTick>
 8002d26:	0003      	movs	r3, r0
}
 8002d28:	0018      	movs	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b004      	add	sp, #16
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40022000 	.word	0x40022000
 8002d34:	00001388 	.word	0x00001388
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	fffff0ff 	.word	0xfffff0ff
 8002d40:	ffff8fff 	.word	0xffff8fff
 8002d44:	08004d88 	.word	0x08004d88
 8002d48:	2000002c 	.word	0x2000002c
 8002d4c:	20000030 	.word	0x20000030

08002d50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d56:	4b3c      	ldr	r3, [pc, #240]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2238      	movs	r2, #56	; 0x38
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d10f      	bne.n	8002d80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002d60:	4b39      	ldr	r3, [pc, #228]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	0adb      	lsrs	r3, r3, #11
 8002d66:	2207      	movs	r2, #7
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	409a      	lsls	r2, r3
 8002d6e:	0013      	movs	r3, r2
 8002d70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002d72:	6839      	ldr	r1, [r7, #0]
 8002d74:	4835      	ldr	r0, [pc, #212]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002d76:	f7fd f9c3 	bl	8000100 <__udivsi3>
 8002d7a:	0003      	movs	r3, r0
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	e05d      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d80:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2238      	movs	r2, #56	; 0x38
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d102      	bne.n	8002d92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d8c:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x100>)
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	e054      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d92:	4b2d      	ldr	r3, [pc, #180]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2238      	movs	r2, #56	; 0x38
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b10      	cmp	r3, #16
 8002d9c:	d138      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2203      	movs	r2, #3
 8002da4:	4013      	ands	r3, r2
 8002da6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002da8:	4b27      	ldr	r3, [pc, #156]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	091b      	lsrs	r3, r3, #4
 8002dae:	2207      	movs	r2, #7
 8002db0:	4013      	ands	r3, r2
 8002db2:	3301      	adds	r3, #1
 8002db4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d10d      	bne.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	4824      	ldr	r0, [pc, #144]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x100>)
 8002dc0:	f7fd f99e 	bl	8000100 <__udivsi3>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	0a1b      	lsrs	r3, r3, #8
 8002dce:	227f      	movs	r2, #127	; 0x7f
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	434b      	muls	r3, r1
 8002dd4:	617b      	str	r3, [r7, #20]
        break;
 8002dd6:	e00d      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002dd8:	68b9      	ldr	r1, [r7, #8]
 8002dda:	481c      	ldr	r0, [pc, #112]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ddc:	f7fd f990 	bl	8000100 <__udivsi3>
 8002de0:	0003      	movs	r3, r0
 8002de2:	0019      	movs	r1, r3
 8002de4:	4b18      	ldr	r3, [pc, #96]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	227f      	movs	r2, #127	; 0x7f
 8002dec:	4013      	ands	r3, r2
 8002dee:	434b      	muls	r3, r1
 8002df0:	617b      	str	r3, [r7, #20]
        break;
 8002df2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002df4:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	0f5b      	lsrs	r3, r3, #29
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	3301      	adds	r3, #1
 8002e00:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	6978      	ldr	r0, [r7, #20]
 8002e06:	f7fd f97b 	bl	8000100 <__udivsi3>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	e015      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	2238      	movs	r2, #56	; 0x38
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d103      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	021b      	lsls	r3, r3, #8
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	e00b      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e24:	4b08      	ldr	r3, [pc, #32]	; (8002e48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	2238      	movs	r2, #56	; 0x38
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	2b18      	cmp	r3, #24
 8002e2e:	d103      	bne.n	8002e38 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002e30:	23fa      	movs	r3, #250	; 0xfa
 8002e32:	01db      	lsls	r3, r3, #7
 8002e34:	613b      	str	r3, [r7, #16]
 8002e36:	e001      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e3c:	693b      	ldr	r3, [r7, #16]
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b006      	add	sp, #24
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			; (mov r8, r8)
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	00f42400 	.word	0x00f42400
 8002e50:	007a1200 	.word	0x007a1200

08002e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e58:	4b02      	ldr	r3, [pc, #8]	; (8002e64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
}
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	2000002c 	.word	0x2000002c

08002e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e68:	b5b0      	push	{r4, r5, r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002e6c:	f7ff fff2 	bl	8002e54 <HAL_RCC_GetHCLKFreq>
 8002e70:	0004      	movs	r4, r0
 8002e72:	f7ff fb49 	bl	8002508 <LL_RCC_GetAPB1Prescaler>
 8002e76:	0003      	movs	r3, r0
 8002e78:	0b1a      	lsrs	r2, r3, #12
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e7c:	0092      	lsls	r2, r2, #2
 8002e7e:	58d3      	ldr	r3, [r2, r3]
 8002e80:	221f      	movs	r2, #31
 8002e82:	4013      	ands	r3, r2
 8002e84:	40dc      	lsrs	r4, r3
 8002e86:	0023      	movs	r3, r4
}
 8002e88:	0018      	movs	r0, r3
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	08004dc8 	.word	0x08004dc8

08002e94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002e9c:	2313      	movs	r3, #19
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ea4:	2312      	movs	r3, #18
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	029b      	lsls	r3, r3, #10
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d100      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002eb8:	e0a3      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eba:	2011      	movs	r0, #17
 8002ebc:	183b      	adds	r3, r7, r0
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec2:	4b7f      	ldr	r3, [pc, #508]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ec4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	055b      	lsls	r3, r3, #21
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d110      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	4b7c      	ldr	r3, [pc, #496]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ed2:	4b7b      	ldr	r3, [pc, #492]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0549      	lsls	r1, r1, #21
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	63da      	str	r2, [r3, #60]	; 0x3c
 8002edc:	4b78      	ldr	r3, [pc, #480]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ede:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	055b      	lsls	r3, r3, #21
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eea:	183b      	adds	r3, r7, r0
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ef0:	4b74      	ldr	r3, [pc, #464]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0049      	lsls	r1, r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002efe:	f7fe f835 	bl	8000f6c <HAL_GetTick>
 8002f02:	0003      	movs	r3, r0
 8002f04:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f06:	e00b      	b.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f08:	f7fe f830 	bl	8000f6c <HAL_GetTick>
 8002f0c:	0002      	movs	r2, r0
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d904      	bls.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f16:	2313      	movs	r3, #19
 8002f18:	18fb      	adds	r3, r7, r3
 8002f1a:	2203      	movs	r2, #3
 8002f1c:	701a      	strb	r2, [r3, #0]
        break;
 8002f1e:	e005      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f20:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d0ed      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002f2c:	2313      	movs	r3, #19
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d154      	bne.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f36:	4b62      	ldr	r3, [pc, #392]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f3a:	23c0      	movs	r3, #192	; 0xc0
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	4013      	ands	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d019      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d014      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f52:	4b5b      	ldr	r3, [pc, #364]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f56:	4a5c      	ldr	r2, [pc, #368]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f5c:	4b58      	ldr	r3, [pc, #352]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f60:	4b57      	ldr	r3, [pc, #348]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f62:	2180      	movs	r1, #128	; 0x80
 8002f64:	0249      	lsls	r1, r1, #9
 8002f66:	430a      	orrs	r2, r1
 8002f68:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6a:	4b55      	ldr	r3, [pc, #340]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f6e:	4b54      	ldr	r3, [pc, #336]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f70:	4956      	ldr	r1, [pc, #344]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8002f72:	400a      	ands	r2, r1
 8002f74:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f76:	4b52      	ldr	r3, [pc, #328]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	4013      	ands	r3, r2
 8002f82:	d016      	beq.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fd fff2 	bl	8000f6c <HAL_GetTick>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f8c:	e00c      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f8e:	f7fd ffed 	bl	8000f6c <HAL_GetTick>
 8002f92:	0002      	movs	r2, r0
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	4a4d      	ldr	r2, [pc, #308]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d904      	bls.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002f9e:	2313      	movs	r3, #19
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	701a      	strb	r2, [r3, #0]
            break;
 8002fa6:	e004      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fa8:	4b45      	ldr	r3, [pc, #276]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fac:	2202      	movs	r2, #2
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d0ed      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002fb2:	2313      	movs	r3, #19
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10a      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fbc:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc0:	4a41      	ldr	r2, [pc, #260]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	4b3d      	ldr	r3, [pc, #244]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fd0:	e00c      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fd2:	2312      	movs	r3, #18
 8002fd4:	18fb      	adds	r3, r7, r3
 8002fd6:	2213      	movs	r2, #19
 8002fd8:	18ba      	adds	r2, r7, r2
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]
 8002fde:	e005      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe0:	2312      	movs	r3, #18
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	2213      	movs	r2, #19
 8002fe6:	18ba      	adds	r2, r7, r2
 8002fe8:	7812      	ldrb	r2, [r2, #0]
 8002fea:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fec:	2311      	movs	r3, #17
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d105      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff6:	4b32      	ldr	r3, [pc, #200]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ff8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ffa:	4b31      	ldr	r3, [pc, #196]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002ffc:	4935      	ldr	r1, [pc, #212]	; (80030d4 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ffe:	400a      	ands	r2, r1
 8003000:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2201      	movs	r2, #1
 8003008:	4013      	ands	r3, r2
 800300a:	d009      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800300c:	4b2c      	ldr	r3, [pc, #176]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	2203      	movs	r2, #3
 8003012:	4393      	bics	r3, r2
 8003014:	0019      	movs	r1, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4b29      	ldr	r3, [pc, #164]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800301c:	430a      	orrs	r2, r1
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2220      	movs	r2, #32
 8003026:	4013      	ands	r3, r2
 8003028:	d009      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800302a:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003030:	4013      	ands	r3, r2
 8003032:	0019      	movs	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800303a:	430a      	orrs	r2, r1
 800303c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	01db      	lsls	r3, r3, #7
 8003046:	4013      	ands	r3, r2
 8003048:	d015      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800304a:	4b1d      	ldr	r3, [pc, #116]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800304c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	0899      	lsrs	r1, r3, #2
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003058:	430a      	orrs	r2, r1
 800305a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	05db      	lsls	r3, r3, #23
 8003064:	429a      	cmp	r2, r3
 8003066:	d106      	bne.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003068:	4b15      	ldr	r3, [pc, #84]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800306e:	2180      	movs	r1, #128	; 0x80
 8003070:	0249      	lsls	r1, r1, #9
 8003072:	430a      	orrs	r2, r1
 8003074:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	4013      	ands	r3, r2
 8003080:	d016      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003082:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003086:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003092:	430a      	orrs	r2, r1
 8003094:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	01db      	lsls	r3, r3, #7
 800309e:	429a      	cmp	r2, r3
 80030a0:	d106      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80030a2:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80030a8:	2180      	movs	r1, #128	; 0x80
 80030aa:	0249      	lsls	r1, r1, #9
 80030ac:	430a      	orrs	r2, r1
 80030ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80030b0:	2312      	movs	r3, #18
 80030b2:	18fb      	adds	r3, r7, r3
 80030b4:	781b      	ldrb	r3, [r3, #0]
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b006      	add	sp, #24
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40007000 	.word	0x40007000
 80030c8:	fffffcff 	.word	0xfffffcff
 80030cc:	fffeffff 	.word	0xfffeffff
 80030d0:	00001388 	.word	0x00001388
 80030d4:	efffffff 	.word	0xefffffff
 80030d8:	ffffcfff 	.word	0xffffcfff
 80030dc:	ffff3fff 	.word	0xffff3fff

080030e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80030e8:	230f      	movs	r3, #15
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d100      	bne.n	80030f8 <HAL_RTC_Init+0x18>
 80030f6:	e08c      	b.n	8003212 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2229      	movs	r2, #41	; 0x29
 80030fc:	5c9b      	ldrb	r3, [r3, r2]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10b      	bne.n	800311c <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2228      	movs	r2, #40	; 0x28
 8003108:	2100      	movs	r1, #0
 800310a:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2288      	movs	r2, #136	; 0x88
 8003110:	0212      	lsls	r2, r2, #8
 8003112:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	0018      	movs	r0, r3
 8003118:	f7fd fcc4 	bl	8000aa4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2229      	movs	r2, #41	; 0x29
 8003120:	2102      	movs	r1, #2
 8003122:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	2210      	movs	r2, #16
 800312c:	4013      	ands	r3, r2
 800312e:	2b10      	cmp	r3, #16
 8003130:	d062      	beq.n	80031f8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	22ca      	movs	r2, #202	; 0xca
 8003138:	625a      	str	r2, [r3, #36]	; 0x24
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2253      	movs	r2, #83	; 0x53
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003142:	250f      	movs	r5, #15
 8003144:	197c      	adds	r4, r7, r5
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	0018      	movs	r0, r3
 800314a:	f000 f892 	bl	8003272 <RTC_EnterInitMode>
 800314e:	0003      	movs	r3, r0
 8003150:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8003152:	0028      	movs	r0, r5
 8003154:	183b      	adds	r3, r7, r0
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d12c      	bne.n	80031b6 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699a      	ldr	r2, [r3, #24]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	492e      	ldr	r1, [pc, #184]	; (8003220 <HAL_RTC_Init+0x140>)
 8003168:	400a      	ands	r2, r1
 800316a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	6999      	ldr	r1, [r3, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6912      	ldr	r2, [r2, #16]
 8003192:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	6919      	ldr	r1, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	041a      	lsls	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80031a8:	183c      	adds	r4, r7, r0
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f8a3 	bl	80032f8 <RTC_ExitInitMode>
 80031b2:	0003      	movs	r3, r0
 80031b4:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80031b6:	230f      	movs	r3, #15
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d116      	bne.n	80031ee <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	00d2      	lsls	r2, r2, #3
 80031cc:	08d2      	lsrs	r2, r2, #3
 80031ce:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	22ff      	movs	r2, #255	; 0xff
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24
 80031f6:	e003      	b.n	8003200 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80031f8:	230f      	movs	r3, #15
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8003200:	230f      	movs	r3, #15
 8003202:	18fb      	adds	r3, r7, r3
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d103      	bne.n	8003212 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2229      	movs	r2, #41	; 0x29
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8003212:	230f      	movs	r3, #15
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	781b      	ldrb	r3, [r3, #0]
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b004      	add	sp, #16
 800321e:	bdb0      	pop	{r4, r5, r7, pc}
 8003220:	fb8fffbf 	.word	0xfb8fffbf

08003224 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68da      	ldr	r2, [r3, #12]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	21a0      	movs	r1, #160	; 0xa0
 8003238:	438a      	bics	r2, r1
 800323a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800323c:	f7fd fe96 	bl	8000f6c <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003244:	e00a      	b.n	800325c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003246:	f7fd fe91 	bl	8000f6c <HAL_GetTick>
 800324a:	0002      	movs	r2, r0
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	1ad2      	subs	r2, r2, r3
 8003250:	23fa      	movs	r3, #250	; 0xfa
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d901      	bls.n	800325c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e006      	b.n	800326a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	4013      	ands	r3, r2
 8003266:	d0ee      	beq.n	8003246 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	0018      	movs	r0, r3
 800326c:	46bd      	mov	sp, r7
 800326e:	b004      	add	sp, #16
 8003270:	bd80      	pop	{r7, pc}

08003272 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800327a:	230f      	movs	r3, #15
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	2200      	movs	r2, #0
 8003280:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2240      	movs	r2, #64	; 0x40
 800328a:	4013      	ands	r3, r2
 800328c:	d12c      	bne.n	80032e8 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68da      	ldr	r2, [r3, #12]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	430a      	orrs	r2, r1
 800329c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800329e:	f7fd fe65 	bl	8000f6c <HAL_GetTick>
 80032a2:	0003      	movs	r3, r0
 80032a4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032a6:	e014      	b.n	80032d2 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80032a8:	f7fd fe60 	bl	8000f6c <HAL_GetTick>
 80032ac:	0002      	movs	r2, r0
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	1ad2      	subs	r2, r2, r3
 80032b2:	200f      	movs	r0, #15
 80032b4:	183b      	adds	r3, r7, r0
 80032b6:	1839      	adds	r1, r7, r0
 80032b8:	7809      	ldrb	r1, [r1, #0]
 80032ba:	7019      	strb	r1, [r3, #0]
 80032bc:	23fa      	movs	r3, #250	; 0xfa
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d906      	bls.n	80032d2 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80032c4:	183b      	adds	r3, r7, r0
 80032c6:	2203      	movs	r2, #3
 80032c8:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2229      	movs	r2, #41	; 0x29
 80032ce:	2103      	movs	r1, #3
 80032d0:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	2240      	movs	r2, #64	; 0x40
 80032da:	4013      	ands	r3, r2
 80032dc:	d104      	bne.n	80032e8 <RTC_EnterInitMode+0x76>
 80032de:	230f      	movs	r3, #15
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b03      	cmp	r3, #3
 80032e6:	d1df      	bne.n	80032a8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80032e8:	230f      	movs	r3, #15
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	781b      	ldrb	r3, [r3, #0]
}
 80032ee:	0018      	movs	r0, r3
 80032f0:	46bd      	mov	sp, r7
 80032f2:	b004      	add	sp, #16
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80032f8:	b590      	push	{r4, r7, lr}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003300:	240f      	movs	r4, #15
 8003302:	193b      	adds	r3, r7, r4
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003308:	4b1c      	ldr	r3, [pc, #112]	; (800337c <RTC_ExitInitMode+0x84>)
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	4b1b      	ldr	r3, [pc, #108]	; (800337c <RTC_ExitInitMode+0x84>)
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	438a      	bics	r2, r1
 8003312:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <RTC_ExitInitMode+0x84>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	2220      	movs	r2, #32
 800331a:	4013      	ands	r3, r2
 800331c:	d10d      	bne.n	800333a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff ff7f 	bl	8003224 <HAL_RTC_WaitForSynchro>
 8003326:	1e03      	subs	r3, r0, #0
 8003328:	d021      	beq.n	800336e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2229      	movs	r2, #41	; 0x29
 800332e:	2103      	movs	r1, #3
 8003330:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003332:	193b      	adds	r3, r7, r4
 8003334:	2203      	movs	r2, #3
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e019      	b.n	800336e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <RTC_ExitInitMode+0x84>)
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <RTC_ExitInitMode+0x84>)
 8003340:	2120      	movs	r1, #32
 8003342:	438a      	bics	r2, r1
 8003344:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	0018      	movs	r0, r3
 800334a:	f7ff ff6b 	bl	8003224 <HAL_RTC_WaitForSynchro>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d007      	beq.n	8003362 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2229      	movs	r2, #41	; 0x29
 8003356:	2103      	movs	r1, #3
 8003358:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800335a:	230f      	movs	r3, #15
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	2203      	movs	r2, #3
 8003360:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <RTC_ExitInitMode+0x84>)
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <RTC_ExitInitMode+0x84>)
 8003368:	2120      	movs	r1, #32
 800336a:	430a      	orrs	r2, r1
 800336c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800336e:	230f      	movs	r3, #15
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	781b      	ldrb	r3, [r3, #0]
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	b005      	add	sp, #20
 800337a:	bd90      	pop	{r4, r7, pc}
 800337c:	40002800 	.word	0x40002800

08003380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e04a      	b.n	8003428 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	223d      	movs	r2, #61	; 0x3d
 8003396:	5c9b      	ldrb	r3, [r3, r2]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d107      	bne.n	80033ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	223c      	movs	r2, #60	; 0x3c
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7fd fc3b 	bl	8000c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	223d      	movs	r2, #61	; 0x3d
 80033b2:	2102      	movs	r1, #2
 80033b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	0019      	movs	r1, r3
 80033c0:	0010      	movs	r0, r2
 80033c2:	f000 f87b 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2248      	movs	r2, #72	; 0x48
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	223e      	movs	r2, #62	; 0x3e
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	223f      	movs	r2, #63	; 0x3f
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2240      	movs	r2, #64	; 0x40
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2241      	movs	r2, #65	; 0x41
 80033ea:	2101      	movs	r1, #1
 80033ec:	5499      	strb	r1, [r3, r2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2242      	movs	r2, #66	; 0x42
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2243      	movs	r2, #67	; 0x43
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2244      	movs	r2, #68	; 0x44
 8003402:	2101      	movs	r1, #1
 8003404:	5499      	strb	r1, [r3, r2]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2245      	movs	r2, #69	; 0x45
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2246      	movs	r2, #70	; 0x46
 8003412:	2101      	movs	r1, #1
 8003414:	5499      	strb	r1, [r3, r2]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2247      	movs	r2, #71	; 0x47
 800341a:	2101      	movs	r1, #1
 800341c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	223d      	movs	r2, #61	; 0x3d
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	0018      	movs	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	b002      	add	sp, #8
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	223d      	movs	r2, #61	; 0x3d
 800343c:	5c9b      	ldrb	r3, [r3, r2]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	d001      	beq.n	8003448 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e02f      	b.n	80034a8 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	223d      	movs	r2, #61	; 0x3d
 800344c:	2102      	movs	r1, #2
 800344e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a16      	ldr	r2, [pc, #88]	; (80034b0 <HAL_TIM_Base_Start+0x80>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d004      	beq.n	8003464 <HAL_TIM_Base_Start+0x34>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_TIM_Base_Start+0x84>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d116      	bne.n	8003492 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	4a13      	ldr	r2, [pc, #76]	; (80034b8 <HAL_TIM_Base_Start+0x88>)
 800346c:	4013      	ands	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b06      	cmp	r3, #6
 8003474:	d016      	beq.n	80034a4 <HAL_TIM_Base_Start+0x74>
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	2380      	movs	r3, #128	; 0x80
 800347a:	025b      	lsls	r3, r3, #9
 800347c:	429a      	cmp	r2, r3
 800347e:	d011      	beq.n	80034a4 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2101      	movs	r1, #1
 800348c:	430a      	orrs	r2, r1
 800348e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003490:	e008      	b.n	80034a4 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2101      	movs	r1, #1
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	e000      	b.n	80034a6 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a4:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	0018      	movs	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b004      	add	sp, #16
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40012c00 	.word	0x40012c00
 80034b4:	40000400 	.word	0x40000400
 80034b8:	00010007 	.word	0x00010007

080034bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a2b      	ldr	r2, [pc, #172]	; (800357c <TIM_Base_SetConfig+0xc0>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0x20>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a2a      	ldr	r2, [pc, #168]	; (8003580 <TIM_Base_SetConfig+0xc4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d108      	bne.n	80034ee <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2270      	movs	r2, #112	; 0x70
 80034e0:	4393      	bics	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a22      	ldr	r2, [pc, #136]	; (800357c <TIM_Base_SetConfig+0xc0>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00f      	beq.n	8003516 <TIM_Base_SetConfig+0x5a>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a21      	ldr	r2, [pc, #132]	; (8003580 <TIM_Base_SetConfig+0xc4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d00b      	beq.n	8003516 <TIM_Base_SetConfig+0x5a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a20      	ldr	r2, [pc, #128]	; (8003584 <TIM_Base_SetConfig+0xc8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d007      	beq.n	8003516 <TIM_Base_SetConfig+0x5a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <TIM_Base_SetConfig+0xcc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d003      	beq.n	8003516 <TIM_Base_SetConfig+0x5a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a1e      	ldr	r2, [pc, #120]	; (800358c <TIM_Base_SetConfig+0xd0>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d108      	bne.n	8003528 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a1d      	ldr	r2, [pc, #116]	; (8003590 <TIM_Base_SetConfig+0xd4>)
 800351a:	4013      	ands	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4313      	orrs	r3, r2
 8003526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2280      	movs	r2, #128	; 0x80
 800352c:	4393      	bics	r3, r2
 800352e:	001a      	movs	r2, r3
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	4313      	orrs	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a0a      	ldr	r2, [pc, #40]	; (800357c <TIM_Base_SetConfig+0xc0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d007      	beq.n	8003566 <TIM_Base_SetConfig+0xaa>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a0b      	ldr	r2, [pc, #44]	; (8003588 <TIM_Base_SetConfig+0xcc>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d003      	beq.n	8003566 <TIM_Base_SetConfig+0xaa>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a0a      	ldr	r2, [pc, #40]	; (800358c <TIM_Base_SetConfig+0xd0>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d103      	bne.n	800356e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	615a      	str	r2, [r3, #20]
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b004      	add	sp, #16
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40000400 	.word	0x40000400
 8003584:	40002000 	.word	0x40002000
 8003588:	40014400 	.word	0x40014400
 800358c:	40014800 	.word	0x40014800
 8003590:	fffffcff 	.word	0xfffffcff

08003594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e046      	b.n	8003634 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2288      	movs	r2, #136	; 0x88
 80035aa:	589b      	ldr	r3, [r3, r2]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2284      	movs	r2, #132	; 0x84
 80035b4:	2100      	movs	r1, #0
 80035b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	0018      	movs	r0, r3
 80035bc:	f7fd fba0 	bl	8000d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2288      	movs	r2, #136	; 0x88
 80035c4:	2124      	movs	r1, #36	; 0x24
 80035c6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2101      	movs	r1, #1
 80035d4:	438a      	bics	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fc12 	bl	8003e04 <UART_SetConfig>
 80035e0:	0003      	movs	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e024      	b.n	8003634 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d003      	beq.n	80035fa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fd6f 	bl	80040d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	490d      	ldr	r1, [pc, #52]	; (800363c <HAL_UART_Init+0xa8>)
 8003606:	400a      	ands	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	212a      	movs	r1, #42	; 0x2a
 8003616:	438a      	bics	r2, r1
 8003618:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2101      	movs	r1, #1
 8003626:	430a      	orrs	r2, r1
 8003628:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	0018      	movs	r0, r3
 800362e:	f000 fe07 	bl	8004240 <UART_CheckIdleState>
 8003632:	0003      	movs	r3, r0
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b002      	add	sp, #8
 800363a:	bd80      	pop	{r7, pc}
 800363c:	ffffb7ff 	.word	0xffffb7ff

08003640 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b08a      	sub	sp, #40	; 0x28
 8003644:	af02      	add	r7, sp, #8
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	1dbb      	adds	r3, r7, #6
 800364e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2288      	movs	r2, #136	; 0x88
 8003654:	589b      	ldr	r3, [r3, r2]
 8003656:	2b20      	cmp	r3, #32
 8003658:	d000      	beq.n	800365c <HAL_UART_Transmit+0x1c>
 800365a:	e088      	b.n	800376e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_UART_Transmit+0x2a>
 8003662:	1dbb      	adds	r3, r7, #6
 8003664:	881b      	ldrh	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e080      	b.n	8003770 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	015b      	lsls	r3, r3, #5
 8003676:	429a      	cmp	r2, r3
 8003678:	d109      	bne.n	800368e <HAL_UART_Transmit+0x4e>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d105      	bne.n	800368e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2201      	movs	r2, #1
 8003686:	4013      	ands	r3, r2
 8003688:	d001      	beq.n	800368e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e070      	b.n	8003770 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2290      	movs	r2, #144	; 0x90
 8003692:	2100      	movs	r1, #0
 8003694:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2288      	movs	r2, #136	; 0x88
 800369a:	2121      	movs	r1, #33	; 0x21
 800369c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800369e:	f7fd fc65 	bl	8000f6c <HAL_GetTick>
 80036a2:	0003      	movs	r3, r0
 80036a4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	1dba      	adds	r2, r7, #6
 80036aa:	2154      	movs	r1, #84	; 0x54
 80036ac:	8812      	ldrh	r2, [r2, #0]
 80036ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	1dba      	adds	r2, r7, #6
 80036b4:	2156      	movs	r1, #86	; 0x56
 80036b6:	8812      	ldrh	r2, [r2, #0]
 80036b8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	015b      	lsls	r3, r3, #5
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d108      	bne.n	80036d8 <HAL_UART_Transmit+0x98>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	e003      	b.n	80036e0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036dc:	2300      	movs	r3, #0
 80036de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036e0:	e02c      	b.n	800373c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	0013      	movs	r3, r2
 80036ec:	2200      	movs	r2, #0
 80036ee:	2180      	movs	r1, #128	; 0x80
 80036f0:	f000 fdf4 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 80036f4:	1e03      	subs	r3, r0, #0
 80036f6:	d001      	beq.n	80036fc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e039      	b.n	8003770 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	881b      	ldrh	r3, [r3, #0]
 8003706:	001a      	movs	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	05d2      	lsls	r2, r2, #23
 800370e:	0dd2      	lsrs	r2, r2, #23
 8003710:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	3302      	adds	r3, #2
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	e007      	b.n	800372a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	781a      	ldrb	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	3301      	adds	r3, #1
 8003728:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2256      	movs	r2, #86	; 0x56
 800372e:	5a9b      	ldrh	r3, [r3, r2]
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b299      	uxth	r1, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2256      	movs	r2, #86	; 0x56
 800373a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2256      	movs	r2, #86	; 0x56
 8003740:	5a9b      	ldrh	r3, [r3, r2]
 8003742:	b29b      	uxth	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1cc      	bne.n	80036e2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	0013      	movs	r3, r2
 8003752:	2200      	movs	r2, #0
 8003754:	2140      	movs	r1, #64	; 0x40
 8003756:	f000 fdc1 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d001      	beq.n	8003762 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e006      	b.n	8003770 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2288      	movs	r2, #136	; 0x88
 8003766:	2120      	movs	r1, #32
 8003768:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	e000      	b.n	8003770 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800376e:	2302      	movs	r3, #2
  }
}
 8003770:	0018      	movs	r0, r3
 8003772:	46bd      	mov	sp, r7
 8003774:	b008      	add	sp, #32
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003778:	b5b0      	push	{r4, r5, r7, lr}
 800377a:	b0aa      	sub	sp, #168	; 0xa8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	22a4      	movs	r2, #164	; 0xa4
 8003788:	18b9      	adds	r1, r7, r2
 800378a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	20a0      	movs	r0, #160	; 0xa0
 8003794:	1839      	adds	r1, r7, r0
 8003796:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	249c      	movs	r4, #156	; 0x9c
 80037a0:	1939      	adds	r1, r7, r4
 80037a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80037a4:	0011      	movs	r1, r2
 80037a6:	18bb      	adds	r3, r7, r2
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4aa2      	ldr	r2, [pc, #648]	; (8003a34 <HAL_UART_IRQHandler+0x2bc>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	2298      	movs	r2, #152	; 0x98
 80037b0:	18bd      	adds	r5, r7, r2
 80037b2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80037b4:	18bb      	adds	r3, r7, r2
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11a      	bne.n	80037f2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80037bc:	187b      	adds	r3, r7, r1
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2220      	movs	r2, #32
 80037c2:	4013      	ands	r3, r2
 80037c4:	d015      	beq.n	80037f2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80037c6:	183b      	adds	r3, r7, r0
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2220      	movs	r2, #32
 80037cc:	4013      	ands	r3, r2
 80037ce:	d105      	bne.n	80037dc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	2380      	movs	r3, #128	; 0x80
 80037d6:	055b      	lsls	r3, r3, #21
 80037d8:	4013      	ands	r3, r2
 80037da:	d00a      	beq.n	80037f2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d100      	bne.n	80037e6 <HAL_UART_IRQHandler+0x6e>
 80037e4:	e2dc      	b.n	8003da0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	0010      	movs	r0, r2
 80037ee:	4798      	blx	r3
      }
      return;
 80037f0:	e2d6      	b.n	8003da0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037f2:	2398      	movs	r3, #152	; 0x98
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d100      	bne.n	80037fe <HAL_UART_IRQHandler+0x86>
 80037fc:	e122      	b.n	8003a44 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037fe:	239c      	movs	r3, #156	; 0x9c
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a8c      	ldr	r2, [pc, #560]	; (8003a38 <HAL_UART_IRQHandler+0x2c0>)
 8003806:	4013      	ands	r3, r2
 8003808:	d106      	bne.n	8003818 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800380a:	23a0      	movs	r3, #160	; 0xa0
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a8a      	ldr	r2, [pc, #552]	; (8003a3c <HAL_UART_IRQHandler+0x2c4>)
 8003812:	4013      	ands	r3, r2
 8003814:	d100      	bne.n	8003818 <HAL_UART_IRQHandler+0xa0>
 8003816:	e115      	b.n	8003a44 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003818:	23a4      	movs	r3, #164	; 0xa4
 800381a:	18fb      	adds	r3, r7, r3
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2201      	movs	r2, #1
 8003820:	4013      	ands	r3, r2
 8003822:	d012      	beq.n	800384a <HAL_UART_IRQHandler+0xd2>
 8003824:	23a0      	movs	r3, #160	; 0xa0
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	2380      	movs	r3, #128	; 0x80
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	4013      	ands	r3, r2
 8003830:	d00b      	beq.n	800384a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2290      	movs	r2, #144	; 0x90
 800383e:	589b      	ldr	r3, [r3, r2]
 8003840:	2201      	movs	r2, #1
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2190      	movs	r1, #144	; 0x90
 8003848:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800384a:	23a4      	movs	r3, #164	; 0xa4
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2202      	movs	r2, #2
 8003852:	4013      	ands	r3, r2
 8003854:	d011      	beq.n	800387a <HAL_UART_IRQHandler+0x102>
 8003856:	239c      	movs	r3, #156	; 0x9c
 8003858:	18fb      	adds	r3, r7, r3
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2201      	movs	r2, #1
 800385e:	4013      	ands	r3, r2
 8003860:	d00b      	beq.n	800387a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2202      	movs	r2, #2
 8003868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2290      	movs	r2, #144	; 0x90
 800386e:	589b      	ldr	r3, [r3, r2]
 8003870:	2204      	movs	r2, #4
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2190      	movs	r1, #144	; 0x90
 8003878:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800387a:	23a4      	movs	r3, #164	; 0xa4
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2204      	movs	r2, #4
 8003882:	4013      	ands	r3, r2
 8003884:	d011      	beq.n	80038aa <HAL_UART_IRQHandler+0x132>
 8003886:	239c      	movs	r3, #156	; 0x9c
 8003888:	18fb      	adds	r3, r7, r3
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2201      	movs	r2, #1
 800388e:	4013      	ands	r3, r2
 8003890:	d00b      	beq.n	80038aa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2204      	movs	r2, #4
 8003898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2290      	movs	r2, #144	; 0x90
 800389e:	589b      	ldr	r3, [r3, r2]
 80038a0:	2202      	movs	r2, #2
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2190      	movs	r1, #144	; 0x90
 80038a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80038aa:	23a4      	movs	r3, #164	; 0xa4
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2208      	movs	r2, #8
 80038b2:	4013      	ands	r3, r2
 80038b4:	d017      	beq.n	80038e6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038b6:	23a0      	movs	r3, #160	; 0xa0
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	2220      	movs	r2, #32
 80038be:	4013      	ands	r3, r2
 80038c0:	d105      	bne.n	80038ce <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80038c2:	239c      	movs	r3, #156	; 0x9c
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a5b      	ldr	r2, [pc, #364]	; (8003a38 <HAL_UART_IRQHandler+0x2c0>)
 80038ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80038cc:	d00b      	beq.n	80038e6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2208      	movs	r2, #8
 80038d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2290      	movs	r2, #144	; 0x90
 80038da:	589b      	ldr	r3, [r3, r2]
 80038dc:	2208      	movs	r2, #8
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2190      	movs	r1, #144	; 0x90
 80038e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038e6:	23a4      	movs	r3, #164	; 0xa4
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	2380      	movs	r3, #128	; 0x80
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	4013      	ands	r3, r2
 80038f2:	d013      	beq.n	800391c <HAL_UART_IRQHandler+0x1a4>
 80038f4:	23a0      	movs	r3, #160	; 0xa0
 80038f6:	18fb      	adds	r3, r7, r3
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	04db      	lsls	r3, r3, #19
 80038fe:	4013      	ands	r3, r2
 8003900:	d00c      	beq.n	800391c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2280      	movs	r2, #128	; 0x80
 8003908:	0112      	lsls	r2, r2, #4
 800390a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2290      	movs	r2, #144	; 0x90
 8003910:	589b      	ldr	r3, [r3, r2]
 8003912:	2220      	movs	r2, #32
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2190      	movs	r1, #144	; 0x90
 800391a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2290      	movs	r2, #144	; 0x90
 8003920:	589b      	ldr	r3, [r3, r2]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d100      	bne.n	8003928 <HAL_UART_IRQHandler+0x1b0>
 8003926:	e23d      	b.n	8003da4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003928:	23a4      	movs	r3, #164	; 0xa4
 800392a:	18fb      	adds	r3, r7, r3
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2220      	movs	r2, #32
 8003930:	4013      	ands	r3, r2
 8003932:	d015      	beq.n	8003960 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003934:	23a0      	movs	r3, #160	; 0xa0
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2220      	movs	r2, #32
 800393c:	4013      	ands	r3, r2
 800393e:	d106      	bne.n	800394e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003940:	239c      	movs	r3, #156	; 0x9c
 8003942:	18fb      	adds	r3, r7, r3
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	2380      	movs	r3, #128	; 0x80
 8003948:	055b      	lsls	r3, r3, #21
 800394a:	4013      	ands	r3, r2
 800394c:	d008      	beq.n	8003960 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	0010      	movs	r0, r2
 800395e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2290      	movs	r2, #144	; 0x90
 8003964:	589b      	ldr	r3, [r3, r2]
 8003966:	2194      	movs	r1, #148	; 0x94
 8003968:	187a      	adds	r2, r7, r1
 800396a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2240      	movs	r2, #64	; 0x40
 8003974:	4013      	ands	r3, r2
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d004      	beq.n	8003984 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800397a:	187b      	adds	r3, r7, r1
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2228      	movs	r2, #40	; 0x28
 8003980:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003982:	d04c      	beq.n	8003a1e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	0018      	movs	r0, r3
 8003988:	f000 fe56 	bl	8004638 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2240      	movs	r2, #64	; 0x40
 8003994:	4013      	ands	r3, r2
 8003996:	2b40      	cmp	r3, #64	; 0x40
 8003998:	d13c      	bne.n	8003a14 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399a:	f3ef 8310 	mrs	r3, PRIMASK
 800399e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80039a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039a2:	2090      	movs	r0, #144	; 0x90
 80039a4:	183a      	adds	r2, r7, r0
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	2301      	movs	r3, #1
 80039aa:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ae:	f383 8810 	msr	PRIMASK, r3
}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2140      	movs	r1, #64	; 0x40
 80039c0:	438a      	bics	r2, r1
 80039c2:	609a      	str	r2, [r3, #8]
 80039c4:	183b      	adds	r3, r7, r0
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	589b      	ldr	r3, [r3, r2]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d016      	beq.n	8003a0a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2280      	movs	r2, #128	; 0x80
 80039e0:	589b      	ldr	r3, [r3, r2]
 80039e2:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <HAL_UART_IRQHandler+0x2c8>)
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2280      	movs	r2, #128	; 0x80
 80039ea:	589b      	ldr	r3, [r3, r2]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f7fd fd57 	bl	80014a0 <HAL_DMA_Abort_IT>
 80039f2:	1e03      	subs	r3, r0, #0
 80039f4:	d01c      	beq.n	8003a30 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2280      	movs	r2, #128	; 0x80
 80039fa:	589b      	ldr	r3, [r3, r2]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	2180      	movs	r1, #128	; 0x80
 8003a02:	5852      	ldr	r2, [r2, r1]
 8003a04:	0010      	movs	r0, r2
 8003a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a08:	e012      	b.n	8003a30 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 f9f1 	bl	8003df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a12:	e00d      	b.n	8003a30 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f000 f9ec 	bl	8003df4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a1c:	e008      	b.n	8003a30 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	0018      	movs	r0, r3
 8003a22:	f000 f9e7 	bl	8003df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2290      	movs	r2, #144	; 0x90
 8003a2a:	2100      	movs	r1, #0
 8003a2c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003a2e:	e1b9      	b.n	8003da4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a30:	46c0      	nop			; (mov r8, r8)
    return;
 8003a32:	e1b7      	b.n	8003da4 <HAL_UART_IRQHandler+0x62c>
 8003a34:	0000080f 	.word	0x0000080f
 8003a38:	10000001 	.word	0x10000001
 8003a3c:	04000120 	.word	0x04000120
 8003a40:	080048fd 	.word	0x080048fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d000      	beq.n	8003a4e <HAL_UART_IRQHandler+0x2d6>
 8003a4c:	e13e      	b.n	8003ccc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a4e:	23a4      	movs	r3, #164	; 0xa4
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2210      	movs	r2, #16
 8003a56:	4013      	ands	r3, r2
 8003a58:	d100      	bne.n	8003a5c <HAL_UART_IRQHandler+0x2e4>
 8003a5a:	e137      	b.n	8003ccc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a5c:	23a0      	movs	r3, #160	; 0xa0
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2210      	movs	r2, #16
 8003a64:	4013      	ands	r3, r2
 8003a66:	d100      	bne.n	8003a6a <HAL_UART_IRQHandler+0x2f2>
 8003a68:	e130      	b.n	8003ccc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2210      	movs	r2, #16
 8003a70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2240      	movs	r2, #64	; 0x40
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	2b40      	cmp	r3, #64	; 0x40
 8003a7e:	d000      	beq.n	8003a82 <HAL_UART_IRQHandler+0x30a>
 8003a80:	e0a4      	b.n	8003bcc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	589b      	ldr	r3, [r3, r2]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	217e      	movs	r1, #126	; 0x7e
 8003a8e:	187b      	adds	r3, r7, r1
 8003a90:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003a92:	187b      	adds	r3, r7, r1
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d100      	bne.n	8003a9c <HAL_UART_IRQHandler+0x324>
 8003a9a:	e185      	b.n	8003da8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	225c      	movs	r2, #92	; 0x5c
 8003aa0:	5a9b      	ldrh	r3, [r3, r2]
 8003aa2:	187a      	adds	r2, r7, r1
 8003aa4:	8812      	ldrh	r2, [r2, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d300      	bcc.n	8003aac <HAL_UART_IRQHandler+0x334>
 8003aaa:	e17d      	b.n	8003da8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	187a      	adds	r2, r7, r1
 8003ab0:	215e      	movs	r1, #94	; 0x5e
 8003ab2:	8812      	ldrh	r2, [r2, #0]
 8003ab4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2280      	movs	r2, #128	; 0x80
 8003aba:	589b      	ldr	r3, [r3, r2]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d170      	bne.n	8003ba8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ace:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad6:	f383 8810 	msr	PRIMASK, r3
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	49b4      	ldr	r1, [pc, #720]	; (8003db8 <HAL_UART_IRQHandler+0x640>)
 8003ae8:	400a      	ands	r2, r1
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003aee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af2:	f383 8810 	msr	PRIMASK, r3
}
 8003af6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af8:	f3ef 8310 	mrs	r3, PRIMASK
 8003afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b00:	677b      	str	r3, [r7, #116]	; 0x74
 8003b02:	2301      	movs	r3, #1
 8003b04:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b08:	f383 8810 	msr	PRIMASK, r3
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2101      	movs	r1, #1
 8003b1a:	438a      	bics	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]
 8003b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b20:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b24:	f383 8810 	msr	PRIMASK, r3
}
 8003b28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b32:	673b      	str	r3, [r7, #112]	; 0x70
 8003b34:	2301      	movs	r3, #1
 8003b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b3a:	f383 8810 	msr	PRIMASK, r3
}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2140      	movs	r1, #64	; 0x40
 8003b4c:	438a      	bics	r2, r1
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b52:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b56:	f383 8810 	msr	PRIMASK, r3
}
 8003b5a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	228c      	movs	r2, #140	; 0x8c
 8003b60:	2120      	movs	r1, #32
 8003b62:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b6e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b74:	2301      	movs	r3, #1
 8003b76:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b7a:	f383 8810 	msr	PRIMASK, r3
}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2110      	movs	r1, #16
 8003b8c:	438a      	bics	r2, r1
 8003b8e:	601a      	str	r2, [r3, #0]
 8003b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b92:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b96:	f383 8810 	msr	PRIMASK, r3
}
 8003b9a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	589b      	ldr	r3, [r3, r2]
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f7fd fc1a 	bl	80013dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	225c      	movs	r2, #92	; 0x5c
 8003bb2:	5a9a      	ldrh	r2, [r3, r2]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	215e      	movs	r1, #94	; 0x5e
 8003bb8:	5a5b      	ldrh	r3, [r3, r1]
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	0011      	movs	r1, r2
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	f7fc fd3d 	bl	8000644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bca:	e0ed      	b.n	8003da8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	225c      	movs	r2, #92	; 0x5c
 8003bd0:	5a99      	ldrh	r1, [r3, r2]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	225e      	movs	r2, #94	; 0x5e
 8003bd6:	5a9b      	ldrh	r3, [r3, r2]
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	208e      	movs	r0, #142	; 0x8e
 8003bdc:	183b      	adds	r3, r7, r0
 8003bde:	1a8a      	subs	r2, r1, r2
 8003be0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	225e      	movs	r2, #94	; 0x5e
 8003be6:	5a9b      	ldrh	r3, [r3, r2]
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d100      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x478>
 8003bee:	e0dd      	b.n	8003dac <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003bf0:	183b      	adds	r3, r7, r0
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d100      	bne.n	8003bfa <HAL_UART_IRQHandler+0x482>
 8003bf8:	e0d8      	b.n	8003dac <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8003bfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c00:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c02:	2488      	movs	r4, #136	; 0x88
 8003c04:	193a      	adds	r2, r7, r4
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	2301      	movs	r3, #1
 8003c0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f383 8810 	msr	PRIMASK, r3
}
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4967      	ldr	r1, [pc, #412]	; (8003dbc <HAL_UART_IRQHandler+0x644>)
 8003c20:	400a      	ands	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	193b      	adds	r3, r7, r4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f383 8810 	msr	PRIMASK, r3
}
 8003c30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c32:	f3ef 8310 	mrs	r3, PRIMASK
 8003c36:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c38:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c3a:	2484      	movs	r4, #132	; 0x84
 8003c3c:	193a      	adds	r2, r7, r4
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	2301      	movs	r3, #1
 8003c42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f383 8810 	msr	PRIMASK, r3
}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	495a      	ldr	r1, [pc, #360]	; (8003dc0 <HAL_UART_IRQHandler+0x648>)
 8003c58:	400a      	ands	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]
 8003c5c:	193b      	adds	r3, r7, r4
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	228c      	movs	r2, #140	; 0x8c
 8003c6e:	2120      	movs	r1, #32
 8003c70:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c86:	2480      	movs	r4, #128	; 0x80
 8003c88:	193a      	adds	r2, r7, r4
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2110      	movs	r1, #16
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	193b      	adds	r3, r7, r4
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb0:	f383 8810 	msr	PRIMASK, r3
}
 8003cb4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2202      	movs	r2, #2
 8003cba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cbc:	183b      	adds	r3, r7, r0
 8003cbe:	881a      	ldrh	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7fc fcbd 	bl	8000644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cca:	e06f      	b.n	8003dac <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ccc:	23a4      	movs	r3, #164	; 0xa4
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	035b      	lsls	r3, r3, #13
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	d010      	beq.n	8003cfc <HAL_UART_IRQHandler+0x584>
 8003cda:	239c      	movs	r3, #156	; 0x9c
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	2380      	movs	r3, #128	; 0x80
 8003ce2:	03db      	lsls	r3, r3, #15
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d009      	beq.n	8003cfc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2280      	movs	r2, #128	; 0x80
 8003cee:	0352      	lsls	r2, r2, #13
 8003cf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f000 fe44 	bl	8004982 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cfa:	e05a      	b.n	8003db2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003cfc:	23a4      	movs	r3, #164	; 0xa4
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	4013      	ands	r3, r2
 8003d06:	d016      	beq.n	8003d36 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003d08:	23a0      	movs	r3, #160	; 0xa0
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2280      	movs	r2, #128	; 0x80
 8003d10:	4013      	ands	r3, r2
 8003d12:	d106      	bne.n	8003d22 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003d14:	239c      	movs	r3, #156	; 0x9c
 8003d16:	18fb      	adds	r3, r7, r3
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	2380      	movs	r3, #128	; 0x80
 8003d1c:	041b      	lsls	r3, r3, #16
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d009      	beq.n	8003d36 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d042      	beq.n	8003db0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	0010      	movs	r0, r2
 8003d32:	4798      	blx	r3
    }
    return;
 8003d34:	e03c      	b.n	8003db0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d36:	23a4      	movs	r3, #164	; 0xa4
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2240      	movs	r2, #64	; 0x40
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d00a      	beq.n	8003d58 <HAL_UART_IRQHandler+0x5e0>
 8003d42:	23a0      	movs	r3, #160	; 0xa0
 8003d44:	18fb      	adds	r3, r7, r3
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2240      	movs	r2, #64	; 0x40
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	0018      	movs	r0, r3
 8003d52:	f000 fdea 	bl	800492a <UART_EndTransmit_IT>
    return;
 8003d56:	e02c      	b.n	8003db2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d58:	23a4      	movs	r3, #164	; 0xa4
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	2380      	movs	r3, #128	; 0x80
 8003d60:	041b      	lsls	r3, r3, #16
 8003d62:	4013      	ands	r3, r2
 8003d64:	d00b      	beq.n	8003d7e <HAL_UART_IRQHandler+0x606>
 8003d66:	23a0      	movs	r3, #160	; 0xa0
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	05db      	lsls	r3, r3, #23
 8003d70:	4013      	ands	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f000 fe13 	bl	80049a2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d7c:	e019      	b.n	8003db2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d7e:	23a4      	movs	r3, #164	; 0xa4
 8003d80:	18fb      	adds	r3, r7, r3
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	2380      	movs	r3, #128	; 0x80
 8003d86:	045b      	lsls	r3, r3, #17
 8003d88:	4013      	ands	r3, r2
 8003d8a:	d012      	beq.n	8003db2 <HAL_UART_IRQHandler+0x63a>
 8003d8c:	23a0      	movs	r3, #160	; 0xa0
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	da0d      	bge.n	8003db2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f000 fdfa 	bl	8004992 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d9e:	e008      	b.n	8003db2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003da0:	46c0      	nop			; (mov r8, r8)
 8003da2:	e006      	b.n	8003db2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003da4:	46c0      	nop			; (mov r8, r8)
 8003da6:	e004      	b.n	8003db2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003da8:	46c0      	nop			; (mov r8, r8)
 8003daa:	e002      	b.n	8003db2 <HAL_UART_IRQHandler+0x63a>
      return;
 8003dac:	46c0      	nop			; (mov r8, r8)
 8003dae:	e000      	b.n	8003db2 <HAL_UART_IRQHandler+0x63a>
    return;
 8003db0:	46c0      	nop			; (mov r8, r8)
  }
}
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b02a      	add	sp, #168	; 0xa8
 8003db6:	bdb0      	pop	{r4, r5, r7, pc}
 8003db8:	fffffeff 	.word	0xfffffeff
 8003dbc:	fffffedf 	.word	0xfffffedf
 8003dc0:	effffffe 	.word	0xeffffffe

08003dc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b002      	add	sp, #8
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b002      	add	sp, #8
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003dec:	46c0      	nop			; (mov r8, r8)
 8003dee:	46bd      	mov	sp, r7
 8003df0:	b002      	add	sp, #8
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b002      	add	sp, #8
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b088      	sub	sp, #32
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e0c:	231a      	movs	r3, #26
 8003e0e:	18fb      	adds	r3, r7, r3
 8003e10:	2200      	movs	r2, #0
 8003e12:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4aa1      	ldr	r2, [pc, #644]	; (80040b8 <UART_SetConfig+0x2b4>)
 8003e34:	4013      	ands	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4a9c      	ldr	r2, [pc, #624]	; (80040bc <UART_SetConfig+0x2b8>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	0019      	movs	r1, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a93      	ldr	r2, [pc, #588]	; (80040c0 <UART_SetConfig+0x2bc>)
 8003e72:	4013      	ands	r3, r2
 8003e74:	0019      	movs	r1, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69fa      	ldr	r2, [r7, #28]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	220f      	movs	r2, #15
 8003e88:	4393      	bics	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a89      	ldr	r2, [pc, #548]	; (80040c4 <UART_SetConfig+0x2c0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d127      	bne.n	8003ef2 <UART_SetConfig+0xee>
 8003ea2:	4b89      	ldr	r3, [pc, #548]	; (80040c8 <UART_SetConfig+0x2c4>)
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b03      	cmp	r3, #3
 8003eac:	d017      	beq.n	8003ede <UART_SetConfig+0xda>
 8003eae:	d81b      	bhi.n	8003ee8 <UART_SetConfig+0xe4>
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d00a      	beq.n	8003eca <UART_SetConfig+0xc6>
 8003eb4:	d818      	bhi.n	8003ee8 <UART_SetConfig+0xe4>
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d002      	beq.n	8003ec0 <UART_SetConfig+0xbc>
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d00a      	beq.n	8003ed4 <UART_SetConfig+0xd0>
 8003ebe:	e013      	b.n	8003ee8 <UART_SetConfig+0xe4>
 8003ec0:	231b      	movs	r3, #27
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]
 8003ec8:	e021      	b.n	8003f0e <UART_SetConfig+0x10a>
 8003eca:	231b      	movs	r3, #27
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
 8003ed2:	e01c      	b.n	8003f0e <UART_SetConfig+0x10a>
 8003ed4:	231b      	movs	r3, #27
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	2204      	movs	r2, #4
 8003eda:	701a      	strb	r2, [r3, #0]
 8003edc:	e017      	b.n	8003f0e <UART_SetConfig+0x10a>
 8003ede:	231b      	movs	r3, #27
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e012      	b.n	8003f0e <UART_SetConfig+0x10a>
 8003ee8:	231b      	movs	r3, #27
 8003eea:	18fb      	adds	r3, r7, r3
 8003eec:	2210      	movs	r2, #16
 8003eee:	701a      	strb	r2, [r3, #0]
 8003ef0:	e00d      	b.n	8003f0e <UART_SetConfig+0x10a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a75      	ldr	r2, [pc, #468]	; (80040cc <UART_SetConfig+0x2c8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d104      	bne.n	8003f06 <UART_SetConfig+0x102>
 8003efc:	231b      	movs	r3, #27
 8003efe:	18fb      	adds	r3, r7, r3
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
 8003f04:	e003      	b.n	8003f0e <UART_SetConfig+0x10a>
 8003f06:	231b      	movs	r3, #27
 8003f08:	18fb      	adds	r3, r7, r3
 8003f0a:	2210      	movs	r2, #16
 8003f0c:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	2380      	movs	r3, #128	; 0x80
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d000      	beq.n	8003f1c <UART_SetConfig+0x118>
 8003f1a:	e065      	b.n	8003fe8 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003f1c:	231b      	movs	r3, #27
 8003f1e:	18fb      	adds	r3, r7, r3
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d015      	beq.n	8003f52 <UART_SetConfig+0x14e>
 8003f26:	dc18      	bgt.n	8003f5a <UART_SetConfig+0x156>
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	d00d      	beq.n	8003f48 <UART_SetConfig+0x144>
 8003f2c:	dc15      	bgt.n	8003f5a <UART_SetConfig+0x156>
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <UART_SetConfig+0x134>
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d005      	beq.n	8003f42 <UART_SetConfig+0x13e>
 8003f36:	e010      	b.n	8003f5a <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f38:	f7fe ff96 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	617b      	str	r3, [r7, #20]
        break;
 8003f40:	e012      	b.n	8003f68 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f42:	4b63      	ldr	r3, [pc, #396]	; (80040d0 <UART_SetConfig+0x2cc>)
 8003f44:	617b      	str	r3, [r7, #20]
        break;
 8003f46:	e00f      	b.n	8003f68 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f48:	f7fe ff02 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	617b      	str	r3, [r7, #20]
        break;
 8003f50:	e00a      	b.n	8003f68 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	021b      	lsls	r3, r3, #8
 8003f56:	617b      	str	r3, [r7, #20]
        break;
 8003f58:	e006      	b.n	8003f68 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f5e:	231a      	movs	r3, #26
 8003f60:	18fb      	adds	r3, r7, r3
 8003f62:	2201      	movs	r2, #1
 8003f64:	701a      	strb	r2, [r3, #0]
        break;
 8003f66:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d100      	bne.n	8003f70 <UART_SetConfig+0x16c>
 8003f6e:	e08d      	b.n	800408c <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f74:	4b57      	ldr	r3, [pc, #348]	; (80040d4 <UART_SetConfig+0x2d0>)
 8003f76:	0052      	lsls	r2, r2, #1
 8003f78:	5ad3      	ldrh	r3, [r2, r3]
 8003f7a:	0019      	movs	r1, r3
 8003f7c:	6978      	ldr	r0, [r7, #20]
 8003f7e:	f7fc f8bf 	bl	8000100 <__udivsi3>
 8003f82:	0003      	movs	r3, r0
 8003f84:	005a      	lsls	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	085b      	lsrs	r3, r3, #1
 8003f8c:	18d2      	adds	r2, r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	0019      	movs	r1, r3
 8003f94:	0010      	movs	r0, r2
 8003f96:	f7fc f8b3 	bl	8000100 <__udivsi3>
 8003f9a:	0003      	movs	r3, r0
 8003f9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	2b0f      	cmp	r3, #15
 8003fa2:	d91c      	bls.n	8003fde <UART_SetConfig+0x1da>
 8003fa4:	693a      	ldr	r2, [r7, #16]
 8003fa6:	2380      	movs	r3, #128	; 0x80
 8003fa8:	025b      	lsls	r3, r3, #9
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d217      	bcs.n	8003fde <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	200e      	movs	r0, #14
 8003fb4:	183b      	adds	r3, r7, r0
 8003fb6:	210f      	movs	r1, #15
 8003fb8:	438a      	bics	r2, r1
 8003fba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	2207      	movs	r2, #7
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	b299      	uxth	r1, r3
 8003fc8:	183b      	adds	r3, r7, r0
 8003fca:	183a      	adds	r2, r7, r0
 8003fcc:	8812      	ldrh	r2, [r2, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	183a      	adds	r2, r7, r0
 8003fd8:	8812      	ldrh	r2, [r2, #0]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	e056      	b.n	800408c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003fde:	231a      	movs	r3, #26
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
 8003fe6:	e051      	b.n	800408c <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fe8:	231b      	movs	r3, #27
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	2b08      	cmp	r3, #8
 8003ff0:	d015      	beq.n	800401e <UART_SetConfig+0x21a>
 8003ff2:	dc18      	bgt.n	8004026 <UART_SetConfig+0x222>
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d00d      	beq.n	8004014 <UART_SetConfig+0x210>
 8003ff8:	dc15      	bgt.n	8004026 <UART_SetConfig+0x222>
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <UART_SetConfig+0x200>
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d005      	beq.n	800400e <UART_SetConfig+0x20a>
 8004002:	e010      	b.n	8004026 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe ff30 	bl	8002e68 <HAL_RCC_GetPCLK1Freq>
 8004008:	0003      	movs	r3, r0
 800400a:	617b      	str	r3, [r7, #20]
        break;
 800400c:	e012      	b.n	8004034 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800400e:	4b30      	ldr	r3, [pc, #192]	; (80040d0 <UART_SetConfig+0x2cc>)
 8004010:	617b      	str	r3, [r7, #20]
        break;
 8004012:	e00f      	b.n	8004034 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004014:	f7fe fe9c 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8004018:	0003      	movs	r3, r0
 800401a:	617b      	str	r3, [r7, #20]
        break;
 800401c:	e00a      	b.n	8004034 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800401e:	2380      	movs	r3, #128	; 0x80
 8004020:	021b      	lsls	r3, r3, #8
 8004022:	617b      	str	r3, [r7, #20]
        break;
 8004024:	e006      	b.n	8004034 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800402a:	231a      	movs	r3, #26
 800402c:	18fb      	adds	r3, r7, r3
 800402e:	2201      	movs	r2, #1
 8004030:	701a      	strb	r2, [r3, #0]
        break;
 8004032:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d028      	beq.n	800408c <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800403e:	4b25      	ldr	r3, [pc, #148]	; (80040d4 <UART_SetConfig+0x2d0>)
 8004040:	0052      	lsls	r2, r2, #1
 8004042:	5ad3      	ldrh	r3, [r2, r3]
 8004044:	0019      	movs	r1, r3
 8004046:	6978      	ldr	r0, [r7, #20]
 8004048:	f7fc f85a 	bl	8000100 <__udivsi3>
 800404c:	0003      	movs	r3, r0
 800404e:	001a      	movs	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	085b      	lsrs	r3, r3, #1
 8004056:	18d2      	adds	r2, r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	0019      	movs	r1, r3
 800405e:	0010      	movs	r0, r2
 8004060:	f7fc f84e 	bl	8000100 <__udivsi3>
 8004064:	0003      	movs	r3, r0
 8004066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b0f      	cmp	r3, #15
 800406c:	d90a      	bls.n	8004084 <UART_SetConfig+0x280>
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	025b      	lsls	r3, r3, #9
 8004074:	429a      	cmp	r2, r3
 8004076:	d205      	bcs.n	8004084 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	b29a      	uxth	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e003      	b.n	800408c <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8004084:	231a      	movs	r3, #26
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	226a      	movs	r2, #106	; 0x6a
 8004090:	2101      	movs	r1, #1
 8004092:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2268      	movs	r2, #104	; 0x68
 8004098:	2101      	movs	r1, #1
 800409a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80040a8:	231a      	movs	r3, #26
 80040aa:	18fb      	adds	r3, r7, r3
 80040ac:	781b      	ldrb	r3, [r3, #0]
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b008      	add	sp, #32
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	cfff69f3 	.word	0xcfff69f3
 80040bc:	ffffcfff 	.word	0xffffcfff
 80040c0:	11fff4ff 	.word	0x11fff4ff
 80040c4:	40013800 	.word	0x40013800
 80040c8:	40021000 	.word	0x40021000
 80040cc:	40004400 	.word	0x40004400
 80040d0:	00f42400 	.word	0x00f42400
 80040d4:	08004de8 	.word	0x08004de8

080040d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	2201      	movs	r2, #1
 80040e6:	4013      	ands	r3, r2
 80040e8:	d00b      	beq.n	8004102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	4a4a      	ldr	r2, [pc, #296]	; (800421c <UART_AdvFeatureConfig+0x144>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004106:	2202      	movs	r2, #2
 8004108:	4013      	ands	r3, r2
 800410a:	d00b      	beq.n	8004124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4a43      	ldr	r2, [pc, #268]	; (8004220 <UART_AdvFeatureConfig+0x148>)
 8004114:	4013      	ands	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2204      	movs	r2, #4
 800412a:	4013      	ands	r3, r2
 800412c:	d00b      	beq.n	8004146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4a3b      	ldr	r2, [pc, #236]	; (8004224 <UART_AdvFeatureConfig+0x14c>)
 8004136:	4013      	ands	r3, r2
 8004138:	0019      	movs	r1, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800414a:	2208      	movs	r2, #8
 800414c:	4013      	ands	r3, r2
 800414e:	d00b      	beq.n	8004168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a34      	ldr	r2, [pc, #208]	; (8004228 <UART_AdvFeatureConfig+0x150>)
 8004158:	4013      	ands	r3, r2
 800415a:	0019      	movs	r1, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	2210      	movs	r2, #16
 800416e:	4013      	ands	r3, r2
 8004170:	d00b      	beq.n	800418a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	4a2c      	ldr	r2, [pc, #176]	; (800422c <UART_AdvFeatureConfig+0x154>)
 800417a:	4013      	ands	r3, r2
 800417c:	0019      	movs	r1, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418e:	2220      	movs	r2, #32
 8004190:	4013      	ands	r3, r2
 8004192:	d00b      	beq.n	80041ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	4a25      	ldr	r2, [pc, #148]	; (8004230 <UART_AdvFeatureConfig+0x158>)
 800419c:	4013      	ands	r3, r2
 800419e:	0019      	movs	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	2240      	movs	r2, #64	; 0x40
 80041b2:	4013      	ands	r3, r2
 80041b4:	d01d      	beq.n	80041f2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <UART_AdvFeatureConfig+0x15c>)
 80041be:	4013      	ands	r3, r2
 80041c0:	0019      	movs	r1, r3
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	035b      	lsls	r3, r3, #13
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d10b      	bne.n	80041f2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4a15      	ldr	r2, [pc, #84]	; (8004238 <UART_AdvFeatureConfig+0x160>)
 80041e2:	4013      	ands	r3, r2
 80041e4:	0019      	movs	r1, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f6:	2280      	movs	r2, #128	; 0x80
 80041f8:	4013      	ands	r3, r2
 80041fa:	d00b      	beq.n	8004214 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	4a0e      	ldr	r2, [pc, #56]	; (800423c <UART_AdvFeatureConfig+0x164>)
 8004204:	4013      	ands	r3, r2
 8004206:	0019      	movs	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	605a      	str	r2, [r3, #4]
  }
}
 8004214:	46c0      	nop			; (mov r8, r8)
 8004216:	46bd      	mov	sp, r7
 8004218:	b002      	add	sp, #8
 800421a:	bd80      	pop	{r7, pc}
 800421c:	fffdffff 	.word	0xfffdffff
 8004220:	fffeffff 	.word	0xfffeffff
 8004224:	fffbffff 	.word	0xfffbffff
 8004228:	ffff7fff 	.word	0xffff7fff
 800422c:	ffffefff 	.word	0xffffefff
 8004230:	ffffdfff 	.word	0xffffdfff
 8004234:	ffefffff 	.word	0xffefffff
 8004238:	ff9fffff 	.word	0xff9fffff
 800423c:	fff7ffff 	.word	0xfff7ffff

08004240 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af02      	add	r7, sp, #8
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2290      	movs	r2, #144	; 0x90
 800424c:	2100      	movs	r1, #0
 800424e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004250:	f7fc fe8c 	bl	8000f6c <HAL_GetTick>
 8004254:	0003      	movs	r3, r0
 8004256:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2208      	movs	r2, #8
 8004260:	4013      	ands	r3, r2
 8004262:	2b08      	cmp	r3, #8
 8004264:	d10c      	bne.n	8004280 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2280      	movs	r2, #128	; 0x80
 800426a:	0391      	lsls	r1, r2, #14
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4a1a      	ldr	r2, [pc, #104]	; (80042d8 <UART_CheckIdleState+0x98>)
 8004270:	9200      	str	r2, [sp, #0]
 8004272:	2200      	movs	r2, #0
 8004274:	f000 f832 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 8004278:	1e03      	subs	r3, r0, #0
 800427a:	d001      	beq.n	8004280 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e026      	b.n	80042ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2204      	movs	r2, #4
 8004288:	4013      	ands	r3, r2
 800428a:	2b04      	cmp	r3, #4
 800428c:	d10c      	bne.n	80042a8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2280      	movs	r2, #128	; 0x80
 8004292:	03d1      	lsls	r1, r2, #15
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <UART_CheckIdleState+0x98>)
 8004298:	9200      	str	r2, [sp, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	f000 f81e 	bl	80042dc <UART_WaitOnFlagUntilTimeout>
 80042a0:	1e03      	subs	r3, r0, #0
 80042a2:	d001      	beq.n	80042a8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e012      	b.n	80042ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2288      	movs	r2, #136	; 0x88
 80042ac:	2120      	movs	r1, #32
 80042ae:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	228c      	movs	r2, #140	; 0x8c
 80042b4:	2120      	movs	r1, #32
 80042b6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2284      	movs	r2, #132	; 0x84
 80042c8:	2100      	movs	r1, #0
 80042ca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	0018      	movs	r0, r3
 80042d0:	46bd      	mov	sp, r7
 80042d2:	b004      	add	sp, #16
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	01ffffff 	.word	0x01ffffff

080042dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b094      	sub	sp, #80	; 0x50
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	603b      	str	r3, [r7, #0]
 80042e8:	1dfb      	adds	r3, r7, #7
 80042ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ec:	e0a7      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80042f0:	3301      	adds	r3, #1
 80042f2:	d100      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80042f4:	e0a3      	b.n	800443e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f6:	f7fc fe39 	bl	8000f6c <HAL_GetTick>
 80042fa:	0002      	movs	r2, r0
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004302:	429a      	cmp	r2, r3
 8004304:	d302      	bcc.n	800430c <UART_WaitOnFlagUntilTimeout+0x30>
 8004306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004308:	2b00      	cmp	r3, #0
 800430a:	d13f      	bne.n	800438c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430c:	f3ef 8310 	mrs	r3, PRIMASK
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004314:	647b      	str	r3, [r7, #68]	; 0x44
 8004316:	2301      	movs	r3, #1
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	f383 8810 	msr	PRIMASK, r3
}
 8004320:	46c0      	nop			; (mov r8, r8)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	494e      	ldr	r1, [pc, #312]	; (8004468 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800432e:	400a      	ands	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	f383 8810 	msr	PRIMASK, r3
}
 800433c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433e:	f3ef 8310 	mrs	r3, PRIMASK
 8004342:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004346:	643b      	str	r3, [r7, #64]	; 0x40
 8004348:	2301      	movs	r3, #1
 800434a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800434c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800434e:	f383 8810 	msr	PRIMASK, r3
}
 8004352:	46c0      	nop			; (mov r8, r8)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2101      	movs	r1, #1
 8004360:	438a      	bics	r2, r1
 8004362:	609a      	str	r2, [r3, #8]
 8004364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436a:	f383 8810 	msr	PRIMASK, r3
}
 800436e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2288      	movs	r2, #136	; 0x88
 8004374:	2120      	movs	r1, #32
 8004376:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	228c      	movs	r2, #140	; 0x8c
 800437c:	2120      	movs	r1, #32
 800437e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2284      	movs	r2, #132	; 0x84
 8004384:	2100      	movs	r1, #0
 8004386:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e069      	b.n	8004460 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2204      	movs	r2, #4
 8004394:	4013      	ands	r3, r2
 8004396:	d052      	beq.n	800443e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	2380      	movs	r3, #128	; 0x80
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	401a      	ands	r2, r3
 80043a4:	2380      	movs	r3, #128	; 0x80
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d148      	bne.n	800443e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2280      	movs	r2, #128	; 0x80
 80043b2:	0112      	lsls	r2, r2, #4
 80043b4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043b6:	f3ef 8310 	mrs	r3, PRIMASK
 80043ba:	613b      	str	r3, [r7, #16]
  return(result);
 80043bc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	2301      	movs	r3, #1
 80043c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	46c0      	nop			; (mov r8, r8)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4924      	ldr	r1, [pc, #144]	; (8004468 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80043d8:	400a      	ands	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	f383 8810 	msr	PRIMASK, r3
}
 80043e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043e8:	f3ef 8310 	mrs	r3, PRIMASK
 80043ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80043ee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f2:	2301      	movs	r3, #1
 80043f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	f383 8810 	msr	PRIMASK, r3
}
 80043fc:	46c0      	nop			; (mov r8, r8)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	438a      	bics	r2, r1
 800440c:	609a      	str	r2, [r3, #8]
 800440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004414:	f383 8810 	msr	PRIMASK, r3
}
 8004418:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2288      	movs	r2, #136	; 0x88
 800441e:	2120      	movs	r1, #32
 8004420:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	228c      	movs	r2, #140	; 0x8c
 8004426:	2120      	movs	r1, #32
 8004428:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2290      	movs	r2, #144	; 0x90
 800442e:	2120      	movs	r1, #32
 8004430:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2284      	movs	r2, #132	; 0x84
 8004436:	2100      	movs	r1, #0
 8004438:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e010      	b.n	8004460 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	425a      	negs	r2, r3
 800444e:	4153      	adcs	r3, r2
 8004450:	b2db      	uxtb	r3, r3
 8004452:	001a      	movs	r2, r3
 8004454:	1dfb      	adds	r3, r7, #7
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d100      	bne.n	800445e <UART_WaitOnFlagUntilTimeout+0x182>
 800445c:	e747      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b014      	add	sp, #80	; 0x50
 8004466:	bd80      	pop	{r7, pc}
 8004468:	fffffe5f 	.word	0xfffffe5f

0800446c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b090      	sub	sp, #64	; 0x40
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	1dbb      	adds	r3, r7, #6
 8004478:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	1dba      	adds	r2, r7, #6
 8004484:	215c      	movs	r1, #92	; 0x5c
 8004486:	8812      	ldrh	r2, [r2, #0]
 8004488:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2290      	movs	r2, #144	; 0x90
 800448e:	2100      	movs	r1, #0
 8004490:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	228c      	movs	r2, #140	; 0x8c
 8004496:	2122      	movs	r1, #34	; 0x22
 8004498:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2280      	movs	r2, #128	; 0x80
 800449e:	589b      	ldr	r3, [r3, r2]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d02d      	beq.n	8004500 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2280      	movs	r2, #128	; 0x80
 80044a8:	589b      	ldr	r3, [r3, r2]
 80044aa:	4a40      	ldr	r2, [pc, #256]	; (80045ac <UART_Start_Receive_DMA+0x140>)
 80044ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2280      	movs	r2, #128	; 0x80
 80044b2:	589b      	ldr	r3, [r3, r2]
 80044b4:	4a3e      	ldr	r2, [pc, #248]	; (80045b0 <UART_Start_Receive_DMA+0x144>)
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2280      	movs	r2, #128	; 0x80
 80044bc:	589b      	ldr	r3, [r3, r2]
 80044be:	4a3d      	ldr	r2, [pc, #244]	; (80045b4 <UART_Start_Receive_DMA+0x148>)
 80044c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2280      	movs	r2, #128	; 0x80
 80044c6:	589b      	ldr	r3, [r3, r2]
 80044c8:	2200      	movs	r2, #0
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2280      	movs	r2, #128	; 0x80
 80044d0:	5898      	ldr	r0, [r3, r2]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3324      	adds	r3, #36	; 0x24
 80044d8:	0019      	movs	r1, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044de:	001a      	movs	r2, r3
 80044e0:	1dbb      	adds	r3, r7, #6
 80044e2:	881b      	ldrh	r3, [r3, #0]
 80044e4:	f7fc fef4 	bl	80012d0 <HAL_DMA_Start_IT>
 80044e8:	1e03      	subs	r3, r0, #0
 80044ea:	d009      	beq.n	8004500 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2290      	movs	r2, #144	; 0x90
 80044f0:	2110      	movs	r1, #16
 80044f2:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	228c      	movs	r2, #140	; 0x8c
 80044f8:	2120      	movs	r1, #32
 80044fa:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e050      	b.n	80045a2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d019      	beq.n	800453c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004508:	f3ef 8310 	mrs	r3, PRIMASK
 800450c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800450e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004510:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004512:	2301      	movs	r3, #1
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004518:	f383 8810 	msr	PRIMASK, r3
}
 800451c:	46c0      	nop			; (mov r8, r8)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	0049      	lsls	r1, r1, #1
 800452c:	430a      	orrs	r2, r1
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004532:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004536:	f383 8810 	msr	PRIMASK, r3
}
 800453a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800453c:	f3ef 8310 	mrs	r3, PRIMASK
 8004540:	613b      	str	r3, [r7, #16]
  return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
 8004546:	2301      	movs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2101      	movs	r1, #1
 800455e:	430a      	orrs	r2, r1
 8004560:	609a      	str	r2, [r3, #8]
 8004562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004564:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f383 8810 	msr	PRIMASK, r3
}
 800456c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800456e:	f3ef 8310 	mrs	r3, PRIMASK
 8004572:	61fb      	str	r3, [r7, #28]
  return(result);
 8004574:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004576:	637b      	str	r3, [r7, #52]	; 0x34
 8004578:	2301      	movs	r3, #1
 800457a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457c:	6a3b      	ldr	r3, [r7, #32]
 800457e:	f383 8810 	msr	PRIMASK, r3
}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	689a      	ldr	r2, [r3, #8]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2140      	movs	r1, #64	; 0x40
 8004590:	430a      	orrs	r2, r1
 8004592:	609a      	str	r2, [r3, #8]
 8004594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	f383 8810 	msr	PRIMASK, r3
}
 800459e:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	0018      	movs	r0, r3
 80045a4:	46bd      	mov	sp, r7
 80045a6:	b010      	add	sp, #64	; 0x40
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	08004705 	.word	0x08004705
 80045b0:	08004835 	.word	0x08004835
 80045b4:	08004877 	.word	0x08004877

080045b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	; 0x28
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045c0:	f3ef 8310 	mrs	r3, PRIMASK
 80045c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80045c6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80045c8:	627b      	str	r3, [r7, #36]	; 0x24
 80045ca:	2301      	movs	r3, #1
 80045cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f383 8810 	msr	PRIMASK, r3
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	21c0      	movs	r1, #192	; 0xc0
 80045e2:	438a      	bics	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f383 8810 	msr	PRIMASK, r3
}
 80045f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	617b      	str	r3, [r7, #20]
  return(result);
 80045f8:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80045fa:	623b      	str	r3, [r7, #32]
 80045fc:	2301      	movs	r3, #1
 80045fe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4908      	ldr	r1, [pc, #32]	; (8004634 <UART_EndTxTransfer+0x7c>)
 8004614:	400a      	ands	r2, r1
 8004616:	609a      	str	r2, [r3, #8]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f383 8810 	msr	PRIMASK, r3
}
 8004622:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2288      	movs	r2, #136	; 0x88
 8004628:	2120      	movs	r1, #32
 800462a:	5099      	str	r1, [r3, r2]
}
 800462c:	46c0      	nop			; (mov r8, r8)
 800462e:	46bd      	mov	sp, r7
 8004630:	b00a      	add	sp, #40	; 0x28
 8004632:	bd80      	pop	{r7, pc}
 8004634:	ff7fffff 	.word	0xff7fffff

08004638 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b08e      	sub	sp, #56	; 0x38
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004640:	f3ef 8310 	mrs	r3, PRIMASK
 8004644:	617b      	str	r3, [r7, #20]
  return(result);
 8004646:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004648:	637b      	str	r3, [r7, #52]	; 0x34
 800464a:	2301      	movs	r3, #1
 800464c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f383 8810 	msr	PRIMASK, r3
}
 8004654:	46c0      	nop			; (mov r8, r8)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4926      	ldr	r1, [pc, #152]	; (80046fc <UART_EndRxTransfer+0xc4>)
 8004662:	400a      	ands	r2, r1
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	f383 8810 	msr	PRIMASK, r3
}
 8004670:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004672:	f3ef 8310 	mrs	r3, PRIMASK
 8004676:	623b      	str	r3, [r7, #32]
  return(result);
 8004678:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800467a:	633b      	str	r3, [r7, #48]	; 0x30
 800467c:	2301      	movs	r3, #1
 800467e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	f383 8810 	msr	PRIMASK, r3
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689a      	ldr	r2, [r3, #8]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	491b      	ldr	r1, [pc, #108]	; (8004700 <UART_EndRxTransfer+0xc8>)
 8004694:	400a      	ands	r2, r1
 8004696:	609a      	str	r2, [r3, #8]
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800469e:	f383 8810 	msr	PRIMASK, r3
}
 80046a2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d118      	bne.n	80046de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046ac:	f3ef 8310 	mrs	r3, PRIMASK
 80046b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80046b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b6:	2301      	movs	r3, #1
 80046b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f383 8810 	msr	PRIMASK, r3
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2110      	movs	r1, #16
 80046ce:	438a      	bics	r2, r1
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	f383 8810 	msr	PRIMASK, r3
}
 80046dc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	228c      	movs	r2, #140	; 0x8c
 80046e2:	2120      	movs	r1, #32
 80046e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80046f2:	46c0      	nop			; (mov r8, r8)
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b00e      	add	sp, #56	; 0x38
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	fffffedf 	.word	0xfffffedf
 8004700:	effffffe 	.word	0xeffffffe

08004704 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b094      	sub	sp, #80	; 0x50
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004710:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2220      	movs	r2, #32
 800471a:	4013      	ands	r3, r2
 800471c:	d16f      	bne.n	80047fe <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800471e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004720:	225e      	movs	r2, #94	; 0x5e
 8004722:	2100      	movs	r1, #0
 8004724:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004726:	f3ef 8310 	mrs	r3, PRIMASK
 800472a:	61bb      	str	r3, [r7, #24]
  return(result);
 800472c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800472e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004730:	2301      	movs	r3, #1
 8004732:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f383 8810 	msr	PRIMASK, r3
}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	493a      	ldr	r1, [pc, #232]	; (8004830 <UART_DMAReceiveCplt+0x12c>)
 8004748:	400a      	ands	r2, r1
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800474e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004750:	6a3b      	ldr	r3, [r7, #32]
 8004752:	f383 8810 	msr	PRIMASK, r3
}
 8004756:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004758:	f3ef 8310 	mrs	r3, PRIMASK
 800475c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	2301      	movs	r3, #1
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	f383 8810 	msr	PRIMASK, r3
}
 800476c:	46c0      	nop			; (mov r8, r8)
 800476e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2101      	movs	r1, #1
 800477a:	438a      	bics	r2, r1
 800477c:	609a      	str	r2, [r3, #8]
 800477e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004780:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	f383 8810 	msr	PRIMASK, r3
}
 8004788:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800478a:	f3ef 8310 	mrs	r3, PRIMASK
 800478e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004790:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004792:	643b      	str	r3, [r7, #64]	; 0x40
 8004794:	2301      	movs	r3, #1
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	f383 8810 	msr	PRIMASK, r3
}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689a      	ldr	r2, [r3, #8]
 80047a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	2140      	movs	r1, #64	; 0x40
 80047ac:	438a      	bics	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b6:	f383 8810 	msr	PRIMASK, r3
}
 80047ba:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047be:	228c      	movs	r2, #140	; 0x8c
 80047c0:	2120      	movs	r1, #32
 80047c2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d118      	bne.n	80047fe <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047cc:	f3ef 8310 	mrs	r3, PRIMASK
 80047d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80047d2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d6:	2301      	movs	r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	f383 8810 	msr	PRIMASK, r3
}
 80047e0:	46c0      	nop			; (mov r8, r8)
 80047e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2110      	movs	r1, #16
 80047ee:	438a      	bics	r2, r1
 80047f0:	601a      	str	r2, [r3, #0]
 80047f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f383 8810 	msr	PRIMASK, r3
}
 80047fc:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	2200      	movs	r2, #0
 8004802:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004808:	2b01      	cmp	r3, #1
 800480a:	d108      	bne.n	800481e <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800480c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800480e:	225c      	movs	r2, #92	; 0x5c
 8004810:	5a9a      	ldrh	r2, [r3, r2]
 8004812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004814:	0011      	movs	r1, r2
 8004816:	0018      	movs	r0, r3
 8004818:	f7fb ff14 	bl	8000644 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800481c:	e003      	b.n	8004826 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 800481e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004820:	0018      	movs	r0, r3
 8004822:	f7ff fad7 	bl	8003dd4 <HAL_UART_RxCpltCallback>
}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	46bd      	mov	sp, r7
 800482a:	b014      	add	sp, #80	; 0x50
 800482c:	bd80      	pop	{r7, pc}
 800482e:	46c0      	nop			; (mov r8, r8)
 8004830:	fffffeff 	.word	0xfffffeff

08004834 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10a      	bne.n	8004866 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	225c      	movs	r2, #92	; 0x5c
 8004854:	5a9b      	ldrh	r3, [r3, r2]
 8004856:	085b      	lsrs	r3, r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	0011      	movs	r1, r2
 800485e:	0018      	movs	r0, r3
 8004860:	f7fb fef0 	bl	8000644 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004864:	e003      	b.n	800486e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff fabb 	bl	8003de4 <HAL_UART_RxHalfCpltCallback>
}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	b004      	add	sp, #16
 8004874:	bd80      	pop	{r7, pc}

08004876 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b086      	sub	sp, #24
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2288      	movs	r2, #136	; 0x88
 8004888:	589b      	ldr	r3, [r3, r2]
 800488a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	228c      	movs	r2, #140	; 0x8c
 8004890:	589b      	ldr	r3, [r3, r2]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	2280      	movs	r2, #128	; 0x80
 800489c:	4013      	ands	r3, r2
 800489e:	2b80      	cmp	r3, #128	; 0x80
 80048a0:	d10a      	bne.n	80048b8 <UART_DMAError+0x42>
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	2b21      	cmp	r3, #33	; 0x21
 80048a6:	d107      	bne.n	80048b8 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	2256      	movs	r2, #86	; 0x56
 80048ac:	2100      	movs	r1, #0
 80048ae:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f7ff fe80 	bl	80045b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	2240      	movs	r2, #64	; 0x40
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b40      	cmp	r3, #64	; 0x40
 80048c4:	d10a      	bne.n	80048dc <UART_DMAError+0x66>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2b22      	cmp	r3, #34	; 0x22
 80048ca:	d107      	bne.n	80048dc <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	225e      	movs	r2, #94	; 0x5e
 80048d0:	2100      	movs	r1, #0
 80048d2:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	0018      	movs	r0, r3
 80048d8:	f7ff feae 	bl	8004638 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2290      	movs	r2, #144	; 0x90
 80048e0:	589b      	ldr	r3, [r3, r2]
 80048e2:	2210      	movs	r2, #16
 80048e4:	431a      	orrs	r2, r3
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2190      	movs	r1, #144	; 0x90
 80048ea:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	0018      	movs	r0, r3
 80048f0:	f7ff fa80 	bl	8003df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b006      	add	sp, #24
 80048fa:	bd80      	pop	{r7, pc}

080048fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004908:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	225e      	movs	r2, #94	; 0x5e
 800490e:	2100      	movs	r1, #0
 8004910:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2256      	movs	r2, #86	; 0x56
 8004916:	2100      	movs	r1, #0
 8004918:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	0018      	movs	r0, r3
 800491e:	f7ff fa69 	bl	8003df4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	46bd      	mov	sp, r7
 8004926:	b004      	add	sp, #16
 8004928:	bd80      	pop	{r7, pc}

0800492a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004932:	f3ef 8310 	mrs	r3, PRIMASK
 8004936:	60bb      	str	r3, [r7, #8]
  return(result);
 8004938:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	2301      	movs	r3, #1
 800493e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f383 8810 	msr	PRIMASK, r3
}
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2140      	movs	r1, #64	; 0x40
 8004954:	438a      	bics	r2, r1
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	f383 8810 	msr	PRIMASK, r3
}
 8004962:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2288      	movs	r2, #136	; 0x88
 8004968:	2120      	movs	r1, #32
 800496a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f7ff fa25 	bl	8003dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	46bd      	mov	sp, r7
 800497e:	b006      	add	sp, #24
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b082      	sub	sp, #8
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	46bd      	mov	sp, r7
 800498e:	b002      	add	sp, #8
 8004990:	bd80      	pop	{r7, pc}

08004992 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b002      	add	sp, #8
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	46bd      	mov	sp, r7
 80049ae:	b002      	add	sp, #8
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2284      	movs	r2, #132	; 0x84
 80049c0:	5c9b      	ldrb	r3, [r3, r2]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_UARTEx_DisableFifoMode+0x16>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e027      	b.n	8004a1a <HAL_UARTEx_DisableFifoMode+0x66>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2284      	movs	r2, #132	; 0x84
 80049ce:	2101      	movs	r1, #1
 80049d0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2288      	movs	r2, #136	; 0x88
 80049d6:	2124      	movs	r1, #36	; 0x24
 80049d8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2101      	movs	r1, #1
 80049ee:	438a      	bics	r2, r1
 80049f0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a0b      	ldr	r2, [pc, #44]	; (8004a24 <HAL_UARTEx_DisableFifoMode+0x70>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2288      	movs	r2, #136	; 0x88
 8004a0c:	2120      	movs	r1, #32
 8004a0e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2284      	movs	r2, #132	; 0x84
 8004a14:	2100      	movs	r1, #0
 8004a16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	0018      	movs	r0, r3
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	b004      	add	sp, #16
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	46c0      	nop			; (mov r8, r8)
 8004a24:	dfffffff 	.word	0xdfffffff

08004a28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2284      	movs	r2, #132	; 0x84
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d101      	bne.n	8004a40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004a3c:	2302      	movs	r3, #2
 8004a3e:	e02e      	b.n	8004a9e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2284      	movs	r2, #132	; 0x84
 8004a44:	2101      	movs	r1, #1
 8004a46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2288      	movs	r2, #136	; 0x88
 8004a4c:	2124      	movs	r1, #36	; 0x24
 8004a4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2101      	movs	r1, #1
 8004a64:	438a      	bics	r2, r1
 8004a66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	08d9      	lsrs	r1, r3, #3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f000 f8bc 	bl	8004bfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2288      	movs	r2, #136	; 0x88
 8004a90:	2120      	movs	r1, #32
 8004a92:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2284      	movs	r2, #132	; 0x84
 8004a98:	2100      	movs	r1, #0
 8004a9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	b004      	add	sp, #16
 8004aa4:	bd80      	pop	{r7, pc}
	...

08004aa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2284      	movs	r2, #132	; 0x84
 8004ab6:	5c9b      	ldrb	r3, [r3, r2]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d101      	bne.n	8004ac0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004abc:	2302      	movs	r3, #2
 8004abe:	e02f      	b.n	8004b20 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2284      	movs	r2, #132	; 0x84
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2288      	movs	r2, #136	; 0x88
 8004acc:	2124      	movs	r1, #36	; 0x24
 8004ace:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	438a      	bics	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	0019      	movs	r1, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f000 f87b 	bl	8004bfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2288      	movs	r2, #136	; 0x88
 8004b12:	2120      	movs	r1, #32
 8004b14:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2284      	movs	r2, #132	; 0x84
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b004      	add	sp, #16
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	f1ffffff 	.word	0xf1ffffff

08004b2c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b2c:	b5b0      	push	{r4, r5, r7, lr}
 8004b2e:	b08a      	sub	sp, #40	; 0x28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	1dbb      	adds	r3, r7, #6
 8004b38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	228c      	movs	r2, #140	; 0x8c
 8004b3e:	589b      	ldr	r3, [r3, r2]
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d156      	bne.n	8004bf2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004b4a:	1dbb      	adds	r3, r7, #6
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e04e      	b.n	8004bf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	015b      	lsls	r3, r3, #5
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d109      	bne.n	8004b76 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d001      	beq.n	8004b76 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e03e      	b.n	8004bf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004b82:	2527      	movs	r5, #39	; 0x27
 8004b84:	197c      	adds	r4, r7, r5
 8004b86:	1dbb      	adds	r3, r7, #6
 8004b88:	881a      	ldrh	r2, [r3, #0]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f7ff fc6c 	bl	800446c <UART_Start_Receive_DMA>
 8004b94:	0003      	movs	r3, r0
 8004b96:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004b98:	197b      	adds	r3, r7, r5
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d124      	bne.n	8004bea <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d11c      	bne.n	8004be2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2210      	movs	r2, #16
 8004bae:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8004bb6:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb8:	623b      	str	r3, [r7, #32]
 8004bba:	2301      	movs	r3, #1
 8004bbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	f383 8810 	msr	PRIMASK, r3
}
 8004bc4:	46c0      	nop			; (mov r8, r8)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2110      	movs	r1, #16
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	f383 8810 	msr	PRIMASK, r3
}
 8004be0:	e003      	b.n	8004bea <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004be2:	2327      	movs	r3, #39	; 0x27
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004bea:	2327      	movs	r3, #39	; 0x27
 8004bec:	18fb      	adds	r3, r7, r3
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	e000      	b.n	8004bf4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8004bf2:	2302      	movs	r3, #2
  }
}
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	b00a      	add	sp, #40	; 0x28
 8004bfa:	bdb0      	pop	{r4, r5, r7, pc}

08004bfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d108      	bne.n	8004c1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	226a      	movs	r2, #106	; 0x6a
 8004c10:	2101      	movs	r1, #1
 8004c12:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2268      	movs	r2, #104	; 0x68
 8004c18:	2101      	movs	r1, #1
 8004c1a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c1c:	e043      	b.n	8004ca6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c1e:	260f      	movs	r6, #15
 8004c20:	19bb      	adds	r3, r7, r6
 8004c22:	2208      	movs	r2, #8
 8004c24:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c26:	200e      	movs	r0, #14
 8004c28:	183b      	adds	r3, r7, r0
 8004c2a:	2208      	movs	r2, #8
 8004c2c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	0e5b      	lsrs	r3, r3, #25
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	240d      	movs	r4, #13
 8004c3a:	193b      	adds	r3, r7, r4
 8004c3c:	2107      	movs	r1, #7
 8004c3e:	400a      	ands	r2, r1
 8004c40:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	0f5b      	lsrs	r3, r3, #29
 8004c4a:	b2da      	uxtb	r2, r3
 8004c4c:	250c      	movs	r5, #12
 8004c4e:	197b      	adds	r3, r7, r5
 8004c50:	2107      	movs	r1, #7
 8004c52:	400a      	ands	r2, r1
 8004c54:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c56:	183b      	adds	r3, r7, r0
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	197a      	adds	r2, r7, r5
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	4914      	ldr	r1, [pc, #80]	; (8004cb0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004c60:	5c8a      	ldrb	r2, [r1, r2]
 8004c62:	435a      	muls	r2, r3
 8004c64:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c66:	197b      	adds	r3, r7, r5
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	4a12      	ldr	r2, [pc, #72]	; (8004cb4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004c6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c6e:	0019      	movs	r1, r3
 8004c70:	f7fb fad0 	bl	8000214 <__divsi3>
 8004c74:	0003      	movs	r3, r0
 8004c76:	b299      	uxth	r1, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	226a      	movs	r2, #106	; 0x6a
 8004c7c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c7e:	19bb      	adds	r3, r7, r6
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	193a      	adds	r2, r7, r4
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	490a      	ldr	r1, [pc, #40]	; (8004cb0 <UARTEx_SetNbDataToProcess+0xb4>)
 8004c88:	5c8a      	ldrb	r2, [r1, r2]
 8004c8a:	435a      	muls	r2, r3
 8004c8c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c8e:	193b      	adds	r3, r7, r4
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <UARTEx_SetNbDataToProcess+0xb8>)
 8004c94:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c96:	0019      	movs	r1, r3
 8004c98:	f7fb fabc 	bl	8000214 <__divsi3>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	b299      	uxth	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2268      	movs	r2, #104	; 0x68
 8004ca4:	5299      	strh	r1, [r3, r2]
}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	b005      	add	sp, #20
 8004cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cae:	46c0      	nop			; (mov r8, r8)
 8004cb0:	08004e00 	.word	0x08004e00
 8004cb4:	08004e08 	.word	0x08004e08

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	2600      	movs	r6, #0
 8004cbc:	4d0c      	ldr	r5, [pc, #48]	; (8004cf0 <__libc_init_array+0x38>)
 8004cbe:	4c0d      	ldr	r4, [pc, #52]	; (8004cf4 <__libc_init_array+0x3c>)
 8004cc0:	1b64      	subs	r4, r4, r5
 8004cc2:	10a4      	asrs	r4, r4, #2
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	2600      	movs	r6, #0
 8004cca:	f000 f821 	bl	8004d10 <_init>
 8004cce:	4d0a      	ldr	r5, [pc, #40]	; (8004cf8 <__libc_init_array+0x40>)
 8004cd0:	4c0a      	ldr	r4, [pc, #40]	; (8004cfc <__libc_init_array+0x44>)
 8004cd2:	1b64      	subs	r4, r4, r5
 8004cd4:	10a4      	asrs	r4, r4, #2
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	00b3      	lsls	r3, r6, #2
 8004cde:	58eb      	ldr	r3, [r5, r3]
 8004ce0:	4798      	blx	r3
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	00b3      	lsls	r3, r6, #2
 8004ce8:	58eb      	ldr	r3, [r5, r3]
 8004cea:	4798      	blx	r3
 8004cec:	3601      	adds	r6, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	08004e10 	.word	0x08004e10
 8004cf4:	08004e10 	.word	0x08004e10
 8004cf8:	08004e10 	.word	0x08004e10
 8004cfc:	08004e14 	.word	0x08004e14

08004d00 <memset>:
 8004d00:	0003      	movs	r3, r0
 8004d02:	1882      	adds	r2, r0, r2
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d100      	bne.n	8004d0a <memset+0xa>
 8004d08:	4770      	bx	lr
 8004d0a:	7019      	strb	r1, [r3, #0]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	e7f9      	b.n	8004d04 <memset+0x4>

08004d10 <_init>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	46c0      	nop			; (mov r8, r8)
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr

08004d1c <_fini>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr
