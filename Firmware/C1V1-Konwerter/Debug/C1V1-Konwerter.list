
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025a4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800265c  0800265c  0001265c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e4  080026e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026e4  080026e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026e4  080026e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e8  080026e8  000126e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  080026f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  080026f8  00020114  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd7f  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002163  00000000  00000000  0002ddb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0002ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  00030a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001496a  00000000  00000000  00031400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7be  00000000  00000000  00045d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e777  00000000  00000000  00055528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3c9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025bc  00000000  00000000  000d3cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002644 	.word	0x08002644

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002644 	.word	0x08002644

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80003ec:	b590      	push	{r4, r7, lr}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f2:	240c      	movs	r4, #12
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	0018      	movs	r0, r3
 80003f8:	2314      	movs	r3, #20
 80003fa:	001a      	movs	r2, r3
 80003fc:	2100      	movs	r1, #0
 80003fe:	f002 f919 	bl	8002634 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <MX_GPIO_Init+0x88>)
 8000404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000406:	4b1b      	ldr	r3, [pc, #108]	; (8000474 <MX_GPIO_Init+0x88>)
 8000408:	2102      	movs	r1, #2
 800040a:	430a      	orrs	r2, r1
 800040c:	635a      	str	r2, [r3, #52]	; 0x34
 800040e:	4b19      	ldr	r3, [pc, #100]	; (8000474 <MX_GPIO_Init+0x88>)
 8000410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000412:	2202      	movs	r2, #2
 8000414:	4013      	ands	r3, r2
 8000416:	60bb      	str	r3, [r7, #8]
 8000418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041a:	4b16      	ldr	r3, [pc, #88]	; (8000474 <MX_GPIO_Init+0x88>)
 800041c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800041e:	4b15      	ldr	r3, [pc, #84]	; (8000474 <MX_GPIO_Init+0x88>)
 8000420:	2101      	movs	r1, #1
 8000422:	430a      	orrs	r2, r1
 8000424:	635a      	str	r2, [r3, #52]	; 0x34
 8000426:	4b13      	ldr	r3, [pc, #76]	; (8000474 <MX_GPIO_Init+0x88>)
 8000428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800042a:	2201      	movs	r2, #1
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_Selektor_GPIO_Port, MAX485_Selektor_Pin, GPIO_PIN_RESET);
 8000432:	2380      	movs	r3, #128	; 0x80
 8000434:	0199      	lsls	r1, r3, #6
 8000436:	23a0      	movs	r3, #160	; 0xa0
 8000438:	05db      	lsls	r3, r3, #23
 800043a:	2200      	movs	r2, #0
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fcb9 	bl	8000db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_Selektor_Pin;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2280      	movs	r2, #128	; 0x80
 8000446:	0192      	lsls	r2, r2, #6
 8000448:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800044a:	193b      	adds	r3, r7, r4
 800044c:	2201      	movs	r2, #1
 800044e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	193b      	adds	r3, r7, r4
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000456:	193b      	adds	r3, r7, r4
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MAX485_Selektor_GPIO_Port, &GPIO_InitStruct);
 800045c:	193a      	adds	r2, r7, r4
 800045e:	23a0      	movs	r3, #160	; 0xa0
 8000460:	05db      	lsls	r3, r3, #23
 8000462:	0011      	movs	r1, r2
 8000464:	0018      	movs	r0, r3
 8000466:	f000 fb41 	bl	8000aec <HAL_GPIO_Init>

}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b009      	add	sp, #36	; 0x24
 8000470:	bd90      	pop	{r4, r7, pc}
 8000472:	46c0      	nop			; (mov r8, r8)
 8000474:	40021000 	.word	0x40021000

08000478 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800047c:	4b1b      	ldr	r3, [pc, #108]	; (80004ec <MX_I2C2_Init+0x74>)
 800047e:	4a1c      	ldr	r2, [pc, #112]	; (80004f0 <MX_I2C2_Init+0x78>)
 8000480:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000482:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_I2C2_Init+0x74>)
 8000484:	4a1b      	ldr	r2, [pc, #108]	; (80004f4 <MX_I2C2_Init+0x7c>)
 8000486:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000488:	4b18      	ldr	r3, [pc, #96]	; (80004ec <MX_I2C2_Init+0x74>)
 800048a:	2200      	movs	r2, #0
 800048c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <MX_I2C2_Init+0x74>)
 8000490:	2201      	movs	r2, #1
 8000492:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_I2C2_Init+0x74>)
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_I2C2_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_I2C2_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_I2C2_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_I2C2_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_I2C2_Init+0x74>)
 80004b4:	0018      	movs	r0, r3
 80004b6:	f000 fc9b 	bl	8000df0 <HAL_I2C_Init>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004be:	f000 f8bc 	bl	800063a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <MX_I2C2_Init+0x74>)
 80004c4:	2100      	movs	r1, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fd28 	bl	8000f1c <HAL_I2CEx_ConfigAnalogFilter>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80004d0:	f000 f8b3 	bl	800063a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <MX_I2C2_Init+0x74>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fd6b 	bl	8000fb4 <HAL_I2CEx_ConfigDigitalFilter>
 80004de:	1e03      	subs	r3, r0, #0
 80004e0:	d001      	beq.n	80004e6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80004e2:	f000 f8aa 	bl	800063a <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000028 	.word	0x20000028
 80004f0:	40005800 	.word	0x40005800
 80004f4:	00303d5b 	.word	0x00303d5b

080004f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80004f8:	b590      	push	{r4, r7, lr}
 80004fa:	b08b      	sub	sp, #44	; 0x2c
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	2414      	movs	r4, #20
 8000502:	193b      	adds	r3, r7, r4
 8000504:	0018      	movs	r0, r3
 8000506:	2314      	movs	r3, #20
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f002 f892 	bl	8002634 <memset>
  if(i2cHandle->Instance==I2C2)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <HAL_I2C_MspInit+0x90>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d131      	bne.n	800057e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b1c      	ldr	r3, [pc, #112]	; (800058c <HAL_I2C_MspInit+0x94>)
 800051c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800051e:	4b1b      	ldr	r3, [pc, #108]	; (800058c <HAL_I2C_MspInit+0x94>)
 8000520:	2101      	movs	r1, #1
 8000522:	430a      	orrs	r2, r1
 8000524:	635a      	str	r2, [r3, #52]	; 0x34
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <HAL_I2C_MspInit+0x94>)
 8000528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800052a:	2201      	movs	r2, #1
 800052c:	4013      	ands	r3, r2
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	22c0      	movs	r2, #192	; 0xc0
 8000536:	0152      	lsls	r2, r2, #5
 8000538:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800053a:	0021      	movs	r1, r4
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2212      	movs	r2, #18
 8000540:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800054e:	187b      	adds	r3, r7, r1
 8000550:	2206      	movs	r2, #6
 8000552:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	187a      	adds	r2, r7, r1
 8000556:	23a0      	movs	r3, #160	; 0xa0
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	0011      	movs	r1, r2
 800055c:	0018      	movs	r0, r3
 800055e:	f000 fac5 	bl	8000aec <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_I2C_MspInit+0x94>)
 8000564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_I2C_MspInit+0x94>)
 8000568:	2180      	movs	r1, #128	; 0x80
 800056a:	03c9      	lsls	r1, r1, #15
 800056c:	430a      	orrs	r2, r1
 800056e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_I2C_MspInit+0x94>)
 8000572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	03db      	lsls	r3, r3, #15
 8000578:	4013      	ands	r3, r2
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	b00b      	add	sp, #44	; 0x2c
 8000584:	bd90      	pop	{r4, r7, pc}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	40005800 	.word	0x40005800
 800058c:	40021000 	.word	0x40021000

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000594:	f000 f970 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000598:	f000 f807 	bl	80005aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059c:	f7ff ff26 	bl	80003ec <MX_GPIO_Init>
  MX_I2C2_Init();
 80005a0:	f7ff ff6a 	bl	8000478 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005a4:	f000 f88e 	bl	80006c4 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <main+0x18>

080005aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005aa:	b590      	push	{r4, r7, lr}
 80005ac:	b093      	sub	sp, #76	; 0x4c
 80005ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b0:	2414      	movs	r4, #20
 80005b2:	193b      	adds	r3, r7, r4
 80005b4:	0018      	movs	r0, r3
 80005b6:	2334      	movs	r3, #52	; 0x34
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f002 f83a 	bl	8002634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2310      	movs	r3, #16
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f002 f833 	bl	8002634 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ce:	2380      	movs	r3, #128	; 0x80
 80005d0:	009b      	lsls	r3, r3, #2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f000 fd3a 	bl	800104c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2202      	movs	r2, #2
 80005dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	0052      	lsls	r2, r2, #1
 80005e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2200      	movs	r2, #0
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2240      	movs	r2, #64	; 0x40
 80005f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2200      	movs	r2, #0
 80005f6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0018      	movs	r0, r3
 80005fc:	f000 fd72 	bl	80010e4 <HAL_RCC_OscConfig>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000604:	f000 f819 	bl	800063a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	2207      	movs	r2, #7
 800060c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	2200      	movs	r2, #0
 8000612:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	2100      	movs	r1, #0
 8000624:	0018      	movs	r0, r3
 8000626:	f001 f86d 	bl	8001704 <HAL_RCC_ClockConfig>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800062e:	f000 f804 	bl	800063a <Error_Handler>
  }
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b013      	add	sp, #76	; 0x4c
 8000638:	bd90      	pop	{r4, r7, pc}

0800063a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800063e:	b672      	cpsid	i
}
 8000640:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000642:	e7fe      	b.n	8000642 <Error_Handler+0x8>

08000644 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <HAL_MspInit+0x44>)
 800064c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <HAL_MspInit+0x44>)
 8000650:	2101      	movs	r1, #1
 8000652:	430a      	orrs	r2, r1
 8000654:	641a      	str	r2, [r3, #64]	; 0x40
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <HAL_MspInit+0x44>)
 8000658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065a:	2201      	movs	r2, #1
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_MspInit+0x44>)
 8000664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000666:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HAL_MspInit+0x44>)
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	0549      	lsls	r1, r1, #21
 800066c:	430a      	orrs	r2, r1
 800066e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <HAL_MspInit+0x44>)
 8000672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	055b      	lsls	r3, r3, #21
 8000678:	4013      	ands	r3, r2
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	40021000 	.word	0x40021000

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <NMI_Handler+0x4>

08000692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <HardFault_Handler+0x4>

08000698 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}

080006a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006a2:	b580      	push	{r7, lr}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006b0:	f000 f94c 	bl	800094c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006b4:	46c0      	nop			; (mov r8, r8)
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <MX_USART1_UART_Init+0x94>)
 80006ca:	4a24      	ldr	r2, [pc, #144]	; (800075c <MX_USART1_UART_Init+0x98>)
 80006cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ce:	4b22      	ldr	r3, [pc, #136]	; (8000758 <MX_USART1_UART_Init+0x94>)
 80006d0:	22e1      	movs	r2, #225	; 0xe1
 80006d2:	0252      	lsls	r2, r2, #9
 80006d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006d6:	4b20      	ldr	r3, [pc, #128]	; (8000758 <MX_USART1_UART_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006dc:	4b1e      	ldr	r3, [pc, #120]	; (8000758 <MX_USART1_UART_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006e2:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_USART1_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <MX_USART1_UART_Init+0x94>)
 80006ea:	220c      	movs	r2, #12
 80006ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ee:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_USART1_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006f4:	4b18      	ldr	r3, [pc, #96]	; (8000758 <MX_USART1_UART_Init+0x94>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_USART1_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_USART1_UART_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART1_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_USART1_UART_Init+0x94>)
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fac8 	bl	8001ca4 <HAL_UART_Init>
 8000714:	1e03      	subs	r3, r0, #0
 8000716:	d001      	beq.n	800071c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000718:	f7ff ff8f 	bl	800063a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART1_UART_Init+0x94>)
 800071e:	2100      	movs	r1, #0
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fe83 	bl	800242c <HAL_UARTEx_SetTxFifoThreshold>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800072a:	f7ff ff86 	bl	800063a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_USART1_UART_Init+0x94>)
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f001 feba 	bl	80024ac <HAL_UARTEx_SetRxFifoThreshold>
 8000738:	1e03      	subs	r3, r0, #0
 800073a:	d001      	beq.n	8000740 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800073c:	f7ff ff7d 	bl	800063a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MX_USART1_UART_Init+0x94>)
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fe38 	bl	80023b8 <HAL_UARTEx_DisableFifoMode>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800074c:	f7ff ff75 	bl	800063a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	2000007c 	.word	0x2000007c
 800075c:	40013800 	.word	0x40013800

08000760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b091      	sub	sp, #68	; 0x44
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	232c      	movs	r3, #44	; 0x2c
 800076a:	18fb      	adds	r3, r7, r3
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f001 ff5e 	bl	8002634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	2414      	movs	r4, #20
 800077a:	193b      	adds	r3, r7, r4
 800077c:	0018      	movs	r0, r3
 800077e:	2318      	movs	r3, #24
 8000780:	001a      	movs	r2, r3
 8000782:	2100      	movs	r1, #0
 8000784:	f001 ff56 	bl	8002634 <memset>
  if(uartHandle->Instance==USART1)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a22      	ldr	r2, [pc, #136]	; (8000818 <HAL_UART_MspInit+0xb8>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d13d      	bne.n	800080e <HAL_UART_MspInit+0xae>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000792:	193b      	adds	r3, r7, r4
 8000794:	2201      	movs	r2, #1
 8000796:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 f959 	bl	8001a58 <HAL_RCCEx_PeriphCLKConfig>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d001      	beq.n	80007ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007aa:	f7ff ff46 	bl	800063a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <HAL_UART_MspInit+0xbc>)
 80007b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007b2:	4b1a      	ldr	r3, [pc, #104]	; (800081c <HAL_UART_MspInit+0xbc>)
 80007b4:	2180      	movs	r1, #128	; 0x80
 80007b6:	01c9      	lsls	r1, r1, #7
 80007b8:	430a      	orrs	r2, r1
 80007ba:	641a      	str	r2, [r3, #64]	; 0x40
 80007bc:	4b17      	ldr	r3, [pc, #92]	; (800081c <HAL_UART_MspInit+0xbc>)
 80007be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	01db      	lsls	r3, r3, #7
 80007c4:	4013      	ands	r3, r2
 80007c6:	613b      	str	r3, [r7, #16]
 80007c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_UART_MspInit+0xbc>)
 80007cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <HAL_UART_MspInit+0xbc>)
 80007d0:	2102      	movs	r1, #2
 80007d2:	430a      	orrs	r2, r1
 80007d4:	635a      	str	r2, [r3, #52]	; 0x34
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_UART_MspInit+0xbc>)
 80007d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007da:	2202      	movs	r2, #2
 80007dc:	4013      	ands	r3, r2
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80007e2:	212c      	movs	r1, #44	; 0x2c
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	22c0      	movs	r2, #192	; 0xc0
 80007e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2202      	movs	r2, #2
 80007ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2200      	movs	r2, #0
 80007f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	187b      	adds	r3, r7, r1
 80007f8:	2200      	movs	r2, #0
 80007fa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000802:	187b      	adds	r3, r7, r1
 8000804:	4a06      	ldr	r2, [pc, #24]	; (8000820 <HAL_UART_MspInit+0xc0>)
 8000806:	0019      	movs	r1, r3
 8000808:	0010      	movs	r0, r2
 800080a:	f000 f96f 	bl	8000aec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b011      	add	sp, #68	; 0x44
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	40013800 	.word	0x40013800
 800081c:	40021000 	.word	0x40021000
 8000820:	50000400 	.word	0x50000400

08000824 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000826:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000828:	f7ff ff47 	bl	80006ba <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800082c:	480c      	ldr	r0, [pc, #48]	; (8000860 <LoopForever+0x6>)
  ldr r1, =_edata
 800082e:	490d      	ldr	r1, [pc, #52]	; (8000864 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LoopForever+0xe>)
  movs r3, #0
 8000832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000834:	e002      	b.n	800083c <LoopCopyDataInit>

08000836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083a:	3304      	adds	r3, #4

0800083c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800083c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800083e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000840:	d3f9      	bcc.n	8000836 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000842:	4a0a      	ldr	r2, [pc, #40]	; (800086c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000844:	4c0a      	ldr	r4, [pc, #40]	; (8000870 <LoopForever+0x16>)
  movs r3, #0
 8000846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000848:	e001      	b.n	800084e <LoopFillZerobss>

0800084a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800084c:	3204      	adds	r2, #4

0800084e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800084e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000850:	d3fb      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000852:	f001 fecb 	bl	80025ec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000856:	f7ff fe9b 	bl	8000590 <main>

0800085a <LoopForever>:

LoopForever:
  b LoopForever
 800085a:	e7fe      	b.n	800085a <LoopForever>
  ldr   r0, =_estack
 800085c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000868:	080026ec 	.word	0x080026ec
  ldr r2, =_sbss
 800086c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000870:	20000114 	.word	0x20000114

08000874 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_IRQHandler>
	...

08000878 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800087e:	1dfb      	adds	r3, r7, #7
 8000880:	2200      	movs	r2, #0
 8000882:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_Init+0x3c>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_Init+0x3c>)
 800088a:	2180      	movs	r1, #128	; 0x80
 800088c:	0049      	lsls	r1, r1, #1
 800088e:	430a      	orrs	r2, r1
 8000890:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000892:	2003      	movs	r0, #3
 8000894:	f000 f810 	bl	80008b8 <HAL_InitTick>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d003      	beq.n	80008a4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
 80008a2:	e001      	b.n	80008a8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008a4:	f7ff fece 	bl	8000644 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40022000 	.word	0x40022000

080008b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008c0:	230f      	movs	r3, #15
 80008c2:	18fb      	adds	r3, r7, r3
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <HAL_InitTick+0x88>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d02b      	beq.n	8000928 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_InitTick+0x8c>)
 80008d2:	681c      	ldr	r4, [r3, #0]
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <HAL_InitTick+0x88>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	0019      	movs	r1, r3
 80008da:	23fa      	movs	r3, #250	; 0xfa
 80008dc:	0098      	lsls	r0, r3, #2
 80008de:	f7ff fc0f 	bl	8000100 <__udivsi3>
 80008e2:	0003      	movs	r3, r0
 80008e4:	0019      	movs	r1, r3
 80008e6:	0020      	movs	r0, r4
 80008e8:	f7ff fc0a 	bl	8000100 <__udivsi3>
 80008ec:	0003      	movs	r3, r0
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 f8ef 	bl	8000ad2 <HAL_SYSTICK_Config>
 80008f4:	1e03      	subs	r3, r0, #0
 80008f6:	d112      	bne.n	800091e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d80a      	bhi.n	8000914 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	2301      	movs	r3, #1
 8000902:	425b      	negs	r3, r3
 8000904:	2200      	movs	r2, #0
 8000906:	0018      	movs	r0, r3
 8000908:	f000 f8ce 	bl	8000aa8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <HAL_InitTick+0x90>)
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	e00d      	b.n	8000930 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000914:	230f      	movs	r3, #15
 8000916:	18fb      	adds	r3, r7, r3
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e008      	b.n	8000930 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091e:	230f      	movs	r3, #15
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	2201      	movs	r2, #1
 8000924:	701a      	strb	r2, [r3, #0]
 8000926:	e003      	b.n	8000930 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000928:	230f      	movs	r3, #15
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000930:	230f      	movs	r3, #15
 8000932:	18fb      	adds	r3, r7, r3
 8000934:	781b      	ldrb	r3, [r3, #0]
}
 8000936:	0018      	movs	r0, r3
 8000938:	46bd      	mov	sp, r7
 800093a:	b005      	add	sp, #20
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000008 	.word	0x20000008
 8000944:	20000000 	.word	0x20000000
 8000948:	20000004 	.word	0x20000004

0800094c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000950:	4b05      	ldr	r3, [pc, #20]	; (8000968 <HAL_IncTick+0x1c>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	001a      	movs	r2, r3
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <HAL_IncTick+0x20>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	18d2      	adds	r2, r2, r3
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <HAL_IncTick+0x20>)
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000008 	.word	0x20000008
 800096c:	20000110 	.word	0x20000110

08000970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b02      	ldr	r3, [pc, #8]	; (8000980 <HAL_GetTick+0x10>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	0018      	movs	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	20000110 	.word	0x20000110

08000984 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	0002      	movs	r2, r0
 800098c:	6039      	str	r1, [r7, #0]
 800098e:	1dfb      	adds	r3, r7, #7
 8000990:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	2b7f      	cmp	r3, #127	; 0x7f
 8000998:	d828      	bhi.n	80009ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800099a:	4a2f      	ldr	r2, [pc, #188]	; (8000a58 <__NVIC_SetPriority+0xd4>)
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	33c0      	adds	r3, #192	; 0xc0
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	589b      	ldr	r3, [r3, r2]
 80009aa:	1dfa      	adds	r2, r7, #7
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	0011      	movs	r1, r2
 80009b0:	2203      	movs	r2, #3
 80009b2:	400a      	ands	r2, r1
 80009b4:	00d2      	lsls	r2, r2, #3
 80009b6:	21ff      	movs	r1, #255	; 0xff
 80009b8:	4091      	lsls	r1, r2
 80009ba:	000a      	movs	r2, r1
 80009bc:	43d2      	mvns	r2, r2
 80009be:	401a      	ands	r2, r3
 80009c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	019b      	lsls	r3, r3, #6
 80009c6:	22ff      	movs	r2, #255	; 0xff
 80009c8:	401a      	ands	r2, r3
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	0018      	movs	r0, r3
 80009d0:	2303      	movs	r3, #3
 80009d2:	4003      	ands	r3, r0
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d8:	481f      	ldr	r0, [pc, #124]	; (8000a58 <__NVIC_SetPriority+0xd4>)
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	b25b      	sxtb	r3, r3
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	430a      	orrs	r2, r1
 80009e4:	33c0      	adds	r3, #192	; 0xc0
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80009ea:	e031      	b.n	8000a50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009ec:	4a1b      	ldr	r2, [pc, #108]	; (8000a5c <__NVIC_SetPriority+0xd8>)
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	0019      	movs	r1, r3
 80009f4:	230f      	movs	r3, #15
 80009f6:	400b      	ands	r3, r1
 80009f8:	3b08      	subs	r3, #8
 80009fa:	089b      	lsrs	r3, r3, #2
 80009fc:	3306      	adds	r3, #6
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	18d3      	adds	r3, r2, r3
 8000a02:	3304      	adds	r3, #4
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	1dfa      	adds	r2, r7, #7
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	0011      	movs	r1, r2
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	400a      	ands	r2, r1
 8000a10:	00d2      	lsls	r2, r2, #3
 8000a12:	21ff      	movs	r1, #255	; 0xff
 8000a14:	4091      	lsls	r1, r2
 8000a16:	000a      	movs	r2, r1
 8000a18:	43d2      	mvns	r2, r2
 8000a1a:	401a      	ands	r2, r3
 8000a1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	019b      	lsls	r3, r3, #6
 8000a22:	22ff      	movs	r2, #255	; 0xff
 8000a24:	401a      	ands	r2, r3
 8000a26:	1dfb      	adds	r3, r7, #7
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	4003      	ands	r3, r0
 8000a30:	00db      	lsls	r3, r3, #3
 8000a32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <__NVIC_SetPriority+0xd8>)
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	001c      	movs	r4, r3
 8000a3c:	230f      	movs	r3, #15
 8000a3e:	4023      	ands	r3, r4
 8000a40:	3b08      	subs	r3, #8
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	430a      	orrs	r2, r1
 8000a46:	3306      	adds	r3, #6
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	18c3      	adds	r3, r0, r3
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	601a      	str	r2, [r3, #0]
}
 8000a50:	46c0      	nop			; (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b003      	add	sp, #12
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	e000e100 	.word	0xe000e100
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	1e5a      	subs	r2, r3, #1
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	045b      	lsls	r3, r3, #17
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d301      	bcc.n	8000a78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a74:	2301      	movs	r3, #1
 8000a76:	e010      	b.n	8000a9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <SysTick_Config+0x44>)
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	3a01      	subs	r2, #1
 8000a7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a80:	2301      	movs	r3, #1
 8000a82:	425b      	negs	r3, r3
 8000a84:	2103      	movs	r1, #3
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff ff7c 	bl	8000984 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <SysTick_Config+0x44>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <SysTick_Config+0x44>)
 8000a94:	2207      	movs	r2, #7
 8000a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b002      	add	sp, #8
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	e000e010 	.word	0xe000e010

08000aa8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60b9      	str	r1, [r7, #8]
 8000ab0:	607a      	str	r2, [r7, #4]
 8000ab2:	210f      	movs	r1, #15
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	1c02      	adds	r2, r0, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	b25b      	sxtb	r3, r3
 8000ac2:	0011      	movs	r1, r2
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff ff5d 	bl	8000984 <__NVIC_SetPriority>
}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b004      	add	sp, #16
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ffbf 	bl	8000a60 <SysTick_Config>
 8000ae2:	0003      	movs	r3, r0
}
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000af6:	2300      	movs	r3, #0
 8000af8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000afa:	e147      	b.n	8000d8c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2101      	movs	r1, #1
 8000b02:	697a      	ldr	r2, [r7, #20]
 8000b04:	4091      	lsls	r1, r2
 8000b06:	000a      	movs	r2, r1
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d100      	bne.n	8000b14 <HAL_GPIO_Init+0x28>
 8000b12:	e138      	b.n	8000d86 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	2203      	movs	r2, #3
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d005      	beq.n	8000b2c <HAL_GPIO_Init+0x40>
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2203      	movs	r2, #3
 8000b26:	4013      	ands	r3, r2
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d130      	bne.n	8000b8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	2203      	movs	r2, #3
 8000b38:	409a      	lsls	r2, r3
 8000b3a:	0013      	movs	r3, r2
 8000b3c:	43da      	mvns	r2, r3
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	68da      	ldr	r2, [r3, #12]
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	409a      	lsls	r2, r3
 8000b4e:	0013      	movs	r3, r2
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	4313      	orrs	r3, r2
 8000b54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	685b      	ldr	r3, [r3, #4]
 8000b60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b62:	2201      	movs	r2, #1
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	693b      	ldr	r3, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	091b      	lsrs	r3, r3, #4
 8000b78:	2201      	movs	r2, #1
 8000b7a:	401a      	ands	r2, r3
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	409a      	lsls	r2, r3
 8000b80:	0013      	movs	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2203      	movs	r2, #3
 8000b94:	4013      	ands	r3, r2
 8000b96:	2b03      	cmp	r3, #3
 8000b98:	d017      	beq.n	8000bca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	2203      	movs	r2, #3
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	43da      	mvns	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	4013      	ands	r3, r2
 8000bb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689a      	ldr	r2, [r3, #8]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	0013      	movs	r3, r2
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	2203      	movs	r2, #3
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d123      	bne.n	8000c1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	08da      	lsrs	r2, r3, #3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3208      	adds	r2, #8
 8000bde:	0092      	lsls	r2, r2, #2
 8000be0:	58d3      	ldr	r3, [r2, r3]
 8000be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	2207      	movs	r2, #7
 8000be8:	4013      	ands	r3, r2
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	220f      	movs	r2, #15
 8000bee:	409a      	lsls	r2, r3
 8000bf0:	0013      	movs	r3, r2
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	693b      	ldr	r3, [r7, #16]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	691a      	ldr	r2, [r3, #16]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	2107      	movs	r1, #7
 8000c02:	400b      	ands	r3, r1
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	08da      	lsrs	r2, r3, #3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3208      	adds	r2, #8
 8000c18:	0092      	lsls	r2, r2, #2
 8000c1a:	6939      	ldr	r1, [r7, #16]
 8000c1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	0013      	movs	r3, r2
 8000c2e:	43da      	mvns	r2, r3
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4013      	ands	r3, r2
 8000c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2203      	movs	r2, #3
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	409a      	lsls	r2, r3
 8000c44:	0013      	movs	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	23c0      	movs	r3, #192	; 0xc0
 8000c58:	029b      	lsls	r3, r3, #10
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d100      	bne.n	8000c60 <HAL_GPIO_Init+0x174>
 8000c5e:	e092      	b.n	8000d86 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000c60:	4a50      	ldr	r2, [pc, #320]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	089b      	lsrs	r3, r3, #2
 8000c66:	3318      	adds	r3, #24
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	589b      	ldr	r3, [r3, r2]
 8000c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2203      	movs	r2, #3
 8000c72:	4013      	ands	r3, r2
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	220f      	movs	r2, #15
 8000c78:	409a      	lsls	r2, r3
 8000c7a:	0013      	movs	r3, r2
 8000c7c:	43da      	mvns	r2, r3
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	4013      	ands	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	23a0      	movs	r3, #160	; 0xa0
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	d013      	beq.n	8000cb6 <HAL_GPIO_Init+0x1ca>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4a45      	ldr	r2, [pc, #276]	; (8000da8 <HAL_GPIO_Init+0x2bc>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d00d      	beq.n	8000cb2 <HAL_GPIO_Init+0x1c6>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a44      	ldr	r2, [pc, #272]	; (8000dac <HAL_GPIO_Init+0x2c0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d007      	beq.n	8000cae <HAL_GPIO_Init+0x1c2>
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4a43      	ldr	r2, [pc, #268]	; (8000db0 <HAL_GPIO_Init+0x2c4>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_GPIO_Init+0x1be>
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x1cc>
 8000caa:	2305      	movs	r3, #5
 8000cac:	e004      	b.n	8000cb8 <HAL_GPIO_Init+0x1cc>
 8000cae:	2302      	movs	r3, #2
 8000cb0:	e002      	b.n	8000cb8 <HAL_GPIO_Init+0x1cc>
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e000      	b.n	8000cb8 <HAL_GPIO_Init+0x1cc>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	2103      	movs	r1, #3
 8000cbc:	400a      	ands	r2, r1
 8000cbe:	00d2      	lsls	r2, r2, #3
 8000cc0:	4093      	lsls	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000cc8:	4936      	ldr	r1, [pc, #216]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	089b      	lsrs	r3, r3, #2
 8000cce:	3318      	adds	r3, #24
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000cd6:	4b33      	ldr	r3, [pc, #204]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	035b      	lsls	r3, r3, #13
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d003      	beq.n	8000cfa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000cfa:	4b2a      	ldr	r3, [pc, #168]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000d00:	4b28      	ldr	r3, [pc, #160]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	43da      	mvns	r2, r3
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	039b      	lsls	r3, r3, #14
 8000d18:	4013      	ands	r3, r2
 8000d1a:	d003      	beq.n	8000d24 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000d2c:	2384      	movs	r3, #132	; 0x84
 8000d2e:	58d3      	ldr	r3, [r2, r3]
 8000d30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43da      	mvns	r2, r3
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	4013      	ands	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	029b      	lsls	r3, r3, #10
 8000d44:	4013      	ands	r3, r2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000d50:	4914      	ldr	r1, [pc, #80]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000d52:	2284      	movs	r2, #132	; 0x84
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000d58:	4a12      	ldr	r2, [pc, #72]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	58d3      	ldr	r3, [r2, r3]
 8000d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	43da      	mvns	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	2380      	movs	r3, #128	; 0x80
 8000d70:	025b      	lsls	r3, r3, #9
 8000d72:	4013      	ands	r3, r2
 8000d74:	d003      	beq.n	8000d7e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d7e:	4909      	ldr	r1, [pc, #36]	; (8000da4 <HAL_GPIO_Init+0x2b8>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	40da      	lsrs	r2, r3
 8000d94:	1e13      	subs	r3, r2, #0
 8000d96:	d000      	beq.n	8000d9a <HAL_GPIO_Init+0x2ae>
 8000d98:	e6b0      	b.n	8000afc <HAL_GPIO_Init+0x10>
  }
}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b006      	add	sp, #24
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40021800 	.word	0x40021800
 8000da8:	50000400 	.word	0x50000400
 8000dac:	50000800 	.word	0x50000800
 8000db0:	50000c00 	.word	0x50000c00

08000db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	0008      	movs	r0, r1
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	1cbb      	adds	r3, r7, #2
 8000dc2:	1c02      	adds	r2, r0, #0
 8000dc4:	801a      	strh	r2, [r3, #0]
 8000dc6:	1c7b      	adds	r3, r7, #1
 8000dc8:	1c0a      	adds	r2, r1, #0
 8000dca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dcc:	1c7b      	adds	r3, r7, #1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d004      	beq.n	8000dde <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dd4:	1cbb      	adds	r3, r7, #2
 8000dd6:	881a      	ldrh	r2, [r3, #0]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ddc:	e003      	b.n	8000de6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dde:	1cbb      	adds	r3, r7, #2
 8000de0:	881a      	ldrh	r2, [r3, #0]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b002      	add	sp, #8
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d101      	bne.n	8000e02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e082      	b.n	8000f08 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2241      	movs	r2, #65	; 0x41
 8000e06:	5c9b      	ldrb	r3, [r3, r2]
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d107      	bne.n	8000e1e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2240      	movs	r2, #64	; 0x40
 8000e12:	2100      	movs	r1, #0
 8000e14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff fb6d 	bl	80004f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2241      	movs	r2, #65	; 0x41
 8000e22:	2124      	movs	r1, #36	; 0x24
 8000e24:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2101      	movs	r1, #1
 8000e32:	438a      	bics	r2, r1
 8000e34:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4934      	ldr	r1, [pc, #208]	; (8000f10 <HAL_I2C_Init+0x120>)
 8000e40:	400a      	ands	r2, r1
 8000e42:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4931      	ldr	r1, [pc, #196]	; (8000f14 <HAL_I2C_Init+0x124>)
 8000e50:	400a      	ands	r2, r1
 8000e52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d108      	bne.n	8000e6e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	0209      	lsls	r1, r1, #8
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	e007      	b.n	8000e7e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689a      	ldr	r2, [r3, #8]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2184      	movs	r1, #132	; 0x84
 8000e78:	0209      	lsls	r1, r1, #8
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d104      	bne.n	8000e90 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685a      	ldr	r2, [r3, #4]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	491f      	ldr	r1, [pc, #124]	; (8000f18 <HAL_I2C_Init+0x128>)
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	491a      	ldr	r1, [pc, #104]	; (8000f14 <HAL_I2C_Init+0x124>)
 8000eac:	400a      	ands	r2, r1
 8000eae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	691a      	ldr	r2, [r3, #16]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69d9      	ldr	r1, [r3, #28]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1a      	ldr	r2, [r3, #32]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2241      	movs	r2, #65	; 0x41
 8000ef4:	2120      	movs	r1, #32
 8000ef6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2242      	movs	r2, #66	; 0x42
 8000f02:	2100      	movs	r1, #0
 8000f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
}
 8000f08:	0018      	movs	r0, r3
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	f0ffffff 	.word	0xf0ffffff
 8000f14:	ffff7fff 	.word	0xffff7fff
 8000f18:	02008000 	.word	0x02008000

08000f1c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2241      	movs	r2, #65	; 0x41
 8000f2a:	5c9b      	ldrb	r3, [r3, r2]
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	2b20      	cmp	r3, #32
 8000f30:	d138      	bne.n	8000fa4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	5c9b      	ldrb	r3, [r3, r2]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d101      	bne.n	8000f40 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e032      	b.n	8000fa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2240      	movs	r2, #64	; 0x40
 8000f44:	2101      	movs	r1, #1
 8000f46:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2241      	movs	r2, #65	; 0x41
 8000f4c:	2124      	movs	r1, #36	; 0x24
 8000f4e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4911      	ldr	r1, [pc, #68]	; (8000fb0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000f6c:	400a      	ands	r2, r1
 8000f6e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6819      	ldr	r1, [r3, #0]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2241      	movs	r2, #65	; 0x41
 8000f94:	2120      	movs	r1, #32
 8000f96:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2240      	movs	r2, #64	; 0x40
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e000      	b.n	8000fa6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000fa4:	2302      	movs	r3, #2
  }
}
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b002      	add	sp, #8
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	ffffefff 	.word	0xffffefff

08000fb4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2241      	movs	r2, #65	; 0x41
 8000fc2:	5c9b      	ldrb	r3, [r3, r2]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b20      	cmp	r3, #32
 8000fc8:	d139      	bne.n	800103e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2240      	movs	r2, #64	; 0x40
 8000fce:	5c9b      	ldrb	r3, [r3, r2]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d101      	bne.n	8000fd8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	e033      	b.n	8001040 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2240      	movs	r2, #64	; 0x40
 8000fdc:	2101      	movs	r1, #1
 8000fde:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2241      	movs	r2, #65	; 0x41
 8000fe4:	2124      	movs	r1, #36	; 0x24
 8000fe6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	438a      	bics	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68fa      	ldr	r2, [r7, #12]
 8001018:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2101      	movs	r1, #1
 8001026:	430a      	orrs	r2, r1
 8001028:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2241      	movs	r2, #65	; 0x41
 800102e:	2120      	movs	r1, #32
 8001030:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2240      	movs	r2, #64	; 0x40
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e000      	b.n	8001040 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800103e:	2302      	movs	r3, #2
  }
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b004      	add	sp, #16
 8001046:	bd80      	pop	{r7, pc}
 8001048:	fffff0ff 	.word	0xfffff0ff

0800104c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800105a:	4013      	ands	r3, r2
 800105c:	0019      	movs	r1, r3
 800105e:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	430a      	orrs	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	429a      	cmp	r2, r3
 800106e:	d11f      	bne.n	80010b0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	0013      	movs	r3, r2
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	189b      	adds	r3, r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4912      	ldr	r1, [pc, #72]	; (80010c8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff f83e 	bl	8000100 <__udivsi3>
 8001084:	0003      	movs	r3, r0
 8001086:	3301      	adds	r3, #1
 8001088:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800108a:	e008      	b.n	800109e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3b01      	subs	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e001      	b.n	800109e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e009      	b.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010a0:	695a      	ldr	r2, [r3, #20]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	401a      	ands	r2, r3
 80010a8:	2380      	movs	r3, #128	; 0x80
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d0ed      	beq.n	800108c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	0018      	movs	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	b004      	add	sp, #16
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			; (mov r8, r8)
 80010bc:	40007000 	.word	0x40007000
 80010c0:	fffff9ff 	.word	0xfffff9ff
 80010c4:	20000000 	.word	0x20000000
 80010c8:	000f4240 	.word	0x000f4240

080010cc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80010d0:	4b03      	ldr	r3, [pc, #12]	; (80010e0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80010d2:	689a      	ldr	r2, [r3, #8]
 80010d4:	23e0      	movs	r3, #224	; 0xe0
 80010d6:	01db      	lsls	r3, r3, #7
 80010d8:	4013      	ands	r3, r2
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40021000 	.word	0x40021000

080010e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d101      	bne.n	80010f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	e2f3      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2201      	movs	r2, #1
 80010fc:	4013      	ands	r3, r2
 80010fe:	d100      	bne.n	8001102 <HAL_RCC_OscConfig+0x1e>
 8001100:	e07c      	b.n	80011fc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001102:	4bc3      	ldr	r3, [pc, #780]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2238      	movs	r2, #56	; 0x38
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800110c:	4bc0      	ldr	r3, [pc, #768]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2203      	movs	r2, #3
 8001112:	4013      	ands	r3, r2
 8001114:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	2b10      	cmp	r3, #16
 800111a:	d102      	bne.n	8001122 <HAL_RCC_OscConfig+0x3e>
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d002      	beq.n	8001128 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	2b08      	cmp	r3, #8
 8001126:	d10b      	bne.n	8001140 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001128:	4bb9      	ldr	r3, [pc, #740]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2380      	movs	r3, #128	; 0x80
 800112e:	029b      	lsls	r3, r3, #10
 8001130:	4013      	ands	r3, r2
 8001132:	d062      	beq.n	80011fa <HAL_RCC_OscConfig+0x116>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d15e      	bne.n	80011fa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e2ce      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	2380      	movs	r3, #128	; 0x80
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	429a      	cmp	r2, r3
 800114a:	d107      	bne.n	800115c <HAL_RCC_OscConfig+0x78>
 800114c:	4bb0      	ldr	r3, [pc, #704]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4baf      	ldr	r3, [pc, #700]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0249      	lsls	r1, r1, #9
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e020      	b.n	800119e <HAL_RCC_OscConfig+0xba>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	23a0      	movs	r3, #160	; 0xa0
 8001162:	02db      	lsls	r3, r3, #11
 8001164:	429a      	cmp	r2, r3
 8001166:	d10e      	bne.n	8001186 <HAL_RCC_OscConfig+0xa2>
 8001168:	4ba9      	ldr	r3, [pc, #676]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4ba8      	ldr	r3, [pc, #672]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	02c9      	lsls	r1, r1, #11
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
 8001176:	4ba6      	ldr	r3, [pc, #664]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4ba5      	ldr	r3, [pc, #660]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800117c:	2180      	movs	r1, #128	; 0x80
 800117e:	0249      	lsls	r1, r1, #9
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	e00b      	b.n	800119e <HAL_RCC_OscConfig+0xba>
 8001186:	4ba2      	ldr	r3, [pc, #648]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4ba1      	ldr	r3, [pc, #644]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800118c:	49a1      	ldr	r1, [pc, #644]	; (8001414 <HAL_RCC_OscConfig+0x330>)
 800118e:	400a      	ands	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	4b9f      	ldr	r3, [pc, #636]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b9e      	ldr	r3, [pc, #632]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001198:	499f      	ldr	r1, [pc, #636]	; (8001418 <HAL_RCC_OscConfig+0x334>)
 800119a:	400a      	ands	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d014      	beq.n	80011d0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a6:	f7ff fbe3 	bl	8000970 <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fbde 	bl	8000970 <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e28d      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c2:	4b93      	ldr	r3, [pc, #588]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	2380      	movs	r3, #128	; 0x80
 80011c8:	029b      	lsls	r3, r3, #10
 80011ca:	4013      	ands	r3, r2
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xcc>
 80011ce:	e015      	b.n	80011fc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d0:	f7ff fbce 	bl	8000970 <HAL_GetTick>
 80011d4:	0003      	movs	r3, r0
 80011d6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011da:	f7ff fbc9 	bl	8000970 <HAL_GetTick>
 80011de:	0002      	movs	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b64      	cmp	r3, #100	; 0x64
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e278      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011ec:	4b88      	ldr	r3, [pc, #544]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2380      	movs	r3, #128	; 0x80
 80011f2:	029b      	lsls	r3, r3, #10
 80011f4:	4013      	ands	r3, r2
 80011f6:	d1f0      	bne.n	80011da <HAL_RCC_OscConfig+0xf6>
 80011f8:	e000      	b.n	80011fc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2202      	movs	r2, #2
 8001202:	4013      	ands	r3, r2
 8001204:	d100      	bne.n	8001208 <HAL_RCC_OscConfig+0x124>
 8001206:	e099      	b.n	800133c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001208:	4b81      	ldr	r3, [pc, #516]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2238      	movs	r2, #56	; 0x38
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001212:	4b7f      	ldr	r3, [pc, #508]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	2203      	movs	r2, #3
 8001218:	4013      	ands	r3, r2
 800121a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	2b10      	cmp	r3, #16
 8001220:	d102      	bne.n	8001228 <HAL_RCC_OscConfig+0x144>
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2b02      	cmp	r3, #2
 8001226:	d002      	beq.n	800122e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001228:	69bb      	ldr	r3, [r7, #24]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d135      	bne.n	800129a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800122e:	4b78      	ldr	r3, [pc, #480]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4013      	ands	r3, r2
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x162>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e24b      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b72      	ldr	r3, [pc, #456]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	4a74      	ldr	r2, [pc, #464]	; (800141c <HAL_RCC_OscConfig+0x338>)
 800124c:	4013      	ands	r3, r2
 800124e:	0019      	movs	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	021a      	lsls	r2, r3, #8
 8001256:	4b6e      	ldr	r3, [pc, #440]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d112      	bne.n	8001288 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001262:	4b6b      	ldr	r3, [pc, #428]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6e      	ldr	r2, [pc, #440]	; (8001420 <HAL_RCC_OscConfig+0x33c>)
 8001268:	4013      	ands	r3, r2
 800126a:	0019      	movs	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	4b67      	ldr	r3, [pc, #412]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001276:	4b66      	ldr	r3, [pc, #408]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	0adb      	lsrs	r3, r3, #11
 800127c:	2207      	movs	r2, #7
 800127e:	4013      	ands	r3, r2
 8001280:	4a68      	ldr	r2, [pc, #416]	; (8001424 <HAL_RCC_OscConfig+0x340>)
 8001282:	40da      	lsrs	r2, r3
 8001284:	4b68      	ldr	r3, [pc, #416]	; (8001428 <HAL_RCC_OscConfig+0x344>)
 8001286:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x348>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	0018      	movs	r0, r3
 800128e:	f7ff fb13 	bl	80008b8 <HAL_InitTick>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d051      	beq.n	800133a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e221      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d030      	beq.n	8001304 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012a2:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a5e      	ldr	r2, [pc, #376]	; (8001420 <HAL_RCC_OscConfig+0x33c>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691a      	ldr	r2, [r3, #16]
 80012b0:	4b57      	ldr	r3, [pc, #348]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012b6:	4b56      	ldr	r3, [pc, #344]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4b55      	ldr	r3, [pc, #340]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012bc:	2180      	movs	r1, #128	; 0x80
 80012be:	0049      	lsls	r1, r1, #1
 80012c0:	430a      	orrs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fb54 	bl	8000970 <HAL_GetTick>
 80012c8:	0003      	movs	r3, r0
 80012ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fb4f 	bl	8000970 <HAL_GetTick>
 80012d2:	0002      	movs	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1fe      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e0:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4013      	ands	r3, r2
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	4a4a      	ldr	r2, [pc, #296]	; (800141c <HAL_RCC_OscConfig+0x338>)
 80012f2:	4013      	ands	r3, r2
 80012f4:	0019      	movs	r1, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	021a      	lsls	r2, r3, #8
 80012fc:	4b44      	ldr	r3, [pc, #272]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	430a      	orrs	r2, r1
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	e01b      	b.n	800133c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b41      	ldr	r3, [pc, #260]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800130a:	4949      	ldr	r1, [pc, #292]	; (8001430 <HAL_RCC_OscConfig+0x34c>)
 800130c:	400a      	ands	r2, r1
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fb2e 	bl	8000970 <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fb29 	bl	8000970 <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e1d8      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800132c:	4b38      	ldr	r3, [pc, #224]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4013      	ands	r3, r2
 8001336:	d1f0      	bne.n	800131a <HAL_RCC_OscConfig+0x236>
 8001338:	e000      	b.n	800133c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2208      	movs	r2, #8
 8001342:	4013      	ands	r3, r2
 8001344:	d047      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001346:	4b32      	ldr	r3, [pc, #200]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2238      	movs	r2, #56	; 0x38
 800134c:	4013      	ands	r3, r2
 800134e:	2b18      	cmp	r3, #24
 8001350:	d10a      	bne.n	8001368 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001352:	4b2f      	ldr	r3, [pc, #188]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	2202      	movs	r2, #2
 8001358:	4013      	ands	r3, r2
 800135a:	d03c      	beq.n	80013d6 <HAL_RCC_OscConfig+0x2f2>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d138      	bne.n	80013d6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e1ba      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d019      	beq.n	80013a4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001370:	4b27      	ldr	r3, [pc, #156]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001372:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001374:	4b26      	ldr	r3, [pc, #152]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 8001376:	2101      	movs	r1, #1
 8001378:	430a      	orrs	r2, r1
 800137a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff faf8 	bl	8000970 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001384:	e008      	b.n	8001398 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff faf3 	bl	8000970 <HAL_GetTick>
 800138a:	0002      	movs	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d901      	bls.n	8001398 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e1a2      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 800139a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139c:	2202      	movs	r2, #2
 800139e:	4013      	ands	r3, r2
 80013a0:	d0f1      	beq.n	8001386 <HAL_RCC_OscConfig+0x2a2>
 80013a2:	e018      	b.n	80013d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013a4:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	438a      	bics	r2, r1
 80013ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fade 	bl	8000970 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fad9 	bl	8000970 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e188      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d0:	2202      	movs	r2, #2
 80013d2:	4013      	ands	r3, r2
 80013d4:	d1f1      	bne.n	80013ba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2204      	movs	r2, #4
 80013dc:	4013      	ands	r3, r2
 80013de:	d100      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2fe>
 80013e0:	e0c6      	b.n	8001570 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e2:	231f      	movs	r3, #31
 80013e4:	18fb      	adds	r3, r7, r3
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013ea:	4b09      	ldr	r3, [pc, #36]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2238      	movs	r2, #56	; 0x38
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b20      	cmp	r3, #32
 80013f4:	d11e      	bne.n	8001434 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <HAL_RCC_OscConfig+0x32c>)
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	2202      	movs	r2, #2
 80013fc:	4013      	ands	r3, r2
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x31e>
 8001400:	e0b6      	b.n	8001570 <HAL_RCC_OscConfig+0x48c>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d000      	beq.n	800140c <HAL_RCC_OscConfig+0x328>
 800140a:	e0b1      	b.n	8001570 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e166      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
 8001410:	40021000 	.word	0x40021000
 8001414:	fffeffff 	.word	0xfffeffff
 8001418:	fffbffff 	.word	0xfffbffff
 800141c:	ffff80ff 	.word	0xffff80ff
 8001420:	ffffc7ff 	.word	0xffffc7ff
 8001424:	00f42400 	.word	0x00f42400
 8001428:	20000000 	.word	0x20000000
 800142c:	20000004 	.word	0x20000004
 8001430:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001434:	4bac      	ldr	r3, [pc, #688]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001436:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	055b      	lsls	r3, r3, #21
 800143c:	4013      	ands	r3, r2
 800143e:	d101      	bne.n	8001444 <HAL_RCC_OscConfig+0x360>
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x362>
 8001444:	2300      	movs	r3, #0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d011      	beq.n	800146e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4ba7      	ldr	r3, [pc, #668]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800144c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800144e:	4ba6      	ldr	r3, [pc, #664]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0549      	lsls	r1, r1, #21
 8001454:	430a      	orrs	r2, r1
 8001456:	63da      	str	r2, [r3, #60]	; 0x3c
 8001458:	4ba3      	ldr	r3, [pc, #652]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800145a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800145c:	2380      	movs	r3, #128	; 0x80
 800145e:	055b      	lsls	r3, r3, #21
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001466:	231f      	movs	r3, #31
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	2201      	movs	r2, #1
 800146c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800146e:	4b9f      	ldr	r3, [pc, #636]	; (80016ec <HAL_RCC_OscConfig+0x608>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	2380      	movs	r3, #128	; 0x80
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	4013      	ands	r3, r2
 8001478:	d11a      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800147a:	4b9c      	ldr	r3, [pc, #624]	; (80016ec <HAL_RCC_OscConfig+0x608>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	4b9b      	ldr	r3, [pc, #620]	; (80016ec <HAL_RCC_OscConfig+0x608>)
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	0049      	lsls	r1, r1, #1
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001488:	f7ff fa72 	bl	8000970 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fa6d 	bl	8000970 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e11c      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a4:	4b91      	ldr	r3, [pc, #580]	; (80016ec <HAL_RCC_OscConfig+0x608>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4013      	ands	r3, r2
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x3e2>
 80014b8:	4b8b      	ldr	r3, [pc, #556]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014bc:	4b8a      	ldr	r3, [pc, #552]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014be:	2101      	movs	r1, #1
 80014c0:	430a      	orrs	r2, r1
 80014c2:	65da      	str	r2, [r3, #92]	; 0x5c
 80014c4:	e01c      	b.n	8001500 <HAL_RCC_OscConfig+0x41c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x404>
 80014ce:	4b86      	ldr	r3, [pc, #536]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014d2:	4b85      	ldr	r3, [pc, #532]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014d4:	2104      	movs	r1, #4
 80014d6:	430a      	orrs	r2, r1
 80014d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80014da:	4b83      	ldr	r3, [pc, #524]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014de:	4b82      	ldr	r3, [pc, #520]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80014e6:	e00b      	b.n	8001500 <HAL_RCC_OscConfig+0x41c>
 80014e8:	4b7f      	ldr	r3, [pc, #508]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014ec:	4b7e      	ldr	r3, [pc, #504]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	438a      	bics	r2, r1
 80014f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80014f4:	4b7c      	ldr	r3, [pc, #496]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f8:	4b7b      	ldr	r3, [pc, #492]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80014fa:	2104      	movs	r1, #4
 80014fc:	438a      	bics	r2, r1
 80014fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d014      	beq.n	8001532 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fa32 	bl	8000970 <HAL_GetTick>
 800150c:	0003      	movs	r3, r0
 800150e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001510:	e009      	b.n	8001526 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001512:	f7ff fa2d 	bl	8000970 <HAL_GetTick>
 8001516:	0002      	movs	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	4a74      	ldr	r2, [pc, #464]	; (80016f0 <HAL_RCC_OscConfig+0x60c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e0db      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001526:	4b70      	ldr	r3, [pc, #448]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152a:	2202      	movs	r2, #2
 800152c:	4013      	ands	r3, r2
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x42e>
 8001530:	e013      	b.n	800155a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fa1d 	bl	8000970 <HAL_GetTick>
 8001536:	0003      	movs	r3, r0
 8001538:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800153a:	e009      	b.n	8001550 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800153c:	f7ff fa18 	bl	8000970 <HAL_GetTick>
 8001540:	0002      	movs	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	4a6a      	ldr	r2, [pc, #424]	; (80016f0 <HAL_RCC_OscConfig+0x60c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0c6      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001550:	4b65      	ldr	r3, [pc, #404]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001554:	2202      	movs	r2, #2
 8001556:	4013      	ands	r3, r2
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800155a:	231f      	movs	r3, #31
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001564:	4b60      	ldr	r3, [pc, #384]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001566:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001568:	4b5f      	ldr	r3, [pc, #380]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800156a:	4962      	ldr	r1, [pc, #392]	; (80016f4 <HAL_RCC_OscConfig+0x610>)
 800156c:	400a      	ands	r2, r1
 800156e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d100      	bne.n	800157a <HAL_RCC_OscConfig+0x496>
 8001578:	e0b0      	b.n	80016dc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2238      	movs	r2, #56	; 0x38
 8001580:	4013      	ands	r3, r2
 8001582:	2b10      	cmp	r3, #16
 8001584:	d100      	bne.n	8001588 <HAL_RCC_OscConfig+0x4a4>
 8001586:	e078      	b.n	800167a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69db      	ldr	r3, [r3, #28]
 800158c:	2b02      	cmp	r3, #2
 800158e:	d153      	bne.n	8001638 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001590:	4b55      	ldr	r3, [pc, #340]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b54      	ldr	r3, [pc, #336]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001596:	4958      	ldr	r1, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x614>)
 8001598:	400a      	ands	r2, r1
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159c:	f7ff f9e8 	bl	8000970 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff f9e3 	bl	8000970 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e092      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015b8:	4b4b      	ldr	r3, [pc, #300]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	2380      	movs	r3, #128	; 0x80
 80015be:	049b      	lsls	r3, r3, #18
 80015c0:	4013      	ands	r3, r2
 80015c2:	d1f0      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4a4c      	ldr	r2, [pc, #304]	; (80016fc <HAL_RCC_OscConfig+0x618>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	0019      	movs	r1, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a1a      	ldr	r2, [r3, #32]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	431a      	orrs	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	431a      	orrs	r2, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	431a      	orrs	r2, r3
 80015ec:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015ee:	430a      	orrs	r2, r1
 80015f0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f2:	4b3d      	ldr	r3, [pc, #244]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b3c      	ldr	r3, [pc, #240]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 80015f8:	2180      	movs	r1, #128	; 0x80
 80015fa:	0449      	lsls	r1, r1, #17
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001600:	4b39      	ldr	r3, [pc, #228]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001602:	68da      	ldr	r2, [r3, #12]
 8001604:	4b38      	ldr	r3, [pc, #224]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	0549      	lsls	r1, r1, #21
 800160a:	430a      	orrs	r2, r1
 800160c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160e:	f7ff f9af 	bl	8000970 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff f9aa 	bl	8000970 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e059      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	049b      	lsls	r3, r3, #18
 8001632:	4013      	ands	r3, r2
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x534>
 8001636:	e051      	b.n	80016dc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b2a      	ldr	r3, [pc, #168]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800163e:	492e      	ldr	r1, [pc, #184]	; (80016f8 <HAL_RCC_OscConfig+0x614>)
 8001640:	400a      	ands	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001644:	f7ff f994 	bl	8000970 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff f98f 	bl	8000970 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e03e      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	049b      	lsls	r3, r3, #18
 8001668:	4013      	ands	r3, r2
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 800166e:	68da      	ldr	r2, [r3, #12]
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001672:	4923      	ldr	r1, [pc, #140]	; (8001700 <HAL_RCC_OscConfig+0x61c>)
 8001674:	400a      	ands	r2, r1
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e030      	b.n	80016dc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e02b      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001686:	4b18      	ldr	r3, [pc, #96]	; (80016e8 <HAL_RCC_OscConfig+0x604>)
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	2203      	movs	r2, #3
 8001690:	401a      	ands	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a1b      	ldr	r3, [r3, #32]
 8001696:	429a      	cmp	r2, r3
 8001698:	d11e      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2270      	movs	r2, #112	; 0x70
 800169e:	401a      	ands	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d117      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	23fe      	movs	r3, #254	; 0xfe
 80016ac:	01db      	lsls	r3, r3, #7
 80016ae:	401a      	ands	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d10e      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	23f8      	movs	r3, #248	; 0xf8
 80016be:	039b      	lsls	r3, r3, #14
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	0f5b      	lsrs	r3, r3, #29
 80016ce:	075a      	lsls	r2, r3, #29
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d001      	beq.n	80016dc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e000      	b.n	80016de <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80016dc:	2300      	movs	r3, #0
}
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b008      	add	sp, #32
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40007000 	.word	0x40007000
 80016f0:	00001388 	.word	0x00001388
 80016f4:	efffffff 	.word	0xefffffff
 80016f8:	feffffff 	.word	0xfeffffff
 80016fc:	1fc1808c 	.word	0x1fc1808c
 8001700:	effefffc 	.word	0xeffefffc

08001704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e0e9      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001718:	4b76      	ldr	r3, [pc, #472]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2207      	movs	r2, #7
 800171e:	4013      	ands	r3, r2
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d91e      	bls.n	8001764 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001726:	4b73      	ldr	r3, [pc, #460]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2207      	movs	r2, #7
 800172c:	4393      	bics	r3, r2
 800172e:	0019      	movs	r1, r3
 8001730:	4b70      	ldr	r3, [pc, #448]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001738:	f7ff f91a 	bl	8000970 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001740:	e009      	b.n	8001756 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001742:	f7ff f915 	bl	8000970 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4a6a      	ldr	r2, [pc, #424]	; (80018f8 <HAL_RCC_ClockConfig+0x1f4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e0ca      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001756:	4b67      	ldr	r3, [pc, #412]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2207      	movs	r2, #7
 800175c:	4013      	ands	r3, r2
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	429a      	cmp	r2, r3
 8001762:	d1ee      	bne.n	8001742 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2202      	movs	r2, #2
 800176a:	4013      	ands	r3, r2
 800176c:	d015      	beq.n	800179a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2204      	movs	r2, #4
 8001774:	4013      	ands	r3, r2
 8001776:	d006      	beq.n	8001786 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001778:	4b60      	ldr	r3, [pc, #384]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	4b5f      	ldr	r3, [pc, #380]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 800177e:	21e0      	movs	r1, #224	; 0xe0
 8001780:	01c9      	lsls	r1, r1, #7
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	4a5d      	ldr	r2, [pc, #372]	; (8001900 <HAL_RCC_ClockConfig+0x1fc>)
 800178c:	4013      	ands	r3, r2
 800178e:	0019      	movs	r1, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001796:	430a      	orrs	r2, r1
 8001798:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d057      	beq.n	8001854 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017ac:	4b53      	ldr	r3, [pc, #332]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	029b      	lsls	r3, r3, #10
 80017b4:	4013      	ands	r3, r2
 80017b6:	d12b      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e097      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c4:	4b4d      	ldr	r3, [pc, #308]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	049b      	lsls	r3, r3, #18
 80017cc:	4013      	ands	r3, r2
 80017ce:	d11f      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e08b      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d107      	bne.n	80017ec <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017dc:	4b47      	ldr	r3, [pc, #284]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4013      	ands	r3, r2
 80017e6:	d113      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e07f      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f4:	4b41      	ldr	r3, [pc, #260]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d108      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e074      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001802:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2202      	movs	r2, #2
 8001808:	4013      	ands	r3, r2
 800180a:	d101      	bne.n	8001810 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e06d      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001810:	4b3a      	ldr	r3, [pc, #232]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2207      	movs	r2, #7
 8001816:	4393      	bics	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	4b37      	ldr	r3, [pc, #220]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001824:	f7ff f8a4 	bl	8000970 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182c:	e009      	b.n	8001842 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182e:	f7ff f89f 	bl	8000970 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	4a2f      	ldr	r2, [pc, #188]	; (80018f8 <HAL_RCC_ClockConfig+0x1f4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e054      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2238      	movs	r2, #56	; 0x38
 8001848:	401a      	ands	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	429a      	cmp	r2, r3
 8001852:	d1ec      	bne.n	800182e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b27      	ldr	r3, [pc, #156]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2207      	movs	r2, #7
 800185a:	4013      	ands	r3, r2
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d21e      	bcs.n	80018a0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b24      	ldr	r3, [pc, #144]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2207      	movs	r2, #7
 8001868:	4393      	bics	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001874:	f7ff f87c 	bl	8000970 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f877 	bl	8000970 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_RCC_ClockConfig+0x1f4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e02c      	b.n	80018ec <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001892:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2207      	movs	r2, #7
 8001898:	4013      	ands	r3, r2
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	429a      	cmp	r2, r3
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2204      	movs	r2, #4
 80018a6:	4013      	ands	r3, r2
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018aa:	4b14      	ldr	r3, [pc, #80]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	4a15      	ldr	r2, [pc, #84]	; (8001904 <HAL_RCC_ClockConfig+0x200>)
 80018b0:	4013      	ands	r3, r2
 80018b2:	0019      	movs	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018be:	f000 f829 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 80018c2:	0001      	movs	r1, r0
 80018c4:	4b0d      	ldr	r3, [pc, #52]	; (80018fc <HAL_RCC_ClockConfig+0x1f8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	220f      	movs	r2, #15
 80018cc:	401a      	ands	r2, r3
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_RCC_ClockConfig+0x204>)
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	58d3      	ldr	r3, [r2, r3]
 80018d4:	221f      	movs	r2, #31
 80018d6:	4013      	ands	r3, r2
 80018d8:	000a      	movs	r2, r1
 80018da:	40da      	lsrs	r2, r3
 80018dc:	4b0b      	ldr	r3, [pc, #44]	; (800190c <HAL_RCC_ClockConfig+0x208>)
 80018de:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCC_ClockConfig+0x20c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0018      	movs	r0, r3
 80018e6:	f7fe ffe7 	bl	80008b8 <HAL_InitTick>
 80018ea:	0003      	movs	r3, r0
}
 80018ec:	0018      	movs	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b004      	add	sp, #16
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40022000 	.word	0x40022000
 80018f8:	00001388 	.word	0x00001388
 80018fc:	40021000 	.word	0x40021000
 8001900:	fffff0ff 	.word	0xfffff0ff
 8001904:	ffff8fff 	.word	0xffff8fff
 8001908:	0800265c 	.word	0x0800265c
 800190c:	20000000 	.word	0x20000000
 8001910:	20000004 	.word	0x20000004

08001914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800191a:	4b3c      	ldr	r3, [pc, #240]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2238      	movs	r2, #56	; 0x38
 8001920:	4013      	ands	r3, r2
 8001922:	d10f      	bne.n	8001944 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001924:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0adb      	lsrs	r3, r3, #11
 800192a:	2207      	movs	r2, #7
 800192c:	4013      	ands	r3, r2
 800192e:	2201      	movs	r2, #1
 8001930:	409a      	lsls	r2, r3
 8001932:	0013      	movs	r3, r2
 8001934:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001936:	6839      	ldr	r1, [r7, #0]
 8001938:	4835      	ldr	r0, [pc, #212]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xfc>)
 800193a:	f7fe fbe1 	bl	8000100 <__udivsi3>
 800193e:	0003      	movs	r3, r0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	e05d      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001944:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2238      	movs	r2, #56	; 0x38
 800194a:	4013      	ands	r3, r2
 800194c:	2b08      	cmp	r3, #8
 800194e:	d102      	bne.n	8001956 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001950:	4b30      	ldr	r3, [pc, #192]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x100>)
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	e054      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2238      	movs	r2, #56	; 0x38
 800195c:	4013      	ands	r3, r2
 800195e:	2b10      	cmp	r3, #16
 8001960:	d138      	bne.n	80019d4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2203      	movs	r2, #3
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800196c:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	091b      	lsrs	r3, r3, #4
 8001972:	2207      	movs	r2, #7
 8001974:	4013      	ands	r3, r2
 8001976:	3301      	adds	r3, #1
 8001978:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2b03      	cmp	r3, #3
 800197e:	d10d      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	4824      	ldr	r0, [pc, #144]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x100>)
 8001984:	f7fe fbbc 	bl	8000100 <__udivsi3>
 8001988:	0003      	movs	r3, r0
 800198a:	0019      	movs	r1, r3
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	227f      	movs	r2, #127	; 0x7f
 8001994:	4013      	ands	r3, r2
 8001996:	434b      	muls	r3, r1
 8001998:	617b      	str	r3, [r7, #20]
        break;
 800199a:	e00d      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	481c      	ldr	r0, [pc, #112]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019a0:	f7fe fbae 	bl	8000100 <__udivsi3>
 80019a4:	0003      	movs	r3, r0
 80019a6:	0019      	movs	r1, r3
 80019a8:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	227f      	movs	r2, #127	; 0x7f
 80019b0:	4013      	ands	r3, r2
 80019b2:	434b      	muls	r3, r1
 80019b4:	617b      	str	r3, [r7, #20]
        break;
 80019b6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019b8:	4b14      	ldr	r3, [pc, #80]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0f5b      	lsrs	r3, r3, #29
 80019be:	2207      	movs	r2, #7
 80019c0:	4013      	ands	r3, r2
 80019c2:	3301      	adds	r3, #1
 80019c4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019c6:	6879      	ldr	r1, [r7, #4]
 80019c8:	6978      	ldr	r0, [r7, #20]
 80019ca:	f7fe fb99 	bl	8000100 <__udivsi3>
 80019ce:	0003      	movs	r3, r0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	e015      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	2238      	movs	r2, #56	; 0x38
 80019da:	4013      	ands	r3, r2
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d103      	bne.n	80019e8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019e0:	2380      	movs	r3, #128	; 0x80
 80019e2:	021b      	lsls	r3, r3, #8
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	e00b      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2238      	movs	r2, #56	; 0x38
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b18      	cmp	r3, #24
 80019f2:	d103      	bne.n	80019fc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80019f4:	23fa      	movs	r3, #250	; 0xfa
 80019f6:	01db      	lsls	r3, r3, #7
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	e001      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a00:	693b      	ldr	r3, [r7, #16]
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b006      	add	sp, #24
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	007a1200 	.word	0x007a1200

08001a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b02      	ldr	r3, [pc, #8]	; (8001a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	0018      	movs	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	20000000 	.word	0x20000000

08001a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a2c:	b5b0      	push	{r4, r5, r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a30:	f7ff fff2 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a34:	0004      	movs	r4, r0
 8001a36:	f7ff fb49 	bl	80010cc <LL_RCC_GetAPB1Prescaler>
 8001a3a:	0003      	movs	r3, r0
 8001a3c:	0b1a      	lsrs	r2, r3, #12
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	58d3      	ldr	r3, [r2, r3]
 8001a44:	221f      	movs	r2, #31
 8001a46:	4013      	ands	r3, r2
 8001a48:	40dc      	lsrs	r4, r3
 8001a4a:	0023      	movs	r3, r4
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bdb0      	pop	{r4, r5, r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	0800269c 	.word	0x0800269c

08001a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001a60:	2313      	movs	r3, #19
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a68:	2312      	movs	r3, #18
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	2380      	movs	r3, #128	; 0x80
 8001a76:	029b      	lsls	r3, r3, #10
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d100      	bne.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001a7c:	e0a3      	b.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a7e:	2011      	movs	r0, #17
 8001a80:	183b      	adds	r3, r7, r0
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a86:	4b7f      	ldr	r3, [pc, #508]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8a:	2380      	movs	r3, #128	; 0x80
 8001a8c:	055b      	lsls	r3, r3, #21
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d110      	bne.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a92:	4b7c      	ldr	r3, [pc, #496]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a96:	4b7b      	ldr	r3, [pc, #492]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001a98:	2180      	movs	r1, #128	; 0x80
 8001a9a:	0549      	lsls	r1, r1, #21
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aa0:	4b78      	ldr	r3, [pc, #480]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	055b      	lsls	r3, r3, #21
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aae:	183b      	adds	r3, r7, r0
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ab4:	4b74      	ldr	r3, [pc, #464]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b73      	ldr	r3, [pc, #460]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	0049      	lsls	r1, r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ac2:	f7fe ff55 	bl	8000970 <HAL_GetTick>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001aca:	e00b      	b.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001acc:	f7fe ff50 	bl	8000970 <HAL_GetTick>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d904      	bls.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001ada:	2313      	movs	r3, #19
 8001adc:	18fb      	adds	r3, r7, r3
 8001ade:	2203      	movs	r2, #3
 8001ae0:	701a      	strb	r2, [r3, #0]
        break;
 8001ae2:	e005      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ae4:	4b68      	ldr	r3, [pc, #416]	; (8001c88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d0ed      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001af0:	2313      	movs	r3, #19
 8001af2:	18fb      	adds	r3, r7, r3
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d154      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001afa:	4b62      	ldr	r3, [pc, #392]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001afc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001afe:	23c0      	movs	r3, #192	; 0xc0
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4013      	ands	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d019      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	695b      	ldr	r3, [r3, #20]
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d014      	beq.n	8001b40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b16:	4b5b      	ldr	r3, [pc, #364]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b1a:	4a5c      	ldr	r2, [pc, #368]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b20:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b24:	4b57      	ldr	r3, [pc, #348]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	0249      	lsls	r1, r1, #9
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b2e:	4b55      	ldr	r3, [pc, #340]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b32:	4b54      	ldr	r3, [pc, #336]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b34:	4956      	ldr	r1, [pc, #344]	; (8001c90 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001b36:	400a      	ands	r2, r1
 8001b38:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b3a:	4b52      	ldr	r3, [pc, #328]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2201      	movs	r2, #1
 8001b44:	4013      	ands	r3, r2
 8001b46:	d016      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b48:	f7fe ff12 	bl	8000970 <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b50:	e00c      	b.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7fe ff0d 	bl	8000970 <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a4d      	ldr	r2, [pc, #308]	; (8001c94 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d904      	bls.n	8001b6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001b62:	2313      	movs	r3, #19
 8001b64:	18fb      	adds	r3, r7, r3
 8001b66:	2203      	movs	r2, #3
 8001b68:	701a      	strb	r2, [r3, #0]
            break;
 8001b6a:	e004      	b.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b6c:	4b45      	ldr	r3, [pc, #276]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b70:	2202      	movs	r2, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d0ed      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001b76:	2313      	movs	r3, #19
 8001b78:	18fb      	adds	r3, r7, r3
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10a      	bne.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b80:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	4a41      	ldr	r2, [pc, #260]	; (8001c8c <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	0019      	movs	r1, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001b90:	430a      	orrs	r2, r1
 8001b92:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b94:	e00c      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001b96:	2312      	movs	r3, #18
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2213      	movs	r2, #19
 8001b9c:	18ba      	adds	r2, r7, r2
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	e005      	b.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ba4:	2312      	movs	r3, #18
 8001ba6:	18fb      	adds	r3, r7, r3
 8001ba8:	2213      	movs	r2, #19
 8001baa:	18ba      	adds	r2, r7, r2
 8001bac:	7812      	ldrb	r2, [r2, #0]
 8001bae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bb0:	2311      	movs	r3, #17
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d105      	bne.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bba:	4b32      	ldr	r3, [pc, #200]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bbe:	4b31      	ldr	r3, [pc, #196]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bc0:	4935      	ldr	r1, [pc, #212]	; (8001c98 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001bc2:	400a      	ands	r2, r1
 8001bc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d009      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bd0:	4b2c      	ldr	r3, [pc, #176]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	4393      	bics	r3, r2
 8001bd8:	0019      	movs	r1, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	4b29      	ldr	r3, [pc, #164]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001be0:	430a      	orrs	r2, r1
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2220      	movs	r2, #32
 8001bea:	4013      	ands	r3, r2
 8001bec:	d009      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	4b21      	ldr	r3, [pc, #132]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	2380      	movs	r3, #128	; 0x80
 8001c08:	01db      	lsls	r3, r3, #7
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d015      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	0899      	lsrs	r1, r3, #2
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691a      	ldr	r2, [r3, #16]
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691a      	ldr	r2, [r3, #16]
 8001c24:	2380      	movs	r3, #128	; 0x80
 8001c26:	05db      	lsls	r3, r3, #23
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d106      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c32:	2180      	movs	r1, #128	; 0x80
 8001c34:	0249      	lsls	r1, r1, #9
 8001c36:	430a      	orrs	r2, r1
 8001c38:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	011b      	lsls	r3, r3, #4
 8001c42:	4013      	ands	r3, r2
 8001c44:	d016      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	4a15      	ldr	r2, [pc, #84]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	01db      	lsls	r3, r3, #7
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d106      	bne.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001c6c:	2180      	movs	r1, #128	; 0x80
 8001c6e:	0249      	lsls	r1, r1, #9
 8001c70:	430a      	orrs	r2, r1
 8001c72:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001c74:	2312      	movs	r3, #18
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	781b      	ldrb	r3, [r3, #0]
}
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	b006      	add	sp, #24
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40007000 	.word	0x40007000
 8001c8c:	fffffcff 	.word	0xfffffcff
 8001c90:	fffeffff 	.word	0xfffeffff
 8001c94:	00001388 	.word	0x00001388
 8001c98:	efffffff 	.word	0xefffffff
 8001c9c:	ffffcfff 	.word	0xffffcfff
 8001ca0:	ffff3fff 	.word	0xffff3fff

08001ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e046      	b.n	8001d44 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2288      	movs	r2, #136	; 0x88
 8001cba:	589b      	ldr	r3, [r3, r2]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d107      	bne.n	8001cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2284      	movs	r2, #132	; 0x84
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7fe fd48 	bl	8000760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2288      	movs	r2, #136	; 0x88
 8001cd4:	2124      	movs	r1, #36	; 0x24
 8001cd6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	0018      	movs	r0, r3
 8001cec:	f000 f830 	bl	8001d50 <UART_SetConfig>
 8001cf0:	0003      	movs	r3, r0
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e024      	b.n	8001d44 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d003      	beq.n	8001d0a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 f98d 	bl	8002024 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	490d      	ldr	r1, [pc, #52]	; (8001d4c <HAL_UART_Init+0xa8>)
 8001d16:	400a      	ands	r2, r1
 8001d18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689a      	ldr	r2, [r3, #8]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	212a      	movs	r1, #42	; 0x2a
 8001d26:	438a      	bics	r2, r1
 8001d28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	430a      	orrs	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	f000 fa25 	bl	800218c <UART_CheckIdleState>
 8001d42:	0003      	movs	r3, r0
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b002      	add	sp, #8
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	ffffb7ff 	.word	0xffffb7ff

08001d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d58:	231a      	movs	r3, #26
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	431a      	orrs	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4aa1      	ldr	r2, [pc, #644]	; (8002004 <UART_SetConfig+0x2b4>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	4a9c      	ldr	r2, [pc, #624]	; (8002008 <UART_SetConfig+0x2b8>)
 8001d96:	4013      	ands	r3, r2
 8001d98:	0019      	movs	r1, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68da      	ldr	r2, [r3, #12]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	69fa      	ldr	r2, [r7, #28]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4a93      	ldr	r2, [pc, #588]	; (800200c <UART_SetConfig+0x2bc>)
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	0019      	movs	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69fa      	ldr	r2, [r7, #28]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a89      	ldr	r2, [pc, #548]	; (8002010 <UART_SetConfig+0x2c0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d127      	bne.n	8001e3e <UART_SetConfig+0xee>
 8001dee:	4b89      	ldr	r3, [pc, #548]	; (8002014 <UART_SetConfig+0x2c4>)
 8001df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df2:	2203      	movs	r2, #3
 8001df4:	4013      	ands	r3, r2
 8001df6:	2b03      	cmp	r3, #3
 8001df8:	d017      	beq.n	8001e2a <UART_SetConfig+0xda>
 8001dfa:	d81b      	bhi.n	8001e34 <UART_SetConfig+0xe4>
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d00a      	beq.n	8001e16 <UART_SetConfig+0xc6>
 8001e00:	d818      	bhi.n	8001e34 <UART_SetConfig+0xe4>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <UART_SetConfig+0xbc>
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d00a      	beq.n	8001e20 <UART_SetConfig+0xd0>
 8001e0a:	e013      	b.n	8001e34 <UART_SetConfig+0xe4>
 8001e0c:	231b      	movs	r3, #27
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
 8001e14:	e021      	b.n	8001e5a <UART_SetConfig+0x10a>
 8001e16:	231b      	movs	r3, #27
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	e01c      	b.n	8001e5a <UART_SetConfig+0x10a>
 8001e20:	231b      	movs	r3, #27
 8001e22:	18fb      	adds	r3, r7, r3
 8001e24:	2204      	movs	r2, #4
 8001e26:	701a      	strb	r2, [r3, #0]
 8001e28:	e017      	b.n	8001e5a <UART_SetConfig+0x10a>
 8001e2a:	231b      	movs	r3, #27
 8001e2c:	18fb      	adds	r3, r7, r3
 8001e2e:	2208      	movs	r2, #8
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	e012      	b.n	8001e5a <UART_SetConfig+0x10a>
 8001e34:	231b      	movs	r3, #27
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	2210      	movs	r2, #16
 8001e3a:	701a      	strb	r2, [r3, #0]
 8001e3c:	e00d      	b.n	8001e5a <UART_SetConfig+0x10a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a75      	ldr	r2, [pc, #468]	; (8002018 <UART_SetConfig+0x2c8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d104      	bne.n	8001e52 <UART_SetConfig+0x102>
 8001e48:	231b      	movs	r3, #27
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e003      	b.n	8001e5a <UART_SetConfig+0x10a>
 8001e52:	231b      	movs	r3, #27
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2210      	movs	r2, #16
 8001e58:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69da      	ldr	r2, [r3, #28]
 8001e5e:	2380      	movs	r3, #128	; 0x80
 8001e60:	021b      	lsls	r3, r3, #8
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d000      	beq.n	8001e68 <UART_SetConfig+0x118>
 8001e66:	e065      	b.n	8001f34 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8001e68:	231b      	movs	r3, #27
 8001e6a:	18fb      	adds	r3, r7, r3
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d015      	beq.n	8001e9e <UART_SetConfig+0x14e>
 8001e72:	dc18      	bgt.n	8001ea6 <UART_SetConfig+0x156>
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d00d      	beq.n	8001e94 <UART_SetConfig+0x144>
 8001e78:	dc15      	bgt.n	8001ea6 <UART_SetConfig+0x156>
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <UART_SetConfig+0x134>
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d005      	beq.n	8001e8e <UART_SetConfig+0x13e>
 8001e82:	e010      	b.n	8001ea6 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001e84:	f7ff fdd2 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	617b      	str	r3, [r7, #20]
        break;
 8001e8c:	e012      	b.n	8001eb4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001e8e:	4b63      	ldr	r3, [pc, #396]	; (800201c <UART_SetConfig+0x2cc>)
 8001e90:	617b      	str	r3, [r7, #20]
        break;
 8001e92:	e00f      	b.n	8001eb4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e94:	f7ff fd3e 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	617b      	str	r3, [r7, #20]
        break;
 8001e9c:	e00a      	b.n	8001eb4 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001e9e:	2380      	movs	r3, #128	; 0x80
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	617b      	str	r3, [r7, #20]
        break;
 8001ea4:	e006      	b.n	8001eb4 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001eaa:	231a      	movs	r3, #26
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
        break;
 8001eb2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d100      	bne.n	8001ebc <UART_SetConfig+0x16c>
 8001eba:	e08d      	b.n	8001fd8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ec0:	4b57      	ldr	r3, [pc, #348]	; (8002020 <UART_SetConfig+0x2d0>)
 8001ec2:	0052      	lsls	r2, r2, #1
 8001ec4:	5ad3      	ldrh	r3, [r2, r3]
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	6978      	ldr	r0, [r7, #20]
 8001eca:	f7fe f919 	bl	8000100 <__udivsi3>
 8001ece:	0003      	movs	r3, r0
 8001ed0:	005a      	lsls	r2, r3, #1
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	18d2      	adds	r2, r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	0019      	movs	r1, r3
 8001ee0:	0010      	movs	r0, r2
 8001ee2:	f7fe f90d 	bl	8000100 <__udivsi3>
 8001ee6:	0003      	movs	r3, r0
 8001ee8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	2b0f      	cmp	r3, #15
 8001eee:	d91c      	bls.n	8001f2a <UART_SetConfig+0x1da>
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	2380      	movs	r3, #128	; 0x80
 8001ef4:	025b      	lsls	r3, r3, #9
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d217      	bcs.n	8001f2a <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	200e      	movs	r0, #14
 8001f00:	183b      	adds	r3, r7, r0
 8001f02:	210f      	movs	r1, #15
 8001f04:	438a      	bics	r2, r1
 8001f06:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	085b      	lsrs	r3, r3, #1
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	2207      	movs	r2, #7
 8001f10:	4013      	ands	r3, r2
 8001f12:	b299      	uxth	r1, r3
 8001f14:	183b      	adds	r3, r7, r0
 8001f16:	183a      	adds	r2, r7, r0
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	183a      	adds	r2, r7, r0
 8001f24:	8812      	ldrh	r2, [r2, #0]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	e056      	b.n	8001fd8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8001f2a:	231a      	movs	r3, #26
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
 8001f32:	e051      	b.n	8001fd8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8001f34:	231b      	movs	r3, #27
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d015      	beq.n	8001f6a <UART_SetConfig+0x21a>
 8001f3e:	dc18      	bgt.n	8001f72 <UART_SetConfig+0x222>
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00d      	beq.n	8001f60 <UART_SetConfig+0x210>
 8001f44:	dc15      	bgt.n	8001f72 <UART_SetConfig+0x222>
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <UART_SetConfig+0x200>
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d005      	beq.n	8001f5a <UART_SetConfig+0x20a>
 8001f4e:	e010      	b.n	8001f72 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001f50:	f7ff fd6c 	bl	8001a2c <HAL_RCC_GetPCLK1Freq>
 8001f54:	0003      	movs	r3, r0
 8001f56:	617b      	str	r3, [r7, #20]
        break;
 8001f58:	e012      	b.n	8001f80 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001f5a:	4b30      	ldr	r3, [pc, #192]	; (800201c <UART_SetConfig+0x2cc>)
 8001f5c:	617b      	str	r3, [r7, #20]
        break;
 8001f5e:	e00f      	b.n	8001f80 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001f60:	f7ff fcd8 	bl	8001914 <HAL_RCC_GetSysClockFreq>
 8001f64:	0003      	movs	r3, r0
 8001f66:	617b      	str	r3, [r7, #20]
        break;
 8001f68:	e00a      	b.n	8001f80 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	617b      	str	r3, [r7, #20]
        break;
 8001f70:	e006      	b.n	8001f80 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8001f76:	231a      	movs	r3, #26
 8001f78:	18fb      	adds	r3, r7, r3
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
        break;
 8001f7e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d028      	beq.n	8001fd8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f8a:	4b25      	ldr	r3, [pc, #148]	; (8002020 <UART_SetConfig+0x2d0>)
 8001f8c:	0052      	lsls	r2, r2, #1
 8001f8e:	5ad3      	ldrh	r3, [r2, r3]
 8001f90:	0019      	movs	r1, r3
 8001f92:	6978      	ldr	r0, [r7, #20]
 8001f94:	f7fe f8b4 	bl	8000100 <__udivsi3>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	085b      	lsrs	r3, r3, #1
 8001fa2:	18d2      	adds	r2, r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	0019      	movs	r1, r3
 8001faa:	0010      	movs	r0, r2
 8001fac:	f7fe f8a8 	bl	8000100 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	d90a      	bls.n	8001fd0 <UART_SetConfig+0x280>
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d205      	bcs.n	8001fd0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	e003      	b.n	8001fd8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8001fd0:	231a      	movs	r3, #26
 8001fd2:	18fb      	adds	r3, r7, r3
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	226a      	movs	r2, #106	; 0x6a
 8001fdc:	2101      	movs	r1, #1
 8001fde:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2268      	movs	r2, #104	; 0x68
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8001ff4:	231a      	movs	r3, #26
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	781b      	ldrb	r3, [r3, #0]
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b008      	add	sp, #32
 8002000:	bd80      	pop	{r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	cfff69f3 	.word	0xcfff69f3
 8002008:	ffffcfff 	.word	0xffffcfff
 800200c:	11fff4ff 	.word	0x11fff4ff
 8002010:	40013800 	.word	0x40013800
 8002014:	40021000 	.word	0x40021000
 8002018:	40004400 	.word	0x40004400
 800201c:	00f42400 	.word	0x00f42400
 8002020:	080026bc 	.word	0x080026bc

08002024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	2201      	movs	r2, #1
 8002032:	4013      	ands	r3, r2
 8002034:	d00b      	beq.n	800204e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a4a      	ldr	r2, [pc, #296]	; (8002168 <UART_AdvFeatureConfig+0x144>)
 800203e:	4013      	ands	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	2202      	movs	r2, #2
 8002054:	4013      	ands	r3, r2
 8002056:	d00b      	beq.n	8002070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	4a43      	ldr	r2, [pc, #268]	; (800216c <UART_AdvFeatureConfig+0x148>)
 8002060:	4013      	ands	r3, r2
 8002062:	0019      	movs	r1, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	2204      	movs	r2, #4
 8002076:	4013      	ands	r3, r2
 8002078:	d00b      	beq.n	8002092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a3b      	ldr	r2, [pc, #236]	; (8002170 <UART_AdvFeatureConfig+0x14c>)
 8002082:	4013      	ands	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002096:	2208      	movs	r2, #8
 8002098:	4013      	ands	r3, r2
 800209a:	d00b      	beq.n	80020b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a34      	ldr	r2, [pc, #208]	; (8002174 <UART_AdvFeatureConfig+0x150>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	0019      	movs	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	2210      	movs	r2, #16
 80020ba:	4013      	ands	r3, r2
 80020bc:	d00b      	beq.n	80020d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	4a2c      	ldr	r2, [pc, #176]	; (8002178 <UART_AdvFeatureConfig+0x154>)
 80020c6:	4013      	ands	r3, r2
 80020c8:	0019      	movs	r1, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020da:	2220      	movs	r2, #32
 80020dc:	4013      	ands	r3, r2
 80020de:	d00b      	beq.n	80020f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4a25      	ldr	r2, [pc, #148]	; (800217c <UART_AdvFeatureConfig+0x158>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fc:	2240      	movs	r2, #64	; 0x40
 80020fe:	4013      	ands	r3, r2
 8002100:	d01d      	beq.n	800213e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <UART_AdvFeatureConfig+0x15c>)
 800210a:	4013      	ands	r3, r2
 800210c:	0019      	movs	r1, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	035b      	lsls	r3, r3, #13
 8002122:	429a      	cmp	r2, r3
 8002124:	d10b      	bne.n	800213e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a15      	ldr	r2, [pc, #84]	; (8002184 <UART_AdvFeatureConfig+0x160>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002142:	2280      	movs	r2, #128	; 0x80
 8002144:	4013      	ands	r3, r2
 8002146:	d00b      	beq.n	8002160 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	4a0e      	ldr	r2, [pc, #56]	; (8002188 <UART_AdvFeatureConfig+0x164>)
 8002150:	4013      	ands	r3, r2
 8002152:	0019      	movs	r1, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	605a      	str	r2, [r3, #4]
  }
}
 8002160:	46c0      	nop			; (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}
 8002168:	fffdffff 	.word	0xfffdffff
 800216c:	fffeffff 	.word	0xfffeffff
 8002170:	fffbffff 	.word	0xfffbffff
 8002174:	ffff7fff 	.word	0xffff7fff
 8002178:	ffffefff 	.word	0xffffefff
 800217c:	ffffdfff 	.word	0xffffdfff
 8002180:	ffefffff 	.word	0xffefffff
 8002184:	ff9fffff 	.word	0xff9fffff
 8002188:	fff7ffff 	.word	0xfff7ffff

0800218c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2290      	movs	r2, #144	; 0x90
 8002198:	2100      	movs	r1, #0
 800219a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800219c:	f7fe fbe8 	bl	8000970 <HAL_GetTick>
 80021a0:	0003      	movs	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2208      	movs	r2, #8
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b08      	cmp	r3, #8
 80021b0:	d10c      	bne.n	80021cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	0391      	lsls	r1, r2, #14
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	4a1a      	ldr	r2, [pc, #104]	; (8002224 <UART_CheckIdleState+0x98>)
 80021bc:	9200      	str	r2, [sp, #0]
 80021be:	2200      	movs	r2, #0
 80021c0:	f000 f832 	bl	8002228 <UART_WaitOnFlagUntilTimeout>
 80021c4:	1e03      	subs	r3, r0, #0
 80021c6:	d001      	beq.n	80021cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e026      	b.n	800221a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2204      	movs	r2, #4
 80021d4:	4013      	ands	r3, r2
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d10c      	bne.n	80021f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2280      	movs	r2, #128	; 0x80
 80021de:	03d1      	lsls	r1, r2, #15
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	4a10      	ldr	r2, [pc, #64]	; (8002224 <UART_CheckIdleState+0x98>)
 80021e4:	9200      	str	r2, [sp, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f000 f81e 	bl	8002228 <UART_WaitOnFlagUntilTimeout>
 80021ec:	1e03      	subs	r3, r0, #0
 80021ee:	d001      	beq.n	80021f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e012      	b.n	800221a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2288      	movs	r2, #136	; 0x88
 80021f8:	2120      	movs	r1, #32
 80021fa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	228c      	movs	r2, #140	; 0x8c
 8002200:	2120      	movs	r1, #32
 8002202:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2284      	movs	r2, #132	; 0x84
 8002214:	2100      	movs	r1, #0
 8002216:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b004      	add	sp, #16
 8002220:	bd80      	pop	{r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	01ffffff 	.word	0x01ffffff

08002228 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b094      	sub	sp, #80	; 0x50
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002238:	e0a7      	b.n	800238a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800223c:	3301      	adds	r3, #1
 800223e:	d100      	bne.n	8002242 <UART_WaitOnFlagUntilTimeout+0x1a>
 8002240:	e0a3      	b.n	800238a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002242:	f7fe fb95 	bl	8000970 <HAL_GetTick>
 8002246:	0002      	movs	r2, r0
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800224e:	429a      	cmp	r2, r3
 8002250:	d302      	bcc.n	8002258 <UART_WaitOnFlagUntilTimeout+0x30>
 8002252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002254:	2b00      	cmp	r3, #0
 8002256:	d13f      	bne.n	80022d8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002258:	f3ef 8310 	mrs	r3, PRIMASK
 800225c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002260:	647b      	str	r3, [r7, #68]	; 0x44
 8002262:	2301      	movs	r3, #1
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	f383 8810 	msr	PRIMASK, r3
}
 800226c:	46c0      	nop			; (mov r8, r8)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	494e      	ldr	r1, [pc, #312]	; (80023b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800227a:	400a      	ands	r2, r1
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002280:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002284:	f383 8810 	msr	PRIMASK, r3
}
 8002288:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800228a:	f3ef 8310 	mrs	r3, PRIMASK
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002292:	643b      	str	r3, [r7, #64]	; 0x40
 8002294:	2301      	movs	r3, #1
 8002296:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800229a:	f383 8810 	msr	PRIMASK, r3
}
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2101      	movs	r1, #1
 80022ac:	438a      	bics	r2, r1
 80022ae:	609a      	str	r2, [r3, #8]
 80022b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b6:	f383 8810 	msr	PRIMASK, r3
}
 80022ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2288      	movs	r2, #136	; 0x88
 80022c0:	2120      	movs	r1, #32
 80022c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	228c      	movs	r2, #140	; 0x8c
 80022c8:	2120      	movs	r1, #32
 80022ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2284      	movs	r2, #132	; 0x84
 80022d0:	2100      	movs	r1, #0
 80022d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e069      	b.n	80023ac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2204      	movs	r2, #4
 80022e0:	4013      	ands	r3, r2
 80022e2:	d052      	beq.n	800238a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	69da      	ldr	r2, [r3, #28]
 80022ea:	2380      	movs	r3, #128	; 0x80
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	401a      	ands	r2, r3
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d148      	bne.n	800238a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2280      	movs	r2, #128	; 0x80
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002302:	f3ef 8310 	mrs	r3, PRIMASK
 8002306:	613b      	str	r3, [r7, #16]
  return(result);
 8002308:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800230c:	2301      	movs	r3, #1
 800230e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	f383 8810 	msr	PRIMASK, r3
}
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4924      	ldr	r1, [pc, #144]	; (80023b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002324:	400a      	ands	r2, r1
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800232a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f383 8810 	msr	PRIMASK, r3
}
 8002332:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002334:	f3ef 8310 	mrs	r3, PRIMASK
 8002338:	61fb      	str	r3, [r7, #28]
  return(result);
 800233a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800233c:	64bb      	str	r3, [r7, #72]	; 0x48
 800233e:	2301      	movs	r3, #1
 8002340:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	f383 8810 	msr	PRIMASK, r3
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689a      	ldr	r2, [r3, #8]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2101      	movs	r1, #1
 8002356:	438a      	bics	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	f383 8810 	msr	PRIMASK, r3
}
 8002364:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2288      	movs	r2, #136	; 0x88
 800236a:	2120      	movs	r1, #32
 800236c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	228c      	movs	r2, #140	; 0x8c
 8002372:	2120      	movs	r1, #32
 8002374:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2290      	movs	r2, #144	; 0x90
 800237a:	2120      	movs	r1, #32
 800237c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2284      	movs	r2, #132	; 0x84
 8002382:	2100      	movs	r1, #0
 8002384:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e010      	b.n	80023ac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	4013      	ands	r3, r2
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	425a      	negs	r2, r3
 800239a:	4153      	adcs	r3, r2
 800239c:	b2db      	uxtb	r3, r3
 800239e:	001a      	movs	r2, r3
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d100      	bne.n	80023aa <UART_WaitOnFlagUntilTimeout+0x182>
 80023a8:	e747      	b.n	800223a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b014      	add	sp, #80	; 0x50
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	fffffe5f 	.word	0xfffffe5f

080023b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2284      	movs	r2, #132	; 0x84
 80023c4:	5c9b      	ldrb	r3, [r3, r2]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d101      	bne.n	80023ce <HAL_UARTEx_DisableFifoMode+0x16>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e027      	b.n	800241e <HAL_UARTEx_DisableFifoMode+0x66>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2284      	movs	r2, #132	; 0x84
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2288      	movs	r2, #136	; 0x88
 80023da:	2124      	movs	r1, #36	; 0x24
 80023dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2101      	movs	r1, #1
 80023f2:	438a      	bics	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	4a0b      	ldr	r2, [pc, #44]	; (8002428 <HAL_UARTEx_DisableFifoMode+0x70>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2288      	movs	r2, #136	; 0x88
 8002410:	2120      	movs	r1, #32
 8002412:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2284      	movs	r2, #132	; 0x84
 8002418:	2100      	movs	r1, #0
 800241a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	0018      	movs	r0, r3
 8002420:	46bd      	mov	sp, r7
 8002422:	b004      	add	sp, #16
 8002424:	bd80      	pop	{r7, pc}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	dfffffff 	.word	0xdfffffff

0800242c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2284      	movs	r2, #132	; 0x84
 800243a:	5c9b      	ldrb	r3, [r3, r2]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d101      	bne.n	8002444 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002440:	2302      	movs	r3, #2
 8002442:	e02e      	b.n	80024a2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2284      	movs	r2, #132	; 0x84
 8002448:	2101      	movs	r1, #1
 800244a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2288      	movs	r2, #136	; 0x88
 8002450:	2124      	movs	r1, #36	; 0x24
 8002452:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2101      	movs	r1, #1
 8002468:	438a      	bics	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	08d9      	lsrs	r1, r3, #3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	0018      	movs	r0, r3
 8002484:	f000 f854 	bl	8002530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2288      	movs	r2, #136	; 0x88
 8002494:	2120      	movs	r1, #32
 8002496:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2284      	movs	r2, #132	; 0x84
 800249c:	2100      	movs	r1, #0
 800249e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b004      	add	sp, #16
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2284      	movs	r2, #132	; 0x84
 80024ba:	5c9b      	ldrb	r3, [r3, r2]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e02f      	b.n	8002524 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2284      	movs	r2, #132	; 0x84
 80024c8:	2101      	movs	r1, #1
 80024ca:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2288      	movs	r2, #136	; 0x88
 80024d0:	2124      	movs	r1, #36	; 0x24
 80024d2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	438a      	bics	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	4a0e      	ldr	r2, [pc, #56]	; (800252c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0018      	movs	r0, r3
 8002506:	f000 f813 	bl	8002530 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68fa      	ldr	r2, [r7, #12]
 8002510:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2288      	movs	r2, #136	; 0x88
 8002516:	2120      	movs	r1, #32
 8002518:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2284      	movs	r2, #132	; 0x84
 800251e:	2100      	movs	r1, #0
 8002520:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	0018      	movs	r0, r3
 8002526:	46bd      	mov	sp, r7
 8002528:	b004      	add	sp, #16
 800252a:	bd80      	pop	{r7, pc}
 800252c:	f1ffffff 	.word	0xf1ffffff

08002530 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800253c:	2b00      	cmp	r3, #0
 800253e:	d108      	bne.n	8002552 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	226a      	movs	r2, #106	; 0x6a
 8002544:	2101      	movs	r1, #1
 8002546:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2268      	movs	r2, #104	; 0x68
 800254c:	2101      	movs	r1, #1
 800254e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002550:	e043      	b.n	80025da <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002552:	260f      	movs	r6, #15
 8002554:	19bb      	adds	r3, r7, r6
 8002556:	2208      	movs	r2, #8
 8002558:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800255a:	200e      	movs	r0, #14
 800255c:	183b      	adds	r3, r7, r0
 800255e:	2208      	movs	r2, #8
 8002560:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	0e5b      	lsrs	r3, r3, #25
 800256a:	b2da      	uxtb	r2, r3
 800256c:	240d      	movs	r4, #13
 800256e:	193b      	adds	r3, r7, r4
 8002570:	2107      	movs	r1, #7
 8002572:	400a      	ands	r2, r1
 8002574:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	0f5b      	lsrs	r3, r3, #29
 800257e:	b2da      	uxtb	r2, r3
 8002580:	250c      	movs	r5, #12
 8002582:	197b      	adds	r3, r7, r5
 8002584:	2107      	movs	r1, #7
 8002586:	400a      	ands	r2, r1
 8002588:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800258a:	183b      	adds	r3, r7, r0
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	197a      	adds	r2, r7, r5
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	4914      	ldr	r1, [pc, #80]	; (80025e4 <UARTEx_SetNbDataToProcess+0xb4>)
 8002594:	5c8a      	ldrb	r2, [r1, r2]
 8002596:	435a      	muls	r2, r3
 8002598:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800259a:	197b      	adds	r3, r7, r5
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80025a2:	0019      	movs	r1, r3
 80025a4:	f7fd fe36 	bl	8000214 <__divsi3>
 80025a8:	0003      	movs	r3, r0
 80025aa:	b299      	uxth	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	226a      	movs	r2, #106	; 0x6a
 80025b0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80025b2:	19bb      	adds	r3, r7, r6
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	193a      	adds	r2, r7, r4
 80025b8:	7812      	ldrb	r2, [r2, #0]
 80025ba:	490a      	ldr	r1, [pc, #40]	; (80025e4 <UARTEx_SetNbDataToProcess+0xb4>)
 80025bc:	5c8a      	ldrb	r2, [r1, r2]
 80025be:	435a      	muls	r2, r3
 80025c0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80025c2:	193b      	adds	r3, r7, r4
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <UARTEx_SetNbDataToProcess+0xb8>)
 80025c8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80025ca:	0019      	movs	r1, r3
 80025cc:	f7fd fe22 	bl	8000214 <__divsi3>
 80025d0:	0003      	movs	r3, r0
 80025d2:	b299      	uxth	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2268      	movs	r2, #104	; 0x68
 80025d8:	5299      	strh	r1, [r3, r2]
}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b005      	add	sp, #20
 80025e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	080026d4 	.word	0x080026d4
 80025e8:	080026dc 	.word	0x080026dc

080025ec <__libc_init_array>:
 80025ec:	b570      	push	{r4, r5, r6, lr}
 80025ee:	2600      	movs	r6, #0
 80025f0:	4d0c      	ldr	r5, [pc, #48]	; (8002624 <__libc_init_array+0x38>)
 80025f2:	4c0d      	ldr	r4, [pc, #52]	; (8002628 <__libc_init_array+0x3c>)
 80025f4:	1b64      	subs	r4, r4, r5
 80025f6:	10a4      	asrs	r4, r4, #2
 80025f8:	42a6      	cmp	r6, r4
 80025fa:	d109      	bne.n	8002610 <__libc_init_array+0x24>
 80025fc:	2600      	movs	r6, #0
 80025fe:	f000 f821 	bl	8002644 <_init>
 8002602:	4d0a      	ldr	r5, [pc, #40]	; (800262c <__libc_init_array+0x40>)
 8002604:	4c0a      	ldr	r4, [pc, #40]	; (8002630 <__libc_init_array+0x44>)
 8002606:	1b64      	subs	r4, r4, r5
 8002608:	10a4      	asrs	r4, r4, #2
 800260a:	42a6      	cmp	r6, r4
 800260c:	d105      	bne.n	800261a <__libc_init_array+0x2e>
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	00b3      	lsls	r3, r6, #2
 8002612:	58eb      	ldr	r3, [r5, r3]
 8002614:	4798      	blx	r3
 8002616:	3601      	adds	r6, #1
 8002618:	e7ee      	b.n	80025f8 <__libc_init_array+0xc>
 800261a:	00b3      	lsls	r3, r6, #2
 800261c:	58eb      	ldr	r3, [r5, r3]
 800261e:	4798      	blx	r3
 8002620:	3601      	adds	r6, #1
 8002622:	e7f2      	b.n	800260a <__libc_init_array+0x1e>
 8002624:	080026e4 	.word	0x080026e4
 8002628:	080026e4 	.word	0x080026e4
 800262c:	080026e4 	.word	0x080026e4
 8002630:	080026e8 	.word	0x080026e8

08002634 <memset>:
 8002634:	0003      	movs	r3, r0
 8002636:	1882      	adds	r2, r0, r2
 8002638:	4293      	cmp	r3, r2
 800263a:	d100      	bne.n	800263e <memset+0xa>
 800263c:	4770      	bx	lr
 800263e:	7019      	strb	r1, [r3, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	e7f9      	b.n	8002638 <memset+0x4>

08002644 <_init>:
 8002644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800264a:	bc08      	pop	{r3}
 800264c:	469e      	mov	lr, r3
 800264e:	4770      	bx	lr

08002650 <_fini>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002656:	bc08      	pop	{r3}
 8002658:	469e      	mov	lr, r3
 800265a:	4770      	bx	lr
