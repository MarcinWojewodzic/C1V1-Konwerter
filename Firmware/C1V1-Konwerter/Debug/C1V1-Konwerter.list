
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000580c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  080058c4  080058c4  000158c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059f0  080059f0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080059f0  080059f0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059f0  080059f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080059f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000078  08005a70  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000e00  200003c0  08005a70  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffd0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004274  00000000  00000000  00040070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014d4b  00000000  00000000  000442e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00059030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001448  00000000  00000000  0005a270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000190b3  00000000  00000000  0005b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002290f  00000000  00000000  0007476b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097439  00000000  00000000  0009707a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e4b3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000031b8  00000000  00000000  0012e504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000078 	.word	0x20000078
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080058ac 	.word	0x080058ac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000007c 	.word	0x2000007c
 80000fc:	080058ac 	.word	0x080058ac

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_fsub>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	46ce      	mov	lr, r9
 80003f0:	4647      	mov	r7, r8
 80003f2:	0243      	lsls	r3, r0, #9
 80003f4:	0a5b      	lsrs	r3, r3, #9
 80003f6:	024e      	lsls	r6, r1, #9
 80003f8:	00da      	lsls	r2, r3, #3
 80003fa:	4694      	mov	ip, r2
 80003fc:	0a72      	lsrs	r2, r6, #9
 80003fe:	4691      	mov	r9, r2
 8000400:	0045      	lsls	r5, r0, #1
 8000402:	004a      	lsls	r2, r1, #1
 8000404:	b580      	push	{r7, lr}
 8000406:	0e2d      	lsrs	r5, r5, #24
 8000408:	001f      	movs	r7, r3
 800040a:	0fc4      	lsrs	r4, r0, #31
 800040c:	0e12      	lsrs	r2, r2, #24
 800040e:	0fc9      	lsrs	r1, r1, #31
 8000410:	09b6      	lsrs	r6, r6, #6
 8000412:	2aff      	cmp	r2, #255	; 0xff
 8000414:	d05b      	beq.n	80004ce <__aeabi_fsub+0xe2>
 8000416:	2001      	movs	r0, #1
 8000418:	4041      	eors	r1, r0
 800041a:	428c      	cmp	r4, r1
 800041c:	d039      	beq.n	8000492 <__aeabi_fsub+0xa6>
 800041e:	1aa8      	subs	r0, r5, r2
 8000420:	2800      	cmp	r0, #0
 8000422:	dd5a      	ble.n	80004da <__aeabi_fsub+0xee>
 8000424:	2a00      	cmp	r2, #0
 8000426:	d06a      	beq.n	80004fe <__aeabi_fsub+0x112>
 8000428:	2dff      	cmp	r5, #255	; 0xff
 800042a:	d100      	bne.n	800042e <__aeabi_fsub+0x42>
 800042c:	e0d9      	b.n	80005e2 <__aeabi_fsub+0x1f6>
 800042e:	2280      	movs	r2, #128	; 0x80
 8000430:	04d2      	lsls	r2, r2, #19
 8000432:	4316      	orrs	r6, r2
 8000434:	281b      	cmp	r0, #27
 8000436:	dc00      	bgt.n	800043a <__aeabi_fsub+0x4e>
 8000438:	e0e9      	b.n	800060e <__aeabi_fsub+0x222>
 800043a:	2001      	movs	r0, #1
 800043c:	4663      	mov	r3, ip
 800043e:	1a18      	subs	r0, r3, r0
 8000440:	0143      	lsls	r3, r0, #5
 8000442:	d400      	bmi.n	8000446 <__aeabi_fsub+0x5a>
 8000444:	e0b4      	b.n	80005b0 <__aeabi_fsub+0x1c4>
 8000446:	0180      	lsls	r0, r0, #6
 8000448:	0987      	lsrs	r7, r0, #6
 800044a:	0038      	movs	r0, r7
 800044c:	f001 fb7a 	bl	8001b44 <__clzsi2>
 8000450:	3805      	subs	r0, #5
 8000452:	4087      	lsls	r7, r0
 8000454:	4285      	cmp	r5, r0
 8000456:	dc00      	bgt.n	800045a <__aeabi_fsub+0x6e>
 8000458:	e0cc      	b.n	80005f4 <__aeabi_fsub+0x208>
 800045a:	1a2d      	subs	r5, r5, r0
 800045c:	48b5      	ldr	r0, [pc, #724]	; (8000734 <__aeabi_fsub+0x348>)
 800045e:	4038      	ands	r0, r7
 8000460:	0743      	lsls	r3, r0, #29
 8000462:	d004      	beq.n	800046e <__aeabi_fsub+0x82>
 8000464:	230f      	movs	r3, #15
 8000466:	4003      	ands	r3, r0
 8000468:	2b04      	cmp	r3, #4
 800046a:	d000      	beq.n	800046e <__aeabi_fsub+0x82>
 800046c:	3004      	adds	r0, #4
 800046e:	0143      	lsls	r3, r0, #5
 8000470:	d400      	bmi.n	8000474 <__aeabi_fsub+0x88>
 8000472:	e0a0      	b.n	80005b6 <__aeabi_fsub+0x1ca>
 8000474:	1c6a      	adds	r2, r5, #1
 8000476:	2dfe      	cmp	r5, #254	; 0xfe
 8000478:	d100      	bne.n	800047c <__aeabi_fsub+0x90>
 800047a:	e08d      	b.n	8000598 <__aeabi_fsub+0x1ac>
 800047c:	0180      	lsls	r0, r0, #6
 800047e:	0a47      	lsrs	r7, r0, #9
 8000480:	b2d2      	uxtb	r2, r2
 8000482:	05d0      	lsls	r0, r2, #23
 8000484:	4338      	orrs	r0, r7
 8000486:	07e4      	lsls	r4, r4, #31
 8000488:	4320      	orrs	r0, r4
 800048a:	bcc0      	pop	{r6, r7}
 800048c:	46b9      	mov	r9, r7
 800048e:	46b0      	mov	r8, r6
 8000490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000492:	1aa8      	subs	r0, r5, r2
 8000494:	4680      	mov	r8, r0
 8000496:	2800      	cmp	r0, #0
 8000498:	dd45      	ble.n	8000526 <__aeabi_fsub+0x13a>
 800049a:	2a00      	cmp	r2, #0
 800049c:	d070      	beq.n	8000580 <__aeabi_fsub+0x194>
 800049e:	2dff      	cmp	r5, #255	; 0xff
 80004a0:	d100      	bne.n	80004a4 <__aeabi_fsub+0xb8>
 80004a2:	e09e      	b.n	80005e2 <__aeabi_fsub+0x1f6>
 80004a4:	2380      	movs	r3, #128	; 0x80
 80004a6:	04db      	lsls	r3, r3, #19
 80004a8:	431e      	orrs	r6, r3
 80004aa:	4643      	mov	r3, r8
 80004ac:	2b1b      	cmp	r3, #27
 80004ae:	dc00      	bgt.n	80004b2 <__aeabi_fsub+0xc6>
 80004b0:	e0d2      	b.n	8000658 <__aeabi_fsub+0x26c>
 80004b2:	2001      	movs	r0, #1
 80004b4:	4460      	add	r0, ip
 80004b6:	0143      	lsls	r3, r0, #5
 80004b8:	d57a      	bpl.n	80005b0 <__aeabi_fsub+0x1c4>
 80004ba:	3501      	adds	r5, #1
 80004bc:	2dff      	cmp	r5, #255	; 0xff
 80004be:	d06b      	beq.n	8000598 <__aeabi_fsub+0x1ac>
 80004c0:	2301      	movs	r3, #1
 80004c2:	4a9d      	ldr	r2, [pc, #628]	; (8000738 <__aeabi_fsub+0x34c>)
 80004c4:	4003      	ands	r3, r0
 80004c6:	0840      	lsrs	r0, r0, #1
 80004c8:	4010      	ands	r0, r2
 80004ca:	4318      	orrs	r0, r3
 80004cc:	e7c8      	b.n	8000460 <__aeabi_fsub+0x74>
 80004ce:	2e00      	cmp	r6, #0
 80004d0:	d020      	beq.n	8000514 <__aeabi_fsub+0x128>
 80004d2:	428c      	cmp	r4, r1
 80004d4:	d023      	beq.n	800051e <__aeabi_fsub+0x132>
 80004d6:	0028      	movs	r0, r5
 80004d8:	38ff      	subs	r0, #255	; 0xff
 80004da:	2800      	cmp	r0, #0
 80004dc:	d039      	beq.n	8000552 <__aeabi_fsub+0x166>
 80004de:	1b57      	subs	r7, r2, r5
 80004e0:	2d00      	cmp	r5, #0
 80004e2:	d000      	beq.n	80004e6 <__aeabi_fsub+0xfa>
 80004e4:	e09d      	b.n	8000622 <__aeabi_fsub+0x236>
 80004e6:	4663      	mov	r3, ip
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_fsub+0x102>
 80004ec:	e0db      	b.n	80006a6 <__aeabi_fsub+0x2ba>
 80004ee:	1e7b      	subs	r3, r7, #1
 80004f0:	2f01      	cmp	r7, #1
 80004f2:	d100      	bne.n	80004f6 <__aeabi_fsub+0x10a>
 80004f4:	e10d      	b.n	8000712 <__aeabi_fsub+0x326>
 80004f6:	2fff      	cmp	r7, #255	; 0xff
 80004f8:	d071      	beq.n	80005de <__aeabi_fsub+0x1f2>
 80004fa:	001f      	movs	r7, r3
 80004fc:	e098      	b.n	8000630 <__aeabi_fsub+0x244>
 80004fe:	2e00      	cmp	r6, #0
 8000500:	d100      	bne.n	8000504 <__aeabi_fsub+0x118>
 8000502:	e0a7      	b.n	8000654 <__aeabi_fsub+0x268>
 8000504:	1e42      	subs	r2, r0, #1
 8000506:	2801      	cmp	r0, #1
 8000508:	d100      	bne.n	800050c <__aeabi_fsub+0x120>
 800050a:	e0e6      	b.n	80006da <__aeabi_fsub+0x2ee>
 800050c:	28ff      	cmp	r0, #255	; 0xff
 800050e:	d068      	beq.n	80005e2 <__aeabi_fsub+0x1f6>
 8000510:	0010      	movs	r0, r2
 8000512:	e78f      	b.n	8000434 <__aeabi_fsub+0x48>
 8000514:	2001      	movs	r0, #1
 8000516:	4041      	eors	r1, r0
 8000518:	42a1      	cmp	r1, r4
 800051a:	d000      	beq.n	800051e <__aeabi_fsub+0x132>
 800051c:	e77f      	b.n	800041e <__aeabi_fsub+0x32>
 800051e:	20ff      	movs	r0, #255	; 0xff
 8000520:	4240      	negs	r0, r0
 8000522:	4680      	mov	r8, r0
 8000524:	44a8      	add	r8, r5
 8000526:	4640      	mov	r0, r8
 8000528:	2800      	cmp	r0, #0
 800052a:	d038      	beq.n	800059e <__aeabi_fsub+0x1b2>
 800052c:	1b51      	subs	r1, r2, r5
 800052e:	2d00      	cmp	r5, #0
 8000530:	d100      	bne.n	8000534 <__aeabi_fsub+0x148>
 8000532:	e0ae      	b.n	8000692 <__aeabi_fsub+0x2a6>
 8000534:	2aff      	cmp	r2, #255	; 0xff
 8000536:	d100      	bne.n	800053a <__aeabi_fsub+0x14e>
 8000538:	e0df      	b.n	80006fa <__aeabi_fsub+0x30e>
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	4660      	mov	r0, ip
 800053e:	04db      	lsls	r3, r3, #19
 8000540:	4318      	orrs	r0, r3
 8000542:	4684      	mov	ip, r0
 8000544:	291b      	cmp	r1, #27
 8000546:	dc00      	bgt.n	800054a <__aeabi_fsub+0x15e>
 8000548:	e0d9      	b.n	80006fe <__aeabi_fsub+0x312>
 800054a:	2001      	movs	r0, #1
 800054c:	0015      	movs	r5, r2
 800054e:	1980      	adds	r0, r0, r6
 8000550:	e7b1      	b.n	80004b6 <__aeabi_fsub+0xca>
 8000552:	20fe      	movs	r0, #254	; 0xfe
 8000554:	1c6a      	adds	r2, r5, #1
 8000556:	4210      	tst	r0, r2
 8000558:	d171      	bne.n	800063e <__aeabi_fsub+0x252>
 800055a:	2d00      	cmp	r5, #0
 800055c:	d000      	beq.n	8000560 <__aeabi_fsub+0x174>
 800055e:	e0a6      	b.n	80006ae <__aeabi_fsub+0x2c2>
 8000560:	4663      	mov	r3, ip
 8000562:	2b00      	cmp	r3, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fsub+0x17c>
 8000566:	e0d9      	b.n	800071c <__aeabi_fsub+0x330>
 8000568:	2200      	movs	r2, #0
 800056a:	2e00      	cmp	r6, #0
 800056c:	d100      	bne.n	8000570 <__aeabi_fsub+0x184>
 800056e:	e788      	b.n	8000482 <__aeabi_fsub+0x96>
 8000570:	1b98      	subs	r0, r3, r6
 8000572:	0143      	lsls	r3, r0, #5
 8000574:	d400      	bmi.n	8000578 <__aeabi_fsub+0x18c>
 8000576:	e0e1      	b.n	800073c <__aeabi_fsub+0x350>
 8000578:	4663      	mov	r3, ip
 800057a:	000c      	movs	r4, r1
 800057c:	1af0      	subs	r0, r6, r3
 800057e:	e76f      	b.n	8000460 <__aeabi_fsub+0x74>
 8000580:	2e00      	cmp	r6, #0
 8000582:	d100      	bne.n	8000586 <__aeabi_fsub+0x19a>
 8000584:	e0b7      	b.n	80006f6 <__aeabi_fsub+0x30a>
 8000586:	0002      	movs	r2, r0
 8000588:	3a01      	subs	r2, #1
 800058a:	2801      	cmp	r0, #1
 800058c:	d100      	bne.n	8000590 <__aeabi_fsub+0x1a4>
 800058e:	e09c      	b.n	80006ca <__aeabi_fsub+0x2de>
 8000590:	28ff      	cmp	r0, #255	; 0xff
 8000592:	d026      	beq.n	80005e2 <__aeabi_fsub+0x1f6>
 8000594:	4690      	mov	r8, r2
 8000596:	e788      	b.n	80004aa <__aeabi_fsub+0xbe>
 8000598:	22ff      	movs	r2, #255	; 0xff
 800059a:	2700      	movs	r7, #0
 800059c:	e771      	b.n	8000482 <__aeabi_fsub+0x96>
 800059e:	20fe      	movs	r0, #254	; 0xfe
 80005a0:	1c6a      	adds	r2, r5, #1
 80005a2:	4210      	tst	r0, r2
 80005a4:	d064      	beq.n	8000670 <__aeabi_fsub+0x284>
 80005a6:	2aff      	cmp	r2, #255	; 0xff
 80005a8:	d0f6      	beq.n	8000598 <__aeabi_fsub+0x1ac>
 80005aa:	0015      	movs	r5, r2
 80005ac:	4466      	add	r6, ip
 80005ae:	0870      	lsrs	r0, r6, #1
 80005b0:	0743      	lsls	r3, r0, #29
 80005b2:	d000      	beq.n	80005b6 <__aeabi_fsub+0x1ca>
 80005b4:	e756      	b.n	8000464 <__aeabi_fsub+0x78>
 80005b6:	08c3      	lsrs	r3, r0, #3
 80005b8:	2dff      	cmp	r5, #255	; 0xff
 80005ba:	d012      	beq.n	80005e2 <__aeabi_fsub+0x1f6>
 80005bc:	025b      	lsls	r3, r3, #9
 80005be:	0a5f      	lsrs	r7, r3, #9
 80005c0:	b2ea      	uxtb	r2, r5
 80005c2:	e75e      	b.n	8000482 <__aeabi_fsub+0x96>
 80005c4:	4662      	mov	r2, ip
 80005c6:	2a00      	cmp	r2, #0
 80005c8:	d100      	bne.n	80005cc <__aeabi_fsub+0x1e0>
 80005ca:	e096      	b.n	80006fa <__aeabi_fsub+0x30e>
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d008      	beq.n	80005e2 <__aeabi_fsub+0x1f6>
 80005d0:	2280      	movs	r2, #128	; 0x80
 80005d2:	03d2      	lsls	r2, r2, #15
 80005d4:	4213      	tst	r3, r2
 80005d6:	d004      	beq.n	80005e2 <__aeabi_fsub+0x1f6>
 80005d8:	4648      	mov	r0, r9
 80005da:	4210      	tst	r0, r2
 80005dc:	d101      	bne.n	80005e2 <__aeabi_fsub+0x1f6>
 80005de:	000c      	movs	r4, r1
 80005e0:	464b      	mov	r3, r9
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0d8      	beq.n	8000598 <__aeabi_fsub+0x1ac>
 80005e6:	2780      	movs	r7, #128	; 0x80
 80005e8:	03ff      	lsls	r7, r7, #15
 80005ea:	431f      	orrs	r7, r3
 80005ec:	027f      	lsls	r7, r7, #9
 80005ee:	22ff      	movs	r2, #255	; 0xff
 80005f0:	0a7f      	lsrs	r7, r7, #9
 80005f2:	e746      	b.n	8000482 <__aeabi_fsub+0x96>
 80005f4:	2320      	movs	r3, #32
 80005f6:	003a      	movs	r2, r7
 80005f8:	1b45      	subs	r5, r0, r5
 80005fa:	0038      	movs	r0, r7
 80005fc:	3501      	adds	r5, #1
 80005fe:	40ea      	lsrs	r2, r5
 8000600:	1b5d      	subs	r5, r3, r5
 8000602:	40a8      	lsls	r0, r5
 8000604:	1e43      	subs	r3, r0, #1
 8000606:	4198      	sbcs	r0, r3
 8000608:	2500      	movs	r5, #0
 800060a:	4310      	orrs	r0, r2
 800060c:	e728      	b.n	8000460 <__aeabi_fsub+0x74>
 800060e:	2320      	movs	r3, #32
 8000610:	1a1b      	subs	r3, r3, r0
 8000612:	0032      	movs	r2, r6
 8000614:	409e      	lsls	r6, r3
 8000616:	40c2      	lsrs	r2, r0
 8000618:	0030      	movs	r0, r6
 800061a:	1e43      	subs	r3, r0, #1
 800061c:	4198      	sbcs	r0, r3
 800061e:	4310      	orrs	r0, r2
 8000620:	e70c      	b.n	800043c <__aeabi_fsub+0x50>
 8000622:	2aff      	cmp	r2, #255	; 0xff
 8000624:	d0db      	beq.n	80005de <__aeabi_fsub+0x1f2>
 8000626:	2380      	movs	r3, #128	; 0x80
 8000628:	4660      	mov	r0, ip
 800062a:	04db      	lsls	r3, r3, #19
 800062c:	4318      	orrs	r0, r3
 800062e:	4684      	mov	ip, r0
 8000630:	2f1b      	cmp	r7, #27
 8000632:	dd56      	ble.n	80006e2 <__aeabi_fsub+0x2f6>
 8000634:	2001      	movs	r0, #1
 8000636:	000c      	movs	r4, r1
 8000638:	0015      	movs	r5, r2
 800063a:	1a30      	subs	r0, r6, r0
 800063c:	e700      	b.n	8000440 <__aeabi_fsub+0x54>
 800063e:	4663      	mov	r3, ip
 8000640:	1b9f      	subs	r7, r3, r6
 8000642:	017b      	lsls	r3, r7, #5
 8000644:	d43d      	bmi.n	80006c2 <__aeabi_fsub+0x2d6>
 8000646:	2f00      	cmp	r7, #0
 8000648:	d000      	beq.n	800064c <__aeabi_fsub+0x260>
 800064a:	e6fe      	b.n	800044a <__aeabi_fsub+0x5e>
 800064c:	2400      	movs	r4, #0
 800064e:	2200      	movs	r2, #0
 8000650:	2700      	movs	r7, #0
 8000652:	e716      	b.n	8000482 <__aeabi_fsub+0x96>
 8000654:	0005      	movs	r5, r0
 8000656:	e7af      	b.n	80005b8 <__aeabi_fsub+0x1cc>
 8000658:	0032      	movs	r2, r6
 800065a:	4643      	mov	r3, r8
 800065c:	4641      	mov	r1, r8
 800065e:	40da      	lsrs	r2, r3
 8000660:	2320      	movs	r3, #32
 8000662:	1a5b      	subs	r3, r3, r1
 8000664:	409e      	lsls	r6, r3
 8000666:	0030      	movs	r0, r6
 8000668:	1e43      	subs	r3, r0, #1
 800066a:	4198      	sbcs	r0, r3
 800066c:	4310      	orrs	r0, r2
 800066e:	e721      	b.n	80004b4 <__aeabi_fsub+0xc8>
 8000670:	2d00      	cmp	r5, #0
 8000672:	d1a7      	bne.n	80005c4 <__aeabi_fsub+0x1d8>
 8000674:	4663      	mov	r3, ip
 8000676:	2b00      	cmp	r3, #0
 8000678:	d059      	beq.n	800072e <__aeabi_fsub+0x342>
 800067a:	2200      	movs	r2, #0
 800067c:	2e00      	cmp	r6, #0
 800067e:	d100      	bne.n	8000682 <__aeabi_fsub+0x296>
 8000680:	e6ff      	b.n	8000482 <__aeabi_fsub+0x96>
 8000682:	0030      	movs	r0, r6
 8000684:	4460      	add	r0, ip
 8000686:	0143      	lsls	r3, r0, #5
 8000688:	d592      	bpl.n	80005b0 <__aeabi_fsub+0x1c4>
 800068a:	4b2a      	ldr	r3, [pc, #168]	; (8000734 <__aeabi_fsub+0x348>)
 800068c:	3501      	adds	r5, #1
 800068e:	4018      	ands	r0, r3
 8000690:	e78e      	b.n	80005b0 <__aeabi_fsub+0x1c4>
 8000692:	4663      	mov	r3, ip
 8000694:	2b00      	cmp	r3, #0
 8000696:	d047      	beq.n	8000728 <__aeabi_fsub+0x33c>
 8000698:	1e4b      	subs	r3, r1, #1
 800069a:	2901      	cmp	r1, #1
 800069c:	d015      	beq.n	80006ca <__aeabi_fsub+0x2de>
 800069e:	29ff      	cmp	r1, #255	; 0xff
 80006a0:	d02b      	beq.n	80006fa <__aeabi_fsub+0x30e>
 80006a2:	0019      	movs	r1, r3
 80006a4:	e74e      	b.n	8000544 <__aeabi_fsub+0x158>
 80006a6:	000c      	movs	r4, r1
 80006a8:	464b      	mov	r3, r9
 80006aa:	003d      	movs	r5, r7
 80006ac:	e784      	b.n	80005b8 <__aeabi_fsub+0x1cc>
 80006ae:	4662      	mov	r2, ip
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d18b      	bne.n	80005cc <__aeabi_fsub+0x1e0>
 80006b4:	2e00      	cmp	r6, #0
 80006b6:	d192      	bne.n	80005de <__aeabi_fsub+0x1f2>
 80006b8:	2780      	movs	r7, #128	; 0x80
 80006ba:	2400      	movs	r4, #0
 80006bc:	22ff      	movs	r2, #255	; 0xff
 80006be:	03ff      	lsls	r7, r7, #15
 80006c0:	e6df      	b.n	8000482 <__aeabi_fsub+0x96>
 80006c2:	4663      	mov	r3, ip
 80006c4:	000c      	movs	r4, r1
 80006c6:	1af7      	subs	r7, r6, r3
 80006c8:	e6bf      	b.n	800044a <__aeabi_fsub+0x5e>
 80006ca:	0030      	movs	r0, r6
 80006cc:	4460      	add	r0, ip
 80006ce:	2501      	movs	r5, #1
 80006d0:	0143      	lsls	r3, r0, #5
 80006d2:	d400      	bmi.n	80006d6 <__aeabi_fsub+0x2ea>
 80006d4:	e76c      	b.n	80005b0 <__aeabi_fsub+0x1c4>
 80006d6:	2502      	movs	r5, #2
 80006d8:	e6f2      	b.n	80004c0 <__aeabi_fsub+0xd4>
 80006da:	4663      	mov	r3, ip
 80006dc:	2501      	movs	r5, #1
 80006de:	1b98      	subs	r0, r3, r6
 80006e0:	e6ae      	b.n	8000440 <__aeabi_fsub+0x54>
 80006e2:	2320      	movs	r3, #32
 80006e4:	4664      	mov	r4, ip
 80006e6:	4660      	mov	r0, ip
 80006e8:	40fc      	lsrs	r4, r7
 80006ea:	1bdf      	subs	r7, r3, r7
 80006ec:	40b8      	lsls	r0, r7
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4320      	orrs	r0, r4
 80006f4:	e79f      	b.n	8000636 <__aeabi_fsub+0x24a>
 80006f6:	0005      	movs	r5, r0
 80006f8:	e75e      	b.n	80005b8 <__aeabi_fsub+0x1cc>
 80006fa:	464b      	mov	r3, r9
 80006fc:	e771      	b.n	80005e2 <__aeabi_fsub+0x1f6>
 80006fe:	2320      	movs	r3, #32
 8000700:	4665      	mov	r5, ip
 8000702:	4660      	mov	r0, ip
 8000704:	40cd      	lsrs	r5, r1
 8000706:	1a59      	subs	r1, r3, r1
 8000708:	4088      	lsls	r0, r1
 800070a:	1e43      	subs	r3, r0, #1
 800070c:	4198      	sbcs	r0, r3
 800070e:	4328      	orrs	r0, r5
 8000710:	e71c      	b.n	800054c <__aeabi_fsub+0x160>
 8000712:	4663      	mov	r3, ip
 8000714:	000c      	movs	r4, r1
 8000716:	2501      	movs	r5, #1
 8000718:	1af0      	subs	r0, r6, r3
 800071a:	e691      	b.n	8000440 <__aeabi_fsub+0x54>
 800071c:	2e00      	cmp	r6, #0
 800071e:	d095      	beq.n	800064c <__aeabi_fsub+0x260>
 8000720:	000c      	movs	r4, r1
 8000722:	464f      	mov	r7, r9
 8000724:	2200      	movs	r2, #0
 8000726:	e6ac      	b.n	8000482 <__aeabi_fsub+0x96>
 8000728:	464b      	mov	r3, r9
 800072a:	000d      	movs	r5, r1
 800072c:	e744      	b.n	80005b8 <__aeabi_fsub+0x1cc>
 800072e:	464f      	mov	r7, r9
 8000730:	2200      	movs	r2, #0
 8000732:	e6a6      	b.n	8000482 <__aeabi_fsub+0x96>
 8000734:	fbffffff 	.word	0xfbffffff
 8000738:	7dffffff 	.word	0x7dffffff
 800073c:	2800      	cmp	r0, #0
 800073e:	d000      	beq.n	8000742 <__aeabi_fsub+0x356>
 8000740:	e736      	b.n	80005b0 <__aeabi_fsub+0x1c4>
 8000742:	2400      	movs	r4, #0
 8000744:	2700      	movs	r7, #0
 8000746:	e69c      	b.n	8000482 <__aeabi_fsub+0x96>

08000748 <__aeabi_i2f>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	2800      	cmp	r0, #0
 800074c:	d013      	beq.n	8000776 <__aeabi_i2f+0x2e>
 800074e:	17c3      	asrs	r3, r0, #31
 8000750:	18c6      	adds	r6, r0, r3
 8000752:	405e      	eors	r6, r3
 8000754:	0fc4      	lsrs	r4, r0, #31
 8000756:	0030      	movs	r0, r6
 8000758:	f001 f9f4 	bl	8001b44 <__clzsi2>
 800075c:	239e      	movs	r3, #158	; 0x9e
 800075e:	0005      	movs	r5, r0
 8000760:	1a1b      	subs	r3, r3, r0
 8000762:	2b96      	cmp	r3, #150	; 0x96
 8000764:	dc0f      	bgt.n	8000786 <__aeabi_i2f+0x3e>
 8000766:	2808      	cmp	r0, #8
 8000768:	dd01      	ble.n	800076e <__aeabi_i2f+0x26>
 800076a:	3d08      	subs	r5, #8
 800076c:	40ae      	lsls	r6, r5
 800076e:	0276      	lsls	r6, r6, #9
 8000770:	0a76      	lsrs	r6, r6, #9
 8000772:	b2d8      	uxtb	r0, r3
 8000774:	e002      	b.n	800077c <__aeabi_i2f+0x34>
 8000776:	2400      	movs	r4, #0
 8000778:	2000      	movs	r0, #0
 800077a:	2600      	movs	r6, #0
 800077c:	05c0      	lsls	r0, r0, #23
 800077e:	4330      	orrs	r0, r6
 8000780:	07e4      	lsls	r4, r4, #31
 8000782:	4320      	orrs	r0, r4
 8000784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000786:	2b99      	cmp	r3, #153	; 0x99
 8000788:	dd0c      	ble.n	80007a4 <__aeabi_i2f+0x5c>
 800078a:	2205      	movs	r2, #5
 800078c:	0031      	movs	r1, r6
 800078e:	1a12      	subs	r2, r2, r0
 8000790:	40d1      	lsrs	r1, r2
 8000792:	000a      	movs	r2, r1
 8000794:	0001      	movs	r1, r0
 8000796:	0030      	movs	r0, r6
 8000798:	311b      	adds	r1, #27
 800079a:	4088      	lsls	r0, r1
 800079c:	1e41      	subs	r1, r0, #1
 800079e:	4188      	sbcs	r0, r1
 80007a0:	4302      	orrs	r2, r0
 80007a2:	0016      	movs	r6, r2
 80007a4:	2d05      	cmp	r5, #5
 80007a6:	dc12      	bgt.n	80007ce <__aeabi_i2f+0x86>
 80007a8:	0031      	movs	r1, r6
 80007aa:	4f0d      	ldr	r7, [pc, #52]	; (80007e0 <__aeabi_i2f+0x98>)
 80007ac:	4039      	ands	r1, r7
 80007ae:	0772      	lsls	r2, r6, #29
 80007b0:	d009      	beq.n	80007c6 <__aeabi_i2f+0x7e>
 80007b2:	200f      	movs	r0, #15
 80007b4:	4030      	ands	r0, r6
 80007b6:	2804      	cmp	r0, #4
 80007b8:	d005      	beq.n	80007c6 <__aeabi_i2f+0x7e>
 80007ba:	3104      	adds	r1, #4
 80007bc:	014a      	lsls	r2, r1, #5
 80007be:	d502      	bpl.n	80007c6 <__aeabi_i2f+0x7e>
 80007c0:	239f      	movs	r3, #159	; 0x9f
 80007c2:	4039      	ands	r1, r7
 80007c4:	1b5b      	subs	r3, r3, r5
 80007c6:	0189      	lsls	r1, r1, #6
 80007c8:	0a4e      	lsrs	r6, r1, #9
 80007ca:	b2d8      	uxtb	r0, r3
 80007cc:	e7d6      	b.n	800077c <__aeabi_i2f+0x34>
 80007ce:	1f6a      	subs	r2, r5, #5
 80007d0:	4096      	lsls	r6, r2
 80007d2:	0031      	movs	r1, r6
 80007d4:	4f02      	ldr	r7, [pc, #8]	; (80007e0 <__aeabi_i2f+0x98>)
 80007d6:	4039      	ands	r1, r7
 80007d8:	0772      	lsls	r2, r6, #29
 80007da:	d0f4      	beq.n	80007c6 <__aeabi_i2f+0x7e>
 80007dc:	e7e9      	b.n	80007b2 <__aeabi_i2f+0x6a>
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	fbffffff 	.word	0xfbffffff

080007e4 <__aeabi_ui2f>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	1e05      	subs	r5, r0, #0
 80007e8:	d00e      	beq.n	8000808 <__aeabi_ui2f+0x24>
 80007ea:	f001 f9ab 	bl	8001b44 <__clzsi2>
 80007ee:	239e      	movs	r3, #158	; 0x9e
 80007f0:	0004      	movs	r4, r0
 80007f2:	1a1b      	subs	r3, r3, r0
 80007f4:	2b96      	cmp	r3, #150	; 0x96
 80007f6:	dc0c      	bgt.n	8000812 <__aeabi_ui2f+0x2e>
 80007f8:	2808      	cmp	r0, #8
 80007fa:	dd01      	ble.n	8000800 <__aeabi_ui2f+0x1c>
 80007fc:	3c08      	subs	r4, #8
 80007fe:	40a5      	lsls	r5, r4
 8000800:	026d      	lsls	r5, r5, #9
 8000802:	0a6d      	lsrs	r5, r5, #9
 8000804:	b2d8      	uxtb	r0, r3
 8000806:	e001      	b.n	800080c <__aeabi_ui2f+0x28>
 8000808:	2000      	movs	r0, #0
 800080a:	2500      	movs	r5, #0
 800080c:	05c0      	lsls	r0, r0, #23
 800080e:	4328      	orrs	r0, r5
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	2b99      	cmp	r3, #153	; 0x99
 8000814:	dd09      	ble.n	800082a <__aeabi_ui2f+0x46>
 8000816:	0002      	movs	r2, r0
 8000818:	0029      	movs	r1, r5
 800081a:	321b      	adds	r2, #27
 800081c:	4091      	lsls	r1, r2
 800081e:	1e4a      	subs	r2, r1, #1
 8000820:	4191      	sbcs	r1, r2
 8000822:	2205      	movs	r2, #5
 8000824:	1a12      	subs	r2, r2, r0
 8000826:	40d5      	lsrs	r5, r2
 8000828:	430d      	orrs	r5, r1
 800082a:	2c05      	cmp	r4, #5
 800082c:	dc12      	bgt.n	8000854 <__aeabi_ui2f+0x70>
 800082e:	0029      	movs	r1, r5
 8000830:	4e0c      	ldr	r6, [pc, #48]	; (8000864 <__aeabi_ui2f+0x80>)
 8000832:	4031      	ands	r1, r6
 8000834:	076a      	lsls	r2, r5, #29
 8000836:	d009      	beq.n	800084c <__aeabi_ui2f+0x68>
 8000838:	200f      	movs	r0, #15
 800083a:	4028      	ands	r0, r5
 800083c:	2804      	cmp	r0, #4
 800083e:	d005      	beq.n	800084c <__aeabi_ui2f+0x68>
 8000840:	3104      	adds	r1, #4
 8000842:	014a      	lsls	r2, r1, #5
 8000844:	d502      	bpl.n	800084c <__aeabi_ui2f+0x68>
 8000846:	239f      	movs	r3, #159	; 0x9f
 8000848:	4031      	ands	r1, r6
 800084a:	1b1b      	subs	r3, r3, r4
 800084c:	0189      	lsls	r1, r1, #6
 800084e:	0a4d      	lsrs	r5, r1, #9
 8000850:	b2d8      	uxtb	r0, r3
 8000852:	e7db      	b.n	800080c <__aeabi_ui2f+0x28>
 8000854:	1f62      	subs	r2, r4, #5
 8000856:	4095      	lsls	r5, r2
 8000858:	0029      	movs	r1, r5
 800085a:	4e02      	ldr	r6, [pc, #8]	; (8000864 <__aeabi_ui2f+0x80>)
 800085c:	4031      	ands	r1, r6
 800085e:	076a      	lsls	r2, r5, #29
 8000860:	d0f4      	beq.n	800084c <__aeabi_ui2f+0x68>
 8000862:	e7e9      	b.n	8000838 <__aeabi_ui2f+0x54>
 8000864:	fbffffff 	.word	0xfbffffff

08000868 <__aeabi_dadd>:
 8000868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086a:	464f      	mov	r7, r9
 800086c:	4646      	mov	r6, r8
 800086e:	46d6      	mov	lr, sl
 8000870:	000d      	movs	r5, r1
 8000872:	0004      	movs	r4, r0
 8000874:	b5c0      	push	{r6, r7, lr}
 8000876:	001f      	movs	r7, r3
 8000878:	0011      	movs	r1, r2
 800087a:	0328      	lsls	r0, r5, #12
 800087c:	0f62      	lsrs	r2, r4, #29
 800087e:	0a40      	lsrs	r0, r0, #9
 8000880:	4310      	orrs	r0, r2
 8000882:	007a      	lsls	r2, r7, #1
 8000884:	0d52      	lsrs	r2, r2, #21
 8000886:	00e3      	lsls	r3, r4, #3
 8000888:	033c      	lsls	r4, r7, #12
 800088a:	4691      	mov	r9, r2
 800088c:	0a64      	lsrs	r4, r4, #9
 800088e:	0ffa      	lsrs	r2, r7, #31
 8000890:	0f4f      	lsrs	r7, r1, #29
 8000892:	006e      	lsls	r6, r5, #1
 8000894:	4327      	orrs	r7, r4
 8000896:	4692      	mov	sl, r2
 8000898:	46b8      	mov	r8, r7
 800089a:	0d76      	lsrs	r6, r6, #21
 800089c:	0fed      	lsrs	r5, r5, #31
 800089e:	00c9      	lsls	r1, r1, #3
 80008a0:	4295      	cmp	r5, r2
 80008a2:	d100      	bne.n	80008a6 <__aeabi_dadd+0x3e>
 80008a4:	e099      	b.n	80009da <__aeabi_dadd+0x172>
 80008a6:	464c      	mov	r4, r9
 80008a8:	1b34      	subs	r4, r6, r4
 80008aa:	46a4      	mov	ip, r4
 80008ac:	2c00      	cmp	r4, #0
 80008ae:	dc00      	bgt.n	80008b2 <__aeabi_dadd+0x4a>
 80008b0:	e07c      	b.n	80009ac <__aeabi_dadd+0x144>
 80008b2:	464a      	mov	r2, r9
 80008b4:	2a00      	cmp	r2, #0
 80008b6:	d100      	bne.n	80008ba <__aeabi_dadd+0x52>
 80008b8:	e0b8      	b.n	8000a2c <__aeabi_dadd+0x1c4>
 80008ba:	4ac5      	ldr	r2, [pc, #788]	; (8000bd0 <__aeabi_dadd+0x368>)
 80008bc:	4296      	cmp	r6, r2
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x5a>
 80008c0:	e11c      	b.n	8000afc <__aeabi_dadd+0x294>
 80008c2:	2280      	movs	r2, #128	; 0x80
 80008c4:	003c      	movs	r4, r7
 80008c6:	0412      	lsls	r2, r2, #16
 80008c8:	4314      	orrs	r4, r2
 80008ca:	46a0      	mov	r8, r4
 80008cc:	4662      	mov	r2, ip
 80008ce:	2a38      	cmp	r2, #56	; 0x38
 80008d0:	dd00      	ble.n	80008d4 <__aeabi_dadd+0x6c>
 80008d2:	e161      	b.n	8000b98 <__aeabi_dadd+0x330>
 80008d4:	2a1f      	cmp	r2, #31
 80008d6:	dd00      	ble.n	80008da <__aeabi_dadd+0x72>
 80008d8:	e1cc      	b.n	8000c74 <__aeabi_dadd+0x40c>
 80008da:	4664      	mov	r4, ip
 80008dc:	2220      	movs	r2, #32
 80008de:	1b12      	subs	r2, r2, r4
 80008e0:	4644      	mov	r4, r8
 80008e2:	4094      	lsls	r4, r2
 80008e4:	000f      	movs	r7, r1
 80008e6:	46a1      	mov	r9, r4
 80008e8:	4664      	mov	r4, ip
 80008ea:	4091      	lsls	r1, r2
 80008ec:	40e7      	lsrs	r7, r4
 80008ee:	464c      	mov	r4, r9
 80008f0:	1e4a      	subs	r2, r1, #1
 80008f2:	4191      	sbcs	r1, r2
 80008f4:	433c      	orrs	r4, r7
 80008f6:	4642      	mov	r2, r8
 80008f8:	4321      	orrs	r1, r4
 80008fa:	4664      	mov	r4, ip
 80008fc:	40e2      	lsrs	r2, r4
 80008fe:	1a80      	subs	r0, r0, r2
 8000900:	1a5c      	subs	r4, r3, r1
 8000902:	42a3      	cmp	r3, r4
 8000904:	419b      	sbcs	r3, r3
 8000906:	425f      	negs	r7, r3
 8000908:	1bc7      	subs	r7, r0, r7
 800090a:	023b      	lsls	r3, r7, #8
 800090c:	d400      	bmi.n	8000910 <__aeabi_dadd+0xa8>
 800090e:	e0d0      	b.n	8000ab2 <__aeabi_dadd+0x24a>
 8000910:	027f      	lsls	r7, r7, #9
 8000912:	0a7f      	lsrs	r7, r7, #9
 8000914:	2f00      	cmp	r7, #0
 8000916:	d100      	bne.n	800091a <__aeabi_dadd+0xb2>
 8000918:	e0ff      	b.n	8000b1a <__aeabi_dadd+0x2b2>
 800091a:	0038      	movs	r0, r7
 800091c:	f001 f912 	bl	8001b44 <__clzsi2>
 8000920:	0001      	movs	r1, r0
 8000922:	3908      	subs	r1, #8
 8000924:	2320      	movs	r3, #32
 8000926:	0022      	movs	r2, r4
 8000928:	1a5b      	subs	r3, r3, r1
 800092a:	408f      	lsls	r7, r1
 800092c:	40da      	lsrs	r2, r3
 800092e:	408c      	lsls	r4, r1
 8000930:	4317      	orrs	r7, r2
 8000932:	42b1      	cmp	r1, r6
 8000934:	da00      	bge.n	8000938 <__aeabi_dadd+0xd0>
 8000936:	e0ff      	b.n	8000b38 <__aeabi_dadd+0x2d0>
 8000938:	1b89      	subs	r1, r1, r6
 800093a:	1c4b      	adds	r3, r1, #1
 800093c:	2b1f      	cmp	r3, #31
 800093e:	dd00      	ble.n	8000942 <__aeabi_dadd+0xda>
 8000940:	e0a8      	b.n	8000a94 <__aeabi_dadd+0x22c>
 8000942:	2220      	movs	r2, #32
 8000944:	0039      	movs	r1, r7
 8000946:	1ad2      	subs	r2, r2, r3
 8000948:	0020      	movs	r0, r4
 800094a:	4094      	lsls	r4, r2
 800094c:	4091      	lsls	r1, r2
 800094e:	40d8      	lsrs	r0, r3
 8000950:	1e62      	subs	r2, r4, #1
 8000952:	4194      	sbcs	r4, r2
 8000954:	40df      	lsrs	r7, r3
 8000956:	2600      	movs	r6, #0
 8000958:	4301      	orrs	r1, r0
 800095a:	430c      	orrs	r4, r1
 800095c:	0763      	lsls	r3, r4, #29
 800095e:	d009      	beq.n	8000974 <__aeabi_dadd+0x10c>
 8000960:	230f      	movs	r3, #15
 8000962:	4023      	ands	r3, r4
 8000964:	2b04      	cmp	r3, #4
 8000966:	d005      	beq.n	8000974 <__aeabi_dadd+0x10c>
 8000968:	1d23      	adds	r3, r4, #4
 800096a:	42a3      	cmp	r3, r4
 800096c:	41a4      	sbcs	r4, r4
 800096e:	4264      	negs	r4, r4
 8000970:	193f      	adds	r7, r7, r4
 8000972:	001c      	movs	r4, r3
 8000974:	023b      	lsls	r3, r7, #8
 8000976:	d400      	bmi.n	800097a <__aeabi_dadd+0x112>
 8000978:	e09e      	b.n	8000ab8 <__aeabi_dadd+0x250>
 800097a:	4b95      	ldr	r3, [pc, #596]	; (8000bd0 <__aeabi_dadd+0x368>)
 800097c:	3601      	adds	r6, #1
 800097e:	429e      	cmp	r6, r3
 8000980:	d100      	bne.n	8000984 <__aeabi_dadd+0x11c>
 8000982:	e0b7      	b.n	8000af4 <__aeabi_dadd+0x28c>
 8000984:	4a93      	ldr	r2, [pc, #588]	; (8000bd4 <__aeabi_dadd+0x36c>)
 8000986:	08e4      	lsrs	r4, r4, #3
 8000988:	4017      	ands	r7, r2
 800098a:	077b      	lsls	r3, r7, #29
 800098c:	0571      	lsls	r1, r6, #21
 800098e:	027f      	lsls	r7, r7, #9
 8000990:	4323      	orrs	r3, r4
 8000992:	0b3f      	lsrs	r7, r7, #12
 8000994:	0d4a      	lsrs	r2, r1, #21
 8000996:	0512      	lsls	r2, r2, #20
 8000998:	433a      	orrs	r2, r7
 800099a:	07ed      	lsls	r5, r5, #31
 800099c:	432a      	orrs	r2, r5
 800099e:	0018      	movs	r0, r3
 80009a0:	0011      	movs	r1, r2
 80009a2:	bce0      	pop	{r5, r6, r7}
 80009a4:	46ba      	mov	sl, r7
 80009a6:	46b1      	mov	r9, r6
 80009a8:	46a8      	mov	r8, r5
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d04b      	beq.n	8000a48 <__aeabi_dadd+0x1e0>
 80009b0:	464c      	mov	r4, r9
 80009b2:	1ba4      	subs	r4, r4, r6
 80009b4:	46a4      	mov	ip, r4
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	d000      	beq.n	80009bc <__aeabi_dadd+0x154>
 80009ba:	e123      	b.n	8000c04 <__aeabi_dadd+0x39c>
 80009bc:	0004      	movs	r4, r0
 80009be:	431c      	orrs	r4, r3
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x15c>
 80009c2:	e1af      	b.n	8000d24 <__aeabi_dadd+0x4bc>
 80009c4:	4662      	mov	r2, ip
 80009c6:	1e54      	subs	r4, r2, #1
 80009c8:	2a01      	cmp	r2, #1
 80009ca:	d100      	bne.n	80009ce <__aeabi_dadd+0x166>
 80009cc:	e215      	b.n	8000dfa <__aeabi_dadd+0x592>
 80009ce:	4d80      	ldr	r5, [pc, #512]	; (8000bd0 <__aeabi_dadd+0x368>)
 80009d0:	45ac      	cmp	ip, r5
 80009d2:	d100      	bne.n	80009d6 <__aeabi_dadd+0x16e>
 80009d4:	e1c8      	b.n	8000d68 <__aeabi_dadd+0x500>
 80009d6:	46a4      	mov	ip, r4
 80009d8:	e11b      	b.n	8000c12 <__aeabi_dadd+0x3aa>
 80009da:	464a      	mov	r2, r9
 80009dc:	1ab2      	subs	r2, r6, r2
 80009de:	4694      	mov	ip, r2
 80009e0:	2a00      	cmp	r2, #0
 80009e2:	dc00      	bgt.n	80009e6 <__aeabi_dadd+0x17e>
 80009e4:	e0ac      	b.n	8000b40 <__aeabi_dadd+0x2d8>
 80009e6:	464a      	mov	r2, r9
 80009e8:	2a00      	cmp	r2, #0
 80009ea:	d043      	beq.n	8000a74 <__aeabi_dadd+0x20c>
 80009ec:	4a78      	ldr	r2, [pc, #480]	; (8000bd0 <__aeabi_dadd+0x368>)
 80009ee:	4296      	cmp	r6, r2
 80009f0:	d100      	bne.n	80009f4 <__aeabi_dadd+0x18c>
 80009f2:	e1af      	b.n	8000d54 <__aeabi_dadd+0x4ec>
 80009f4:	2280      	movs	r2, #128	; 0x80
 80009f6:	003c      	movs	r4, r7
 80009f8:	0412      	lsls	r2, r2, #16
 80009fa:	4314      	orrs	r4, r2
 80009fc:	46a0      	mov	r8, r4
 80009fe:	4662      	mov	r2, ip
 8000a00:	2a38      	cmp	r2, #56	; 0x38
 8000a02:	dc67      	bgt.n	8000ad4 <__aeabi_dadd+0x26c>
 8000a04:	2a1f      	cmp	r2, #31
 8000a06:	dc00      	bgt.n	8000a0a <__aeabi_dadd+0x1a2>
 8000a08:	e15f      	b.n	8000cca <__aeabi_dadd+0x462>
 8000a0a:	4647      	mov	r7, r8
 8000a0c:	3a20      	subs	r2, #32
 8000a0e:	40d7      	lsrs	r7, r2
 8000a10:	4662      	mov	r2, ip
 8000a12:	2a20      	cmp	r2, #32
 8000a14:	d005      	beq.n	8000a22 <__aeabi_dadd+0x1ba>
 8000a16:	4664      	mov	r4, ip
 8000a18:	2240      	movs	r2, #64	; 0x40
 8000a1a:	1b12      	subs	r2, r2, r4
 8000a1c:	4644      	mov	r4, r8
 8000a1e:	4094      	lsls	r4, r2
 8000a20:	4321      	orrs	r1, r4
 8000a22:	1e4a      	subs	r2, r1, #1
 8000a24:	4191      	sbcs	r1, r2
 8000a26:	000c      	movs	r4, r1
 8000a28:	433c      	orrs	r4, r7
 8000a2a:	e057      	b.n	8000adc <__aeabi_dadd+0x274>
 8000a2c:	003a      	movs	r2, r7
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	d100      	bne.n	8000a34 <__aeabi_dadd+0x1cc>
 8000a32:	e105      	b.n	8000c40 <__aeabi_dadd+0x3d8>
 8000a34:	0022      	movs	r2, r4
 8000a36:	3a01      	subs	r2, #1
 8000a38:	2c01      	cmp	r4, #1
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_dadd+0x1d6>
 8000a3c:	e182      	b.n	8000d44 <__aeabi_dadd+0x4dc>
 8000a3e:	4c64      	ldr	r4, [pc, #400]	; (8000bd0 <__aeabi_dadd+0x368>)
 8000a40:	45a4      	cmp	ip, r4
 8000a42:	d05b      	beq.n	8000afc <__aeabi_dadd+0x294>
 8000a44:	4694      	mov	ip, r2
 8000a46:	e741      	b.n	80008cc <__aeabi_dadd+0x64>
 8000a48:	4c63      	ldr	r4, [pc, #396]	; (8000bd8 <__aeabi_dadd+0x370>)
 8000a4a:	1c77      	adds	r7, r6, #1
 8000a4c:	4227      	tst	r7, r4
 8000a4e:	d000      	beq.n	8000a52 <__aeabi_dadd+0x1ea>
 8000a50:	e0c4      	b.n	8000bdc <__aeabi_dadd+0x374>
 8000a52:	0004      	movs	r4, r0
 8000a54:	431c      	orrs	r4, r3
 8000a56:	2e00      	cmp	r6, #0
 8000a58:	d000      	beq.n	8000a5c <__aeabi_dadd+0x1f4>
 8000a5a:	e169      	b.n	8000d30 <__aeabi_dadd+0x4c8>
 8000a5c:	2c00      	cmp	r4, #0
 8000a5e:	d100      	bne.n	8000a62 <__aeabi_dadd+0x1fa>
 8000a60:	e1bf      	b.n	8000de2 <__aeabi_dadd+0x57a>
 8000a62:	4644      	mov	r4, r8
 8000a64:	430c      	orrs	r4, r1
 8000a66:	d000      	beq.n	8000a6a <__aeabi_dadd+0x202>
 8000a68:	e1d0      	b.n	8000e0c <__aeabi_dadd+0x5a4>
 8000a6a:	0742      	lsls	r2, r0, #29
 8000a6c:	08db      	lsrs	r3, r3, #3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	08c0      	lsrs	r0, r0, #3
 8000a72:	e029      	b.n	8000ac8 <__aeabi_dadd+0x260>
 8000a74:	003a      	movs	r2, r7
 8000a76:	430a      	orrs	r2, r1
 8000a78:	d100      	bne.n	8000a7c <__aeabi_dadd+0x214>
 8000a7a:	e170      	b.n	8000d5e <__aeabi_dadd+0x4f6>
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	4664      	mov	r4, ip
 8000a80:	3a01      	subs	r2, #1
 8000a82:	2c01      	cmp	r4, #1
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0x220>
 8000a86:	e0e0      	b.n	8000c4a <__aeabi_dadd+0x3e2>
 8000a88:	4c51      	ldr	r4, [pc, #324]	; (8000bd0 <__aeabi_dadd+0x368>)
 8000a8a:	45a4      	cmp	ip, r4
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x228>
 8000a8e:	e161      	b.n	8000d54 <__aeabi_dadd+0x4ec>
 8000a90:	4694      	mov	ip, r2
 8000a92:	e7b4      	b.n	80009fe <__aeabi_dadd+0x196>
 8000a94:	003a      	movs	r2, r7
 8000a96:	391f      	subs	r1, #31
 8000a98:	40ca      	lsrs	r2, r1
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	2b20      	cmp	r3, #32
 8000a9e:	d003      	beq.n	8000aa8 <__aeabi_dadd+0x240>
 8000aa0:	2240      	movs	r2, #64	; 0x40
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	409f      	lsls	r7, r3
 8000aa6:	433c      	orrs	r4, r7
 8000aa8:	1e63      	subs	r3, r4, #1
 8000aaa:	419c      	sbcs	r4, r3
 8000aac:	2700      	movs	r7, #0
 8000aae:	2600      	movs	r6, #0
 8000ab0:	430c      	orrs	r4, r1
 8000ab2:	0763      	lsls	r3, r4, #29
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_dadd+0x250>
 8000ab6:	e753      	b.n	8000960 <__aeabi_dadd+0xf8>
 8000ab8:	46b4      	mov	ip, r6
 8000aba:	08e4      	lsrs	r4, r4, #3
 8000abc:	077b      	lsls	r3, r7, #29
 8000abe:	4323      	orrs	r3, r4
 8000ac0:	08f8      	lsrs	r0, r7, #3
 8000ac2:	4a43      	ldr	r2, [pc, #268]	; (8000bd0 <__aeabi_dadd+0x368>)
 8000ac4:	4594      	cmp	ip, r2
 8000ac6:	d01d      	beq.n	8000b04 <__aeabi_dadd+0x29c>
 8000ac8:	4662      	mov	r2, ip
 8000aca:	0307      	lsls	r7, r0, #12
 8000acc:	0552      	lsls	r2, r2, #21
 8000ace:	0b3f      	lsrs	r7, r7, #12
 8000ad0:	0d52      	lsrs	r2, r2, #21
 8000ad2:	e760      	b.n	8000996 <__aeabi_dadd+0x12e>
 8000ad4:	4644      	mov	r4, r8
 8000ad6:	430c      	orrs	r4, r1
 8000ad8:	1e62      	subs	r2, r4, #1
 8000ada:	4194      	sbcs	r4, r2
 8000adc:	18e4      	adds	r4, r4, r3
 8000ade:	429c      	cmp	r4, r3
 8000ae0:	419b      	sbcs	r3, r3
 8000ae2:	425f      	negs	r7, r3
 8000ae4:	183f      	adds	r7, r7, r0
 8000ae6:	023b      	lsls	r3, r7, #8
 8000ae8:	d5e3      	bpl.n	8000ab2 <__aeabi_dadd+0x24a>
 8000aea:	4b39      	ldr	r3, [pc, #228]	; (8000bd0 <__aeabi_dadd+0x368>)
 8000aec:	3601      	adds	r6, #1
 8000aee:	429e      	cmp	r6, r3
 8000af0:	d000      	beq.n	8000af4 <__aeabi_dadd+0x28c>
 8000af2:	e0b5      	b.n	8000c60 <__aeabi_dadd+0x3f8>
 8000af4:	0032      	movs	r2, r6
 8000af6:	2700      	movs	r7, #0
 8000af8:	2300      	movs	r3, #0
 8000afa:	e74c      	b.n	8000996 <__aeabi_dadd+0x12e>
 8000afc:	0742      	lsls	r2, r0, #29
 8000afe:	08db      	lsrs	r3, r3, #3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	08c0      	lsrs	r0, r0, #3
 8000b04:	001a      	movs	r2, r3
 8000b06:	4302      	orrs	r2, r0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dadd+0x2a4>
 8000b0a:	e1e1      	b.n	8000ed0 <__aeabi_dadd+0x668>
 8000b0c:	2780      	movs	r7, #128	; 0x80
 8000b0e:	033f      	lsls	r7, r7, #12
 8000b10:	4307      	orrs	r7, r0
 8000b12:	033f      	lsls	r7, r7, #12
 8000b14:	4a2e      	ldr	r2, [pc, #184]	; (8000bd0 <__aeabi_dadd+0x368>)
 8000b16:	0b3f      	lsrs	r7, r7, #12
 8000b18:	e73d      	b.n	8000996 <__aeabi_dadd+0x12e>
 8000b1a:	0020      	movs	r0, r4
 8000b1c:	f001 f812 	bl	8001b44 <__clzsi2>
 8000b20:	0001      	movs	r1, r0
 8000b22:	3118      	adds	r1, #24
 8000b24:	291f      	cmp	r1, #31
 8000b26:	dc00      	bgt.n	8000b2a <__aeabi_dadd+0x2c2>
 8000b28:	e6fc      	b.n	8000924 <__aeabi_dadd+0xbc>
 8000b2a:	3808      	subs	r0, #8
 8000b2c:	4084      	lsls	r4, r0
 8000b2e:	0027      	movs	r7, r4
 8000b30:	2400      	movs	r4, #0
 8000b32:	42b1      	cmp	r1, r6
 8000b34:	db00      	blt.n	8000b38 <__aeabi_dadd+0x2d0>
 8000b36:	e6ff      	b.n	8000938 <__aeabi_dadd+0xd0>
 8000b38:	4a26      	ldr	r2, [pc, #152]	; (8000bd4 <__aeabi_dadd+0x36c>)
 8000b3a:	1a76      	subs	r6, r6, r1
 8000b3c:	4017      	ands	r7, r2
 8000b3e:	e70d      	b.n	800095c <__aeabi_dadd+0xf4>
 8000b40:	2a00      	cmp	r2, #0
 8000b42:	d02f      	beq.n	8000ba4 <__aeabi_dadd+0x33c>
 8000b44:	464a      	mov	r2, r9
 8000b46:	1b92      	subs	r2, r2, r6
 8000b48:	4694      	mov	ip, r2
 8000b4a:	2e00      	cmp	r6, #0
 8000b4c:	d100      	bne.n	8000b50 <__aeabi_dadd+0x2e8>
 8000b4e:	e0ad      	b.n	8000cac <__aeabi_dadd+0x444>
 8000b50:	4a1f      	ldr	r2, [pc, #124]	; (8000bd0 <__aeabi_dadd+0x368>)
 8000b52:	4591      	cmp	r9, r2
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dadd+0x2f0>
 8000b56:	e10f      	b.n	8000d78 <__aeabi_dadd+0x510>
 8000b58:	2280      	movs	r2, #128	; 0x80
 8000b5a:	0412      	lsls	r2, r2, #16
 8000b5c:	4310      	orrs	r0, r2
 8000b5e:	4662      	mov	r2, ip
 8000b60:	2a38      	cmp	r2, #56	; 0x38
 8000b62:	dd00      	ble.n	8000b66 <__aeabi_dadd+0x2fe>
 8000b64:	e10f      	b.n	8000d86 <__aeabi_dadd+0x51e>
 8000b66:	2a1f      	cmp	r2, #31
 8000b68:	dd00      	ble.n	8000b6c <__aeabi_dadd+0x304>
 8000b6a:	e180      	b.n	8000e6e <__aeabi_dadd+0x606>
 8000b6c:	4664      	mov	r4, ip
 8000b6e:	2220      	movs	r2, #32
 8000b70:	001e      	movs	r6, r3
 8000b72:	1b12      	subs	r2, r2, r4
 8000b74:	4667      	mov	r7, ip
 8000b76:	0004      	movs	r4, r0
 8000b78:	4093      	lsls	r3, r2
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	40fe      	lsrs	r6, r7
 8000b7e:	1e5a      	subs	r2, r3, #1
 8000b80:	4193      	sbcs	r3, r2
 8000b82:	40f8      	lsrs	r0, r7
 8000b84:	4334      	orrs	r4, r6
 8000b86:	431c      	orrs	r4, r3
 8000b88:	4480      	add	r8, r0
 8000b8a:	1864      	adds	r4, r4, r1
 8000b8c:	428c      	cmp	r4, r1
 8000b8e:	41bf      	sbcs	r7, r7
 8000b90:	427f      	negs	r7, r7
 8000b92:	464e      	mov	r6, r9
 8000b94:	4447      	add	r7, r8
 8000b96:	e7a6      	b.n	8000ae6 <__aeabi_dadd+0x27e>
 8000b98:	4642      	mov	r2, r8
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	1e4a      	subs	r2, r1, #1
 8000ba0:	4191      	sbcs	r1, r2
 8000ba2:	e6ad      	b.n	8000900 <__aeabi_dadd+0x98>
 8000ba4:	4c0c      	ldr	r4, [pc, #48]	; (8000bd8 <__aeabi_dadd+0x370>)
 8000ba6:	1c72      	adds	r2, r6, #1
 8000ba8:	4222      	tst	r2, r4
 8000baa:	d000      	beq.n	8000bae <__aeabi_dadd+0x346>
 8000bac:	e0a1      	b.n	8000cf2 <__aeabi_dadd+0x48a>
 8000bae:	0002      	movs	r2, r0
 8000bb0:	431a      	orrs	r2, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_dadd+0x350>
 8000bb6:	e0fa      	b.n	8000dae <__aeabi_dadd+0x546>
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	d100      	bne.n	8000bbe <__aeabi_dadd+0x356>
 8000bbc:	e145      	b.n	8000e4a <__aeabi_dadd+0x5e2>
 8000bbe:	003a      	movs	r2, r7
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	d000      	beq.n	8000bc6 <__aeabi_dadd+0x35e>
 8000bc4:	e146      	b.n	8000e54 <__aeabi_dadd+0x5ec>
 8000bc6:	0742      	lsls	r2, r0, #29
 8000bc8:	08db      	lsrs	r3, r3, #3
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	08c0      	lsrs	r0, r0, #3
 8000bce:	e77b      	b.n	8000ac8 <__aeabi_dadd+0x260>
 8000bd0:	000007ff 	.word	0x000007ff
 8000bd4:	ff7fffff 	.word	0xff7fffff
 8000bd8:	000007fe 	.word	0x000007fe
 8000bdc:	4647      	mov	r7, r8
 8000bde:	1a5c      	subs	r4, r3, r1
 8000be0:	1bc2      	subs	r2, r0, r7
 8000be2:	42a3      	cmp	r3, r4
 8000be4:	41bf      	sbcs	r7, r7
 8000be6:	427f      	negs	r7, r7
 8000be8:	46b9      	mov	r9, r7
 8000bea:	0017      	movs	r7, r2
 8000bec:	464a      	mov	r2, r9
 8000bee:	1abf      	subs	r7, r7, r2
 8000bf0:	023a      	lsls	r2, r7, #8
 8000bf2:	d500      	bpl.n	8000bf6 <__aeabi_dadd+0x38e>
 8000bf4:	e08d      	b.n	8000d12 <__aeabi_dadd+0x4aa>
 8000bf6:	0023      	movs	r3, r4
 8000bf8:	433b      	orrs	r3, r7
 8000bfa:	d000      	beq.n	8000bfe <__aeabi_dadd+0x396>
 8000bfc:	e68a      	b.n	8000914 <__aeabi_dadd+0xac>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2500      	movs	r5, #0
 8000c02:	e761      	b.n	8000ac8 <__aeabi_dadd+0x260>
 8000c04:	4cb4      	ldr	r4, [pc, #720]	; (8000ed8 <__aeabi_dadd+0x670>)
 8000c06:	45a1      	cmp	r9, r4
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dadd+0x3a4>
 8000c0a:	e0ad      	b.n	8000d68 <__aeabi_dadd+0x500>
 8000c0c:	2480      	movs	r4, #128	; 0x80
 8000c0e:	0424      	lsls	r4, r4, #16
 8000c10:	4320      	orrs	r0, r4
 8000c12:	4664      	mov	r4, ip
 8000c14:	2c38      	cmp	r4, #56	; 0x38
 8000c16:	dc3d      	bgt.n	8000c94 <__aeabi_dadd+0x42c>
 8000c18:	4662      	mov	r2, ip
 8000c1a:	2c1f      	cmp	r4, #31
 8000c1c:	dd00      	ble.n	8000c20 <__aeabi_dadd+0x3b8>
 8000c1e:	e0b7      	b.n	8000d90 <__aeabi_dadd+0x528>
 8000c20:	2520      	movs	r5, #32
 8000c22:	001e      	movs	r6, r3
 8000c24:	1b2d      	subs	r5, r5, r4
 8000c26:	0004      	movs	r4, r0
 8000c28:	40ab      	lsls	r3, r5
 8000c2a:	40ac      	lsls	r4, r5
 8000c2c:	40d6      	lsrs	r6, r2
 8000c2e:	40d0      	lsrs	r0, r2
 8000c30:	4642      	mov	r2, r8
 8000c32:	1e5d      	subs	r5, r3, #1
 8000c34:	41ab      	sbcs	r3, r5
 8000c36:	4334      	orrs	r4, r6
 8000c38:	1a12      	subs	r2, r2, r0
 8000c3a:	4690      	mov	r8, r2
 8000c3c:	4323      	orrs	r3, r4
 8000c3e:	e02c      	b.n	8000c9a <__aeabi_dadd+0x432>
 8000c40:	0742      	lsls	r2, r0, #29
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	4313      	orrs	r3, r2
 8000c46:	08c0      	lsrs	r0, r0, #3
 8000c48:	e73b      	b.n	8000ac2 <__aeabi_dadd+0x25a>
 8000c4a:	185c      	adds	r4, r3, r1
 8000c4c:	429c      	cmp	r4, r3
 8000c4e:	419b      	sbcs	r3, r3
 8000c50:	4440      	add	r0, r8
 8000c52:	425b      	negs	r3, r3
 8000c54:	18c7      	adds	r7, r0, r3
 8000c56:	2601      	movs	r6, #1
 8000c58:	023b      	lsls	r3, r7, #8
 8000c5a:	d400      	bmi.n	8000c5e <__aeabi_dadd+0x3f6>
 8000c5c:	e729      	b.n	8000ab2 <__aeabi_dadd+0x24a>
 8000c5e:	2602      	movs	r6, #2
 8000c60:	4a9e      	ldr	r2, [pc, #632]	; (8000edc <__aeabi_dadd+0x674>)
 8000c62:	0863      	lsrs	r3, r4, #1
 8000c64:	4017      	ands	r7, r2
 8000c66:	2201      	movs	r2, #1
 8000c68:	4014      	ands	r4, r2
 8000c6a:	431c      	orrs	r4, r3
 8000c6c:	07fb      	lsls	r3, r7, #31
 8000c6e:	431c      	orrs	r4, r3
 8000c70:	087f      	lsrs	r7, r7, #1
 8000c72:	e673      	b.n	800095c <__aeabi_dadd+0xf4>
 8000c74:	4644      	mov	r4, r8
 8000c76:	3a20      	subs	r2, #32
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	4662      	mov	r2, ip
 8000c7c:	2a20      	cmp	r2, #32
 8000c7e:	d005      	beq.n	8000c8c <__aeabi_dadd+0x424>
 8000c80:	4667      	mov	r7, ip
 8000c82:	2240      	movs	r2, #64	; 0x40
 8000c84:	1bd2      	subs	r2, r2, r7
 8000c86:	4647      	mov	r7, r8
 8000c88:	4097      	lsls	r7, r2
 8000c8a:	4339      	orrs	r1, r7
 8000c8c:	1e4a      	subs	r2, r1, #1
 8000c8e:	4191      	sbcs	r1, r2
 8000c90:	4321      	orrs	r1, r4
 8000c92:	e635      	b.n	8000900 <__aeabi_dadd+0x98>
 8000c94:	4303      	orrs	r3, r0
 8000c96:	1e58      	subs	r0, r3, #1
 8000c98:	4183      	sbcs	r3, r0
 8000c9a:	1acc      	subs	r4, r1, r3
 8000c9c:	42a1      	cmp	r1, r4
 8000c9e:	41bf      	sbcs	r7, r7
 8000ca0:	4643      	mov	r3, r8
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4655      	mov	r5, sl
 8000ca6:	464e      	mov	r6, r9
 8000ca8:	1bdf      	subs	r7, r3, r7
 8000caa:	e62e      	b.n	800090a <__aeabi_dadd+0xa2>
 8000cac:	0002      	movs	r2, r0
 8000cae:	431a      	orrs	r2, r3
 8000cb0:	d100      	bne.n	8000cb4 <__aeabi_dadd+0x44c>
 8000cb2:	e0bd      	b.n	8000e30 <__aeabi_dadd+0x5c8>
 8000cb4:	4662      	mov	r2, ip
 8000cb6:	4664      	mov	r4, ip
 8000cb8:	3a01      	subs	r2, #1
 8000cba:	2c01      	cmp	r4, #1
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_dadd+0x458>
 8000cbe:	e0e5      	b.n	8000e8c <__aeabi_dadd+0x624>
 8000cc0:	4c85      	ldr	r4, [pc, #532]	; (8000ed8 <__aeabi_dadd+0x670>)
 8000cc2:	45a4      	cmp	ip, r4
 8000cc4:	d058      	beq.n	8000d78 <__aeabi_dadd+0x510>
 8000cc6:	4694      	mov	ip, r2
 8000cc8:	e749      	b.n	8000b5e <__aeabi_dadd+0x2f6>
 8000cca:	4664      	mov	r4, ip
 8000ccc:	2220      	movs	r2, #32
 8000cce:	1b12      	subs	r2, r2, r4
 8000cd0:	4644      	mov	r4, r8
 8000cd2:	4094      	lsls	r4, r2
 8000cd4:	000f      	movs	r7, r1
 8000cd6:	46a1      	mov	r9, r4
 8000cd8:	4664      	mov	r4, ip
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	40e7      	lsrs	r7, r4
 8000cde:	464c      	mov	r4, r9
 8000ce0:	1e4a      	subs	r2, r1, #1
 8000ce2:	4191      	sbcs	r1, r2
 8000ce4:	433c      	orrs	r4, r7
 8000ce6:	4642      	mov	r2, r8
 8000ce8:	430c      	orrs	r4, r1
 8000cea:	4661      	mov	r1, ip
 8000cec:	40ca      	lsrs	r2, r1
 8000cee:	1880      	adds	r0, r0, r2
 8000cf0:	e6f4      	b.n	8000adc <__aeabi_dadd+0x274>
 8000cf2:	4c79      	ldr	r4, [pc, #484]	; (8000ed8 <__aeabi_dadd+0x670>)
 8000cf4:	42a2      	cmp	r2, r4
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x492>
 8000cf8:	e6fd      	b.n	8000af6 <__aeabi_dadd+0x28e>
 8000cfa:	1859      	adds	r1, r3, r1
 8000cfc:	4299      	cmp	r1, r3
 8000cfe:	419b      	sbcs	r3, r3
 8000d00:	4440      	add	r0, r8
 8000d02:	425f      	negs	r7, r3
 8000d04:	19c7      	adds	r7, r0, r7
 8000d06:	07fc      	lsls	r4, r7, #31
 8000d08:	0849      	lsrs	r1, r1, #1
 8000d0a:	0016      	movs	r6, r2
 8000d0c:	430c      	orrs	r4, r1
 8000d0e:	087f      	lsrs	r7, r7, #1
 8000d10:	e6cf      	b.n	8000ab2 <__aeabi_dadd+0x24a>
 8000d12:	1acc      	subs	r4, r1, r3
 8000d14:	42a1      	cmp	r1, r4
 8000d16:	41bf      	sbcs	r7, r7
 8000d18:	4643      	mov	r3, r8
 8000d1a:	427f      	negs	r7, r7
 8000d1c:	1a18      	subs	r0, r3, r0
 8000d1e:	4655      	mov	r5, sl
 8000d20:	1bc7      	subs	r7, r0, r7
 8000d22:	e5f7      	b.n	8000914 <__aeabi_dadd+0xac>
 8000d24:	08c9      	lsrs	r1, r1, #3
 8000d26:	077b      	lsls	r3, r7, #29
 8000d28:	4655      	mov	r5, sl
 8000d2a:	430b      	orrs	r3, r1
 8000d2c:	08f8      	lsrs	r0, r7, #3
 8000d2e:	e6c8      	b.n	8000ac2 <__aeabi_dadd+0x25a>
 8000d30:	2c00      	cmp	r4, #0
 8000d32:	d000      	beq.n	8000d36 <__aeabi_dadd+0x4ce>
 8000d34:	e081      	b.n	8000e3a <__aeabi_dadd+0x5d2>
 8000d36:	4643      	mov	r3, r8
 8000d38:	430b      	orrs	r3, r1
 8000d3a:	d115      	bne.n	8000d68 <__aeabi_dadd+0x500>
 8000d3c:	2080      	movs	r0, #128	; 0x80
 8000d3e:	2500      	movs	r5, #0
 8000d40:	0300      	lsls	r0, r0, #12
 8000d42:	e6e3      	b.n	8000b0c <__aeabi_dadd+0x2a4>
 8000d44:	1a5c      	subs	r4, r3, r1
 8000d46:	42a3      	cmp	r3, r4
 8000d48:	419b      	sbcs	r3, r3
 8000d4a:	1bc7      	subs	r7, r0, r7
 8000d4c:	425b      	negs	r3, r3
 8000d4e:	2601      	movs	r6, #1
 8000d50:	1aff      	subs	r7, r7, r3
 8000d52:	e5da      	b.n	800090a <__aeabi_dadd+0xa2>
 8000d54:	0742      	lsls	r2, r0, #29
 8000d56:	08db      	lsrs	r3, r3, #3
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	08c0      	lsrs	r0, r0, #3
 8000d5c:	e6d2      	b.n	8000b04 <__aeabi_dadd+0x29c>
 8000d5e:	0742      	lsls	r2, r0, #29
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	4313      	orrs	r3, r2
 8000d64:	08c0      	lsrs	r0, r0, #3
 8000d66:	e6ac      	b.n	8000ac2 <__aeabi_dadd+0x25a>
 8000d68:	4643      	mov	r3, r8
 8000d6a:	4642      	mov	r2, r8
 8000d6c:	08c9      	lsrs	r1, r1, #3
 8000d6e:	075b      	lsls	r3, r3, #29
 8000d70:	4655      	mov	r5, sl
 8000d72:	430b      	orrs	r3, r1
 8000d74:	08d0      	lsrs	r0, r2, #3
 8000d76:	e6c5      	b.n	8000b04 <__aeabi_dadd+0x29c>
 8000d78:	4643      	mov	r3, r8
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	075b      	lsls	r3, r3, #29
 8000d7e:	08c9      	lsrs	r1, r1, #3
 8000d80:	430b      	orrs	r3, r1
 8000d82:	08d0      	lsrs	r0, r2, #3
 8000d84:	e6be      	b.n	8000b04 <__aeabi_dadd+0x29c>
 8000d86:	4303      	orrs	r3, r0
 8000d88:	001c      	movs	r4, r3
 8000d8a:	1e63      	subs	r3, r4, #1
 8000d8c:	419c      	sbcs	r4, r3
 8000d8e:	e6fc      	b.n	8000b8a <__aeabi_dadd+0x322>
 8000d90:	0002      	movs	r2, r0
 8000d92:	3c20      	subs	r4, #32
 8000d94:	40e2      	lsrs	r2, r4
 8000d96:	0014      	movs	r4, r2
 8000d98:	4662      	mov	r2, ip
 8000d9a:	2a20      	cmp	r2, #32
 8000d9c:	d003      	beq.n	8000da6 <__aeabi_dadd+0x53e>
 8000d9e:	2540      	movs	r5, #64	; 0x40
 8000da0:	1aad      	subs	r5, r5, r2
 8000da2:	40a8      	lsls	r0, r5
 8000da4:	4303      	orrs	r3, r0
 8000da6:	1e58      	subs	r0, r3, #1
 8000da8:	4183      	sbcs	r3, r0
 8000daa:	4323      	orrs	r3, r4
 8000dac:	e775      	b.n	8000c9a <__aeabi_dadd+0x432>
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d0e2      	beq.n	8000d78 <__aeabi_dadd+0x510>
 8000db2:	003a      	movs	r2, r7
 8000db4:	430a      	orrs	r2, r1
 8000db6:	d0cd      	beq.n	8000d54 <__aeabi_dadd+0x4ec>
 8000db8:	0742      	lsls	r2, r0, #29
 8000dba:	08db      	lsrs	r3, r3, #3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	08c0      	lsrs	r0, r0, #3
 8000dc2:	0312      	lsls	r2, r2, #12
 8000dc4:	4210      	tst	r0, r2
 8000dc6:	d006      	beq.n	8000dd6 <__aeabi_dadd+0x56e>
 8000dc8:	08fc      	lsrs	r4, r7, #3
 8000dca:	4214      	tst	r4, r2
 8000dcc:	d103      	bne.n	8000dd6 <__aeabi_dadd+0x56e>
 8000dce:	0020      	movs	r0, r4
 8000dd0:	08cb      	lsrs	r3, r1, #3
 8000dd2:	077a      	lsls	r2, r7, #29
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	0f5a      	lsrs	r2, r3, #29
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	0752      	lsls	r2, r2, #29
 8000ddc:	08db      	lsrs	r3, r3, #3
 8000dde:	4313      	orrs	r3, r2
 8000de0:	e690      	b.n	8000b04 <__aeabi_dadd+0x29c>
 8000de2:	4643      	mov	r3, r8
 8000de4:	430b      	orrs	r3, r1
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x582>
 8000de8:	e709      	b.n	8000bfe <__aeabi_dadd+0x396>
 8000dea:	4643      	mov	r3, r8
 8000dec:	4642      	mov	r2, r8
 8000dee:	08c9      	lsrs	r1, r1, #3
 8000df0:	075b      	lsls	r3, r3, #29
 8000df2:	4655      	mov	r5, sl
 8000df4:	430b      	orrs	r3, r1
 8000df6:	08d0      	lsrs	r0, r2, #3
 8000df8:	e666      	b.n	8000ac8 <__aeabi_dadd+0x260>
 8000dfa:	1acc      	subs	r4, r1, r3
 8000dfc:	42a1      	cmp	r1, r4
 8000dfe:	4189      	sbcs	r1, r1
 8000e00:	1a3f      	subs	r7, r7, r0
 8000e02:	4249      	negs	r1, r1
 8000e04:	4655      	mov	r5, sl
 8000e06:	2601      	movs	r6, #1
 8000e08:	1a7f      	subs	r7, r7, r1
 8000e0a:	e57e      	b.n	800090a <__aeabi_dadd+0xa2>
 8000e0c:	4642      	mov	r2, r8
 8000e0e:	1a5c      	subs	r4, r3, r1
 8000e10:	1a87      	subs	r7, r0, r2
 8000e12:	42a3      	cmp	r3, r4
 8000e14:	4192      	sbcs	r2, r2
 8000e16:	4252      	negs	r2, r2
 8000e18:	1abf      	subs	r7, r7, r2
 8000e1a:	023a      	lsls	r2, r7, #8
 8000e1c:	d53d      	bpl.n	8000e9a <__aeabi_dadd+0x632>
 8000e1e:	1acc      	subs	r4, r1, r3
 8000e20:	42a1      	cmp	r1, r4
 8000e22:	4189      	sbcs	r1, r1
 8000e24:	4643      	mov	r3, r8
 8000e26:	4249      	negs	r1, r1
 8000e28:	1a1f      	subs	r7, r3, r0
 8000e2a:	4655      	mov	r5, sl
 8000e2c:	1a7f      	subs	r7, r7, r1
 8000e2e:	e595      	b.n	800095c <__aeabi_dadd+0xf4>
 8000e30:	077b      	lsls	r3, r7, #29
 8000e32:	08c9      	lsrs	r1, r1, #3
 8000e34:	430b      	orrs	r3, r1
 8000e36:	08f8      	lsrs	r0, r7, #3
 8000e38:	e643      	b.n	8000ac2 <__aeabi_dadd+0x25a>
 8000e3a:	4644      	mov	r4, r8
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	430c      	orrs	r4, r1
 8000e40:	d130      	bne.n	8000ea4 <__aeabi_dadd+0x63c>
 8000e42:	0742      	lsls	r2, r0, #29
 8000e44:	4313      	orrs	r3, r2
 8000e46:	08c0      	lsrs	r0, r0, #3
 8000e48:	e65c      	b.n	8000b04 <__aeabi_dadd+0x29c>
 8000e4a:	077b      	lsls	r3, r7, #29
 8000e4c:	08c9      	lsrs	r1, r1, #3
 8000e4e:	430b      	orrs	r3, r1
 8000e50:	08f8      	lsrs	r0, r7, #3
 8000e52:	e639      	b.n	8000ac8 <__aeabi_dadd+0x260>
 8000e54:	185c      	adds	r4, r3, r1
 8000e56:	429c      	cmp	r4, r3
 8000e58:	419b      	sbcs	r3, r3
 8000e5a:	4440      	add	r0, r8
 8000e5c:	425b      	negs	r3, r3
 8000e5e:	18c7      	adds	r7, r0, r3
 8000e60:	023b      	lsls	r3, r7, #8
 8000e62:	d400      	bmi.n	8000e66 <__aeabi_dadd+0x5fe>
 8000e64:	e625      	b.n	8000ab2 <__aeabi_dadd+0x24a>
 8000e66:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <__aeabi_dadd+0x674>)
 8000e68:	2601      	movs	r6, #1
 8000e6a:	401f      	ands	r7, r3
 8000e6c:	e621      	b.n	8000ab2 <__aeabi_dadd+0x24a>
 8000e6e:	0004      	movs	r4, r0
 8000e70:	3a20      	subs	r2, #32
 8000e72:	40d4      	lsrs	r4, r2
 8000e74:	4662      	mov	r2, ip
 8000e76:	2a20      	cmp	r2, #32
 8000e78:	d004      	beq.n	8000e84 <__aeabi_dadd+0x61c>
 8000e7a:	2240      	movs	r2, #64	; 0x40
 8000e7c:	4666      	mov	r6, ip
 8000e7e:	1b92      	subs	r2, r2, r6
 8000e80:	4090      	lsls	r0, r2
 8000e82:	4303      	orrs	r3, r0
 8000e84:	1e5a      	subs	r2, r3, #1
 8000e86:	4193      	sbcs	r3, r2
 8000e88:	431c      	orrs	r4, r3
 8000e8a:	e67e      	b.n	8000b8a <__aeabi_dadd+0x322>
 8000e8c:	185c      	adds	r4, r3, r1
 8000e8e:	428c      	cmp	r4, r1
 8000e90:	4189      	sbcs	r1, r1
 8000e92:	4440      	add	r0, r8
 8000e94:	4249      	negs	r1, r1
 8000e96:	1847      	adds	r7, r0, r1
 8000e98:	e6dd      	b.n	8000c56 <__aeabi_dadd+0x3ee>
 8000e9a:	0023      	movs	r3, r4
 8000e9c:	433b      	orrs	r3, r7
 8000e9e:	d100      	bne.n	8000ea2 <__aeabi_dadd+0x63a>
 8000ea0:	e6ad      	b.n	8000bfe <__aeabi_dadd+0x396>
 8000ea2:	e606      	b.n	8000ab2 <__aeabi_dadd+0x24a>
 8000ea4:	0744      	lsls	r4, r0, #29
 8000ea6:	4323      	orrs	r3, r4
 8000ea8:	2480      	movs	r4, #128	; 0x80
 8000eaa:	08c0      	lsrs	r0, r0, #3
 8000eac:	0324      	lsls	r4, r4, #12
 8000eae:	4220      	tst	r0, r4
 8000eb0:	d008      	beq.n	8000ec4 <__aeabi_dadd+0x65c>
 8000eb2:	4642      	mov	r2, r8
 8000eb4:	08d6      	lsrs	r6, r2, #3
 8000eb6:	4226      	tst	r6, r4
 8000eb8:	d104      	bne.n	8000ec4 <__aeabi_dadd+0x65c>
 8000eba:	4655      	mov	r5, sl
 8000ebc:	0030      	movs	r0, r6
 8000ebe:	08cb      	lsrs	r3, r1, #3
 8000ec0:	0751      	lsls	r1, r2, #29
 8000ec2:	430b      	orrs	r3, r1
 8000ec4:	0f5a      	lsrs	r2, r3, #29
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	0752      	lsls	r2, r2, #29
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	e619      	b.n	8000b04 <__aeabi_dadd+0x29c>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	4a01      	ldr	r2, [pc, #4]	; (8000ed8 <__aeabi_dadd+0x670>)
 8000ed4:	001f      	movs	r7, r3
 8000ed6:	e55e      	b.n	8000996 <__aeabi_dadd+0x12e>
 8000ed8:	000007ff 	.word	0x000007ff
 8000edc:	ff7fffff 	.word	0xff7fffff

08000ee0 <__aeabi_ddiv>:
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	4657      	mov	r7, sl
 8000ee4:	464e      	mov	r6, r9
 8000ee6:	4645      	mov	r5, r8
 8000ee8:	46de      	mov	lr, fp
 8000eea:	b5e0      	push	{r5, r6, r7, lr}
 8000eec:	4681      	mov	r9, r0
 8000eee:	0005      	movs	r5, r0
 8000ef0:	030c      	lsls	r4, r1, #12
 8000ef2:	0048      	lsls	r0, r1, #1
 8000ef4:	4692      	mov	sl, r2
 8000ef6:	001f      	movs	r7, r3
 8000ef8:	b085      	sub	sp, #20
 8000efa:	0b24      	lsrs	r4, r4, #12
 8000efc:	0d40      	lsrs	r0, r0, #21
 8000efe:	0fce      	lsrs	r6, r1, #31
 8000f00:	2800      	cmp	r0, #0
 8000f02:	d100      	bne.n	8000f06 <__aeabi_ddiv+0x26>
 8000f04:	e156      	b.n	80011b4 <__aeabi_ddiv+0x2d4>
 8000f06:	4bd4      	ldr	r3, [pc, #848]	; (8001258 <__aeabi_ddiv+0x378>)
 8000f08:	4298      	cmp	r0, r3
 8000f0a:	d100      	bne.n	8000f0e <__aeabi_ddiv+0x2e>
 8000f0c:	e172      	b.n	80011f4 <__aeabi_ddiv+0x314>
 8000f0e:	0f6b      	lsrs	r3, r5, #29
 8000f10:	00e4      	lsls	r4, r4, #3
 8000f12:	431c      	orrs	r4, r3
 8000f14:	2380      	movs	r3, #128	; 0x80
 8000f16:	041b      	lsls	r3, r3, #16
 8000f18:	4323      	orrs	r3, r4
 8000f1a:	4698      	mov	r8, r3
 8000f1c:	4bcf      	ldr	r3, [pc, #828]	; (800125c <__aeabi_ddiv+0x37c>)
 8000f1e:	00ed      	lsls	r5, r5, #3
 8000f20:	469b      	mov	fp, r3
 8000f22:	2300      	movs	r3, #0
 8000f24:	4699      	mov	r9, r3
 8000f26:	4483      	add	fp, r0
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	033c      	lsls	r4, r7, #12
 8000f2c:	007b      	lsls	r3, r7, #1
 8000f2e:	4650      	mov	r0, sl
 8000f30:	0b24      	lsrs	r4, r4, #12
 8000f32:	0d5b      	lsrs	r3, r3, #21
 8000f34:	0fff      	lsrs	r7, r7, #31
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_ddiv+0x5c>
 8000f3a:	e11f      	b.n	800117c <__aeabi_ddiv+0x29c>
 8000f3c:	4ac6      	ldr	r2, [pc, #792]	; (8001258 <__aeabi_ddiv+0x378>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d100      	bne.n	8000f44 <__aeabi_ddiv+0x64>
 8000f42:	e162      	b.n	800120a <__aeabi_ddiv+0x32a>
 8000f44:	49c5      	ldr	r1, [pc, #788]	; (800125c <__aeabi_ddiv+0x37c>)
 8000f46:	0f42      	lsrs	r2, r0, #29
 8000f48:	468c      	mov	ip, r1
 8000f4a:	00e4      	lsls	r4, r4, #3
 8000f4c:	4659      	mov	r1, fp
 8000f4e:	4314      	orrs	r4, r2
 8000f50:	2280      	movs	r2, #128	; 0x80
 8000f52:	4463      	add	r3, ip
 8000f54:	0412      	lsls	r2, r2, #16
 8000f56:	1acb      	subs	r3, r1, r3
 8000f58:	4314      	orrs	r4, r2
 8000f5a:	469b      	mov	fp, r3
 8000f5c:	00c2      	lsls	r2, r0, #3
 8000f5e:	2000      	movs	r0, #0
 8000f60:	0033      	movs	r3, r6
 8000f62:	407b      	eors	r3, r7
 8000f64:	469a      	mov	sl, r3
 8000f66:	464b      	mov	r3, r9
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d827      	bhi.n	8000fbc <__aeabi_ddiv+0xdc>
 8000f6c:	49bc      	ldr	r1, [pc, #752]	; (8001260 <__aeabi_ddiv+0x380>)
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	58cb      	ldr	r3, [r1, r3]
 8000f72:	469f      	mov	pc, r3
 8000f74:	46b2      	mov	sl, r6
 8000f76:	9b00      	ldr	r3, [sp, #0]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d016      	beq.n	8000faa <__aeabi_ddiv+0xca>
 8000f7c:	2b03      	cmp	r3, #3
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0xa2>
 8000f80:	e28e      	b.n	80014a0 <__aeabi_ddiv+0x5c0>
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d000      	beq.n	8000f88 <__aeabi_ddiv+0xa8>
 8000f86:	e0d9      	b.n	800113c <__aeabi_ddiv+0x25c>
 8000f88:	2300      	movs	r3, #0
 8000f8a:	2400      	movs	r4, #0
 8000f8c:	2500      	movs	r5, #0
 8000f8e:	4652      	mov	r2, sl
 8000f90:	051b      	lsls	r3, r3, #20
 8000f92:	4323      	orrs	r3, r4
 8000f94:	07d2      	lsls	r2, r2, #31
 8000f96:	4313      	orrs	r3, r2
 8000f98:	0028      	movs	r0, r5
 8000f9a:	0019      	movs	r1, r3
 8000f9c:	b005      	add	sp, #20
 8000f9e:	bcf0      	pop	{r4, r5, r6, r7}
 8000fa0:	46bb      	mov	fp, r7
 8000fa2:	46b2      	mov	sl, r6
 8000fa4:	46a9      	mov	r9, r5
 8000fa6:	46a0      	mov	r8, r4
 8000fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000faa:	2400      	movs	r4, #0
 8000fac:	2500      	movs	r5, #0
 8000fae:	4baa      	ldr	r3, [pc, #680]	; (8001258 <__aeabi_ddiv+0x378>)
 8000fb0:	e7ed      	b.n	8000f8e <__aeabi_ddiv+0xae>
 8000fb2:	46ba      	mov	sl, r7
 8000fb4:	46a0      	mov	r8, r4
 8000fb6:	0015      	movs	r5, r2
 8000fb8:	9000      	str	r0, [sp, #0]
 8000fba:	e7dc      	b.n	8000f76 <__aeabi_ddiv+0x96>
 8000fbc:	4544      	cmp	r4, r8
 8000fbe:	d200      	bcs.n	8000fc2 <__aeabi_ddiv+0xe2>
 8000fc0:	e1c7      	b.n	8001352 <__aeabi_ddiv+0x472>
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_ddiv+0xe6>
 8000fc4:	e1c2      	b.n	800134c <__aeabi_ddiv+0x46c>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	425b      	negs	r3, r3
 8000fca:	469c      	mov	ip, r3
 8000fcc:	002e      	movs	r6, r5
 8000fce:	4640      	mov	r0, r8
 8000fd0:	2500      	movs	r5, #0
 8000fd2:	44e3      	add	fp, ip
 8000fd4:	0223      	lsls	r3, r4, #8
 8000fd6:	0e14      	lsrs	r4, r2, #24
 8000fd8:	431c      	orrs	r4, r3
 8000fda:	0c1b      	lsrs	r3, r3, #16
 8000fdc:	4699      	mov	r9, r3
 8000fde:	0423      	lsls	r3, r4, #16
 8000fe0:	0c1f      	lsrs	r7, r3, #16
 8000fe2:	0212      	lsls	r2, r2, #8
 8000fe4:	4649      	mov	r1, r9
 8000fe6:	9200      	str	r2, [sp, #0]
 8000fe8:	9701      	str	r7, [sp, #4]
 8000fea:	f7ff f90f 	bl	800020c <__aeabi_uidivmod>
 8000fee:	0002      	movs	r2, r0
 8000ff0:	437a      	muls	r2, r7
 8000ff2:	040b      	lsls	r3, r1, #16
 8000ff4:	0c31      	lsrs	r1, r6, #16
 8000ff6:	4680      	mov	r8, r0
 8000ff8:	4319      	orrs	r1, r3
 8000ffa:	428a      	cmp	r2, r1
 8000ffc:	d907      	bls.n	800100e <__aeabi_ddiv+0x12e>
 8000ffe:	2301      	movs	r3, #1
 8001000:	425b      	negs	r3, r3
 8001002:	469c      	mov	ip, r3
 8001004:	1909      	adds	r1, r1, r4
 8001006:	44e0      	add	r8, ip
 8001008:	428c      	cmp	r4, r1
 800100a:	d800      	bhi.n	800100e <__aeabi_ddiv+0x12e>
 800100c:	e207      	b.n	800141e <__aeabi_ddiv+0x53e>
 800100e:	1a88      	subs	r0, r1, r2
 8001010:	4649      	mov	r1, r9
 8001012:	f7ff f8fb 	bl	800020c <__aeabi_uidivmod>
 8001016:	0409      	lsls	r1, r1, #16
 8001018:	468c      	mov	ip, r1
 800101a:	0431      	lsls	r1, r6, #16
 800101c:	4666      	mov	r6, ip
 800101e:	9a01      	ldr	r2, [sp, #4]
 8001020:	0c09      	lsrs	r1, r1, #16
 8001022:	4342      	muls	r2, r0
 8001024:	0003      	movs	r3, r0
 8001026:	4331      	orrs	r1, r6
 8001028:	428a      	cmp	r2, r1
 800102a:	d904      	bls.n	8001036 <__aeabi_ddiv+0x156>
 800102c:	1909      	adds	r1, r1, r4
 800102e:	3b01      	subs	r3, #1
 8001030:	428c      	cmp	r4, r1
 8001032:	d800      	bhi.n	8001036 <__aeabi_ddiv+0x156>
 8001034:	e1ed      	b.n	8001412 <__aeabi_ddiv+0x532>
 8001036:	1a88      	subs	r0, r1, r2
 8001038:	4642      	mov	r2, r8
 800103a:	0412      	lsls	r2, r2, #16
 800103c:	431a      	orrs	r2, r3
 800103e:	4690      	mov	r8, r2
 8001040:	4641      	mov	r1, r8
 8001042:	9b00      	ldr	r3, [sp, #0]
 8001044:	040e      	lsls	r6, r1, #16
 8001046:	0c1b      	lsrs	r3, r3, #16
 8001048:	001f      	movs	r7, r3
 800104a:	9302      	str	r3, [sp, #8]
 800104c:	9b00      	ldr	r3, [sp, #0]
 800104e:	0c36      	lsrs	r6, r6, #16
 8001050:	041b      	lsls	r3, r3, #16
 8001052:	0c19      	lsrs	r1, r3, #16
 8001054:	000b      	movs	r3, r1
 8001056:	4373      	muls	r3, r6
 8001058:	0c12      	lsrs	r2, r2, #16
 800105a:	437e      	muls	r6, r7
 800105c:	9103      	str	r1, [sp, #12]
 800105e:	4351      	muls	r1, r2
 8001060:	437a      	muls	r2, r7
 8001062:	0c1f      	lsrs	r7, r3, #16
 8001064:	46bc      	mov	ip, r7
 8001066:	1876      	adds	r6, r6, r1
 8001068:	4466      	add	r6, ip
 800106a:	42b1      	cmp	r1, r6
 800106c:	d903      	bls.n	8001076 <__aeabi_ddiv+0x196>
 800106e:	2180      	movs	r1, #128	; 0x80
 8001070:	0249      	lsls	r1, r1, #9
 8001072:	468c      	mov	ip, r1
 8001074:	4462      	add	r2, ip
 8001076:	0c31      	lsrs	r1, r6, #16
 8001078:	188a      	adds	r2, r1, r2
 800107a:	0431      	lsls	r1, r6, #16
 800107c:	041e      	lsls	r6, r3, #16
 800107e:	0c36      	lsrs	r6, r6, #16
 8001080:	198e      	adds	r6, r1, r6
 8001082:	4290      	cmp	r0, r2
 8001084:	d302      	bcc.n	800108c <__aeabi_ddiv+0x1ac>
 8001086:	d112      	bne.n	80010ae <__aeabi_ddiv+0x1ce>
 8001088:	42b5      	cmp	r5, r6
 800108a:	d210      	bcs.n	80010ae <__aeabi_ddiv+0x1ce>
 800108c:	4643      	mov	r3, r8
 800108e:	1e59      	subs	r1, r3, #1
 8001090:	9b00      	ldr	r3, [sp, #0]
 8001092:	469c      	mov	ip, r3
 8001094:	4465      	add	r5, ip
 8001096:	001f      	movs	r7, r3
 8001098:	429d      	cmp	r5, r3
 800109a:	419b      	sbcs	r3, r3
 800109c:	425b      	negs	r3, r3
 800109e:	191b      	adds	r3, r3, r4
 80010a0:	18c0      	adds	r0, r0, r3
 80010a2:	4284      	cmp	r4, r0
 80010a4:	d200      	bcs.n	80010a8 <__aeabi_ddiv+0x1c8>
 80010a6:	e1a0      	b.n	80013ea <__aeabi_ddiv+0x50a>
 80010a8:	d100      	bne.n	80010ac <__aeabi_ddiv+0x1cc>
 80010aa:	e19b      	b.n	80013e4 <__aeabi_ddiv+0x504>
 80010ac:	4688      	mov	r8, r1
 80010ae:	1bae      	subs	r6, r5, r6
 80010b0:	42b5      	cmp	r5, r6
 80010b2:	41ad      	sbcs	r5, r5
 80010b4:	1a80      	subs	r0, r0, r2
 80010b6:	426d      	negs	r5, r5
 80010b8:	1b40      	subs	r0, r0, r5
 80010ba:	4284      	cmp	r4, r0
 80010bc:	d100      	bne.n	80010c0 <__aeabi_ddiv+0x1e0>
 80010be:	e1d5      	b.n	800146c <__aeabi_ddiv+0x58c>
 80010c0:	4649      	mov	r1, r9
 80010c2:	f7ff f8a3 	bl	800020c <__aeabi_uidivmod>
 80010c6:	9a01      	ldr	r2, [sp, #4]
 80010c8:	040b      	lsls	r3, r1, #16
 80010ca:	4342      	muls	r2, r0
 80010cc:	0c31      	lsrs	r1, r6, #16
 80010ce:	0005      	movs	r5, r0
 80010d0:	4319      	orrs	r1, r3
 80010d2:	428a      	cmp	r2, r1
 80010d4:	d900      	bls.n	80010d8 <__aeabi_ddiv+0x1f8>
 80010d6:	e16c      	b.n	80013b2 <__aeabi_ddiv+0x4d2>
 80010d8:	1a88      	subs	r0, r1, r2
 80010da:	4649      	mov	r1, r9
 80010dc:	f7ff f896 	bl	800020c <__aeabi_uidivmod>
 80010e0:	9a01      	ldr	r2, [sp, #4]
 80010e2:	0436      	lsls	r6, r6, #16
 80010e4:	4342      	muls	r2, r0
 80010e6:	0409      	lsls	r1, r1, #16
 80010e8:	0c36      	lsrs	r6, r6, #16
 80010ea:	0003      	movs	r3, r0
 80010ec:	430e      	orrs	r6, r1
 80010ee:	42b2      	cmp	r2, r6
 80010f0:	d900      	bls.n	80010f4 <__aeabi_ddiv+0x214>
 80010f2:	e153      	b.n	800139c <__aeabi_ddiv+0x4bc>
 80010f4:	9803      	ldr	r0, [sp, #12]
 80010f6:	1ab6      	subs	r6, r6, r2
 80010f8:	0002      	movs	r2, r0
 80010fa:	042d      	lsls	r5, r5, #16
 80010fc:	431d      	orrs	r5, r3
 80010fe:	9f02      	ldr	r7, [sp, #8]
 8001100:	042b      	lsls	r3, r5, #16
 8001102:	0c1b      	lsrs	r3, r3, #16
 8001104:	435a      	muls	r2, r3
 8001106:	437b      	muls	r3, r7
 8001108:	469c      	mov	ip, r3
 800110a:	0c29      	lsrs	r1, r5, #16
 800110c:	4348      	muls	r0, r1
 800110e:	0c13      	lsrs	r3, r2, #16
 8001110:	4484      	add	ip, r0
 8001112:	4463      	add	r3, ip
 8001114:	4379      	muls	r1, r7
 8001116:	4298      	cmp	r0, r3
 8001118:	d903      	bls.n	8001122 <__aeabi_ddiv+0x242>
 800111a:	2080      	movs	r0, #128	; 0x80
 800111c:	0240      	lsls	r0, r0, #9
 800111e:	4684      	mov	ip, r0
 8001120:	4461      	add	r1, ip
 8001122:	0c18      	lsrs	r0, r3, #16
 8001124:	0412      	lsls	r2, r2, #16
 8001126:	041b      	lsls	r3, r3, #16
 8001128:	0c12      	lsrs	r2, r2, #16
 800112a:	1841      	adds	r1, r0, r1
 800112c:	189b      	adds	r3, r3, r2
 800112e:	428e      	cmp	r6, r1
 8001130:	d200      	bcs.n	8001134 <__aeabi_ddiv+0x254>
 8001132:	e0ff      	b.n	8001334 <__aeabi_ddiv+0x454>
 8001134:	d100      	bne.n	8001138 <__aeabi_ddiv+0x258>
 8001136:	e0fa      	b.n	800132e <__aeabi_ddiv+0x44e>
 8001138:	2301      	movs	r3, #1
 800113a:	431d      	orrs	r5, r3
 800113c:	4a49      	ldr	r2, [pc, #292]	; (8001264 <__aeabi_ddiv+0x384>)
 800113e:	445a      	add	r2, fp
 8001140:	2a00      	cmp	r2, #0
 8001142:	dc00      	bgt.n	8001146 <__aeabi_ddiv+0x266>
 8001144:	e0aa      	b.n	800129c <__aeabi_ddiv+0x3bc>
 8001146:	076b      	lsls	r3, r5, #29
 8001148:	d000      	beq.n	800114c <__aeabi_ddiv+0x26c>
 800114a:	e13d      	b.n	80013c8 <__aeabi_ddiv+0x4e8>
 800114c:	08ed      	lsrs	r5, r5, #3
 800114e:	4643      	mov	r3, r8
 8001150:	01db      	lsls	r3, r3, #7
 8001152:	d506      	bpl.n	8001162 <__aeabi_ddiv+0x282>
 8001154:	4642      	mov	r2, r8
 8001156:	4b44      	ldr	r3, [pc, #272]	; (8001268 <__aeabi_ddiv+0x388>)
 8001158:	401a      	ands	r2, r3
 800115a:	4690      	mov	r8, r2
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	00d2      	lsls	r2, r2, #3
 8001160:	445a      	add	r2, fp
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <__aeabi_ddiv+0x38c>)
 8001164:	429a      	cmp	r2, r3
 8001166:	dd00      	ble.n	800116a <__aeabi_ddiv+0x28a>
 8001168:	e71f      	b.n	8000faa <__aeabi_ddiv+0xca>
 800116a:	4643      	mov	r3, r8
 800116c:	075b      	lsls	r3, r3, #29
 800116e:	431d      	orrs	r5, r3
 8001170:	4643      	mov	r3, r8
 8001172:	0552      	lsls	r2, r2, #21
 8001174:	025c      	lsls	r4, r3, #9
 8001176:	0b24      	lsrs	r4, r4, #12
 8001178:	0d53      	lsrs	r3, r2, #21
 800117a:	e708      	b.n	8000f8e <__aeabi_ddiv+0xae>
 800117c:	4652      	mov	r2, sl
 800117e:	4322      	orrs	r2, r4
 8001180:	d100      	bne.n	8001184 <__aeabi_ddiv+0x2a4>
 8001182:	e07b      	b.n	800127c <__aeabi_ddiv+0x39c>
 8001184:	2c00      	cmp	r4, #0
 8001186:	d100      	bne.n	800118a <__aeabi_ddiv+0x2aa>
 8001188:	e0fa      	b.n	8001380 <__aeabi_ddiv+0x4a0>
 800118a:	0020      	movs	r0, r4
 800118c:	f000 fcda 	bl	8001b44 <__clzsi2>
 8001190:	0002      	movs	r2, r0
 8001192:	3a0b      	subs	r2, #11
 8001194:	231d      	movs	r3, #29
 8001196:	0001      	movs	r1, r0
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	4652      	mov	r2, sl
 800119c:	3908      	subs	r1, #8
 800119e:	40da      	lsrs	r2, r3
 80011a0:	408c      	lsls	r4, r1
 80011a2:	4314      	orrs	r4, r2
 80011a4:	4652      	mov	r2, sl
 80011a6:	408a      	lsls	r2, r1
 80011a8:	4b31      	ldr	r3, [pc, #196]	; (8001270 <__aeabi_ddiv+0x390>)
 80011aa:	4458      	add	r0, fp
 80011ac:	469b      	mov	fp, r3
 80011ae:	4483      	add	fp, r0
 80011b0:	2000      	movs	r0, #0
 80011b2:	e6d5      	b.n	8000f60 <__aeabi_ddiv+0x80>
 80011b4:	464b      	mov	r3, r9
 80011b6:	4323      	orrs	r3, r4
 80011b8:	4698      	mov	r8, r3
 80011ba:	d044      	beq.n	8001246 <__aeabi_ddiv+0x366>
 80011bc:	2c00      	cmp	r4, #0
 80011be:	d100      	bne.n	80011c2 <__aeabi_ddiv+0x2e2>
 80011c0:	e0ce      	b.n	8001360 <__aeabi_ddiv+0x480>
 80011c2:	0020      	movs	r0, r4
 80011c4:	f000 fcbe 	bl	8001b44 <__clzsi2>
 80011c8:	0001      	movs	r1, r0
 80011ca:	0002      	movs	r2, r0
 80011cc:	390b      	subs	r1, #11
 80011ce:	231d      	movs	r3, #29
 80011d0:	1a5b      	subs	r3, r3, r1
 80011d2:	4649      	mov	r1, r9
 80011d4:	0010      	movs	r0, r2
 80011d6:	40d9      	lsrs	r1, r3
 80011d8:	3808      	subs	r0, #8
 80011da:	4084      	lsls	r4, r0
 80011dc:	000b      	movs	r3, r1
 80011de:	464d      	mov	r5, r9
 80011e0:	4323      	orrs	r3, r4
 80011e2:	4698      	mov	r8, r3
 80011e4:	4085      	lsls	r5, r0
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <__aeabi_ddiv+0x394>)
 80011e8:	1a83      	subs	r3, r0, r2
 80011ea:	469b      	mov	fp, r3
 80011ec:	2300      	movs	r3, #0
 80011ee:	4699      	mov	r9, r3
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	e69a      	b.n	8000f2a <__aeabi_ddiv+0x4a>
 80011f4:	464b      	mov	r3, r9
 80011f6:	4323      	orrs	r3, r4
 80011f8:	4698      	mov	r8, r3
 80011fa:	d11d      	bne.n	8001238 <__aeabi_ddiv+0x358>
 80011fc:	2308      	movs	r3, #8
 80011fe:	4699      	mov	r9, r3
 8001200:	3b06      	subs	r3, #6
 8001202:	2500      	movs	r5, #0
 8001204:	4683      	mov	fp, r0
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	e68f      	b.n	8000f2a <__aeabi_ddiv+0x4a>
 800120a:	4652      	mov	r2, sl
 800120c:	4322      	orrs	r2, r4
 800120e:	d109      	bne.n	8001224 <__aeabi_ddiv+0x344>
 8001210:	2302      	movs	r3, #2
 8001212:	4649      	mov	r1, r9
 8001214:	4319      	orrs	r1, r3
 8001216:	4b18      	ldr	r3, [pc, #96]	; (8001278 <__aeabi_ddiv+0x398>)
 8001218:	4689      	mov	r9, r1
 800121a:	469c      	mov	ip, r3
 800121c:	2400      	movs	r4, #0
 800121e:	2002      	movs	r0, #2
 8001220:	44e3      	add	fp, ip
 8001222:	e69d      	b.n	8000f60 <__aeabi_ddiv+0x80>
 8001224:	2303      	movs	r3, #3
 8001226:	464a      	mov	r2, r9
 8001228:	431a      	orrs	r2, r3
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <__aeabi_ddiv+0x398>)
 800122c:	4691      	mov	r9, r2
 800122e:	469c      	mov	ip, r3
 8001230:	4652      	mov	r2, sl
 8001232:	2003      	movs	r0, #3
 8001234:	44e3      	add	fp, ip
 8001236:	e693      	b.n	8000f60 <__aeabi_ddiv+0x80>
 8001238:	230c      	movs	r3, #12
 800123a:	4699      	mov	r9, r3
 800123c:	3b09      	subs	r3, #9
 800123e:	46a0      	mov	r8, r4
 8001240:	4683      	mov	fp, r0
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	e671      	b.n	8000f2a <__aeabi_ddiv+0x4a>
 8001246:	2304      	movs	r3, #4
 8001248:	4699      	mov	r9, r3
 800124a:	2300      	movs	r3, #0
 800124c:	469b      	mov	fp, r3
 800124e:	3301      	adds	r3, #1
 8001250:	2500      	movs	r5, #0
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	e669      	b.n	8000f2a <__aeabi_ddiv+0x4a>
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	000007ff 	.word	0x000007ff
 800125c:	fffffc01 	.word	0xfffffc01
 8001260:	080058c4 	.word	0x080058c4
 8001264:	000003ff 	.word	0x000003ff
 8001268:	feffffff 	.word	0xfeffffff
 800126c:	000007fe 	.word	0x000007fe
 8001270:	000003f3 	.word	0x000003f3
 8001274:	fffffc0d 	.word	0xfffffc0d
 8001278:	fffff801 	.word	0xfffff801
 800127c:	4649      	mov	r1, r9
 800127e:	2301      	movs	r3, #1
 8001280:	4319      	orrs	r1, r3
 8001282:	4689      	mov	r9, r1
 8001284:	2400      	movs	r4, #0
 8001286:	2001      	movs	r0, #1
 8001288:	e66a      	b.n	8000f60 <__aeabi_ddiv+0x80>
 800128a:	2300      	movs	r3, #0
 800128c:	2480      	movs	r4, #128	; 0x80
 800128e:	469a      	mov	sl, r3
 8001290:	2500      	movs	r5, #0
 8001292:	4b8a      	ldr	r3, [pc, #552]	; (80014bc <__aeabi_ddiv+0x5dc>)
 8001294:	0324      	lsls	r4, r4, #12
 8001296:	e67a      	b.n	8000f8e <__aeabi_ddiv+0xae>
 8001298:	2501      	movs	r5, #1
 800129a:	426d      	negs	r5, r5
 800129c:	2301      	movs	r3, #1
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	2b38      	cmp	r3, #56	; 0x38
 80012a2:	dd00      	ble.n	80012a6 <__aeabi_ddiv+0x3c6>
 80012a4:	e670      	b.n	8000f88 <__aeabi_ddiv+0xa8>
 80012a6:	2b1f      	cmp	r3, #31
 80012a8:	dc00      	bgt.n	80012ac <__aeabi_ddiv+0x3cc>
 80012aa:	e0bf      	b.n	800142c <__aeabi_ddiv+0x54c>
 80012ac:	211f      	movs	r1, #31
 80012ae:	4249      	negs	r1, r1
 80012b0:	1a8a      	subs	r2, r1, r2
 80012b2:	4641      	mov	r1, r8
 80012b4:	40d1      	lsrs	r1, r2
 80012b6:	000a      	movs	r2, r1
 80012b8:	2b20      	cmp	r3, #32
 80012ba:	d004      	beq.n	80012c6 <__aeabi_ddiv+0x3e6>
 80012bc:	4641      	mov	r1, r8
 80012be:	4b80      	ldr	r3, [pc, #512]	; (80014c0 <__aeabi_ddiv+0x5e0>)
 80012c0:	445b      	add	r3, fp
 80012c2:	4099      	lsls	r1, r3
 80012c4:	430d      	orrs	r5, r1
 80012c6:	1e6b      	subs	r3, r5, #1
 80012c8:	419d      	sbcs	r5, r3
 80012ca:	2307      	movs	r3, #7
 80012cc:	432a      	orrs	r2, r5
 80012ce:	001d      	movs	r5, r3
 80012d0:	2400      	movs	r4, #0
 80012d2:	4015      	ands	r5, r2
 80012d4:	4213      	tst	r3, r2
 80012d6:	d100      	bne.n	80012da <__aeabi_ddiv+0x3fa>
 80012d8:	e0d4      	b.n	8001484 <__aeabi_ddiv+0x5a4>
 80012da:	210f      	movs	r1, #15
 80012dc:	2300      	movs	r3, #0
 80012de:	4011      	ands	r1, r2
 80012e0:	2904      	cmp	r1, #4
 80012e2:	d100      	bne.n	80012e6 <__aeabi_ddiv+0x406>
 80012e4:	e0cb      	b.n	800147e <__aeabi_ddiv+0x59e>
 80012e6:	1d11      	adds	r1, r2, #4
 80012e8:	4291      	cmp	r1, r2
 80012ea:	4192      	sbcs	r2, r2
 80012ec:	4252      	negs	r2, r2
 80012ee:	189b      	adds	r3, r3, r2
 80012f0:	000a      	movs	r2, r1
 80012f2:	0219      	lsls	r1, r3, #8
 80012f4:	d400      	bmi.n	80012f8 <__aeabi_ddiv+0x418>
 80012f6:	e0c2      	b.n	800147e <__aeabi_ddiv+0x59e>
 80012f8:	2301      	movs	r3, #1
 80012fa:	2400      	movs	r4, #0
 80012fc:	2500      	movs	r5, #0
 80012fe:	e646      	b.n	8000f8e <__aeabi_ddiv+0xae>
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	4641      	mov	r1, r8
 8001304:	031b      	lsls	r3, r3, #12
 8001306:	4219      	tst	r1, r3
 8001308:	d008      	beq.n	800131c <__aeabi_ddiv+0x43c>
 800130a:	421c      	tst	r4, r3
 800130c:	d106      	bne.n	800131c <__aeabi_ddiv+0x43c>
 800130e:	431c      	orrs	r4, r3
 8001310:	0324      	lsls	r4, r4, #12
 8001312:	46ba      	mov	sl, r7
 8001314:	0015      	movs	r5, r2
 8001316:	4b69      	ldr	r3, [pc, #420]	; (80014bc <__aeabi_ddiv+0x5dc>)
 8001318:	0b24      	lsrs	r4, r4, #12
 800131a:	e638      	b.n	8000f8e <__aeabi_ddiv+0xae>
 800131c:	2480      	movs	r4, #128	; 0x80
 800131e:	4643      	mov	r3, r8
 8001320:	0324      	lsls	r4, r4, #12
 8001322:	431c      	orrs	r4, r3
 8001324:	0324      	lsls	r4, r4, #12
 8001326:	46b2      	mov	sl, r6
 8001328:	4b64      	ldr	r3, [pc, #400]	; (80014bc <__aeabi_ddiv+0x5dc>)
 800132a:	0b24      	lsrs	r4, r4, #12
 800132c:	e62f      	b.n	8000f8e <__aeabi_ddiv+0xae>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d100      	bne.n	8001334 <__aeabi_ddiv+0x454>
 8001332:	e703      	b.n	800113c <__aeabi_ddiv+0x25c>
 8001334:	19a6      	adds	r6, r4, r6
 8001336:	1e68      	subs	r0, r5, #1
 8001338:	42a6      	cmp	r6, r4
 800133a:	d200      	bcs.n	800133e <__aeabi_ddiv+0x45e>
 800133c:	e08d      	b.n	800145a <__aeabi_ddiv+0x57a>
 800133e:	428e      	cmp	r6, r1
 8001340:	d200      	bcs.n	8001344 <__aeabi_ddiv+0x464>
 8001342:	e0a3      	b.n	800148c <__aeabi_ddiv+0x5ac>
 8001344:	d100      	bne.n	8001348 <__aeabi_ddiv+0x468>
 8001346:	e0b3      	b.n	80014b0 <__aeabi_ddiv+0x5d0>
 8001348:	0005      	movs	r5, r0
 800134a:	e6f5      	b.n	8001138 <__aeabi_ddiv+0x258>
 800134c:	42aa      	cmp	r2, r5
 800134e:	d900      	bls.n	8001352 <__aeabi_ddiv+0x472>
 8001350:	e639      	b.n	8000fc6 <__aeabi_ddiv+0xe6>
 8001352:	4643      	mov	r3, r8
 8001354:	07de      	lsls	r6, r3, #31
 8001356:	0858      	lsrs	r0, r3, #1
 8001358:	086b      	lsrs	r3, r5, #1
 800135a:	431e      	orrs	r6, r3
 800135c:	07ed      	lsls	r5, r5, #31
 800135e:	e639      	b.n	8000fd4 <__aeabi_ddiv+0xf4>
 8001360:	4648      	mov	r0, r9
 8001362:	f000 fbef 	bl	8001b44 <__clzsi2>
 8001366:	0001      	movs	r1, r0
 8001368:	0002      	movs	r2, r0
 800136a:	3115      	adds	r1, #21
 800136c:	3220      	adds	r2, #32
 800136e:	291c      	cmp	r1, #28
 8001370:	dc00      	bgt.n	8001374 <__aeabi_ddiv+0x494>
 8001372:	e72c      	b.n	80011ce <__aeabi_ddiv+0x2ee>
 8001374:	464b      	mov	r3, r9
 8001376:	3808      	subs	r0, #8
 8001378:	4083      	lsls	r3, r0
 800137a:	2500      	movs	r5, #0
 800137c:	4698      	mov	r8, r3
 800137e:	e732      	b.n	80011e6 <__aeabi_ddiv+0x306>
 8001380:	f000 fbe0 	bl	8001b44 <__clzsi2>
 8001384:	0003      	movs	r3, r0
 8001386:	001a      	movs	r2, r3
 8001388:	3215      	adds	r2, #21
 800138a:	3020      	adds	r0, #32
 800138c:	2a1c      	cmp	r2, #28
 800138e:	dc00      	bgt.n	8001392 <__aeabi_ddiv+0x4b2>
 8001390:	e700      	b.n	8001194 <__aeabi_ddiv+0x2b4>
 8001392:	4654      	mov	r4, sl
 8001394:	3b08      	subs	r3, #8
 8001396:	2200      	movs	r2, #0
 8001398:	409c      	lsls	r4, r3
 800139a:	e705      	b.n	80011a8 <__aeabi_ddiv+0x2c8>
 800139c:	1936      	adds	r6, r6, r4
 800139e:	3b01      	subs	r3, #1
 80013a0:	42b4      	cmp	r4, r6
 80013a2:	d900      	bls.n	80013a6 <__aeabi_ddiv+0x4c6>
 80013a4:	e6a6      	b.n	80010f4 <__aeabi_ddiv+0x214>
 80013a6:	42b2      	cmp	r2, r6
 80013a8:	d800      	bhi.n	80013ac <__aeabi_ddiv+0x4cc>
 80013aa:	e6a3      	b.n	80010f4 <__aeabi_ddiv+0x214>
 80013ac:	1e83      	subs	r3, r0, #2
 80013ae:	1936      	adds	r6, r6, r4
 80013b0:	e6a0      	b.n	80010f4 <__aeabi_ddiv+0x214>
 80013b2:	1909      	adds	r1, r1, r4
 80013b4:	3d01      	subs	r5, #1
 80013b6:	428c      	cmp	r4, r1
 80013b8:	d900      	bls.n	80013bc <__aeabi_ddiv+0x4dc>
 80013ba:	e68d      	b.n	80010d8 <__aeabi_ddiv+0x1f8>
 80013bc:	428a      	cmp	r2, r1
 80013be:	d800      	bhi.n	80013c2 <__aeabi_ddiv+0x4e2>
 80013c0:	e68a      	b.n	80010d8 <__aeabi_ddiv+0x1f8>
 80013c2:	1e85      	subs	r5, r0, #2
 80013c4:	1909      	adds	r1, r1, r4
 80013c6:	e687      	b.n	80010d8 <__aeabi_ddiv+0x1f8>
 80013c8:	230f      	movs	r3, #15
 80013ca:	402b      	ands	r3, r5
 80013cc:	2b04      	cmp	r3, #4
 80013ce:	d100      	bne.n	80013d2 <__aeabi_ddiv+0x4f2>
 80013d0:	e6bc      	b.n	800114c <__aeabi_ddiv+0x26c>
 80013d2:	2305      	movs	r3, #5
 80013d4:	425b      	negs	r3, r3
 80013d6:	42ab      	cmp	r3, r5
 80013d8:	419b      	sbcs	r3, r3
 80013da:	3504      	adds	r5, #4
 80013dc:	425b      	negs	r3, r3
 80013de:	08ed      	lsrs	r5, r5, #3
 80013e0:	4498      	add	r8, r3
 80013e2:	e6b4      	b.n	800114e <__aeabi_ddiv+0x26e>
 80013e4:	42af      	cmp	r7, r5
 80013e6:	d900      	bls.n	80013ea <__aeabi_ddiv+0x50a>
 80013e8:	e660      	b.n	80010ac <__aeabi_ddiv+0x1cc>
 80013ea:	4282      	cmp	r2, r0
 80013ec:	d804      	bhi.n	80013f8 <__aeabi_ddiv+0x518>
 80013ee:	d000      	beq.n	80013f2 <__aeabi_ddiv+0x512>
 80013f0:	e65c      	b.n	80010ac <__aeabi_ddiv+0x1cc>
 80013f2:	42ae      	cmp	r6, r5
 80013f4:	d800      	bhi.n	80013f8 <__aeabi_ddiv+0x518>
 80013f6:	e659      	b.n	80010ac <__aeabi_ddiv+0x1cc>
 80013f8:	2302      	movs	r3, #2
 80013fa:	425b      	negs	r3, r3
 80013fc:	469c      	mov	ip, r3
 80013fe:	9b00      	ldr	r3, [sp, #0]
 8001400:	44e0      	add	r8, ip
 8001402:	469c      	mov	ip, r3
 8001404:	4465      	add	r5, ip
 8001406:	429d      	cmp	r5, r3
 8001408:	419b      	sbcs	r3, r3
 800140a:	425b      	negs	r3, r3
 800140c:	191b      	adds	r3, r3, r4
 800140e:	18c0      	adds	r0, r0, r3
 8001410:	e64d      	b.n	80010ae <__aeabi_ddiv+0x1ce>
 8001412:	428a      	cmp	r2, r1
 8001414:	d800      	bhi.n	8001418 <__aeabi_ddiv+0x538>
 8001416:	e60e      	b.n	8001036 <__aeabi_ddiv+0x156>
 8001418:	1e83      	subs	r3, r0, #2
 800141a:	1909      	adds	r1, r1, r4
 800141c:	e60b      	b.n	8001036 <__aeabi_ddiv+0x156>
 800141e:	428a      	cmp	r2, r1
 8001420:	d800      	bhi.n	8001424 <__aeabi_ddiv+0x544>
 8001422:	e5f4      	b.n	800100e <__aeabi_ddiv+0x12e>
 8001424:	1e83      	subs	r3, r0, #2
 8001426:	4698      	mov	r8, r3
 8001428:	1909      	adds	r1, r1, r4
 800142a:	e5f0      	b.n	800100e <__aeabi_ddiv+0x12e>
 800142c:	4925      	ldr	r1, [pc, #148]	; (80014c4 <__aeabi_ddiv+0x5e4>)
 800142e:	0028      	movs	r0, r5
 8001430:	4459      	add	r1, fp
 8001432:	408d      	lsls	r5, r1
 8001434:	4642      	mov	r2, r8
 8001436:	408a      	lsls	r2, r1
 8001438:	1e69      	subs	r1, r5, #1
 800143a:	418d      	sbcs	r5, r1
 800143c:	4641      	mov	r1, r8
 800143e:	40d8      	lsrs	r0, r3
 8001440:	40d9      	lsrs	r1, r3
 8001442:	4302      	orrs	r2, r0
 8001444:	432a      	orrs	r2, r5
 8001446:	000b      	movs	r3, r1
 8001448:	0751      	lsls	r1, r2, #29
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0x56e>
 800144c:	e751      	b.n	80012f2 <__aeabi_ddiv+0x412>
 800144e:	210f      	movs	r1, #15
 8001450:	4011      	ands	r1, r2
 8001452:	2904      	cmp	r1, #4
 8001454:	d000      	beq.n	8001458 <__aeabi_ddiv+0x578>
 8001456:	e746      	b.n	80012e6 <__aeabi_ddiv+0x406>
 8001458:	e74b      	b.n	80012f2 <__aeabi_ddiv+0x412>
 800145a:	0005      	movs	r5, r0
 800145c:	428e      	cmp	r6, r1
 800145e:	d000      	beq.n	8001462 <__aeabi_ddiv+0x582>
 8001460:	e66a      	b.n	8001138 <__aeabi_ddiv+0x258>
 8001462:	9a00      	ldr	r2, [sp, #0]
 8001464:	4293      	cmp	r3, r2
 8001466:	d000      	beq.n	800146a <__aeabi_ddiv+0x58a>
 8001468:	e666      	b.n	8001138 <__aeabi_ddiv+0x258>
 800146a:	e667      	b.n	800113c <__aeabi_ddiv+0x25c>
 800146c:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <__aeabi_ddiv+0x5e8>)
 800146e:	445a      	add	r2, fp
 8001470:	2a00      	cmp	r2, #0
 8001472:	dc00      	bgt.n	8001476 <__aeabi_ddiv+0x596>
 8001474:	e710      	b.n	8001298 <__aeabi_ddiv+0x3b8>
 8001476:	2301      	movs	r3, #1
 8001478:	2500      	movs	r5, #0
 800147a:	4498      	add	r8, r3
 800147c:	e667      	b.n	800114e <__aeabi_ddiv+0x26e>
 800147e:	075d      	lsls	r5, r3, #29
 8001480:	025b      	lsls	r3, r3, #9
 8001482:	0b1c      	lsrs	r4, r3, #12
 8001484:	08d2      	lsrs	r2, r2, #3
 8001486:	2300      	movs	r3, #0
 8001488:	4315      	orrs	r5, r2
 800148a:	e580      	b.n	8000f8e <__aeabi_ddiv+0xae>
 800148c:	9800      	ldr	r0, [sp, #0]
 800148e:	3d02      	subs	r5, #2
 8001490:	0042      	lsls	r2, r0, #1
 8001492:	4282      	cmp	r2, r0
 8001494:	41bf      	sbcs	r7, r7
 8001496:	427f      	negs	r7, r7
 8001498:	193c      	adds	r4, r7, r4
 800149a:	1936      	adds	r6, r6, r4
 800149c:	9200      	str	r2, [sp, #0]
 800149e:	e7dd      	b.n	800145c <__aeabi_ddiv+0x57c>
 80014a0:	2480      	movs	r4, #128	; 0x80
 80014a2:	4643      	mov	r3, r8
 80014a4:	0324      	lsls	r4, r4, #12
 80014a6:	431c      	orrs	r4, r3
 80014a8:	0324      	lsls	r4, r4, #12
 80014aa:	4b04      	ldr	r3, [pc, #16]	; (80014bc <__aeabi_ddiv+0x5dc>)
 80014ac:	0b24      	lsrs	r4, r4, #12
 80014ae:	e56e      	b.n	8000f8e <__aeabi_ddiv+0xae>
 80014b0:	9a00      	ldr	r2, [sp, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3ea      	bcc.n	800148c <__aeabi_ddiv+0x5ac>
 80014b6:	0005      	movs	r5, r0
 80014b8:	e7d3      	b.n	8001462 <__aeabi_ddiv+0x582>
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	000007ff 	.word	0x000007ff
 80014c0:	0000043e 	.word	0x0000043e
 80014c4:	0000041e 	.word	0x0000041e
 80014c8:	000003ff 	.word	0x000003ff

080014cc <__aeabi_dmul>:
 80014cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ce:	4657      	mov	r7, sl
 80014d0:	464e      	mov	r6, r9
 80014d2:	4645      	mov	r5, r8
 80014d4:	46de      	mov	lr, fp
 80014d6:	b5e0      	push	{r5, r6, r7, lr}
 80014d8:	4698      	mov	r8, r3
 80014da:	030c      	lsls	r4, r1, #12
 80014dc:	004b      	lsls	r3, r1, #1
 80014de:	0006      	movs	r6, r0
 80014e0:	4692      	mov	sl, r2
 80014e2:	b087      	sub	sp, #28
 80014e4:	0b24      	lsrs	r4, r4, #12
 80014e6:	0d5b      	lsrs	r3, r3, #21
 80014e8:	0fcf      	lsrs	r7, r1, #31
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dmul+0x24>
 80014ee:	e15c      	b.n	80017aa <__aeabi_dmul+0x2de>
 80014f0:	4ad9      	ldr	r2, [pc, #868]	; (8001858 <__aeabi_dmul+0x38c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d100      	bne.n	80014f8 <__aeabi_dmul+0x2c>
 80014f6:	e175      	b.n	80017e4 <__aeabi_dmul+0x318>
 80014f8:	0f42      	lsrs	r2, r0, #29
 80014fa:	00e4      	lsls	r4, r4, #3
 80014fc:	4314      	orrs	r4, r2
 80014fe:	2280      	movs	r2, #128	; 0x80
 8001500:	0412      	lsls	r2, r2, #16
 8001502:	4314      	orrs	r4, r2
 8001504:	4ad5      	ldr	r2, [pc, #852]	; (800185c <__aeabi_dmul+0x390>)
 8001506:	00c5      	lsls	r5, r0, #3
 8001508:	4694      	mov	ip, r2
 800150a:	4463      	add	r3, ip
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	2300      	movs	r3, #0
 8001510:	4699      	mov	r9, r3
 8001512:	469b      	mov	fp, r3
 8001514:	4643      	mov	r3, r8
 8001516:	4642      	mov	r2, r8
 8001518:	031e      	lsls	r6, r3, #12
 800151a:	0fd2      	lsrs	r2, r2, #31
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4650      	mov	r0, sl
 8001520:	4690      	mov	r8, r2
 8001522:	0b36      	lsrs	r6, r6, #12
 8001524:	0d5b      	lsrs	r3, r3, #21
 8001526:	d100      	bne.n	800152a <__aeabi_dmul+0x5e>
 8001528:	e120      	b.n	800176c <__aeabi_dmul+0x2a0>
 800152a:	4acb      	ldr	r2, [pc, #812]	; (8001858 <__aeabi_dmul+0x38c>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d100      	bne.n	8001532 <__aeabi_dmul+0x66>
 8001530:	e162      	b.n	80017f8 <__aeabi_dmul+0x32c>
 8001532:	49ca      	ldr	r1, [pc, #808]	; (800185c <__aeabi_dmul+0x390>)
 8001534:	0f42      	lsrs	r2, r0, #29
 8001536:	468c      	mov	ip, r1
 8001538:	9900      	ldr	r1, [sp, #0]
 800153a:	4463      	add	r3, ip
 800153c:	00f6      	lsls	r6, r6, #3
 800153e:	468c      	mov	ip, r1
 8001540:	4316      	orrs	r6, r2
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	449c      	add	ip, r3
 8001546:	0412      	lsls	r2, r2, #16
 8001548:	4663      	mov	r3, ip
 800154a:	4316      	orrs	r6, r2
 800154c:	00c2      	lsls	r2, r0, #3
 800154e:	2000      	movs	r0, #0
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	9900      	ldr	r1, [sp, #0]
 8001554:	4643      	mov	r3, r8
 8001556:	3101      	adds	r1, #1
 8001558:	468c      	mov	ip, r1
 800155a:	4649      	mov	r1, r9
 800155c:	407b      	eors	r3, r7
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	290f      	cmp	r1, #15
 8001562:	d826      	bhi.n	80015b2 <__aeabi_dmul+0xe6>
 8001564:	4bbe      	ldr	r3, [pc, #760]	; (8001860 <__aeabi_dmul+0x394>)
 8001566:	0089      	lsls	r1, r1, #2
 8001568:	5859      	ldr	r1, [r3, r1]
 800156a:	468f      	mov	pc, r1
 800156c:	4643      	mov	r3, r8
 800156e:	9301      	str	r3, [sp, #4]
 8001570:	0034      	movs	r4, r6
 8001572:	0015      	movs	r5, r2
 8001574:	4683      	mov	fp, r0
 8001576:	465b      	mov	r3, fp
 8001578:	2b02      	cmp	r3, #2
 800157a:	d016      	beq.n	80015aa <__aeabi_dmul+0xde>
 800157c:	2b03      	cmp	r3, #3
 800157e:	d100      	bne.n	8001582 <__aeabi_dmul+0xb6>
 8001580:	e203      	b.n	800198a <__aeabi_dmul+0x4be>
 8001582:	2b01      	cmp	r3, #1
 8001584:	d000      	beq.n	8001588 <__aeabi_dmul+0xbc>
 8001586:	e0cd      	b.n	8001724 <__aeabi_dmul+0x258>
 8001588:	2200      	movs	r2, #0
 800158a:	2400      	movs	r4, #0
 800158c:	2500      	movs	r5, #0
 800158e:	9b01      	ldr	r3, [sp, #4]
 8001590:	0512      	lsls	r2, r2, #20
 8001592:	4322      	orrs	r2, r4
 8001594:	07db      	lsls	r3, r3, #31
 8001596:	431a      	orrs	r2, r3
 8001598:	0028      	movs	r0, r5
 800159a:	0011      	movs	r1, r2
 800159c:	b007      	add	sp, #28
 800159e:	bcf0      	pop	{r4, r5, r6, r7}
 80015a0:	46bb      	mov	fp, r7
 80015a2:	46b2      	mov	sl, r6
 80015a4:	46a9      	mov	r9, r5
 80015a6:	46a0      	mov	r8, r4
 80015a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015aa:	2400      	movs	r4, #0
 80015ac:	2500      	movs	r5, #0
 80015ae:	4aaa      	ldr	r2, [pc, #680]	; (8001858 <__aeabi_dmul+0x38c>)
 80015b0:	e7ed      	b.n	800158e <__aeabi_dmul+0xc2>
 80015b2:	0c28      	lsrs	r0, r5, #16
 80015b4:	042d      	lsls	r5, r5, #16
 80015b6:	0c2d      	lsrs	r5, r5, #16
 80015b8:	002b      	movs	r3, r5
 80015ba:	0c11      	lsrs	r1, r2, #16
 80015bc:	0412      	lsls	r2, r2, #16
 80015be:	0c12      	lsrs	r2, r2, #16
 80015c0:	4353      	muls	r3, r2
 80015c2:	4698      	mov	r8, r3
 80015c4:	0013      	movs	r3, r2
 80015c6:	002f      	movs	r7, r5
 80015c8:	4343      	muls	r3, r0
 80015ca:	4699      	mov	r9, r3
 80015cc:	434f      	muls	r7, r1
 80015ce:	444f      	add	r7, r9
 80015d0:	46bb      	mov	fp, r7
 80015d2:	4647      	mov	r7, r8
 80015d4:	000b      	movs	r3, r1
 80015d6:	0c3f      	lsrs	r7, r7, #16
 80015d8:	46ba      	mov	sl, r7
 80015da:	4343      	muls	r3, r0
 80015dc:	44da      	add	sl, fp
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	45d1      	cmp	r9, sl
 80015e2:	d904      	bls.n	80015ee <__aeabi_dmul+0x122>
 80015e4:	2780      	movs	r7, #128	; 0x80
 80015e6:	027f      	lsls	r7, r7, #9
 80015e8:	46b9      	mov	r9, r7
 80015ea:	444b      	add	r3, r9
 80015ec:	9302      	str	r3, [sp, #8]
 80015ee:	4653      	mov	r3, sl
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	469b      	mov	fp, r3
 80015f4:	4653      	mov	r3, sl
 80015f6:	041f      	lsls	r7, r3, #16
 80015f8:	4643      	mov	r3, r8
 80015fa:	041b      	lsls	r3, r3, #16
 80015fc:	0c1b      	lsrs	r3, r3, #16
 80015fe:	4698      	mov	r8, r3
 8001600:	003b      	movs	r3, r7
 8001602:	4443      	add	r3, r8
 8001604:	9304      	str	r3, [sp, #16]
 8001606:	0c33      	lsrs	r3, r6, #16
 8001608:	0436      	lsls	r6, r6, #16
 800160a:	0c36      	lsrs	r6, r6, #16
 800160c:	4698      	mov	r8, r3
 800160e:	0033      	movs	r3, r6
 8001610:	4343      	muls	r3, r0
 8001612:	4699      	mov	r9, r3
 8001614:	4643      	mov	r3, r8
 8001616:	4343      	muls	r3, r0
 8001618:	002f      	movs	r7, r5
 800161a:	469a      	mov	sl, r3
 800161c:	4643      	mov	r3, r8
 800161e:	4377      	muls	r7, r6
 8001620:	435d      	muls	r5, r3
 8001622:	0c38      	lsrs	r0, r7, #16
 8001624:	444d      	add	r5, r9
 8001626:	1945      	adds	r5, r0, r5
 8001628:	45a9      	cmp	r9, r5
 800162a:	d903      	bls.n	8001634 <__aeabi_dmul+0x168>
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	025b      	lsls	r3, r3, #9
 8001630:	4699      	mov	r9, r3
 8001632:	44ca      	add	sl, r9
 8001634:	043f      	lsls	r7, r7, #16
 8001636:	0c28      	lsrs	r0, r5, #16
 8001638:	0c3f      	lsrs	r7, r7, #16
 800163a:	042d      	lsls	r5, r5, #16
 800163c:	19ed      	adds	r5, r5, r7
 800163e:	0c27      	lsrs	r7, r4, #16
 8001640:	0424      	lsls	r4, r4, #16
 8001642:	0c24      	lsrs	r4, r4, #16
 8001644:	0003      	movs	r3, r0
 8001646:	0020      	movs	r0, r4
 8001648:	4350      	muls	r0, r2
 800164a:	437a      	muls	r2, r7
 800164c:	4691      	mov	r9, r2
 800164e:	003a      	movs	r2, r7
 8001650:	4453      	add	r3, sl
 8001652:	9305      	str	r3, [sp, #20]
 8001654:	0c03      	lsrs	r3, r0, #16
 8001656:	469a      	mov	sl, r3
 8001658:	434a      	muls	r2, r1
 800165a:	4361      	muls	r1, r4
 800165c:	4449      	add	r1, r9
 800165e:	4451      	add	r1, sl
 8001660:	44ab      	add	fp, r5
 8001662:	4589      	cmp	r9, r1
 8001664:	d903      	bls.n	800166e <__aeabi_dmul+0x1a2>
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	025b      	lsls	r3, r3, #9
 800166a:	4699      	mov	r9, r3
 800166c:	444a      	add	r2, r9
 800166e:	0400      	lsls	r0, r0, #16
 8001670:	0c0b      	lsrs	r3, r1, #16
 8001672:	0c00      	lsrs	r0, r0, #16
 8001674:	0409      	lsls	r1, r1, #16
 8001676:	1809      	adds	r1, r1, r0
 8001678:	0020      	movs	r0, r4
 800167a:	4699      	mov	r9, r3
 800167c:	4643      	mov	r3, r8
 800167e:	4370      	muls	r0, r6
 8001680:	435c      	muls	r4, r3
 8001682:	437e      	muls	r6, r7
 8001684:	435f      	muls	r7, r3
 8001686:	0c03      	lsrs	r3, r0, #16
 8001688:	4698      	mov	r8, r3
 800168a:	19a4      	adds	r4, r4, r6
 800168c:	4444      	add	r4, r8
 800168e:	444a      	add	r2, r9
 8001690:	9703      	str	r7, [sp, #12]
 8001692:	42a6      	cmp	r6, r4
 8001694:	d904      	bls.n	80016a0 <__aeabi_dmul+0x1d4>
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	025b      	lsls	r3, r3, #9
 800169a:	4698      	mov	r8, r3
 800169c:	4447      	add	r7, r8
 800169e:	9703      	str	r7, [sp, #12]
 80016a0:	0423      	lsls	r3, r4, #16
 80016a2:	9e02      	ldr	r6, [sp, #8]
 80016a4:	469a      	mov	sl, r3
 80016a6:	9b05      	ldr	r3, [sp, #20]
 80016a8:	445e      	add	r6, fp
 80016aa:	4698      	mov	r8, r3
 80016ac:	42ae      	cmp	r6, r5
 80016ae:	41ad      	sbcs	r5, r5
 80016b0:	1876      	adds	r6, r6, r1
 80016b2:	428e      	cmp	r6, r1
 80016b4:	4189      	sbcs	r1, r1
 80016b6:	0400      	lsls	r0, r0, #16
 80016b8:	0c00      	lsrs	r0, r0, #16
 80016ba:	4450      	add	r0, sl
 80016bc:	4440      	add	r0, r8
 80016be:	426d      	negs	r5, r5
 80016c0:	1947      	adds	r7, r0, r5
 80016c2:	46b8      	mov	r8, r7
 80016c4:	4693      	mov	fp, r2
 80016c6:	4249      	negs	r1, r1
 80016c8:	4689      	mov	r9, r1
 80016ca:	44c3      	add	fp, r8
 80016cc:	44d9      	add	r9, fp
 80016ce:	4298      	cmp	r0, r3
 80016d0:	4180      	sbcs	r0, r0
 80016d2:	45a8      	cmp	r8, r5
 80016d4:	41ad      	sbcs	r5, r5
 80016d6:	4593      	cmp	fp, r2
 80016d8:	4192      	sbcs	r2, r2
 80016da:	4589      	cmp	r9, r1
 80016dc:	4189      	sbcs	r1, r1
 80016de:	426d      	negs	r5, r5
 80016e0:	4240      	negs	r0, r0
 80016e2:	4328      	orrs	r0, r5
 80016e4:	0c24      	lsrs	r4, r4, #16
 80016e6:	4252      	negs	r2, r2
 80016e8:	4249      	negs	r1, r1
 80016ea:	430a      	orrs	r2, r1
 80016ec:	9b03      	ldr	r3, [sp, #12]
 80016ee:	1900      	adds	r0, r0, r4
 80016f0:	1880      	adds	r0, r0, r2
 80016f2:	18c7      	adds	r7, r0, r3
 80016f4:	464b      	mov	r3, r9
 80016f6:	0ddc      	lsrs	r4, r3, #23
 80016f8:	9b04      	ldr	r3, [sp, #16]
 80016fa:	0275      	lsls	r5, r6, #9
 80016fc:	431d      	orrs	r5, r3
 80016fe:	1e6a      	subs	r2, r5, #1
 8001700:	4195      	sbcs	r5, r2
 8001702:	464b      	mov	r3, r9
 8001704:	0df6      	lsrs	r6, r6, #23
 8001706:	027f      	lsls	r7, r7, #9
 8001708:	4335      	orrs	r5, r6
 800170a:	025a      	lsls	r2, r3, #9
 800170c:	433c      	orrs	r4, r7
 800170e:	4315      	orrs	r5, r2
 8001710:	01fb      	lsls	r3, r7, #7
 8001712:	d400      	bmi.n	8001716 <__aeabi_dmul+0x24a>
 8001714:	e11c      	b.n	8001950 <__aeabi_dmul+0x484>
 8001716:	2101      	movs	r1, #1
 8001718:	086a      	lsrs	r2, r5, #1
 800171a:	400d      	ands	r5, r1
 800171c:	4315      	orrs	r5, r2
 800171e:	07e2      	lsls	r2, r4, #31
 8001720:	4315      	orrs	r5, r2
 8001722:	0864      	lsrs	r4, r4, #1
 8001724:	494f      	ldr	r1, [pc, #316]	; (8001864 <__aeabi_dmul+0x398>)
 8001726:	4461      	add	r1, ip
 8001728:	2900      	cmp	r1, #0
 800172a:	dc00      	bgt.n	800172e <__aeabi_dmul+0x262>
 800172c:	e0b0      	b.n	8001890 <__aeabi_dmul+0x3c4>
 800172e:	076b      	lsls	r3, r5, #29
 8001730:	d009      	beq.n	8001746 <__aeabi_dmul+0x27a>
 8001732:	220f      	movs	r2, #15
 8001734:	402a      	ands	r2, r5
 8001736:	2a04      	cmp	r2, #4
 8001738:	d005      	beq.n	8001746 <__aeabi_dmul+0x27a>
 800173a:	1d2a      	adds	r2, r5, #4
 800173c:	42aa      	cmp	r2, r5
 800173e:	41ad      	sbcs	r5, r5
 8001740:	426d      	negs	r5, r5
 8001742:	1964      	adds	r4, r4, r5
 8001744:	0015      	movs	r5, r2
 8001746:	01e3      	lsls	r3, r4, #7
 8001748:	d504      	bpl.n	8001754 <__aeabi_dmul+0x288>
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	4a46      	ldr	r2, [pc, #280]	; (8001868 <__aeabi_dmul+0x39c>)
 800174e:	00c9      	lsls	r1, r1, #3
 8001750:	4014      	ands	r4, r2
 8001752:	4461      	add	r1, ip
 8001754:	4a45      	ldr	r2, [pc, #276]	; (800186c <__aeabi_dmul+0x3a0>)
 8001756:	4291      	cmp	r1, r2
 8001758:	dd00      	ble.n	800175c <__aeabi_dmul+0x290>
 800175a:	e726      	b.n	80015aa <__aeabi_dmul+0xde>
 800175c:	0762      	lsls	r2, r4, #29
 800175e:	08ed      	lsrs	r5, r5, #3
 8001760:	0264      	lsls	r4, r4, #9
 8001762:	0549      	lsls	r1, r1, #21
 8001764:	4315      	orrs	r5, r2
 8001766:	0b24      	lsrs	r4, r4, #12
 8001768:	0d4a      	lsrs	r2, r1, #21
 800176a:	e710      	b.n	800158e <__aeabi_dmul+0xc2>
 800176c:	4652      	mov	r2, sl
 800176e:	4332      	orrs	r2, r6
 8001770:	d100      	bne.n	8001774 <__aeabi_dmul+0x2a8>
 8001772:	e07f      	b.n	8001874 <__aeabi_dmul+0x3a8>
 8001774:	2e00      	cmp	r6, #0
 8001776:	d100      	bne.n	800177a <__aeabi_dmul+0x2ae>
 8001778:	e0dc      	b.n	8001934 <__aeabi_dmul+0x468>
 800177a:	0030      	movs	r0, r6
 800177c:	f000 f9e2 	bl	8001b44 <__clzsi2>
 8001780:	0002      	movs	r2, r0
 8001782:	3a0b      	subs	r2, #11
 8001784:	231d      	movs	r3, #29
 8001786:	0001      	movs	r1, r0
 8001788:	1a9b      	subs	r3, r3, r2
 800178a:	4652      	mov	r2, sl
 800178c:	3908      	subs	r1, #8
 800178e:	40da      	lsrs	r2, r3
 8001790:	408e      	lsls	r6, r1
 8001792:	4316      	orrs	r6, r2
 8001794:	4652      	mov	r2, sl
 8001796:	408a      	lsls	r2, r1
 8001798:	9b00      	ldr	r3, [sp, #0]
 800179a:	4935      	ldr	r1, [pc, #212]	; (8001870 <__aeabi_dmul+0x3a4>)
 800179c:	1a18      	subs	r0, r3, r0
 800179e:	0003      	movs	r3, r0
 80017a0:	468c      	mov	ip, r1
 80017a2:	4463      	add	r3, ip
 80017a4:	2000      	movs	r0, #0
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	e6d3      	b.n	8001552 <__aeabi_dmul+0x86>
 80017aa:	0025      	movs	r5, r4
 80017ac:	4305      	orrs	r5, r0
 80017ae:	d04a      	beq.n	8001846 <__aeabi_dmul+0x37a>
 80017b0:	2c00      	cmp	r4, #0
 80017b2:	d100      	bne.n	80017b6 <__aeabi_dmul+0x2ea>
 80017b4:	e0b0      	b.n	8001918 <__aeabi_dmul+0x44c>
 80017b6:	0020      	movs	r0, r4
 80017b8:	f000 f9c4 	bl	8001b44 <__clzsi2>
 80017bc:	0001      	movs	r1, r0
 80017be:	0002      	movs	r2, r0
 80017c0:	390b      	subs	r1, #11
 80017c2:	231d      	movs	r3, #29
 80017c4:	0010      	movs	r0, r2
 80017c6:	1a5b      	subs	r3, r3, r1
 80017c8:	0031      	movs	r1, r6
 80017ca:	0035      	movs	r5, r6
 80017cc:	3808      	subs	r0, #8
 80017ce:	4084      	lsls	r4, r0
 80017d0:	40d9      	lsrs	r1, r3
 80017d2:	4085      	lsls	r5, r0
 80017d4:	430c      	orrs	r4, r1
 80017d6:	4826      	ldr	r0, [pc, #152]	; (8001870 <__aeabi_dmul+0x3a4>)
 80017d8:	1a83      	subs	r3, r0, r2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	4699      	mov	r9, r3
 80017e0:	469b      	mov	fp, r3
 80017e2:	e697      	b.n	8001514 <__aeabi_dmul+0x48>
 80017e4:	0005      	movs	r5, r0
 80017e6:	4325      	orrs	r5, r4
 80017e8:	d126      	bne.n	8001838 <__aeabi_dmul+0x36c>
 80017ea:	2208      	movs	r2, #8
 80017ec:	9300      	str	r3, [sp, #0]
 80017ee:	2302      	movs	r3, #2
 80017f0:	2400      	movs	r4, #0
 80017f2:	4691      	mov	r9, r2
 80017f4:	469b      	mov	fp, r3
 80017f6:	e68d      	b.n	8001514 <__aeabi_dmul+0x48>
 80017f8:	4652      	mov	r2, sl
 80017fa:	9b00      	ldr	r3, [sp, #0]
 80017fc:	4332      	orrs	r2, r6
 80017fe:	d110      	bne.n	8001822 <__aeabi_dmul+0x356>
 8001800:	4915      	ldr	r1, [pc, #84]	; (8001858 <__aeabi_dmul+0x38c>)
 8001802:	2600      	movs	r6, #0
 8001804:	468c      	mov	ip, r1
 8001806:	4463      	add	r3, ip
 8001808:	4649      	mov	r1, r9
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2302      	movs	r3, #2
 800180e:	4319      	orrs	r1, r3
 8001810:	4689      	mov	r9, r1
 8001812:	2002      	movs	r0, #2
 8001814:	e69d      	b.n	8001552 <__aeabi_dmul+0x86>
 8001816:	465b      	mov	r3, fp
 8001818:	9701      	str	r7, [sp, #4]
 800181a:	2b02      	cmp	r3, #2
 800181c:	d000      	beq.n	8001820 <__aeabi_dmul+0x354>
 800181e:	e6ad      	b.n	800157c <__aeabi_dmul+0xb0>
 8001820:	e6c3      	b.n	80015aa <__aeabi_dmul+0xde>
 8001822:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <__aeabi_dmul+0x38c>)
 8001824:	2003      	movs	r0, #3
 8001826:	4694      	mov	ip, r2
 8001828:	4463      	add	r3, ip
 800182a:	464a      	mov	r2, r9
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2303      	movs	r3, #3
 8001830:	431a      	orrs	r2, r3
 8001832:	4691      	mov	r9, r2
 8001834:	4652      	mov	r2, sl
 8001836:	e68c      	b.n	8001552 <__aeabi_dmul+0x86>
 8001838:	220c      	movs	r2, #12
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2303      	movs	r3, #3
 800183e:	0005      	movs	r5, r0
 8001840:	4691      	mov	r9, r2
 8001842:	469b      	mov	fp, r3
 8001844:	e666      	b.n	8001514 <__aeabi_dmul+0x48>
 8001846:	2304      	movs	r3, #4
 8001848:	4699      	mov	r9, r3
 800184a:	2300      	movs	r3, #0
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	3301      	adds	r3, #1
 8001850:	2400      	movs	r4, #0
 8001852:	469b      	mov	fp, r3
 8001854:	e65e      	b.n	8001514 <__aeabi_dmul+0x48>
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	000007ff 	.word	0x000007ff
 800185c:	fffffc01 	.word	0xfffffc01
 8001860:	08005904 	.word	0x08005904
 8001864:	000003ff 	.word	0x000003ff
 8001868:	feffffff 	.word	0xfeffffff
 800186c:	000007fe 	.word	0x000007fe
 8001870:	fffffc0d 	.word	0xfffffc0d
 8001874:	4649      	mov	r1, r9
 8001876:	2301      	movs	r3, #1
 8001878:	4319      	orrs	r1, r3
 800187a:	4689      	mov	r9, r1
 800187c:	2600      	movs	r6, #0
 800187e:	2001      	movs	r0, #1
 8001880:	e667      	b.n	8001552 <__aeabi_dmul+0x86>
 8001882:	2300      	movs	r3, #0
 8001884:	2480      	movs	r4, #128	; 0x80
 8001886:	2500      	movs	r5, #0
 8001888:	4a43      	ldr	r2, [pc, #268]	; (8001998 <__aeabi_dmul+0x4cc>)
 800188a:	9301      	str	r3, [sp, #4]
 800188c:	0324      	lsls	r4, r4, #12
 800188e:	e67e      	b.n	800158e <__aeabi_dmul+0xc2>
 8001890:	2001      	movs	r0, #1
 8001892:	1a40      	subs	r0, r0, r1
 8001894:	2838      	cmp	r0, #56	; 0x38
 8001896:	dd00      	ble.n	800189a <__aeabi_dmul+0x3ce>
 8001898:	e676      	b.n	8001588 <__aeabi_dmul+0xbc>
 800189a:	281f      	cmp	r0, #31
 800189c:	dd5b      	ble.n	8001956 <__aeabi_dmul+0x48a>
 800189e:	221f      	movs	r2, #31
 80018a0:	0023      	movs	r3, r4
 80018a2:	4252      	negs	r2, r2
 80018a4:	1a51      	subs	r1, r2, r1
 80018a6:	40cb      	lsrs	r3, r1
 80018a8:	0019      	movs	r1, r3
 80018aa:	2820      	cmp	r0, #32
 80018ac:	d003      	beq.n	80018b6 <__aeabi_dmul+0x3ea>
 80018ae:	4a3b      	ldr	r2, [pc, #236]	; (800199c <__aeabi_dmul+0x4d0>)
 80018b0:	4462      	add	r2, ip
 80018b2:	4094      	lsls	r4, r2
 80018b4:	4325      	orrs	r5, r4
 80018b6:	1e6a      	subs	r2, r5, #1
 80018b8:	4195      	sbcs	r5, r2
 80018ba:	002a      	movs	r2, r5
 80018bc:	430a      	orrs	r2, r1
 80018be:	2107      	movs	r1, #7
 80018c0:	000d      	movs	r5, r1
 80018c2:	2400      	movs	r4, #0
 80018c4:	4015      	ands	r5, r2
 80018c6:	4211      	tst	r1, r2
 80018c8:	d05b      	beq.n	8001982 <__aeabi_dmul+0x4b6>
 80018ca:	210f      	movs	r1, #15
 80018cc:	2400      	movs	r4, #0
 80018ce:	4011      	ands	r1, r2
 80018d0:	2904      	cmp	r1, #4
 80018d2:	d053      	beq.n	800197c <__aeabi_dmul+0x4b0>
 80018d4:	1d11      	adds	r1, r2, #4
 80018d6:	4291      	cmp	r1, r2
 80018d8:	4192      	sbcs	r2, r2
 80018da:	4252      	negs	r2, r2
 80018dc:	18a4      	adds	r4, r4, r2
 80018de:	000a      	movs	r2, r1
 80018e0:	0223      	lsls	r3, r4, #8
 80018e2:	d54b      	bpl.n	800197c <__aeabi_dmul+0x4b0>
 80018e4:	2201      	movs	r2, #1
 80018e6:	2400      	movs	r4, #0
 80018e8:	2500      	movs	r5, #0
 80018ea:	e650      	b.n	800158e <__aeabi_dmul+0xc2>
 80018ec:	2380      	movs	r3, #128	; 0x80
 80018ee:	031b      	lsls	r3, r3, #12
 80018f0:	421c      	tst	r4, r3
 80018f2:	d009      	beq.n	8001908 <__aeabi_dmul+0x43c>
 80018f4:	421e      	tst	r6, r3
 80018f6:	d107      	bne.n	8001908 <__aeabi_dmul+0x43c>
 80018f8:	4333      	orrs	r3, r6
 80018fa:	031c      	lsls	r4, r3, #12
 80018fc:	4643      	mov	r3, r8
 80018fe:	0015      	movs	r5, r2
 8001900:	0b24      	lsrs	r4, r4, #12
 8001902:	4a25      	ldr	r2, [pc, #148]	; (8001998 <__aeabi_dmul+0x4cc>)
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	e642      	b.n	800158e <__aeabi_dmul+0xc2>
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	0312      	lsls	r2, r2, #12
 800190c:	4314      	orrs	r4, r2
 800190e:	0324      	lsls	r4, r4, #12
 8001910:	4a21      	ldr	r2, [pc, #132]	; (8001998 <__aeabi_dmul+0x4cc>)
 8001912:	0b24      	lsrs	r4, r4, #12
 8001914:	9701      	str	r7, [sp, #4]
 8001916:	e63a      	b.n	800158e <__aeabi_dmul+0xc2>
 8001918:	f000 f914 	bl	8001b44 <__clzsi2>
 800191c:	0001      	movs	r1, r0
 800191e:	0002      	movs	r2, r0
 8001920:	3115      	adds	r1, #21
 8001922:	3220      	adds	r2, #32
 8001924:	291c      	cmp	r1, #28
 8001926:	dc00      	bgt.n	800192a <__aeabi_dmul+0x45e>
 8001928:	e74b      	b.n	80017c2 <__aeabi_dmul+0x2f6>
 800192a:	0034      	movs	r4, r6
 800192c:	3808      	subs	r0, #8
 800192e:	2500      	movs	r5, #0
 8001930:	4084      	lsls	r4, r0
 8001932:	e750      	b.n	80017d6 <__aeabi_dmul+0x30a>
 8001934:	f000 f906 	bl	8001b44 <__clzsi2>
 8001938:	0003      	movs	r3, r0
 800193a:	001a      	movs	r2, r3
 800193c:	3215      	adds	r2, #21
 800193e:	3020      	adds	r0, #32
 8001940:	2a1c      	cmp	r2, #28
 8001942:	dc00      	bgt.n	8001946 <__aeabi_dmul+0x47a>
 8001944:	e71e      	b.n	8001784 <__aeabi_dmul+0x2b8>
 8001946:	4656      	mov	r6, sl
 8001948:	3b08      	subs	r3, #8
 800194a:	2200      	movs	r2, #0
 800194c:	409e      	lsls	r6, r3
 800194e:	e723      	b.n	8001798 <__aeabi_dmul+0x2cc>
 8001950:	9b00      	ldr	r3, [sp, #0]
 8001952:	469c      	mov	ip, r3
 8001954:	e6e6      	b.n	8001724 <__aeabi_dmul+0x258>
 8001956:	4912      	ldr	r1, [pc, #72]	; (80019a0 <__aeabi_dmul+0x4d4>)
 8001958:	0022      	movs	r2, r4
 800195a:	4461      	add	r1, ip
 800195c:	002e      	movs	r6, r5
 800195e:	408d      	lsls	r5, r1
 8001960:	408a      	lsls	r2, r1
 8001962:	40c6      	lsrs	r6, r0
 8001964:	1e69      	subs	r1, r5, #1
 8001966:	418d      	sbcs	r5, r1
 8001968:	4332      	orrs	r2, r6
 800196a:	432a      	orrs	r2, r5
 800196c:	40c4      	lsrs	r4, r0
 800196e:	0753      	lsls	r3, r2, #29
 8001970:	d0b6      	beq.n	80018e0 <__aeabi_dmul+0x414>
 8001972:	210f      	movs	r1, #15
 8001974:	4011      	ands	r1, r2
 8001976:	2904      	cmp	r1, #4
 8001978:	d1ac      	bne.n	80018d4 <__aeabi_dmul+0x408>
 800197a:	e7b1      	b.n	80018e0 <__aeabi_dmul+0x414>
 800197c:	0765      	lsls	r5, r4, #29
 800197e:	0264      	lsls	r4, r4, #9
 8001980:	0b24      	lsrs	r4, r4, #12
 8001982:	08d2      	lsrs	r2, r2, #3
 8001984:	4315      	orrs	r5, r2
 8001986:	2200      	movs	r2, #0
 8001988:	e601      	b.n	800158e <__aeabi_dmul+0xc2>
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	0312      	lsls	r2, r2, #12
 800198e:	4314      	orrs	r4, r2
 8001990:	0324      	lsls	r4, r4, #12
 8001992:	4a01      	ldr	r2, [pc, #4]	; (8001998 <__aeabi_dmul+0x4cc>)
 8001994:	0b24      	lsrs	r4, r4, #12
 8001996:	e5fa      	b.n	800158e <__aeabi_dmul+0xc2>
 8001998:	000007ff 	.word	0x000007ff
 800199c:	0000043e 	.word	0x0000043e
 80019a0:	0000041e 	.word	0x0000041e

080019a4 <__aeabi_f2d>:
 80019a4:	b570      	push	{r4, r5, r6, lr}
 80019a6:	0043      	lsls	r3, r0, #1
 80019a8:	0246      	lsls	r6, r0, #9
 80019aa:	0fc4      	lsrs	r4, r0, #31
 80019ac:	20fe      	movs	r0, #254	; 0xfe
 80019ae:	0e1b      	lsrs	r3, r3, #24
 80019b0:	1c59      	adds	r1, r3, #1
 80019b2:	0a75      	lsrs	r5, r6, #9
 80019b4:	4208      	tst	r0, r1
 80019b6:	d00c      	beq.n	80019d2 <__aeabi_f2d+0x2e>
 80019b8:	22e0      	movs	r2, #224	; 0xe0
 80019ba:	0092      	lsls	r2, r2, #2
 80019bc:	4694      	mov	ip, r2
 80019be:	076d      	lsls	r5, r5, #29
 80019c0:	0b36      	lsrs	r6, r6, #12
 80019c2:	4463      	add	r3, ip
 80019c4:	051b      	lsls	r3, r3, #20
 80019c6:	4333      	orrs	r3, r6
 80019c8:	07e4      	lsls	r4, r4, #31
 80019ca:	4323      	orrs	r3, r4
 80019cc:	0028      	movs	r0, r5
 80019ce:	0019      	movs	r1, r3
 80019d0:	bd70      	pop	{r4, r5, r6, pc}
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d114      	bne.n	8001a00 <__aeabi_f2d+0x5c>
 80019d6:	2d00      	cmp	r5, #0
 80019d8:	d01b      	beq.n	8001a12 <__aeabi_f2d+0x6e>
 80019da:	0028      	movs	r0, r5
 80019dc:	f000 f8b2 	bl	8001b44 <__clzsi2>
 80019e0:	280a      	cmp	r0, #10
 80019e2:	dc1c      	bgt.n	8001a1e <__aeabi_f2d+0x7a>
 80019e4:	230b      	movs	r3, #11
 80019e6:	002e      	movs	r6, r5
 80019e8:	1a1b      	subs	r3, r3, r0
 80019ea:	40de      	lsrs	r6, r3
 80019ec:	0003      	movs	r3, r0
 80019ee:	3315      	adds	r3, #21
 80019f0:	409d      	lsls	r5, r3
 80019f2:	4a0e      	ldr	r2, [pc, #56]	; (8001a2c <__aeabi_f2d+0x88>)
 80019f4:	0336      	lsls	r6, r6, #12
 80019f6:	1a12      	subs	r2, r2, r0
 80019f8:	0552      	lsls	r2, r2, #21
 80019fa:	0b36      	lsrs	r6, r6, #12
 80019fc:	0d53      	lsrs	r3, r2, #21
 80019fe:	e7e1      	b.n	80019c4 <__aeabi_f2d+0x20>
 8001a00:	2d00      	cmp	r5, #0
 8001a02:	d009      	beq.n	8001a18 <__aeabi_f2d+0x74>
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	0b36      	lsrs	r6, r6, #12
 8001a08:	0312      	lsls	r2, r2, #12
 8001a0a:	4b09      	ldr	r3, [pc, #36]	; (8001a30 <__aeabi_f2d+0x8c>)
 8001a0c:	076d      	lsls	r5, r5, #29
 8001a0e:	4316      	orrs	r6, r2
 8001a10:	e7d8      	b.n	80019c4 <__aeabi_f2d+0x20>
 8001a12:	2300      	movs	r3, #0
 8001a14:	2600      	movs	r6, #0
 8001a16:	e7d5      	b.n	80019c4 <__aeabi_f2d+0x20>
 8001a18:	2600      	movs	r6, #0
 8001a1a:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <__aeabi_f2d+0x8c>)
 8001a1c:	e7d2      	b.n	80019c4 <__aeabi_f2d+0x20>
 8001a1e:	0003      	movs	r3, r0
 8001a20:	3b0b      	subs	r3, #11
 8001a22:	409d      	lsls	r5, r3
 8001a24:	002e      	movs	r6, r5
 8001a26:	2500      	movs	r5, #0
 8001a28:	e7e3      	b.n	80019f2 <__aeabi_f2d+0x4e>
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	00000389 	.word	0x00000389
 8001a30:	000007ff 	.word	0x000007ff

08001a34 <__aeabi_d2f>:
 8001a34:	0002      	movs	r2, r0
 8001a36:	004b      	lsls	r3, r1, #1
 8001a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a3a:	0d5b      	lsrs	r3, r3, #21
 8001a3c:	030c      	lsls	r4, r1, #12
 8001a3e:	4e3d      	ldr	r6, [pc, #244]	; (8001b34 <__aeabi_d2f+0x100>)
 8001a40:	0a64      	lsrs	r4, r4, #9
 8001a42:	0f40      	lsrs	r0, r0, #29
 8001a44:	1c5f      	adds	r7, r3, #1
 8001a46:	0fc9      	lsrs	r1, r1, #31
 8001a48:	4304      	orrs	r4, r0
 8001a4a:	00d5      	lsls	r5, r2, #3
 8001a4c:	4237      	tst	r7, r6
 8001a4e:	d00a      	beq.n	8001a66 <__aeabi_d2f+0x32>
 8001a50:	4839      	ldr	r0, [pc, #228]	; (8001b38 <__aeabi_d2f+0x104>)
 8001a52:	181e      	adds	r6, r3, r0
 8001a54:	2efe      	cmp	r6, #254	; 0xfe
 8001a56:	dd16      	ble.n	8001a86 <__aeabi_d2f+0x52>
 8001a58:	20ff      	movs	r0, #255	; 0xff
 8001a5a:	2400      	movs	r4, #0
 8001a5c:	05c0      	lsls	r0, r0, #23
 8001a5e:	4320      	orrs	r0, r4
 8001a60:	07c9      	lsls	r1, r1, #31
 8001a62:	4308      	orrs	r0, r1
 8001a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <__aeabi_d2f+0x44>
 8001a6a:	432c      	orrs	r4, r5
 8001a6c:	d026      	beq.n	8001abc <__aeabi_d2f+0x88>
 8001a6e:	2205      	movs	r2, #5
 8001a70:	0192      	lsls	r2, r2, #6
 8001a72:	0a54      	lsrs	r4, r2, #9
 8001a74:	b2d8      	uxtb	r0, r3
 8001a76:	e7f1      	b.n	8001a5c <__aeabi_d2f+0x28>
 8001a78:	4325      	orrs	r5, r4
 8001a7a:	d0ed      	beq.n	8001a58 <__aeabi_d2f+0x24>
 8001a7c:	2080      	movs	r0, #128	; 0x80
 8001a7e:	03c0      	lsls	r0, r0, #15
 8001a80:	4304      	orrs	r4, r0
 8001a82:	20ff      	movs	r0, #255	; 0xff
 8001a84:	e7ea      	b.n	8001a5c <__aeabi_d2f+0x28>
 8001a86:	2e00      	cmp	r6, #0
 8001a88:	dd1b      	ble.n	8001ac2 <__aeabi_d2f+0x8e>
 8001a8a:	0192      	lsls	r2, r2, #6
 8001a8c:	1e53      	subs	r3, r2, #1
 8001a8e:	419a      	sbcs	r2, r3
 8001a90:	00e4      	lsls	r4, r4, #3
 8001a92:	0f6d      	lsrs	r5, r5, #29
 8001a94:	4322      	orrs	r2, r4
 8001a96:	432a      	orrs	r2, r5
 8001a98:	0753      	lsls	r3, r2, #29
 8001a9a:	d048      	beq.n	8001b2e <__aeabi_d2f+0xfa>
 8001a9c:	230f      	movs	r3, #15
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d000      	beq.n	8001aa6 <__aeabi_d2f+0x72>
 8001aa4:	3204      	adds	r2, #4
 8001aa6:	2380      	movs	r3, #128	; 0x80
 8001aa8:	04db      	lsls	r3, r3, #19
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d03f      	beq.n	8001b2e <__aeabi_d2f+0xfa>
 8001aae:	1c70      	adds	r0, r6, #1
 8001ab0:	2efe      	cmp	r6, #254	; 0xfe
 8001ab2:	d0d1      	beq.n	8001a58 <__aeabi_d2f+0x24>
 8001ab4:	0192      	lsls	r2, r2, #6
 8001ab6:	0a54      	lsrs	r4, r2, #9
 8001ab8:	b2c0      	uxtb	r0, r0
 8001aba:	e7cf      	b.n	8001a5c <__aeabi_d2f+0x28>
 8001abc:	2000      	movs	r0, #0
 8001abe:	2400      	movs	r4, #0
 8001ac0:	e7cc      	b.n	8001a5c <__aeabi_d2f+0x28>
 8001ac2:	0032      	movs	r2, r6
 8001ac4:	3217      	adds	r2, #23
 8001ac6:	db22      	blt.n	8001b0e <__aeabi_d2f+0xda>
 8001ac8:	2080      	movs	r0, #128	; 0x80
 8001aca:	0400      	lsls	r0, r0, #16
 8001acc:	4320      	orrs	r0, r4
 8001ace:	241e      	movs	r4, #30
 8001ad0:	1ba4      	subs	r4, r4, r6
 8001ad2:	2c1f      	cmp	r4, #31
 8001ad4:	dd1d      	ble.n	8001b12 <__aeabi_d2f+0xde>
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4252      	negs	r2, r2
 8001ada:	1b96      	subs	r6, r2, r6
 8001adc:	0002      	movs	r2, r0
 8001ade:	40f2      	lsrs	r2, r6
 8001ae0:	0016      	movs	r6, r2
 8001ae2:	2c20      	cmp	r4, #32
 8001ae4:	d004      	beq.n	8001af0 <__aeabi_d2f+0xbc>
 8001ae6:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <__aeabi_d2f+0x108>)
 8001ae8:	4694      	mov	ip, r2
 8001aea:	4463      	add	r3, ip
 8001aec:	4098      	lsls	r0, r3
 8001aee:	4305      	orrs	r5, r0
 8001af0:	002a      	movs	r2, r5
 8001af2:	1e53      	subs	r3, r2, #1
 8001af4:	419a      	sbcs	r2, r3
 8001af6:	4332      	orrs	r2, r6
 8001af8:	2600      	movs	r6, #0
 8001afa:	0753      	lsls	r3, r2, #29
 8001afc:	d1ce      	bne.n	8001a9c <__aeabi_d2f+0x68>
 8001afe:	2480      	movs	r4, #128	; 0x80
 8001b00:	0013      	movs	r3, r2
 8001b02:	04e4      	lsls	r4, r4, #19
 8001b04:	2001      	movs	r0, #1
 8001b06:	4023      	ands	r3, r4
 8001b08:	4222      	tst	r2, r4
 8001b0a:	d1d3      	bne.n	8001ab4 <__aeabi_d2f+0x80>
 8001b0c:	e7b0      	b.n	8001a70 <__aeabi_d2f+0x3c>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e7ad      	b.n	8001a6e <__aeabi_d2f+0x3a>
 8001b12:	4a0b      	ldr	r2, [pc, #44]	; (8001b40 <__aeabi_d2f+0x10c>)
 8001b14:	4694      	mov	ip, r2
 8001b16:	002a      	movs	r2, r5
 8001b18:	40e2      	lsrs	r2, r4
 8001b1a:	0014      	movs	r4, r2
 8001b1c:	002a      	movs	r2, r5
 8001b1e:	4463      	add	r3, ip
 8001b20:	409a      	lsls	r2, r3
 8001b22:	4098      	lsls	r0, r3
 8001b24:	1e55      	subs	r5, r2, #1
 8001b26:	41aa      	sbcs	r2, r5
 8001b28:	4302      	orrs	r2, r0
 8001b2a:	4322      	orrs	r2, r4
 8001b2c:	e7e4      	b.n	8001af8 <__aeabi_d2f+0xc4>
 8001b2e:	0033      	movs	r3, r6
 8001b30:	e79e      	b.n	8001a70 <__aeabi_d2f+0x3c>
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	000007fe 	.word	0x000007fe
 8001b38:	fffffc80 	.word	0xfffffc80
 8001b3c:	fffffca2 	.word	0xfffffca2
 8001b40:	fffffc82 	.word	0xfffffc82

08001b44 <__clzsi2>:
 8001b44:	211c      	movs	r1, #28
 8001b46:	2301      	movs	r3, #1
 8001b48:	041b      	lsls	r3, r3, #16
 8001b4a:	4298      	cmp	r0, r3
 8001b4c:	d301      	bcc.n	8001b52 <__clzsi2+0xe>
 8001b4e:	0c00      	lsrs	r0, r0, #16
 8001b50:	3910      	subs	r1, #16
 8001b52:	0a1b      	lsrs	r3, r3, #8
 8001b54:	4298      	cmp	r0, r3
 8001b56:	d301      	bcc.n	8001b5c <__clzsi2+0x18>
 8001b58:	0a00      	lsrs	r0, r0, #8
 8001b5a:	3908      	subs	r1, #8
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	4298      	cmp	r0, r3
 8001b60:	d301      	bcc.n	8001b66 <__clzsi2+0x22>
 8001b62:	0900      	lsrs	r0, r0, #4
 8001b64:	3904      	subs	r1, #4
 8001b66:	a202      	add	r2, pc, #8	; (adr r2, 8001b70 <__clzsi2+0x2c>)
 8001b68:	5c10      	ldrb	r0, [r2, r0]
 8001b6a:	1840      	adds	r0, r0, r1
 8001b6c:	4770      	bx	lr
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	02020304 	.word	0x02020304
 8001b74:	01010101 	.word	0x01010101
	...

08001b80 <MAX485_ReciveToIdleDMA>:
static void MAX485_TransmitMode(void)
{
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, 1);
}
void MAX485_ReciveToIdleDMA(uint8_t *Data, uint16_t Length)
{
 8001b80:	b570      	push	{r4, r5, r6, lr}
 8001b82:	0004      	movs	r4, r0
 8001b84:	000d      	movs	r5, r1
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, 0);
 8001b86:	2180      	movs	r1, #128	; 0x80
 8001b88:	20a0      	movs	r0, #160	; 0xa0
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	0189      	lsls	r1, r1, #6
 8001b8e:	05c0      	lsls	r0, r0, #23
 8001b90:	f001 fe3c 	bl	800380c <HAL_GPIO_WritePin>
   MAX485_ListeningMode();
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, Data, Length);
 8001b94:	002a      	movs	r2, r5
 8001b96:	0021      	movs	r1, r4
 8001b98:	4801      	ldr	r0, [pc, #4]	; (8001ba0 <MAX485_ReciveToIdleDMA+0x20>)
 8001b9a:	f003 fe23 	bl	80057e4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001b9e:	bd70      	pop	{r4, r5, r6, pc}
 8001ba0:	20000328 	.word	0x20000328

08001ba4 <MAX485_TransmitData>:
void MAX485_TransmitData(uint8_t *Data, uint16_t Length)
{
 8001ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ba6:	0004      	movs	r4, r0
 8001ba8:	000d      	movs	r5, r1
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, 1);
 8001baa:	2780      	movs	r7, #128	; 0x80
 8001bac:	01bf      	lsls	r7, r7, #6
 8001bae:	26a0      	movs	r6, #160	; 0xa0
 8001bb0:	05f6      	lsls	r6, r6, #23
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	0039      	movs	r1, r7
 8001bb6:	0030      	movs	r0, r6
 8001bb8:	f001 fe28 	bl	800380c <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i
   MAX485_TransmitMode();
   __disable_irq();
   HAL_UART_Transmit(&huart1, Data, Length, 1000);
 8001bbe:	23fa      	movs	r3, #250	; 0xfa
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	002a      	movs	r2, r5
 8001bc4:	0021      	movs	r1, r4
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MAX485_TransmitData+0x38>)
 8001bc8:	f003 fc2e 	bl	8005428 <HAL_UART_Transmit>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bcc:	b662      	cpsie	i
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	0039      	movs	r1, r7
 8001bd2:	0030      	movs	r0, r6
 8001bd4:	f001 fe1a 	bl	800380c <HAL_GPIO_WritePin>
   __enable_irq();
   MAX485_ListeningMode();
}
 8001bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bda:	46c0      	nop			; (mov r8, r8)
 8001bdc:	20000328 	.word	0x20000328

08001be0 <MAX485_Init>:
void MAX485_Init(MAX_TypeDef *max)
{
   MAX = max;
 8001be0:	4b01      	ldr	r3, [pc, #4]	; (8001be8 <MAX485_Init+0x8>)
 8001be2:	6018      	str	r0, [r3, #0]
}
 8001be4:	4770      	bx	lr
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	20000094 	.word	0x20000094

08001bec <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001bec:	b510      	push	{r4, lr}
   if(Size > 4 && Size < 101)
 8001bee:	1f4b      	subs	r3, r1, #5
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2b5f      	cmp	r3, #95	; 0x5f
 8001bf4:	d900      	bls.n	8001bf8 <HAL_UARTEx_RxEventCallback+0xc>
   {
      MAX->DataSize = Size;
      MAX_InterruptTask();
   }
}
 8001bf6:	bd10      	pop	{r4, pc}
      MAX->DataSize = Size;
 8001bf8:	4b02      	ldr	r3, [pc, #8]	; (8001c04 <HAL_UARTEx_RxEventCallback+0x18>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6099      	str	r1, [r3, #8]
      MAX_InterruptTask();
 8001bfe:	f000 f9f1 	bl	8001fe4 <MAX_InterruptTask>
}
 8001c02:	e7f8      	b.n	8001bf6 <HAL_UARTEx_RxEventCallback+0xa>
 8001c04:	20000094 	.word	0x20000094

08001c08 <MAX_InitializeFunction>:
   MAXDataTransmit[7] = (crc & 0xff);
   MAX485_TransmitData(MAXDataTransmit, 8);
}
static void MAX_InitializeFunction(void)
{
   MAX->NewEvent = MAX_EVENT_END_INITIALIZE;
 8001c08:	4b02      	ldr	r3, [pc, #8]	; (8001c14 <MAX_InitializeFunction+0xc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	705a      	strb	r2, [r3, #1]
}
 8001c10:	4770      	bx	lr
 8001c12:	46c0      	nop			; (mov r8, r8)
 8001c14:	20000098 	.word	0x20000098

08001c18 <MAX_RunningFunction>:
         }
      }
   }
}
static void MAX_RunningFunction(void)
{
 8001c18:	b510      	push	{r4, lr}
   switch(MAXDataRecive[2])
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <MAX_RunningFunction+0x70>)
 8001c1c:	789b      	ldrb	r3, [r3, #2]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d017      	beq.n	8001c52 <MAX_RunningFunction+0x3a>
 8001c22:	2b03      	cmp	r3, #3
 8001c24:	d020      	beq.n	8001c68 <MAX_RunningFunction+0x50>
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d004      	beq.n	8001c34 <MAX_RunningFunction+0x1c>
      default:
      {
         break;
      }
   }
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001c2a:	2164      	movs	r1, #100	; 0x64
 8001c2c:	4816      	ldr	r0, [pc, #88]	; (8001c88 <MAX_RunningFunction+0x70>)
 8001c2e:	f7ff ffa7 	bl	8001b80 <MAX485_ReciveToIdleDMA>
}
 8001c32:	bd10      	pop	{r4, pc}
         if(MAXCommandFunction[MAXDataRecive[3] - 1].MAXCommandFunction != NULL)
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <MAX_RunningFunction+0x70>)
 8001c36:	78db      	ldrb	r3, [r3, #3]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4a13      	ldr	r2, [pc, #76]	; (8001c8c <MAX_RunningFunction+0x74>)
 8001c3e:	589b      	ldr	r3, [r3, r2]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f2      	beq.n	8001c2a <MAX_RunningFunction+0x12>
            MAXCommandFunction[MAXDataRecive[3] - 1].MAXCommandFunction(MAXDataRecive, MAX->DataSize, 4);
 8001c44:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <MAX_RunningFunction+0x78>)
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	6891      	ldr	r1, [r2, #8]
 8001c4a:	2204      	movs	r2, #4
 8001c4c:	480e      	ldr	r0, [pc, #56]	; (8001c88 <MAX_RunningFunction+0x70>)
 8001c4e:	4798      	blx	r3
 8001c50:	e7eb      	b.n	8001c2a <MAX_RunningFunction+0x12>
         if(MAXDataFunctions.MAXDataFunction != NULL)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MAX_RunningFunction+0x7c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d0e7      	beq.n	8001c2a <MAX_RunningFunction+0x12>
            MAXDataFunctions.MAXDataFunction(MAXDataRecive, MAX->DataSize, 4);
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <MAX_RunningFunction+0x78>)
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	6891      	ldr	r1, [r2, #8]
 8001c60:	2204      	movs	r2, #4
 8001c62:	4809      	ldr	r0, [pc, #36]	; (8001c88 <MAX_RunningFunction+0x70>)
 8001c64:	4798      	blx	r3
 8001c66:	e7e0      	b.n	8001c2a <MAX_RunningFunction+0x12>
         if(MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction != NULL)
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <MAX_RunningFunction+0x70>)
 8001c6a:	78db      	ldrb	r3, [r3, #3]
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <MAX_RunningFunction+0x80>)
 8001c72:	589b      	ldr	r3, [r3, r2]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0d8      	beq.n	8001c2a <MAX_RunningFunction+0x12>
            MAXMessageFunction[MAXDataRecive[3] - 1].MAXMessageFunction(MAXDataRecive, MAX->DataSize, 4);
 8001c78:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <MAX_RunningFunction+0x78>)
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	6891      	ldr	r1, [r2, #8]
 8001c7e:	2204      	movs	r2, #4
 8001c80:	4801      	ldr	r0, [pc, #4]	; (8001c88 <MAX_RunningFunction+0x70>)
 8001c82:	4798      	blx	r3
 8001c84:	e7d1      	b.n	8001c2a <MAX_RunningFunction+0x12>
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	200000b0 	.word	0x200000b0
 8001c8c:	2000009c 	.word	0x2000009c
 8001c90:	20000098 	.word	0x20000098
 8001c94:	200000ac 	.word	0x200000ac
 8001c98:	20000178 	.word	0x20000178

08001c9c <MAX_IdleFunction>:
{
 8001c9c:	b510      	push	{r4, lr}
   if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <MAX_IdleFunction+0x30>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	791a      	ldrb	r2, [r3, #4]
 8001ca4:	2a01      	cmp	r2, #1
 8001ca6:	d003      	beq.n	8001cb0 <MAX_IdleFunction+0x14>
   else if(MAX->SendFlag == MAX_SEND_FLAG_SET)
 8001ca8:	7b5a      	ldrb	r2, [r3, #13]
 8001caa:	2a01      	cmp	r2, #1
 8001cac:	d005      	beq.n	8001cba <MAX_IdleFunction+0x1e>
}
 8001cae:	bd10      	pop	{r4, pc}
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	711a      	strb	r2, [r3, #4]
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
 8001cb4:	3201      	adds	r2, #1
 8001cb6:	705a      	strb	r2, [r3, #1]
 8001cb8:	e7f9      	b.n	8001cae <MAX_IdleFunction+0x12>
      MAX->SendFlag = MAX_SEND_FLAG_RESET;
 8001cba:	2200      	movs	r2, #0
 8001cbc:	735a      	strb	r2, [r3, #13]
      MAX->NewEvent = MAX_EVENT_SEND;
 8001cbe:	3206      	adds	r2, #6
 8001cc0:	705a      	strb	r2, [r3, #1]
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001cc2:	2164      	movs	r1, #100	; 0x64
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <MAX_IdleFunction+0x34>)
 8001cc6:	f7ff ff5b 	bl	8001b80 <MAX485_ReciveToIdleDMA>
}
 8001cca:	e7f0      	b.n	8001cae <MAX_IdleFunction+0x12>
 8001ccc:	20000098 	.word	0x20000098
 8001cd0:	200000b0 	.word	0x200000b0

08001cd4 <MAX_ParseResponseFunction>:
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
   }
}
static void MAX_ParseResponseFunction(void)
{
 8001cd4:	b510      	push	{r4, lr}
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8001cd6:	4b3a      	ldr	r3, [pc, #232]	; (8001dc0 <MAX_ParseResponseFunction+0xec>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	1f19      	subs	r1, r3, #4
 8001cde:	4a39      	ldr	r2, [pc, #228]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	1ed8      	subs	r0, r3, #3
 8001ce4:	7804      	ldrb	r4, [r0, #0]
 8001ce6:	0424      	lsls	r4, r4, #16
 8001ce8:	5c50      	ldrb	r0, [r2, r1]
 8001cea:	0600      	lsls	r0, r0, #24
 8001cec:	4304      	orrs	r4, r0
                          | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 8001cee:	1e58      	subs	r0, r3, #1
 8001cf0:	7800      	ldrb	r0, [r0, #0]
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8001cf2:	4304      	orrs	r4, r0
                          | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 8001cf4:	3b02      	subs	r3, #2
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	021b      	lsls	r3, r3, #8
   uint32_t MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8001cfa:	431c      	orrs	r4, r3
   if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	4240      	negs	r0, r0
 8001d00:	f000 fbda 	bl	80024b8 <Crc>
 8001d04:	42a0      	cmp	r0, r4
 8001d06:	d124      	bne.n	8001d52 <MAX_ParseResponseFunction+0x7e>
   {
      if(MAXDataRecive[0] == MAX->DeviceType && MAXDataRecive[2] == MAX_MESSAGE)
 8001d08:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <MAX_ParseResponseFunction+0xec>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a2d      	ldr	r2, [pc, #180]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d0e:	7811      	ldrb	r1, [r2, #0]
 8001d10:	795a      	ldrb	r2, [r3, #5]
 8001d12:	4291      	cmp	r1, r2
 8001d14:	d103      	bne.n	8001d1e <MAX_ParseResponseFunction+0x4a>
 8001d16:	4a2b      	ldr	r2, [pc, #172]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d18:	7892      	ldrb	r2, [r2, #2]
 8001d1a:	2a03      	cmp	r2, #3
 8001d1c:	d006      	beq.n	8001d2c <MAX_ParseResponseFunction+0x58>
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
         }
      }
      else
      {
         MAX->NewEvent = MAX_EVENT_ERROR;
 8001d1e:	2203      	movs	r2, #3
 8001d20:	705a      	strb	r2, [r3, #1]
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001d22:	2164      	movs	r1, #100	; 0x64
 8001d24:	4827      	ldr	r0, [pc, #156]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d26:	f7ff ff2b 	bl	8001b80 <MAX485_ReciveToIdleDMA>
   else
   {
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
      MAX->NewEvent = MAX_EVENT_ERROR;
   }
}
 8001d2a:	bd10      	pop	{r4, pc}
         if(MAXDataRecive[3] == MAX_OK)
 8001d2c:	4a25      	ldr	r2, [pc, #148]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d2e:	78d2      	ldrb	r2, [r2, #3]
 8001d30:	2a04      	cmp	r2, #4
 8001d32:	d006      	beq.n	8001d42 <MAX_ParseResponseFunction+0x6e>
            MAX->NewEvent = MAX_EVENT_ERROR;
 8001d34:	2203      	movs	r2, #3
 8001d36:	705a      	strb	r2, [r3, #1]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001d38:	2164      	movs	r1, #100	; 0x64
 8001d3a:	4822      	ldr	r0, [pc, #136]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d3c:	f7ff ff20 	bl	8001b80 <MAX485_ReciveToIdleDMA>
 8001d40:	e7f3      	b.n	8001d2a <MAX_ParseResponseFunction+0x56>
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 8001d42:	705a      	strb	r2, [r3, #1]
            MAX->Cnt      = 0;
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001d48:	2164      	movs	r1, #100	; 0x64
 8001d4a:	481e      	ldr	r0, [pc, #120]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d4c:	f7ff ff18 	bl	8001b80 <MAX485_ReciveToIdleDMA>
 8001d50:	e7eb      	b.n	8001d2a <MAX_ParseResponseFunction+0x56>
   else if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
 8001d52:	4b1b      	ldr	r3, [pc, #108]	; (8001dc0 <MAX_ParseResponseFunction+0xec>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	491a      	ldr	r1, [pc, #104]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 fbe8 	bl	8002530 <RepareMessage>
 8001d60:	2801      	cmp	r0, #1
 8001d62:	d124      	bne.n	8001dae <MAX_ParseResponseFunction+0xda>
      if(MAXDataRecive[0] == MAX->DeviceType && MAXDataRecive[2] == MAX_MESSAGE)
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <MAX_ParseResponseFunction+0xec>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a16      	ldr	r2, [pc, #88]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d6a:	7811      	ldrb	r1, [r2, #0]
 8001d6c:	795a      	ldrb	r2, [r3, #5]
 8001d6e:	4291      	cmp	r1, r2
 8001d70:	d103      	bne.n	8001d7a <MAX_ParseResponseFunction+0xa6>
 8001d72:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d74:	7892      	ldrb	r2, [r2, #2]
 8001d76:	2a03      	cmp	r2, #3
 8001d78:	d006      	beq.n	8001d88 <MAX_ParseResponseFunction+0xb4>
         MAX->NewEvent = MAX_EVENT_ERROR;
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	705a      	strb	r2, [r3, #1]
         MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001d7e:	2164      	movs	r1, #100	; 0x64
 8001d80:	4810      	ldr	r0, [pc, #64]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d82:	f7ff fefd 	bl	8001b80 <MAX485_ReciveToIdleDMA>
 8001d86:	e7d0      	b.n	8001d2a <MAX_ParseResponseFunction+0x56>
         if(MAXDataRecive[3] == MAX_OK)
 8001d88:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d8a:	78d2      	ldrb	r2, [r2, #3]
 8001d8c:	2a04      	cmp	r2, #4
 8001d8e:	d006      	beq.n	8001d9e <MAX_ParseResponseFunction+0xca>
            MAX->NewEvent = MAX_EVENT_ERROR;
 8001d90:	2203      	movs	r2, #3
 8001d92:	705a      	strb	r2, [r3, #1]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001d94:	2164      	movs	r1, #100	; 0x64
 8001d96:	480b      	ldr	r0, [pc, #44]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001d98:	f7ff fef2 	bl	8001b80 <MAX485_ReciveToIdleDMA>
 8001d9c:	e7c5      	b.n	8001d2a <MAX_ParseResponseFunction+0x56>
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 8001d9e:	705a      	strb	r2, [r3, #1]
            MAX->Cnt      = 0;
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
            MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001da4:	2164      	movs	r1, #100	; 0x64
 8001da6:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001da8:	f7ff feea 	bl	8001b80 <MAX485_ReciveToIdleDMA>
 8001dac:	e7bd      	b.n	8001d2a <MAX_ParseResponseFunction+0x56>
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001dae:	2164      	movs	r1, #100	; 0x64
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MAX_ParseResponseFunction+0xf0>)
 8001db2:	f7ff fee5 	bl	8001b80 <MAX485_ReciveToIdleDMA>
      MAX->NewEvent = MAX_EVENT_ERROR;
 8001db6:	4b02      	ldr	r3, [pc, #8]	; (8001dc0 <MAX_ParseResponseFunction+0xec>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2203      	movs	r2, #3
 8001dbc:	705a      	strb	r2, [r3, #1]
}
 8001dbe:	e7b4      	b.n	8001d2a <MAX_ParseResponseFunction+0x56>
 8001dc0:	20000098 	.word	0x20000098
 8001dc4:	200000b0 	.word	0x200000b0

08001dc8 <MAX_WaitForResponseFunction>:
{
 8001dc8:	b510      	push	{r4, lr}
   if(HAL_GetTick() - MAX->LastTick > 2000)
 8001dca:	f000 fe63 	bl	8002a94 <HAL_GetTick>
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <MAX_WaitForResponseFunction+0x2c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	695a      	ldr	r2, [r3, #20]
 8001dd4:	1a80      	subs	r0, r0, r2
 8001dd6:	22fa      	movs	r2, #250	; 0xfa
 8001dd8:	00d2      	lsls	r2, r2, #3
 8001dda:	4290      	cmp	r0, r2
 8001ddc:	d902      	bls.n	8001de4 <MAX_WaitForResponseFunction+0x1c>
      MAX->NewEvent = MAX_EVENT_ERROR;
 8001dde:	2203      	movs	r2, #3
 8001de0:	705a      	strb	r2, [r3, #1]
}
 8001de2:	bd10      	pop	{r4, pc}
   else if(MAX->NewDataFlag == MAX_NEW_DATA_FLAG_SET)
 8001de4:	791a      	ldrb	r2, [r3, #4]
 8001de6:	2a01      	cmp	r2, #1
 8001de8:	d1fb      	bne.n	8001de2 <MAX_WaitForResponseFunction+0x1a>
      MAX->NewDataFlag = MAX_NEW_DATA_FLAG_RESET;
 8001dea:	2200      	movs	r2, #0
 8001dec:	711a      	strb	r2, [r3, #4]
      MAX->NewEvent    = MAX_EVENT_NEW_DATA;
 8001dee:	3201      	adds	r2, #1
 8001df0:	705a      	strb	r2, [r3, #1]
}
 8001df2:	e7f6      	b.n	8001de2 <MAX_WaitForResponseFunction+0x1a>
 8001df4:	20000098 	.word	0x20000098

08001df8 <MAX_SendFunction>:
{
 8001df8:	b510      	push	{r4, lr}
   if(MAX->Cnt < 5)
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MAX_SendFunction+0x3c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	2a04      	cmp	r2, #4
 8001e02:	d80e      	bhi.n	8001e22 <MAX_SendFunction+0x2a>
      MAX485_TransmitData(MAXDataTransmit, MAX->DataTransmitSize);
 8001e04:	8b19      	ldrh	r1, [r3, #24]
 8001e06:	480c      	ldr	r0, [pc, #48]	; (8001e38 <MAX_SendFunction+0x40>)
 8001e08:	f7ff fecc 	bl	8001ba4 <MAX485_TransmitData>
      MAX->Cnt++;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MAX_SendFunction+0x3c>)
 8001e0e:	681c      	ldr	r4, [r3, #0]
 8001e10:	6923      	ldr	r3, [r4, #16]
 8001e12:	3301      	adds	r3, #1
 8001e14:	6123      	str	r3, [r4, #16]
      MAX->NewEvent = MAX_EVENT_WAIT_FOR_RESPONSE;
 8001e16:	2305      	movs	r3, #5
 8001e18:	7063      	strb	r3, [r4, #1]
      MAX->LastTick = HAL_GetTick();
 8001e1a:	f000 fe3b 	bl	8002a94 <HAL_GetTick>
 8001e1e:	6160      	str	r0, [r4, #20]
}
 8001e20:	bd10      	pop	{r4, pc}
      MAX->Cnt      = 0;
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]
      MAX->NewEvent = MAX_EVENT_ERROR;
 8001e26:	3203      	adds	r2, #3
 8001e28:	705a      	strb	r2, [r3, #1]
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001e2a:	2164      	movs	r1, #100	; 0x64
 8001e2c:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MAX_SendFunction+0x44>)
 8001e2e:	f7ff fea7 	bl	8001b80 <MAX485_ReciveToIdleDMA>
}
 8001e32:	e7f5      	b.n	8001e20 <MAX_SendFunction+0x28>
 8001e34:	20000098 	.word	0x20000098
 8001e38:	20000114 	.word	0x20000114
 8001e3c:	200000b0 	.word	0x200000b0

08001e40 <MAX_SendResponseFunction>:
{
 8001e40:	b510      	push	{r4, lr}
   MAXDataTransmit[0] = MAX->SourceMessage;
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <MAX_SendResponseFunction+0x3c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4c0e      	ldr	r4, [pc, #56]	; (8001e80 <MAX_SendResponseFunction+0x40>)
 8001e48:	7b1a      	ldrb	r2, [r3, #12]
 8001e4a:	7022      	strb	r2, [r4, #0]
   MAXDataTransmit[1] = MAX->DeviceType;
 8001e4c:	795b      	ldrb	r3, [r3, #5]
 8001e4e:	7063      	strb	r3, [r4, #1]
   MAXDataTransmit[2] = MAX_MESSAGE;
 8001e50:	2303      	movs	r3, #3
 8001e52:	70a3      	strb	r3, [r4, #2]
   MAXDataTransmit[3] = Response;
 8001e54:	70e0      	strb	r0, [r4, #3]
   uint32_t crc       = Crc(CRC_INITIAL_VALUE, 4, MAXDataTransmit);
 8001e56:	2001      	movs	r0, #1
 8001e58:	0022      	movs	r2, r4
 8001e5a:	2104      	movs	r1, #4
 8001e5c:	4240      	negs	r0, r0
 8001e5e:	f000 fb2b 	bl	80024b8 <Crc>
   MAXDataTransmit[4] = ((crc >> 24) & 0xff);
 8001e62:	0e03      	lsrs	r3, r0, #24
 8001e64:	7123      	strb	r3, [r4, #4]
   MAXDataTransmit[5] = ((crc >> 16) & 0xff);
 8001e66:	0c03      	lsrs	r3, r0, #16
 8001e68:	7163      	strb	r3, [r4, #5]
   MAXDataTransmit[6] = ((crc >> 8) & 0xff);
 8001e6a:	0a03      	lsrs	r3, r0, #8
 8001e6c:	71a3      	strb	r3, [r4, #6]
   MAXDataTransmit[7] = (crc & 0xff);
 8001e6e:	71e0      	strb	r0, [r4, #7]
   MAX485_TransmitData(MAXDataTransmit, 8);
 8001e70:	2108      	movs	r1, #8
 8001e72:	0020      	movs	r0, r4
 8001e74:	f7ff fe96 	bl	8001ba4 <MAX485_TransmitData>
}
 8001e78:	bd10      	pop	{r4, pc}
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	20000098 	.word	0x20000098
 8001e80:	20000114 	.word	0x20000114

08001e84 <MAX_ParseFunction>:
{
 8001e84:	b510      	push	{r4, lr}
   MAX->SourceMessage  = MAXDataRecive[1];
 8001e86:	4b28      	ldr	r3, [pc, #160]	; (8001f28 <MAX_ParseFunction+0xa4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a28      	ldr	r2, [pc, #160]	; (8001f2c <MAX_ParseFunction+0xa8>)
 8001e8c:	7851      	ldrb	r1, [r2, #1]
 8001e8e:	7319      	strb	r1, [r3, #12]
   if(MAXDataRecive[0] != MAX->DeviceType)
 8001e90:	7811      	ldrb	r1, [r2, #0]
 8001e92:	795a      	ldrb	r2, [r3, #5]
 8001e94:	4291      	cmp	r1, r2
 8001e96:	d12d      	bne.n	8001ef4 <MAX_ParseFunction+0x70>
      if(MAX->DataSize != 0)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d033      	beq.n	8001f06 <MAX_ParseFunction+0x82>
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8001e9e:	1f19      	subs	r1, r3, #4
 8001ea0:	4a22      	ldr	r2, [pc, #136]	; (8001f2c <MAX_ParseFunction+0xa8>)
 8001ea2:	18d3      	adds	r3, r2, r3
 8001ea4:	1ed8      	subs	r0, r3, #3
 8001ea6:	7804      	ldrb	r4, [r0, #0]
 8001ea8:	0424      	lsls	r4, r4, #16
 8001eaa:	5c50      	ldrb	r0, [r2, r1]
 8001eac:	0600      	lsls	r0, r0, #24
 8001eae:	4304      	orrs	r4, r0
                       | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 8001eb0:	1e58      	subs	r0, r3, #1
 8001eb2:	7800      	ldrb	r0, [r0, #0]
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8001eb4:	4304      	orrs	r4, r0
                       | ((uint32_t)MAXDataRecive[MAX->DataSize - 2] << 8) | ((uint32_t)MAXDataRecive[MAX->DataSize - 1]));
 8001eb6:	3b02      	subs	r3, #2
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	021b      	lsls	r3, r3, #8
         MessageCRC = (((uint32_t)MAXDataRecive[MAX->DataSize - 4] << 24) | ((uint32_t)MAXDataRecive[MAX->DataSize - 3] << 16)
 8001ebc:	431c      	orrs	r4, r3
         if(MessageCRC == Crc(CRC_INITIAL_VALUE, MAX->DataSize - 4, MAXDataRecive))
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	4240      	negs	r0, r0
 8001ec2:	f000 faf9 	bl	80024b8 <Crc>
 8001ec6:	42a0      	cmp	r0, r4
 8001ec8:	d01e      	beq.n	8001f08 <MAX_ParseFunction+0x84>
            if(RepareMessage(MessageCRC, MAXDataRecive, MAX->DataSize) == CRC_OK)
 8001eca:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <MAX_ParseFunction+0xa4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	4916      	ldr	r1, [pc, #88]	; (8001f2c <MAX_ParseFunction+0xa8>)
 8001ed2:	0020      	movs	r0, r4
 8001ed4:	f000 fb2c 	bl	8002530 <RepareMessage>
 8001ed8:	2801      	cmp	r0, #1
 8001eda:	d01d      	beq.n	8001f18 <MAX_ParseFunction+0x94>
               MAX->NewEvent = MAX_EVENT_ERROR;
 8001edc:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <MAX_ParseFunction+0xa4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	705a      	strb	r2, [r3, #1]
               MAX_SendResponseFunction(MAX_CRC_ERROR);
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	f7ff ffab 	bl	8001e40 <MAX_SendResponseFunction>
               MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001eea:	2164      	movs	r1, #100	; 0x64
 8001eec:	480f      	ldr	r0, [pc, #60]	; (8001f2c <MAX_ParseFunction+0xa8>)
 8001eee:	f7ff fe47 	bl	8001b80 <MAX485_ReciveToIdleDMA>
}
 8001ef2:	e008      	b.n	8001f06 <MAX_ParseFunction+0x82>
      MAX->NewEvent = MAX_EVENT_ERROR;
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	705a      	strb	r2, [r3, #1]
      MAX_SendResponseFunction(MAX_ERROR);
 8001ef8:	2001      	movs	r0, #1
 8001efa:	f7ff ffa1 	bl	8001e40 <MAX_SendResponseFunction>
      MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001efe:	2164      	movs	r1, #100	; 0x64
 8001f00:	480a      	ldr	r0, [pc, #40]	; (8001f2c <MAX_ParseFunction+0xa8>)
 8001f02:	f7ff fe3d 	bl	8001b80 <MAX485_ReciveToIdleDMA>
}
 8001f06:	bd10      	pop	{r4, pc}
            MAX->NewEvent = MAX_EVENT_DATA_OK;
 8001f08:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <MAX_ParseFunction+0xa4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	705a      	strb	r2, [r3, #1]
            MAX_SendResponseFunction(MAX_OK);
 8001f10:	2004      	movs	r0, #4
 8001f12:	f7ff ff95 	bl	8001e40 <MAX_SendResponseFunction>
 8001f16:	e7f6      	b.n	8001f06 <MAX_ParseFunction+0x82>
               MAX->NewEvent = MAX_EVENT_DATA_OK;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <MAX_ParseFunction+0xa4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	705a      	strb	r2, [r3, #1]
               MAX_SendResponseFunction(MAX_OK);
 8001f20:	3003      	adds	r0, #3
 8001f22:	f7ff ff8d 	bl	8001e40 <MAX_SendResponseFunction>
 8001f26:	e7ee      	b.n	8001f06 <MAX_ParseFunction+0x82>
 8001f28:	20000098 	.word	0x20000098
 8001f2c:	200000b0 	.word	0x200000b0

08001f30 <MAX_Handle>:
{
 8001f30:	b570      	push	{r4, r5, r6, lr}
      if(MAX->State == MAXTransitionTable[i].Source && MAX->NewEvent == MAXTransitionTable[i].Event)
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <MAX_Handle+0x4c>)
 8001f34:	681c      	ldr	r4, [r3, #0]
 8001f36:	7820      	ldrb	r0, [r4, #0]
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <MAX_Handle+0x50>)
   for(int i = 0; i < MAX_TRANSITION_TABLE_SIZE; i++)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	e003      	b.n	8001f46 <MAX_Handle+0x16>
 8001f3e:	3201      	adds	r2, #1
 8001f40:	3303      	adds	r3, #3
 8001f42:	2a0c      	cmp	r2, #12
 8001f44:	d00f      	beq.n	8001f66 <MAX_Handle+0x36>
      if(MAX->State == MAXTransitionTable[i].Source && MAX->NewEvent == MAXTransitionTable[i].Event)
 8001f46:	7819      	ldrb	r1, [r3, #0]
 8001f48:	4281      	cmp	r1, r0
 8001f4a:	d1f8      	bne.n	8001f3e <MAX_Handle+0xe>
 8001f4c:	7865      	ldrb	r5, [r4, #1]
 8001f4e:	7899      	ldrb	r1, [r3, #2]
 8001f50:	428d      	cmp	r5, r1
 8001f52:	d1f4      	bne.n	8001f3e <MAX_Handle+0xe>
         MAX->State    = MAXTransitionTable[i].Destination;
 8001f54:	0053      	lsls	r3, r2, #1
 8001f56:	189b      	adds	r3, r3, r2
 8001f58:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <MAX_Handle+0x50>)
 8001f5a:	18d2      	adds	r2, r2, r3
 8001f5c:	7853      	ldrb	r3, [r2, #1]
 8001f5e:	7023      	strb	r3, [r4, #0]
         MAX->NewEvent = MAX_EVENT_NOTHING;
 8001f60:	2300      	movs	r3, #0
 8001f62:	7063      	strb	r3, [r4, #1]
         return;
 8001f64:	e001      	b.n	8001f6a <MAX_Handle+0x3a>
   MAX->NewEvent = MAX_EVENT_NOTHING;
 8001f66:	2300      	movs	r3, #0
 8001f68:	7063      	strb	r3, [r4, #1]
   if(MAXFunction[MAX->State].MAXFunction != NULL)
 8001f6a:	7823      	ldrb	r3, [r4, #0]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <MAX_Handle+0x54>)
 8001f70:	589b      	ldr	r3, [r3, r2]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d000      	beq.n	8001f78 <MAX_Handle+0x48>
      MAXFunction[MAX->State].MAXFunction();
 8001f76:	4798      	blx	r3
}
 8001f78:	bd70      	pop	{r4, r5, r6, pc}
 8001f7a:	46c0      	nop			; (mov r8, r8)
 8001f7c:	20000098 	.word	0x20000098
 8001f80:	08005944 	.word	0x08005944
 8001f84:	20000000 	.word	0x20000000

08001f88 <MAX_Init>:
{
 8001f88:	b510      	push	{r4, lr}
   MAX             = RadioProtocol;
 8001f8a:	4c0d      	ldr	r4, [pc, #52]	; (8001fc0 <MAX_Init+0x38>)
 8001f8c:	6020      	str	r0, [r4, #0]
   MAX->Initialize = MAX_INITIALIZE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	70c3      	strb	r3, [r0, #3]
   MAX->DeviceType = Device;
 8001f92:	7141      	strb	r1, [r0, #5]
      MAXCommandFunction[i].MAXCommandFunction = NULL;
 8001f94:	4a0b      	ldr	r2, [pc, #44]	; (8001fc4 <MAX_Init+0x3c>)
 8001f96:	2300      	movs	r3, #0
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	6053      	str	r3, [r2, #4]
 8001f9c:	6093      	str	r3, [r2, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
      MAXMessageFunction[i].MAXMessageFunction = NULL;
 8001fa0:	4a09      	ldr	r2, [pc, #36]	; (8001fc8 <MAX_Init+0x40>)
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	6053      	str	r3, [r2, #4]
 8001fa6:	6093      	str	r3, [r2, #8]
 8001fa8:	60d3      	str	r3, [r2, #12]
 8001faa:	6113      	str	r3, [r2, #16]
   MAXDataFunctions.MAXDataFunction = NULL;
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <MAX_Init+0x44>)
 8001fae:	6013      	str	r3, [r2, #0]
   MAX485_ReciveToIdleDMA(MAXDataRecive, sizeof(MAXDataRecive));
 8001fb0:	2164      	movs	r1, #100	; 0x64
 8001fb2:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <MAX_Init+0x48>)
 8001fb4:	f7ff fde4 	bl	8001b80 <MAX485_ReciveToIdleDMA>
   MAX485_Init(MAX);
 8001fb8:	6820      	ldr	r0, [r4, #0]
 8001fba:	f7ff fe11 	bl	8001be0 <MAX485_Init>
}
 8001fbe:	bd10      	pop	{r4, pc}
 8001fc0:	20000098 	.word	0x20000098
 8001fc4:	2000009c 	.word	0x2000009c
 8001fc8:	20000178 	.word	0x20000178
 8001fcc:	200000ac 	.word	0x200000ac
 8001fd0:	200000b0 	.word	0x200000b0

08001fd4 <MAX_RegisterCommandFunction>:
   MAXCommandFunction[Command - 1].MAXCommandFunction = Callback;
 8001fd4:	3801      	subs	r0, #1
 8001fd6:	0080      	lsls	r0, r0, #2
 8001fd8:	4b01      	ldr	r3, [pc, #4]	; (8001fe0 <MAX_RegisterCommandFunction+0xc>)
 8001fda:	5019      	str	r1, [r3, r0]
}
 8001fdc:	4770      	bx	lr
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	2000009c 	.word	0x2000009c

08001fe4 <MAX_InterruptTask>:
   MAX->NewDataFlag = MAX_NEW_DATA_FLAG_SET;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <MAX_InterruptTask+0xc>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	711a      	strb	r2, [r3, #4]
}
 8001fec:	4770      	bx	lr
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	20000098 	.word	0x20000098

08001ff4 <MAX_SendData>:
{
 8001ff4:	b570      	push	{r4, r5, r6, lr}
 8001ff6:	001d      	movs	r5, r3
   MAXDataTransmit[0] = Destination;
 8001ff8:	4b13      	ldr	r3, [pc, #76]	; (8002048 <MAX_SendData+0x54>)
 8001ffa:	7018      	strb	r0, [r3, #0]
   MAXDataTransmit[1] = MAX->DeviceType;
 8001ffc:	4813      	ldr	r0, [pc, #76]	; (800204c <MAX_SendData+0x58>)
 8001ffe:	6800      	ldr	r0, [r0, #0]
 8002000:	7940      	ldrb	r0, [r0, #5]
 8002002:	7058      	strb	r0, [r3, #1]
   MAXDataTransmit[2] = Type;
 8002004:	7099      	strb	r1, [r3, #2]
   for(int i = 0; i < Length; i++)
 8002006:	2d00      	cmp	r5, #0
 8002008:	d007      	beq.n	800201a <MAX_SendData+0x26>
 800200a:	002e      	movs	r6, r5
 800200c:	2100      	movs	r1, #0
      MAXDataTransmit[i + 3] = Data[i];
 800200e:	5c54      	ldrb	r4, [r2, r1]
 8002010:	1858      	adds	r0, r3, r1
 8002012:	70c4      	strb	r4, [r0, #3]
   for(int i = 0; i < Length; i++)
 8002014:	3101      	adds	r1, #1
 8002016:	42b1      	cmp	r1, r6
 8002018:	d1f9      	bne.n	800200e <MAX_SendData+0x1a>
   uint32_t crc                    = Crc(CRC_INITIAL_VALUE, 3 + Length, MAXDataTransmit);
 800201a:	1cee      	adds	r6, r5, #3
 800201c:	4c0a      	ldr	r4, [pc, #40]	; (8002048 <MAX_SendData+0x54>)
 800201e:	2001      	movs	r0, #1
 8002020:	0022      	movs	r2, r4
 8002022:	0031      	movs	r1, r6
 8002024:	4240      	negs	r0, r0
 8002026:	f000 fa47 	bl	80024b8 <Crc>
   MAXDataTransmit[3 + Length]     = ((crc >> 24) & 0xff);
 800202a:	0e03      	lsrs	r3, r0, #24
 800202c:	55a3      	strb	r3, [r4, r6]
   MAXDataTransmit[3 + Length + 1] = ((crc >> 16) & 0xff);
 800202e:	1964      	adds	r4, r4, r5
 8002030:	0c03      	lsrs	r3, r0, #16
 8002032:	7123      	strb	r3, [r4, #4]
   MAXDataTransmit[3 + Length + 2] = ((crc >> 8) & 0xff);
 8002034:	0a03      	lsrs	r3, r0, #8
 8002036:	7163      	strb	r3, [r4, #5]
   MAXDataTransmit[3 + Length + 3] = (crc & 0xff);
 8002038:	71a0      	strb	r0, [r4, #6]
   MAX->SendFlag                   = MAX_SEND_FLAG_SET;
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <MAX_SendData+0x58>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	735a      	strb	r2, [r3, #13]
   MAX->DataTransmitSize           = 3 + Length + 4;
 8002042:	3507      	adds	r5, #7
 8002044:	619d      	str	r5, [r3, #24]
}
 8002046:	bd70      	pop	{r4, r5, r6, pc}
 8002048:	20000114 	.word	0x20000114
 800204c:	20000098 	.word	0x20000098

08002050 <SM_WaitForSendFunction>:
#endif
}
static void SM_WaitForSendFunction(void)
{
#ifndef DEBUG_SWDIO
   if(MAX.State == MAX_STATE_IDLE)
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SM_WaitForSendFunction+0x14>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d000      	beq.n	800205a <SM_WaitForSendFunction+0xa>
   }
#endif
#ifdef DEBUG_SWDIO
   SmPtr.NewEvent = SM_EVENT_END_RUNNING;
#endif
}
 8002058:	4770      	bx	lr
      SmPtr.NewEvent = SM_EVENT_END_RUNNING;
 800205a:	4b03      	ldr	r3, [pc, #12]	; (8002068 <SM_WaitForSendFunction+0x18>)
 800205c:	2202      	movs	r2, #2
 800205e:	715a      	strb	r2, [r3, #5]
}
 8002060:	e7fa      	b.n	8002058 <SM_WaitForSendFunction+0x8>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	20000194 	.word	0x20000194
 8002068:	200001b0 	.word	0x200001b0

0800206c <MAX_CommandStartMeasurmentFunction>:
   MAX_SendData(MAX_ODWS, MAX_MESSAGE, &Temp, 1);
#endif
}
void MAX_CommandStartMeasurmentFunction(uint8_t *Data, uint32_t DataSize, uint32_t DataStart)
{
   SmPtr.MeasurmentFlag = SM_FLAG_SET;
 800206c:	4b01      	ldr	r3, [pc, #4]	; (8002074 <MAX_CommandStartMeasurmentFunction+0x8>)
 800206e:	2201      	movs	r2, #1
 8002070:	719a      	strb	r2, [r3, #6]
}
 8002072:	4770      	bx	lr
 8002074:	200001b0 	.word	0x200001b0

08002078 <SM_SleepFunction>:
{
 8002078:	b510      	push	{r4, lr}
   HAL_SuspendTick();
 800207a:	f000 fd23 	bl	8002ac4 <HAL_SuspendTick>
   HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800207e:	2101      	movs	r1, #1
 8002080:	2000      	movs	r0, #0
 8002082:	f001 ffa5 	bl	8003fd0 <HAL_PWR_EnterSLEEPMode>
   HAL_ResumeTick();
 8002086:	f000 fd25 	bl	8002ad4 <HAL_ResumeTick>
   SmPtr.NewEvent = SM_EVENT_END_SLEEP;
 800208a:	4b02      	ldr	r3, [pc, #8]	; (8002094 <SM_SleepFunction+0x1c>)
 800208c:	2203      	movs	r2, #3
 800208e:	715a      	strb	r2, [r3, #5]
}
 8002090:	bd10      	pop	{r4, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	200001b0 	.word	0x200001b0

08002098 <MAX_CommandTestFunction>:
{
 8002098:	b500      	push	{lr}
 800209a:	b083      	sub	sp, #12
   uint8_t Temp = MAX_OK;
 800209c:	466b      	mov	r3, sp
 800209e:	1dda      	adds	r2, r3, #7
 80020a0:	2304      	movs	r3, #4
 80020a2:	7013      	strb	r3, [r2, #0]
   MAX_SendData(MAX_ODWS, MAX_MESSAGE, &Temp, 1);
 80020a4:	3b03      	subs	r3, #3
 80020a6:	2103      	movs	r1, #3
 80020a8:	2002      	movs	r0, #2
 80020aa:	f7ff ffa3 	bl	8001ff4 <MAX_SendData>
}
 80020ae:	b003      	add	sp, #12
 80020b0:	bd00      	pop	{pc}
	...

080020b4 <SM_RunningFunction>:
{
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	46c6      	mov	lr, r8
 80020b8:	b500      	push	{lr}
 80020ba:	b086      	sub	sp, #24
   if(MAX.State == MAX_STATE_IDLE)
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <SM_RunningFunction+0xdc>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d003      	beq.n	80020cc <SM_RunningFunction+0x18>
}
 80020c4:	b006      	add	sp, #24
 80020c6:	bc80      	pop	{r7}
 80020c8:	46b8      	mov	r8, r7
 80020ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(SmPtr.MeasurmentFlag == SM_FLAG_SET)
 80020cc:	4b31      	ldr	r3, [pc, #196]	; (8002194 <SM_RunningFunction+0xe0>)
 80020ce:	799b      	ldrb	r3, [r3, #6]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d003      	beq.n	80020dc <SM_RunningFunction+0x28>
         SmPtr.NewEvent = SM_EVENT_END_RUNNING;
 80020d4:	4b2f      	ldr	r3, [pc, #188]	; (8002194 <SM_RunningFunction+0xe0>)
 80020d6:	2202      	movs	r2, #2
 80020d8:	715a      	strb	r2, [r3, #5]
}
 80020da:	e7f3      	b.n	80020c4 <SM_RunningFunction+0x10>
         SmPtr.MeasurmentFlag = SM_FLAG_RESET;
 80020dc:	4c2d      	ldr	r4, [pc, #180]	; (8002194 <SM_RunningFunction+0xe0>)
 80020de:	2300      	movs	r3, #0
 80020e0:	71a3      	strb	r3, [r4, #6]
         SmPtr.Brightness     = bh1750_ReadLuxOneTime(&Bh);
 80020e2:	482d      	ldr	r0, [pc, #180]	; (8002198 <SM_RunningFunction+0xe4>)
 80020e4:	f000 f9d0 	bl	8002488 <bh1750_ReadLuxOneTime>
 80020e8:	8120      	strh	r0, [r4, #8]
         SmPtr.NewEvent       = SM_EVENT_START_SENDING;
 80020ea:	2304      	movs	r3, #4
 80020ec:	7163      	strb	r3, [r4, #5]
         HAL_ADC_Start(&hadc1);
 80020ee:	4d2b      	ldr	r5, [pc, #172]	; (800219c <SM_RunningFunction+0xe8>)
 80020f0:	0028      	movs	r0, r5
 80020f2:	f001 f82b 	bl	800314c <HAL_ADC_Start>
         HAL_ADC_PollForConversion(&hadc1, 1000);
 80020f6:	21fa      	movs	r1, #250	; 0xfa
 80020f8:	0089      	lsls	r1, r1, #2
 80020fa:	0028      	movs	r0, r5
 80020fc:	f000 fe18 	bl	8002d30 <HAL_ADC_PollForConversion>
         uint16_t data     = HAL_ADC_GetValue(&hadc1);
 8002100:	0028      	movs	r0, r5
 8002102:	f000 fe75 	bl	8002df0 <HAL_ADC_GetValue>
 8002106:	0005      	movs	r5, r0
         SmPtr.Temperature = (((130.0 - 30.0) / ((float)SmPtr.TS_CAL2 - (float)SmPtr.TS_CAL1)) * (data - (float)SmPtr.TS_CAL1)) + 30.0;
 8002108:	8a20      	ldrh	r0, [r4, #16]
 800210a:	f7fe fb6b 	bl	80007e4 <__aeabi_ui2f>
 800210e:	4680      	mov	r8, r0
 8002110:	8a60      	ldrh	r0, [r4, #18]
 8002112:	f7fe fb67 	bl	80007e4 <__aeabi_ui2f>
 8002116:	4641      	mov	r1, r8
 8002118:	f7fe f968 	bl	80003ec <__aeabi_fsub>
 800211c:	f7ff fc42 	bl	80019a4 <__aeabi_f2d>
 8002120:	0002      	movs	r2, r0
 8002122:	000b      	movs	r3, r1
 8002124:	2000      	movs	r0, #0
 8002126:	491e      	ldr	r1, [pc, #120]	; (80021a0 <SM_RunningFunction+0xec>)
 8002128:	f7fe feda 	bl	8000ee0 <__aeabi_ddiv>
 800212c:	0006      	movs	r6, r0
 800212e:	000f      	movs	r7, r1
 8002130:	042d      	lsls	r5, r5, #16
 8002132:	0c28      	lsrs	r0, r5, #16
 8002134:	f7fe fb08 	bl	8000748 <__aeabi_i2f>
 8002138:	4641      	mov	r1, r8
 800213a:	f7fe f957 	bl	80003ec <__aeabi_fsub>
 800213e:	f7ff fc31 	bl	80019a4 <__aeabi_f2d>
 8002142:	0002      	movs	r2, r0
 8002144:	000b      	movs	r3, r1
 8002146:	0030      	movs	r0, r6
 8002148:	0039      	movs	r1, r7
 800214a:	f7ff f9bf 	bl	80014cc <__aeabi_dmul>
 800214e:	2200      	movs	r2, #0
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <SM_RunningFunction+0xf0>)
 8002152:	f7fe fb89 	bl	8000868 <__aeabi_dadd>
 8002156:	f7ff fc6d 	bl	8001a34 <__aeabi_d2f>
 800215a:	60e0      	str	r0, [r4, #12]
         Data[0]          = MAX_BRIGHTNESS;
 800215c:	aa01      	add	r2, sp, #4
 800215e:	2306      	movs	r3, #6
 8002160:	7013      	strb	r3, [r2, #0]
         Data[1]          = (SmPtr.Brightness >> 8) & 0xff;
 8002162:	8923      	ldrh	r3, [r4, #8]
 8002164:	0a19      	lsrs	r1, r3, #8
 8002166:	7051      	strb	r1, [r2, #1]
         Data[2]          = (SmPtr.Brightness & 0xff);
 8002168:	7093      	strb	r3, [r2, #2]
         Data[3]          = MAX_EXTERNAL_MODULE_TEMPERATURE;
 800216a:	2307      	movs	r3, #7
 800216c:	70d3      	strb	r3, [r2, #3]
         Data[4]          = *TempPtr;
 800216e:	7110      	strb	r0, [r2, #4]
         Data[5] = *TempPtr;
 8002170:	0403      	lsls	r3, r0, #16
 8002172:	0e1b      	lsrs	r3, r3, #24
 8002174:	7153      	strb	r3, [r2, #5]
         Data[6] = *TempPtr;
 8002176:	0203      	lsls	r3, r0, #8
 8002178:	0e1b      	lsrs	r3, r3, #24
 800217a:	7193      	strb	r3, [r2, #6]
         Data[7] = *TempPtr;
 800217c:	0e00      	lsrs	r0, r0, #24
 800217e:	71d0      	strb	r0, [r2, #7]
         MAX_SendData(MAX_ODWS, MAX_DATA, Data, 8);
 8002180:	2308      	movs	r3, #8
 8002182:	2102      	movs	r1, #2
 8002184:	2002      	movs	r0, #2
 8002186:	f7ff ff35 	bl	8001ff4 <MAX_SendData>
         MAX_Handle();
 800218a:	f7ff fed1 	bl	8001f30 <MAX_Handle>
 800218e:	e799      	b.n	80020c4 <SM_RunningFunction+0x10>
 8002190:	20000194 	.word	0x20000194
 8002194:	200001b0 	.word	0x200001b0
 8002198:	2000018c 	.word	0x2000018c
 800219c:	200001c4 	.word	0x200001c4
 80021a0:	40590000 	.word	0x40590000
 80021a4:	403e0000 	.word	0x403e0000

080021a8 <SM_InitializeFunction>:
{
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	46ce      	mov	lr, r9
 80021ac:	4647      	mov	r7, r8
 80021ae:	b580      	push	{r7, lr}
   MAX_Init(&MAX, MAX_BS);
 80021b0:	2101      	movs	r1, #1
 80021b2:	482c      	ldr	r0, [pc, #176]	; (8002264 <SM_InitializeFunction+0xbc>)
 80021b4:	f7ff fee8 	bl	8001f88 <MAX_Init>
   MAX_RegisterCommandFunction(MAX_TEST, MAX_CommandTestFunction);
 80021b8:	492b      	ldr	r1, [pc, #172]	; (8002268 <SM_InitializeFunction+0xc0>)
 80021ba:	2001      	movs	r0, #1
 80021bc:	f7ff ff0a 	bl	8001fd4 <MAX_RegisterCommandFunction>
   MAX_RegisterCommandFunction(MAX_START_MEASURMENT, MAX_CommandStartMeasurmentFunction);
 80021c0:	492a      	ldr	r1, [pc, #168]	; (800226c <SM_InitializeFunction+0xc4>)
 80021c2:	2002      	movs	r0, #2
 80021c4:	f7ff ff06 	bl	8001fd4 <MAX_RegisterCommandFunction>
   SmPtr.TS_CAL1     = *TempPtr;
 80021c8:	4b29      	ldr	r3, [pc, #164]	; (8002270 <SM_InitializeFunction+0xc8>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	4c29      	ldr	r4, [pc, #164]	; (8002274 <SM_InitializeFunction+0xcc>)
 80021ce:	8223      	strh	r3, [r4, #16]
   SmPtr.TS_CAL2     = *TempPtr;
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <SM_InitializeFunction+0xd0>)
 80021d2:	881b      	ldrh	r3, [r3, #0]
 80021d4:	8263      	strh	r3, [r4, #18]
   bh1750_Init(&Bh, &hi2c2, 35, One_Time_H_Resolution_Mode);
 80021d6:	2320      	movs	r3, #32
 80021d8:	2223      	movs	r2, #35	; 0x23
 80021da:	4928      	ldr	r1, [pc, #160]	; (800227c <SM_InitializeFunction+0xd4>)
 80021dc:	4828      	ldr	r0, [pc, #160]	; (8002280 <SM_InitializeFunction+0xd8>)
 80021de:	f000 f95f 	bl	80024a0 <bh1750_Init>
   HAL_ADC_Start(&hadc1);
 80021e2:	4d28      	ldr	r5, [pc, #160]	; (8002284 <SM_InitializeFunction+0xdc>)
 80021e4:	0028      	movs	r0, r5
 80021e6:	f000 ffb1 	bl	800314c <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc1, 1000);
 80021ea:	21fa      	movs	r1, #250	; 0xfa
 80021ec:	0089      	lsls	r1, r1, #2
 80021ee:	0028      	movs	r0, r5
 80021f0:	f000 fd9e 	bl	8002d30 <HAL_ADC_PollForConversion>
   uint16_t data     = HAL_ADC_GetValue(&hadc1);
 80021f4:	0028      	movs	r0, r5
 80021f6:	f000 fdfb 	bl	8002df0 <HAL_ADC_GetValue>
 80021fa:	0005      	movs	r5, r0
   SmPtr.MeasurmentFlag=SM_FLAG_SET;
 80021fc:	2301      	movs	r3, #1
 80021fe:	4699      	mov	r9, r3
 8002200:	71a3      	strb	r3, [r4, #6]
   SmPtr.Temperature = (((130.0 - 30.0) / ((float)SmPtr.TS_CAL2 - (float)SmPtr.TS_CAL1)) * (data - (float)SmPtr.TS_CAL1)) + 30.0;
 8002202:	8a20      	ldrh	r0, [r4, #16]
 8002204:	f7fe faee 	bl	80007e4 <__aeabi_ui2f>
 8002208:	4680      	mov	r8, r0
 800220a:	8a60      	ldrh	r0, [r4, #18]
 800220c:	f7fe faea 	bl	80007e4 <__aeabi_ui2f>
 8002210:	4641      	mov	r1, r8
 8002212:	f7fe f8eb 	bl	80003ec <__aeabi_fsub>
 8002216:	f7ff fbc5 	bl	80019a4 <__aeabi_f2d>
 800221a:	0002      	movs	r2, r0
 800221c:	000b      	movs	r3, r1
 800221e:	2000      	movs	r0, #0
 8002220:	4919      	ldr	r1, [pc, #100]	; (8002288 <SM_InitializeFunction+0xe0>)
 8002222:	f7fe fe5d 	bl	8000ee0 <__aeabi_ddiv>
 8002226:	0006      	movs	r6, r0
 8002228:	000f      	movs	r7, r1
 800222a:	042d      	lsls	r5, r5, #16
 800222c:	0c28      	lsrs	r0, r5, #16
 800222e:	f7fe fa8b 	bl	8000748 <__aeabi_i2f>
 8002232:	4641      	mov	r1, r8
 8002234:	f7fe f8da 	bl	80003ec <__aeabi_fsub>
 8002238:	f7ff fbb4 	bl	80019a4 <__aeabi_f2d>
 800223c:	0002      	movs	r2, r0
 800223e:	000b      	movs	r3, r1
 8002240:	0030      	movs	r0, r6
 8002242:	0039      	movs	r1, r7
 8002244:	f7ff f942 	bl	80014cc <__aeabi_dmul>
 8002248:	2200      	movs	r2, #0
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <SM_InitializeFunction+0xe4>)
 800224c:	f7fe fb0c 	bl	8000868 <__aeabi_dadd>
 8002250:	f7ff fbf0 	bl	8001a34 <__aeabi_d2f>
 8002254:	60e0      	str	r0, [r4, #12]
   SmPtr.NewEvent    = SM_EVENT_INITIALIZE_OK;
 8002256:	464b      	mov	r3, r9
 8002258:	7163      	strb	r3, [r4, #5]
}
 800225a:	bcc0      	pop	{r6, r7}
 800225c:	46b9      	mov	r9, r7
 800225e:	46b0      	mov	r8, r6
 8002260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	20000194 	.word	0x20000194
 8002268:	08002099 	.word	0x08002099
 800226c:	0800206d 	.word	0x0800206d
 8002270:	1fff75a8 	.word	0x1fff75a8
 8002274:	200001b0 	.word	0x200001b0
 8002278:	1fff75ca 	.word	0x1fff75ca
 800227c:	2000022c 	.word	0x2000022c
 8002280:	2000018c 	.word	0x2000018c
 8002284:	200001c4 	.word	0x200001c4
 8002288:	40590000 	.word	0x40590000
 800228c:	403e0000 	.word	0x403e0000

08002290 <SM_MainFunction>:
{
 8002290:	b510      	push	{r4, lr}
   if(MAX.Initialize == MAX_INITIALIZE)
 8002292:	4b1c      	ldr	r3, [pc, #112]	; (8002304 <SM_MainFunction+0x74>)
 8002294:	78db      	ldrb	r3, [r3, #3]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d007      	beq.n	80022aa <SM_MainFunction+0x1a>
   if(HAL_GetTick() - SmPtr.LastTick > 10)
 800229a:	f000 fbfb 	bl	8002a94 <HAL_GetTick>
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <SM_MainFunction+0x78>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1ac0      	subs	r0, r0, r3
 80022a4:	280a      	cmp	r0, #10
 80022a6:	d803      	bhi.n	80022b0 <SM_MainFunction+0x20>
}
 80022a8:	bd10      	pop	{r4, pc}
      MAX_Handle();
 80022aa:	f7ff fe41 	bl	8001f30 <MAX_Handle>
 80022ae:	e7f4      	b.n	800229a <SM_MainFunction+0xa>
      if(SmPtr.State == TransitionTable[i].Source && SmPtr.NewEvent == TransitionTable[i].Event)
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <SM_MainFunction+0x78>)
 80022b2:	7918      	ldrb	r0, [r3, #4]
 80022b4:	795c      	ldrb	r4, [r3, #5]
 80022b6:	4b15      	ldr	r3, [pc, #84]	; (800230c <SM_MainFunction+0x7c>)
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 80022b8:	2200      	movs	r2, #0
 80022ba:	e003      	b.n	80022c4 <SM_MainFunction+0x34>
 80022bc:	3201      	adds	r2, #1
 80022be:	3303      	adds	r3, #3
 80022c0:	2a05      	cmp	r2, #5
 80022c2:	d00f      	beq.n	80022e4 <SM_MainFunction+0x54>
      if(SmPtr.State == TransitionTable[i].Source && SmPtr.NewEvent == TransitionTable[i].Event)
 80022c4:	7819      	ldrb	r1, [r3, #0]
 80022c6:	4281      	cmp	r1, r0
 80022c8:	d1f8      	bne.n	80022bc <SM_MainFunction+0x2c>
 80022ca:	7899      	ldrb	r1, [r3, #2]
 80022cc:	42a1      	cmp	r1, r4
 80022ce:	d1f5      	bne.n	80022bc <SM_MainFunction+0x2c>
         SmPtr.State    = TransitionTable[i].Destination;
 80022d0:	490d      	ldr	r1, [pc, #52]	; (8002308 <SM_MainFunction+0x78>)
 80022d2:	0053      	lsls	r3, r2, #1
 80022d4:	189b      	adds	r3, r3, r2
 80022d6:	4a0d      	ldr	r2, [pc, #52]	; (800230c <SM_MainFunction+0x7c>)
 80022d8:	18d2      	adds	r2, r2, r3
 80022da:	7853      	ldrb	r3, [r2, #1]
 80022dc:	710b      	strb	r3, [r1, #4]
         SmPtr.NewEvent = SM_EVENT_NOTHING;
 80022de:	2300      	movs	r3, #0
 80022e0:	714b      	strb	r3, [r1, #5]
         return;
 80022e2:	e002      	b.n	80022ea <SM_MainFunction+0x5a>
   SmPtr.NewEvent = SM_EVENT_NOTHING;
 80022e4:	4b08      	ldr	r3, [pc, #32]	; (8002308 <SM_MainFunction+0x78>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	715a      	strb	r2, [r3, #5]
      SmPtr.LastTick = HAL_GetTick();
 80022ea:	f000 fbd3 	bl	8002a94 <HAL_GetTick>
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <SM_MainFunction+0x78>)
 80022f0:	6018      	str	r0, [r3, #0]
      if(Function[SmPtr.State].SmFunction != NULL)
 80022f2:	791b      	ldrb	r3, [r3, #4]
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4a06      	ldr	r2, [pc, #24]	; (8002310 <SM_MainFunction+0x80>)
 80022f8:	589b      	ldr	r3, [r3, r2]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0d4      	beq.n	80022a8 <SM_MainFunction+0x18>
         Function[SmPtr.State].SmFunction();
 80022fe:	4798      	blx	r3
}
 8002300:	e7d2      	b.n	80022a8 <SM_MainFunction+0x18>
 8002302:	46c0      	nop			; (mov r8, r8)
 8002304:	20000194 	.word	0x20000194
 8002308:	200001b0 	.word	0x200001b0
 800230c:	2000002c 	.word	0x2000002c
 8002310:	2000001c 	.word	0x2000001c

08002314 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002314:	b500      	push	{lr}
 8002316:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002318:	220c      	movs	r2, #12
 800231a:	2100      	movs	r1, #0
 800231c:	a801      	add	r0, sp, #4
 800231e:	f003 fabd 	bl	800589c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002322:	481a      	ldr	r0, [pc, #104]	; (800238c <MX_ADC1_Init+0x78>)
 8002324:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <MX_ADC1_Init+0x7c>)
 8002326:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002328:	2380      	movs	r3, #128	; 0x80
 800232a:	05db      	lsls	r3, r3, #23
 800232c:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800232e:	2300      	movs	r3, #0
 8002330:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002332:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002334:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002336:	2204      	movs	r2, #4
 8002338:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800233a:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800233c:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800233e:	7683      	strb	r3, [r0, #26]
  hadc1.Init.NbrOfConversion = 1;
 8002340:	3a03      	subs	r2, #3
 8002342:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002344:	321f      	adds	r2, #31
 8002346:	5483      	strb	r3, [r0, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002348:	6243      	str	r3, [r0, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800234a:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800234c:	320c      	adds	r2, #12
 800234e:	5483      	strb	r3, [r0, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002350:	6303      	str	r3, [r0, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8002352:	3a25      	subs	r2, #37	; 0x25
 8002354:	6342      	str	r2, [r0, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8002356:	6382      	str	r2, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002358:	3235      	adds	r2, #53	; 0x35
 800235a:	5483      	strb	r3, [r0, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800235c:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800235e:	f000 fbc1 	bl	8002ae4 <HAL_ADC_Init>
 8002362:	2800      	cmp	r0, #0
 8002364:	d10c      	bne.n	8002380 <MX_ADC1_Init+0x6c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002366:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <MX_ADC1_Init+0x80>)
 8002368:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800236a:	2300      	movs	r3, #0
 800236c:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800236e:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002370:	a901      	add	r1, sp, #4
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <MX_ADC1_Init+0x78>)
 8002374:	f000 fd40 	bl	8002df8 <HAL_ADC_ConfigChannel>
 8002378:	2800      	cmp	r0, #0
 800237a:	d104      	bne.n	8002386 <MX_ADC1_Init+0x72>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800237c:	b005      	add	sp, #20
 800237e:	bd00      	pop	{pc}
    Error_Handler();
 8002380:	f000 fa0c 	bl	800279c <Error_Handler>
 8002384:	e7ef      	b.n	8002366 <MX_ADC1_Init+0x52>
    Error_Handler();
 8002386:	f000 fa09 	bl	800279c <Error_Handler>
}
 800238a:	e7f7      	b.n	800237c <MX_ADC1_Init+0x68>
 800238c:	200001c4 	.word	0x200001c4
 8002390:	40012400 	.word	0x40012400
 8002394:	b0001000 	.word	0xb0001000

08002398 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002398:	b510      	push	{r4, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	0004      	movs	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800239e:	2218      	movs	r2, #24
 80023a0:	2100      	movs	r1, #0
 80023a2:	a802      	add	r0, sp, #8
 80023a4:	f003 fa7a 	bl	800589c <memset>
  if(adcHandle->Instance==ADC1)
 80023a8:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <HAL_ADC_MspInit+0x48>)
 80023aa:	6822      	ldr	r2, [r4, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d001      	beq.n	80023b4 <HAL_ADC_MspInit+0x1c>
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80023b0:	b008      	add	sp, #32
 80023b2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	01db      	lsls	r3, r3, #7
 80023b8:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ba:	a802      	add	r0, sp, #8
 80023bc:	f002 fa5e 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 80023c0:	2800      	cmp	r0, #0
 80023c2:	d10a      	bne.n	80023da <HAL_ADC_MspInit+0x42>
    __HAL_RCC_ADC_CLK_ENABLE();
 80023c4:	4a07      	ldr	r2, [pc, #28]	; (80023e4 <HAL_ADC_MspInit+0x4c>)
 80023c6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80023c8:	2080      	movs	r0, #128	; 0x80
 80023ca:	0340      	lsls	r0, r0, #13
 80023cc:	4301      	orrs	r1, r0
 80023ce:	6411      	str	r1, [r2, #64]	; 0x40
 80023d0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80023d2:	4003      	ands	r3, r0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	9b01      	ldr	r3, [sp, #4]
}
 80023d8:	e7ea      	b.n	80023b0 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 80023da:	f000 f9df 	bl	800279c <Error_Handler>
 80023de:	e7f1      	b.n	80023c4 <HAL_ADC_MspInit+0x2c>
 80023e0:	40012400 	.word	0x40012400
 80023e4:	40021000 	.word	0x40021000

080023e8 <bh1750_TransmitData>:
 *      Author: Marcin
 */
#include "main.h"
#include "bh1750.h"
void bh1750_TransmitData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
 80023e8:	b520      	push	{r5, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	000d      	movs	r5, r1
	HAL_I2C_Master_Transmit(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 80023ee:	0013      	movs	r3, r2
 80023f0:	7901      	ldrb	r1, [r0, #4]
 80023f2:	0049      	lsls	r1, r1, #1
 80023f4:	6800      	ldr	r0, [r0, #0]
 80023f6:	22fa      	movs	r2, #250	; 0xfa
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	9200      	str	r2, [sp, #0]
 80023fc:	002a      	movs	r2, r5
 80023fe:	f001 fc01 	bl	8003c04 <HAL_I2C_Master_Transmit>
}
 8002402:	b002      	add	sp, #8
 8002404:	bd20      	pop	{r5, pc}

08002406 <bh1750_ReceiveData>:
void bh1750_ReceiveData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
 8002406:	b520      	push	{r5, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	000d      	movs	r5, r1
	HAL_I2C_Master_Receive(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 800240c:	0013      	movs	r3, r2
 800240e:	7901      	ldrb	r1, [r0, #4]
 8002410:	0049      	lsls	r1, r1, #1
 8002412:	6800      	ldr	r0, [r0, #0]
 8002414:	22fa      	movs	r2, #250	; 0xfa
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	9200      	str	r2, [sp, #0]
 800241a:	002a      	movs	r2, r5
 800241c:	f001 fcba 	bl	8003d94 <HAL_I2C_Master_Receive>
}
 8002420:	b002      	add	sp, #8
 8002422:	bd20      	pop	{r5, pc}

08002424 <bh1750_ChangeState>:
void bh1750_ChangeState(bh1750_t *bh,bh1750State_t s)
{
 8002424:	b510      	push	{r4, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	0004      	movs	r4, r0
 800242a:	466b      	mov	r3, sp
 800242c:	71d9      	strb	r1, [r3, #7]
	if(s==Continuously_H_Resolution_Mode||s==Continuously_H_Resolution_Mode2||s==Continuously_L_Resolution_Mode)
 800242e:	000b      	movs	r3, r1
 8002430:	3b10      	subs	r3, #16
 8002432:	2b01      	cmp	r3, #1
 8002434:	d901      	bls.n	800243a <bh1750_ChangeState+0x16>
 8002436:	2913      	cmp	r1, #19
 8002438:	d105      	bne.n	8002446 <bh1750_ChangeState+0x22>
	bh1750_TransmitData(bh,&s,1);
 800243a:	2201      	movs	r2, #1
 800243c:	466b      	mov	r3, sp
 800243e:	1dd9      	adds	r1, r3, #7
 8002440:	0020      	movs	r0, r4
 8002442:	f7ff ffd1 	bl	80023e8 <bh1750_TransmitData>
	bh->state=s;
 8002446:	466b      	mov	r3, sp
 8002448:	3307      	adds	r3, #7
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	7163      	strb	r3, [r4, #5]
}
 800244e:	b002      	add	sp, #8
 8002450:	bd10      	pop	{r4, pc}

08002452 <bh1750_SendStartMeasurment>:
void bh1750_SendStartMeasurment(bh1750_t *bh)
{
 8002452:	b510      	push	{r4, lr}
	if(bh->state==One_Time_H_Resolution_Mode||bh->state==One_Time_H_Resolution_Mode2||bh->state==One_Time_L_Resolution_Mode)
 8002454:	7943      	ldrb	r3, [r0, #5]
 8002456:	001a      	movs	r2, r3
 8002458:	3a20      	subs	r2, #32
 800245a:	2a01      	cmp	r2, #1
 800245c:	d901      	bls.n	8002462 <bh1750_SendStartMeasurment+0x10>
 800245e:	2b23      	cmp	r3, #35	; 0x23
 8002460:	d103      	bne.n	800246a <bh1750_SendStartMeasurment+0x18>
	{
		bh1750_TransmitData(bh,&bh->state,1);
 8002462:	1d41      	adds	r1, r0, #5
 8002464:	2201      	movs	r2, #1
 8002466:	f7ff ffbf 	bl	80023e8 <bh1750_TransmitData>
	}
}
 800246a:	bd10      	pop	{r4, pc}

0800246c <bh1750_ReadMeasurment>:
uint16_t bh1750_ReadMeasurment(bh1750_t *bh)
{
 800246c:	b500      	push	{lr}
 800246e:	b083      	sub	sp, #12
	uint8_t data[2];
	bh1750_ReceiveData(bh, data, 2);
 8002470:	2202      	movs	r2, #2
 8002472:	a901      	add	r1, sp, #4
 8002474:	f7ff ffc7 	bl	8002406 <bh1750_ReceiveData>
	return ((data[0]<<8)|(data[1]));
 8002478:	466b      	mov	r3, sp
 800247a:	791b      	ldrb	r3, [r3, #4]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	466a      	mov	r2, sp
 8002480:	7950      	ldrb	r0, [r2, #5]
 8002482:	4318      	orrs	r0, r3
}
 8002484:	b003      	add	sp, #12
 8002486:	bd00      	pop	{pc}

08002488 <bh1750_ReadLuxOneTime>:
uint16_t bh1750_ReadLuxOneTime(bh1750_t *bh)
{
 8002488:	b510      	push	{r4, lr}
 800248a:	0004      	movs	r4, r0
	bh1750_SendStartMeasurment(bh);
 800248c:	f7ff ffe1 	bl	8002452 <bh1750_SendStartMeasurment>
	HAL_Delay(500);
 8002490:	20fa      	movs	r0, #250	; 0xfa
 8002492:	0040      	lsls	r0, r0, #1
 8002494:	f000 fb04 	bl	8002aa0 <HAL_Delay>
	uint16_t rowMeasurment=bh1750_ReadMeasurment(bh);
 8002498:	0020      	movs	r0, r4
 800249a:	f7ff ffe7 	bl	800246c <bh1750_ReadMeasurment>
	return rowMeasurment;
}
 800249e:	bd10      	pop	{r4, pc}

080024a0 <bh1750_Init>:
void bh1750_Init(bh1750_t *bh,I2C_HandleTypeDef* i2c,uint8_t addres,bh1750State_t s)
{
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	0004      	movs	r4, r0
 80024a4:	1e1d      	subs	r5, r3, #0
	bh->bh_i2c=i2c;
 80024a6:	6001      	str	r1, [r0, #0]
	bh->addr=addres;
 80024a8:	7102      	strb	r2, [r0, #4]
	if(s!=0)
 80024aa:	d101      	bne.n	80024b0 <bh1750_Init+0x10>
	bh1750_ChangeState(bh, s);
	bh->state=s;
 80024ac:	7165      	strb	r5, [r4, #5]
}
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
	bh1750_ChangeState(bh, s);
 80024b0:	0019      	movs	r1, r3
 80024b2:	f7ff ffb7 	bl	8002424 <bh1750_ChangeState>
 80024b6:	e7f9      	b.n	80024ac <bh1750_Init+0xc>

080024b8 <Crc>:
#include "crc.h"
#include "main.h"
int RandomNumber[] = { 131456, 215134, 31254, 4135, 516454, 642754, 71363, 85362475, 9144316, 10341957, 11345134, 11354342 };
int k              = 0;
uint32_t Crc(uint32_t PreviuseCRC, uint32_t DataLength, uint8_t *data)
{
 80024b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ba:	46d6      	mov	lr, sl
 80024bc:	464f      	mov	r7, r9
 80024be:	4646      	mov	r6, r8
 80024c0:	b5c0      	push	{r6, r7, lr}
 80024c2:	000f      	movs	r7, r1
 80024c4:	4690      	mov	r8, r2
   PreviuseCRC ^= data[0];
 80024c6:	7816      	ldrb	r6, [r2, #0]
 80024c8:	4046      	eors	r6, r0
   for(uint32_t i = 1; i < DataLength; i++)
 80024ca:	2901      	cmp	r1, #1
 80024cc:	d921      	bls.n	8002512 <Crc+0x5a>
 80024ce:	2401      	movs	r4, #1
   {
      uint32_t temp = data[i];
      if(temp == 0x00000000 )
      {
         temp = RandomNumber[k % sizeof(RandomNumber)];
 80024d0:	4b14      	ldr	r3, [pc, #80]	; (8002524 <Crc+0x6c>)
 80024d2:	4699      	mov	r9, r3
         k++;
      }
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
      if(PreviuseCRC & 0x80000000)
      {
         PreviuseCRC ^= 0xABC245C2;
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <Crc+0x70>)
 80024d6:	469a      	mov	sl, r3
 80024d8:	e007      	b.n	80024ea <Crc+0x32>
      PreviuseCRC ^= ((uint32_t)(temp) * (256 * i));
 80024da:	4360      	muls	r0, r4
 80024dc:	0200      	lsls	r0, r0, #8
 80024de:	4046      	eors	r6, r0
      if(PreviuseCRC & 0x80000000)
 80024e0:	d414      	bmi.n	800250c <Crc+0x54>
      }
      PreviuseCRC <<= 1;
 80024e2:	0076      	lsls	r6, r6, #1
   for(uint32_t i = 1; i < DataLength; i++)
 80024e4:	3401      	adds	r4, #1
 80024e6:	42a7      	cmp	r7, r4
 80024e8:	d013      	beq.n	8002512 <Crc+0x5a>
      uint32_t temp = data[i];
 80024ea:	4643      	mov	r3, r8
 80024ec:	5d18      	ldrb	r0, [r3, r4]
      if(temp == 0x00000000 )
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d1f3      	bne.n	80024da <Crc+0x22>
         temp = RandomNumber[k % sizeof(RandomNumber)];
 80024f2:	464b      	mov	r3, r9
 80024f4:	681d      	ldr	r5, [r3, #0]
 80024f6:	2130      	movs	r1, #48	; 0x30
 80024f8:	0028      	movs	r0, r5
 80024fa:	f7fd fe87 	bl	800020c <__aeabi_uidivmod>
 80024fe:	0089      	lsls	r1, r1, #2
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <Crc+0x74>)
 8002502:	58c8      	ldr	r0, [r1, r3]
         k++;
 8002504:	3501      	adds	r5, #1
 8002506:	464b      	mov	r3, r9
 8002508:	601d      	str	r5, [r3, #0]
 800250a:	e7e6      	b.n	80024da <Crc+0x22>
         PreviuseCRC ^= 0xABC245C2;
 800250c:	4653      	mov	r3, sl
 800250e:	405e      	eors	r6, r3
 8002510:	e7e7      	b.n	80024e2 <Crc+0x2a>
   }
   k = 0;
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <Crc+0x6c>)
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
   return PreviuseCRC;
}
 8002518:	0030      	movs	r0, r6
 800251a:	bce0      	pop	{r5, r6, r7}
 800251c:	46ba      	mov	sl, r7
 800251e:	46b1      	mov	r9, r6
 8002520:	46a8      	mov	r8, r5
 8002522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002524:	20000228 	.word	0x20000228
 8002528:	abc245c2 	.word	0xabc245c2
 800252c:	2000003c 	.word	0x2000003c

08002530 <RepareMessage>:
CRCStatus_TypeDef RepareMessage(uint32_t OryginalCRC, uint8_t *data, uint32_t DataLength)
{
 8002530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002532:	46de      	mov	lr, fp
 8002534:	4657      	mov	r7, sl
 8002536:	464e      	mov	r6, r9
 8002538:	4645      	mov	r5, r8
 800253a:	b5e0      	push	{r5, r6, r7, lr}
 800253c:	b083      	sub	sp, #12
 800253e:	4681      	mov	r9, r0
 8002540:	4688      	mov	r8, r1
   uint8_t temp = 1;
   for(int i = 0; i < DataLength; i++)
 8002542:	2a00      	cmp	r2, #0
 8002544:	d022      	beq.n	800258c <RepareMessage+0x5c>
 8002546:	000d      	movs	r5, r1
 8002548:	0013      	movs	r3, r2
 800254a:	4443      	add	r3, r8
 800254c:	9301      	str	r3, [sp, #4]
   {
      for(int j = 0; j < 8; j++)
      {
         data[i] ^= (temp << j);
 800254e:	2301      	movs	r3, #1
 8002550:	469b      	mov	fp, r3
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 8002552:	1f17      	subs	r7, r2, #4
 8002554:	3b02      	subs	r3, #2
 8002556:	469a      	mov	sl, r3
 8002558:	e003      	b.n	8002562 <RepareMessage+0x32>
   for(int i = 0; i < DataLength; i++)
 800255a:	3501      	adds	r5, #1
 800255c:	9b01      	ldr	r3, [sp, #4]
 800255e:	429d      	cmp	r5, r3
 8002560:	d01e      	beq.n	80025a0 <RepareMessage+0x70>
      for(int j = 0; j < 8; j++)
 8002562:	2600      	movs	r6, #0
         data[i] ^= (temp << j);
 8002564:	465c      	mov	r4, fp
 8002566:	40b4      	lsls	r4, r6
 8002568:	b264      	sxtb	r4, r4
 800256a:	782b      	ldrb	r3, [r5, #0]
 800256c:	4063      	eors	r3, r4
 800256e:	702b      	strb	r3, [r5, #0]
         if(OryginalCRC == Crc(CRC_INITIAL_VALUE, DataLength - 4, data))
 8002570:	4642      	mov	r2, r8
 8002572:	0039      	movs	r1, r7
 8002574:	4650      	mov	r0, sl
 8002576:	f7ff ff9f 	bl	80024b8 <Crc>
 800257a:	4548      	cmp	r0, r9
 800257c:	d008      	beq.n	8002590 <RepareMessage+0x60>
         {
            return CRC_OK;
         }
         else
         {
            data[i] ^= (temp << j);
 800257e:	782b      	ldrb	r3, [r5, #0]
 8002580:	405c      	eors	r4, r3
 8002582:	702c      	strb	r4, [r5, #0]
      for(int j = 0; j < 8; j++)
 8002584:	3601      	adds	r6, #1
 8002586:	2e08      	cmp	r6, #8
 8002588:	d1ec      	bne.n	8002564 <RepareMessage+0x34>
 800258a:	e7e6      	b.n	800255a <RepareMessage+0x2a>
         }
      }
   }
   return CRC_ERROR;
 800258c:	2000      	movs	r0, #0
 800258e:	e000      	b.n	8002592 <RepareMessage+0x62>
            return CRC_OK;
 8002590:	2001      	movs	r0, #1
}
 8002592:	b003      	add	sp, #12
 8002594:	bcf0      	pop	{r4, r5, r6, r7}
 8002596:	46bb      	mov	fp, r7
 8002598:	46b2      	mov	sl, r6
 800259a:	46a9      	mov	r9, r5
 800259c:	46a0      	mov	r8, r4
 800259e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   return CRC_ERROR;
 80025a0:	2000      	movs	r0, #0
 80025a2:	e7f6      	b.n	8002592 <RepareMessage+0x62>

080025a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80025a4:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025a6:	4a05      	ldr	r2, [pc, #20]	; (80025bc <MX_DMA_Init+0x18>)
 80025a8:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80025aa:	2301      	movs	r3, #1
 80025ac:	4319      	orrs	r1, r3
 80025ae:	6391      	str	r1, [r2, #56]	; 0x38
 80025b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025b2:	4013      	ands	r3, r2
 80025b4:	9301      	str	r3, [sp, #4]
 80025b6:	9b01      	ldr	r3, [sp, #4]

}
 80025b8:	b002      	add	sp, #8
 80025ba:	4770      	bx	lr
 80025bc:	40021000 	.word	0x40021000

080025c0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	2214      	movs	r2, #20
 80025c6:	2100      	movs	r1, #0
 80025c8:	a803      	add	r0, sp, #12
 80025ca:	f003 f967 	bl	800589c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ce:	4b13      	ldr	r3, [pc, #76]	; (800261c <MX_GPIO_Init+0x5c>)
 80025d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025d2:	2202      	movs	r2, #2
 80025d4:	4311      	orrs	r1, r2
 80025d6:	6359      	str	r1, [r3, #52]	; 0x34
 80025d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025da:	400a      	ands	r2, r1
 80025dc:	9201      	str	r2, [sp, #4]
 80025de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025e2:	2401      	movs	r4, #1
 80025e4:	4322      	orrs	r2, r4
 80025e6:	635a      	str	r2, [r3, #52]	; 0x34
 80025e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ea:	4023      	ands	r3, r4
 80025ec:	9302      	str	r3, [sp, #8]
 80025ee:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 80025f0:	2680      	movs	r6, #128	; 0x80
 80025f2:	01b6      	lsls	r6, r6, #6
 80025f4:	25a0      	movs	r5, #160	; 0xa0
 80025f6:	05ed      	lsls	r5, r5, #23
 80025f8:	2200      	movs	r2, #0
 80025fa:	0031      	movs	r1, r6
 80025fc:	0028      	movs	r0, r5
 80025fe:	f001 f905 	bl	800380c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_Selector_Pin;
 8002602:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002604:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800260a:	3303      	adds	r3, #3
 800260c:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(MAX485_Selector_GPIO_Port, &GPIO_InitStruct);
 800260e:	a903      	add	r1, sp, #12
 8002610:	0028      	movs	r0, r5
 8002612:	f001 f80d 	bl	8003630 <HAL_GPIO_Init>

}
 8002616:	b008      	add	sp, #32
 8002618:	bd70      	pop	{r4, r5, r6, pc}
 800261a:	46c0      	nop			; (mov r8, r8)
 800261c:	40021000 	.word	0x40021000

08002620 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002620:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002622:	4814      	ldr	r0, [pc, #80]	; (8002674 <MX_I2C2_Init+0x54>)
 8002624:	4b14      	ldr	r3, [pc, #80]	; (8002678 <MX_I2C2_Init+0x58>)
 8002626:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8002628:	4b14      	ldr	r3, [pc, #80]	; (800267c <MX_I2C2_Init+0x5c>)
 800262a:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002630:	2201      	movs	r2, #1
 8002632:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002634:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002636:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002638:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800263a:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800263c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800263e:	f001 fa7b 	bl	8003b38 <HAL_I2C_Init>
 8002642:	2800      	cmp	r0, #0
 8002644:	d10c      	bne.n	8002660 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002646:	2100      	movs	r1, #0
 8002648:	480a      	ldr	r0, [pc, #40]	; (8002674 <MX_I2C2_Init+0x54>)
 800264a:	f001 fc6b 	bl	8003f24 <HAL_I2CEx_ConfigAnalogFilter>
 800264e:	2800      	cmp	r0, #0
 8002650:	d109      	bne.n	8002666 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002652:	2100      	movs	r1, #0
 8002654:	4807      	ldr	r0, [pc, #28]	; (8002674 <MX_I2C2_Init+0x54>)
 8002656:	f001 fc91 	bl	8003f7c <HAL_I2CEx_ConfigDigitalFilter>
 800265a:	2800      	cmp	r0, #0
 800265c:	d106      	bne.n	800266c <MX_I2C2_Init+0x4c>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800265e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002660:	f000 f89c 	bl	800279c <Error_Handler>
 8002664:	e7ef      	b.n	8002646 <MX_I2C2_Init+0x26>
    Error_Handler();
 8002666:	f000 f899 	bl	800279c <Error_Handler>
 800266a:	e7f2      	b.n	8002652 <MX_I2C2_Init+0x32>
    Error_Handler();
 800266c:	f000 f896 	bl	800279c <Error_Handler>
}
 8002670:	e7f5      	b.n	800265e <MX_I2C2_Init+0x3e>
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	2000022c 	.word	0x2000022c
 8002678:	40005800 	.word	0x40005800
 800267c:	2000090e 	.word	0x2000090e

08002680 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002680:	b510      	push	{r4, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002686:	2214      	movs	r2, #20
 8002688:	2100      	movs	r1, #0
 800268a:	a803      	add	r0, sp, #12
 800268c:	f003 f906 	bl	800589c <memset>
  if(i2cHandle->Instance==I2C2)
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_I2C_MspInit+0x5c>)
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002698:	b008      	add	sp, #32
 800269a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800269c:	4c10      	ldr	r4, [pc, #64]	; (80026e0 <HAL_I2C_MspInit+0x60>)
 800269e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80026a0:	2301      	movs	r3, #1
 80026a2:	431a      	orrs	r2, r3
 80026a4:	6362      	str	r2, [r4, #52]	; 0x34
 80026a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80026a8:	4013      	ands	r3, r2
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80026ae:	23c0      	movs	r3, #192	; 0xc0
 80026b0:	015b      	lsls	r3, r3, #5
 80026b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026b4:	2312      	movs	r3, #18
 80026b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80026b8:	3b0c      	subs	r3, #12
 80026ba:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026bc:	20a0      	movs	r0, #160	; 0xa0
 80026be:	a903      	add	r1, sp, #12
 80026c0:	05c0      	lsls	r0, r0, #23
 80026c2:	f000 ffb5 	bl	8003630 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80026c6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80026c8:	2180      	movs	r1, #128	; 0x80
 80026ca:	03c9      	lsls	r1, r1, #15
 80026cc:	430a      	orrs	r2, r1
 80026ce:	63e2      	str	r2, [r4, #60]	; 0x3c
 80026d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80026d2:	400b      	ands	r3, r1
 80026d4:	9302      	str	r3, [sp, #8]
 80026d6:	9b02      	ldr	r3, [sp, #8]
}
 80026d8:	e7de      	b.n	8002698 <HAL_I2C_MspInit+0x18>
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	40005800 	.word	0x40005800
 80026e0:	40021000 	.word	0x40021000

080026e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026e4:	b500      	push	{lr}
 80026e6:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026e8:	2234      	movs	r2, #52	; 0x34
 80026ea:	2100      	movs	r1, #0
 80026ec:	a805      	add	r0, sp, #20
 80026ee:	f003 f8d5 	bl	800589c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026f2:	2210      	movs	r2, #16
 80026f4:	2100      	movs	r1, #0
 80026f6:	a801      	add	r0, sp, #4
 80026f8:	f003 f8d0 	bl	800589c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026fc:	2080      	movs	r0, #128	; 0x80
 80026fe:	0080      	lsls	r0, r0, #2
 8002700:	f001 fc8c 	bl	800401c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002704:	2302      	movs	r3, #2
 8002706:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002708:	33fe      	adds	r3, #254	; 0xfe
 800270a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV2;
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002712:	2340      	movs	r3, #64	; 0x40
 8002714:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002716:	2300      	movs	r3, #0
 8002718:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800271a:	a805      	add	r0, sp, #20
 800271c:	f001 fce4 	bl	80040e8 <HAL_RCC_OscConfig>
 8002720:	2800      	cmp	r0, #0
 8002722:	d10d      	bne.n	8002740 <SystemClock_Config+0x5c>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002724:	2307      	movs	r3, #7
 8002726:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002728:	2300      	movs	r3, #0
 800272a:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800272c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800272e:	9304      	str	r3, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002730:	2100      	movs	r1, #0
 8002732:	a801      	add	r0, sp, #4
 8002734:	f001 ffba 	bl	80046ac <HAL_RCC_ClockConfig>
 8002738:	2800      	cmp	r0, #0
 800273a:	d103      	bne.n	8002744 <SystemClock_Config+0x60>
  {
    Error_Handler();
  }
}
 800273c:	b013      	add	sp, #76	; 0x4c
 800273e:	bd00      	pop	{pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 8002742:	e7fe      	b.n	8002742 <SystemClock_Config+0x5e>
 8002744:	b672      	cpsid	i
 8002746:	e7fe      	b.n	8002746 <SystemClock_Config+0x62>

08002748 <main>:
{
 8002748:	b510      	push	{r4, lr}
  HAL_Init();
 800274a:	f000 f983 	bl	8002a54 <HAL_Init>
  SystemClock_Config();
 800274e:	f7ff ffc9 	bl	80026e4 <SystemClock_Config>
  MX_GPIO_Init();
 8002752:	f7ff ff35 	bl	80025c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8002756:	f7ff ff25 	bl	80025a4 <MX_DMA_Init>
  MX_I2C2_Init();
 800275a:	f7ff ff61 	bl	8002620 <MX_I2C2_Init>
  MX_TIM17_Init();
 800275e:	f000 f85b 	bl	8002818 <MX_TIM17_Init>
  MX_ADC1_Init();
 8002762:	f7ff fdd7 	bl	8002314 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002766:	f000 f889 	bl	800287c <MX_USART1_UART_Init>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800276a:	2200      	movs	r2, #0
 800276c:	2100      	movs	r1, #0
 800276e:	2009      	movs	r0, #9
 8002770:	f000 fd20 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002774:	2009      	movs	r0, #9
 8002776:	f000 fd4f 	bl	8003218 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800277a:	2200      	movs	r2, #0
 800277c:	2100      	movs	r1, #0
 800277e:	201b      	movs	r0, #27
 8002780:	f000 fd18 	bl	80031b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002784:	201b      	movs	r0, #27
 8002786:	f000 fd47 	bl	8003218 <HAL_NVIC_EnableIRQ>
   HAL_TIM_Base_Start(&htim17);
 800278a:	4803      	ldr	r0, [pc, #12]	; (8002798 <main+0x50>)
 800278c:	f002 f940 	bl	8004a10 <HAL_TIM_Base_Start>
      SM_MainFunction();
 8002790:	f7ff fd7e 	bl	8002290 <SM_MainFunction>
   while(1)
 8002794:	e7fc      	b.n	8002790 <main+0x48>
 8002796:	46c0      	nop			; (mov r8, r8)
 8002798:	20000280 	.word	0x20000280

0800279c <Error_Handler>:
 800279c:	b672      	cpsid	i
   while(1)
 800279e:	e7fe      	b.n	800279e <Error_Handler+0x2>

080027a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_MspInit+0x2c>)
 80027a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027a6:	2201      	movs	r2, #1
 80027a8:	4311      	orrs	r1, r2
 80027aa:	6419      	str	r1, [r3, #64]	; 0x40
 80027ac:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80027ae:	400a      	ands	r2, r1
 80027b0:	9200      	str	r2, [sp, #0]
 80027b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	0549      	lsls	r1, r1, #21
 80027ba:	430a      	orrs	r2, r1
 80027bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80027be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c0:	400b      	ands	r3, r1
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c6:	b002      	add	sp, #8
 80027c8:	4770      	bx	lr
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	40021000 	.word	0x40021000

080027d0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while(1)
 80027d0:	e7fe      	b.n	80027d0 <NMI_Handler>

080027d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d2:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HardFault_IRQn 0 */
   HAL_NVIC_SystemReset();
 80027d4:	f000 fd2c 	bl	8003230 <HAL_NVIC_SystemReset>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <HardFault_Handler+0x6>

080027da <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027da:	4770      	bx	lr

080027dc <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027dc:	4770      	bx	lr

080027de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027de:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027e0:	f000 f94c 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027e4:	bd10      	pop	{r4, pc}
	...

080027e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80027e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027ea:	4802      	ldr	r0, [pc, #8]	; (80027f4 <DMA1_Channel1_IRQHandler+0xc>)
 80027ec:	f000 feba 	bl	8003564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80027f0:	bd10      	pop	{r4, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	200002cc 	.word	0x200002cc

080027f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80027f8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027fa:	4802      	ldr	r0, [pc, #8]	; (8002804 <USART1_IRQHandler+0xc>)
 80027fc:	f002 fa58 	bl	8004cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002800:	bd10      	pop	{r4, pc}
 8002802:	46c0      	nop			; (mov r8, r8)
 8002804:	20000328 	.word	0x20000328

08002808 <SystemInit>:
  */
void SystemInit(void)
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8002808:	4b02      	ldr	r3, [pc, #8]	; (8002814 <SystemInit+0xc>)
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	0512      	lsls	r2, r2, #20
 800280e:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002810:	4770      	bx	lr
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002818:	b510      	push	{r4, lr}
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800281a:	480a      	ldr	r0, [pc, #40]	; (8002844 <MX_TIM17_Init+0x2c>)
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <MX_TIM17_Init+0x30>)
 800281e:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 15;
 8002820:	230f      	movs	r3, #15
 8002822:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002824:	2300      	movs	r3, #0
 8002826:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8002828:	4a08      	ldr	r2, [pc, #32]	; (800284c <MX_TIM17_Init+0x34>)
 800282a:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800282c:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 800282e:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002830:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002832:	f002 f985 	bl	8004b40 <HAL_TIM_Base_Init>
 8002836:	2800      	cmp	r0, #0
 8002838:	d100      	bne.n	800283c <MX_TIM17_Init+0x24>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800283a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800283c:	f7ff ffae 	bl	800279c <Error_Handler>
}
 8002840:	e7fb      	b.n	800283a <MX_TIM17_Init+0x22>
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	20000280 	.word	0x20000280
 8002848:	40014800 	.word	0x40014800
 800284c:	0000ffff 	.word	0x0000ffff

08002850 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002850:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM17)
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_TIM_Base_MspInit+0x24>)
 8002854:	6802      	ldr	r2, [r0, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d001      	beq.n	800285e <HAL_TIM_Base_MspInit+0xe>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800285a:	b002      	add	sp, #8
 800285c:	4770      	bx	lr
    __HAL_RCC_TIM17_CLK_ENABLE();
 800285e:	4a06      	ldr	r2, [pc, #24]	; (8002878 <HAL_TIM_Base_MspInit+0x28>)
 8002860:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002862:	2080      	movs	r0, #128	; 0x80
 8002864:	02c0      	lsls	r0, r0, #11
 8002866:	4301      	orrs	r1, r0
 8002868:	6411      	str	r1, [r2, #64]	; 0x40
 800286a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800286c:	4003      	ands	r3, r0
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	9b01      	ldr	r3, [sp, #4]
}
 8002872:	e7f2      	b.n	800285a <HAL_TIM_Base_MspInit+0xa>
 8002874:	40014800 	.word	0x40014800
 8002878:	40021000 	.word	0x40021000

0800287c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800287c:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800287e:	481b      	ldr	r0, [pc, #108]	; (80028ec <MX_USART1_UART_Init+0x70>)
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <MX_USART1_UART_Init+0x74>)
 8002882:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 2400;
 8002884:	2396      	movs	r3, #150	; 0x96
 8002886:	011b      	lsls	r3, r3, #4
 8002888:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800288a:	2300      	movs	r3, #0
 800288c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800288e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002890:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002892:	220c      	movs	r2, #12
 8002894:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002896:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002898:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800289a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800289c:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800289e:	3310      	adds	r3, #16
 80028a0:	6283      	str	r3, [r0, #40]	; 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	015b      	lsls	r3, r3, #5
 80028a6:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028a8:	f002 fe72 	bl	8005590 <HAL_UART_Init>
 80028ac:	2800      	cmp	r0, #0
 80028ae:	d111      	bne.n	80028d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028b0:	2100      	movs	r1, #0
 80028b2:	480e      	ldr	r0, [pc, #56]	; (80028ec <MX_USART1_UART_Init+0x70>)
 80028b4:	f002 ff48 	bl	8005748 <HAL_UARTEx_SetTxFifoThreshold>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d10e      	bne.n	80028da <MX_USART1_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80028bc:	2100      	movs	r1, #0
 80028be:	480b      	ldr	r0, [pc, #44]	; (80028ec <MX_USART1_UART_Init+0x70>)
 80028c0:	f002 ff68 	bl	8005794 <HAL_UARTEx_SetRxFifoThreshold>
 80028c4:	2800      	cmp	r0, #0
 80028c6:	d10b      	bne.n	80028e0 <MX_USART1_UART_Init+0x64>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80028c8:	4808      	ldr	r0, [pc, #32]	; (80028ec <MX_USART1_UART_Init+0x70>)
 80028ca:	f002 ff1d 	bl	8005708 <HAL_UARTEx_DisableFifoMode>
 80028ce:	2800      	cmp	r0, #0
 80028d0:	d109      	bne.n	80028e6 <MX_USART1_UART_Init+0x6a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028d2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80028d4:	f7ff ff62 	bl	800279c <Error_Handler>
 80028d8:	e7ea      	b.n	80028b0 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 80028da:	f7ff ff5f 	bl	800279c <Error_Handler>
 80028de:	e7ed      	b.n	80028bc <MX_USART1_UART_Init+0x40>
    Error_Handler();
 80028e0:	f7ff ff5c 	bl	800279c <Error_Handler>
 80028e4:	e7f0      	b.n	80028c8 <MX_USART1_UART_Init+0x4c>
    Error_Handler();
 80028e6:	f7ff ff59 	bl	800279c <Error_Handler>
}
 80028ea:	e7f2      	b.n	80028d2 <MX_USART1_UART_Init+0x56>
 80028ec:	20000328 	.word	0x20000328
 80028f0:	40013800 	.word	0x40013800

080028f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028f4:	b530      	push	{r4, r5, lr}
 80028f6:	b08f      	sub	sp, #60	; 0x3c
 80028f8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fa:	2214      	movs	r2, #20
 80028fc:	2100      	movs	r1, #0
 80028fe:	a809      	add	r0, sp, #36	; 0x24
 8002900:	f002 ffcc 	bl	800589c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002904:	2218      	movs	r2, #24
 8002906:	2100      	movs	r1, #0
 8002908:	a803      	add	r0, sp, #12
 800290a:	f002 ffc7 	bl	800589c <memset>
  if(uartHandle->Instance==USART1)
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_UART_MspInit+0xa8>)
 8002910:	6822      	ldr	r2, [r4, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d001      	beq.n	800291a <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002916:	b00f      	add	sp, #60	; 0x3c
 8002918:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800291a:	2301      	movs	r3, #1
 800291c:	9303      	str	r3, [sp, #12]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 800291e:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002920:	a803      	add	r0, sp, #12
 8002922:	f001 ffab 	bl	800487c <HAL_RCCEx_PeriphCLKConfig>
 8002926:	2800      	cmp	r0, #0
 8002928:	d132      	bne.n	8002990 <HAL_UART_MspInit+0x9c>
    __HAL_RCC_USART1_CLK_ENABLE();
 800292a:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_UART_MspInit+0xac>)
 800292c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800292e:	2080      	movs	r0, #128	; 0x80
 8002930:	01c0      	lsls	r0, r0, #7
 8002932:	4301      	orrs	r1, r0
 8002934:	6419      	str	r1, [r3, #64]	; 0x40
 8002936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002938:	4002      	ands	r2, r0
 800293a:	9201      	str	r2, [sp, #4]
 800293c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002940:	2202      	movs	r2, #2
 8002942:	4311      	orrs	r1, r2
 8002944:	6359      	str	r1, [r3, #52]	; 0x34
 8002946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002948:	4013      	ands	r3, r2
 800294a:	9302      	str	r3, [sp, #8]
 800294c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800294e:	23c0      	movs	r3, #192	; 0xc0
 8002950:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2500      	movs	r5, #0
 8002956:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002958:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800295a:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800295c:	a909      	add	r1, sp, #36	; 0x24
 800295e:	4811      	ldr	r0, [pc, #68]	; (80029a4 <HAL_UART_MspInit+0xb0>)
 8002960:	f000 fe66 	bl	8003630 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8002964:	4810      	ldr	r0, [pc, #64]	; (80029a8 <HAL_UART_MspInit+0xb4>)
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_UART_MspInit+0xb8>)
 8002968:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800296a:	2332      	movs	r3, #50	; 0x32
 800296c:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800296e:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002970:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002972:	334e      	adds	r3, #78	; 0x4e
 8002974:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002976:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002978:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800297a:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800297c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800297e:	f000 fcbf 	bl	8003300 <HAL_DMA_Init>
 8002982:	2800      	cmp	r0, #0
 8002984:	d107      	bne.n	8002996 <HAL_UART_MspInit+0xa2>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002986:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <HAL_UART_MspInit+0xb4>)
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	50a3      	str	r3, [r4, r2]
 800298c:	629c      	str	r4, [r3, #40]	; 0x28
}
 800298e:	e7c2      	b.n	8002916 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8002990:	f7ff ff04 	bl	800279c <Error_Handler>
 8002994:	e7c9      	b.n	800292a <HAL_UART_MspInit+0x36>
      Error_Handler();
 8002996:	f7ff ff01 	bl	800279c <Error_Handler>
 800299a:	e7f4      	b.n	8002986 <HAL_UART_MspInit+0x92>
 800299c:	40013800 	.word	0x40013800
 80029a0:	40021000 	.word	0x40021000
 80029a4:	50000400 	.word	0x50000400
 80029a8:	200002cc 	.word	0x200002cc
 80029ac:	40020008 	.word	0x40020008

080029b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029b0:	480d      	ldr	r0, [pc, #52]	; (80029e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029b4:	f7ff ff28 	bl	8002808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029b8:	480c      	ldr	r0, [pc, #48]	; (80029ec <LoopForever+0x6>)
  ldr r1, =_edata
 80029ba:	490d      	ldr	r1, [pc, #52]	; (80029f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029bc:	4a0d      	ldr	r2, [pc, #52]	; (80029f4 <LoopForever+0xe>)
  movs r3, #0
 80029be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c0:	e002      	b.n	80029c8 <LoopCopyDataInit>

080029c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029c6:	3304      	adds	r3, #4

080029c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029cc:	d3f9      	bcc.n	80029c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029d0:	4c0a      	ldr	r4, [pc, #40]	; (80029fc <LoopForever+0x16>)
  movs r3, #0
 80029d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029d4:	e001      	b.n	80029da <LoopFillZerobss>

080029d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029d8:	3204      	adds	r2, #4

080029da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029dc:	d3fb      	bcc.n	80029d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80029de:	f002 ff39 	bl	8005854 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80029e2:	f7ff feb1 	bl	8002748 <main>

080029e6 <LoopForever>:

LoopForever:
  b LoopForever
 80029e6:	e7fe      	b.n	80029e6 <LoopForever>
  ldr   r0, =_estack
 80029e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80029ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029f0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80029f4:	080059f8 	.word	0x080059f8
  ldr r2, =_sbss
 80029f8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80029fc:	200003c0 	.word	0x200003c0

08002a00 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a00:	e7fe      	b.n	8002a00 <ADC1_IRQHandler>
	...

08002a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a04:	b510      	push	{r4, lr}
 8002a06:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <HAL_InitTick+0x44>)
 8002a0a:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 8002a0e:	2900      	cmp	r1, #0
 8002a10:	d100      	bne.n	8002a14 <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 8002a12:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002a14:	20fa      	movs	r0, #250	; 0xfa
 8002a16:	0080      	lsls	r0, r0, #2
 8002a18:	f7fd fb72 	bl	8000100 <__udivsi3>
 8002a1c:	0001      	movs	r1, r0
 8002a1e:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_InitTick+0x48>)
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	f7fd fb6d 	bl	8000100 <__udivsi3>
 8002a26:	f000 fc11 	bl	800324c <HAL_SYSTICK_Config>
 8002a2a:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8002a2c:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1ef      	bne.n	8002a12 <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	2c03      	cmp	r4, #3
 8002a34:	d8ed      	bhi.n	8002a12 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a36:	2200      	movs	r2, #0
 8002a38:	0021      	movs	r1, r4
 8002a3a:	4240      	negs	r0, r0
 8002a3c:	f000 fbba 	bl	80031b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_InitTick+0x4c>)
 8002a42:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a44:	2000      	movs	r0, #0
 8002a46:	e7e4      	b.n	8002a12 <HAL_InitTick+0xe>
 8002a48:	20000070 	.word	0x20000070
 8002a4c:	2000006c 	.word	0x2000006c
 8002a50:	20000074 	.word	0x20000074

08002a54 <HAL_Init>:
{
 8002a54:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a56:	4a08      	ldr	r2, [pc, #32]	; (8002a78 <HAL_Init+0x24>)
 8002a58:	6811      	ldr	r1, [r2, #0]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	430b      	orrs	r3, r1
 8002a60:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a62:	2003      	movs	r0, #3
 8002a64:	f7ff ffce 	bl	8002a04 <HAL_InitTick>
 8002a68:	1e04      	subs	r4, r0, #0
 8002a6a:	d002      	beq.n	8002a72 <HAL_Init+0x1e>
    status = HAL_ERROR;
 8002a6c:	2401      	movs	r4, #1
}
 8002a6e:	0020      	movs	r0, r4
 8002a70:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8002a72:	f7ff fe95 	bl	80027a0 <HAL_MspInit>
 8002a76:	e7fa      	b.n	8002a6e <HAL_Init+0x1a>
 8002a78:	40022000 	.word	0x40022000

08002a7c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002a7c:	4a03      	ldr	r2, [pc, #12]	; (8002a8c <HAL_IncTick+0x10>)
 8002a7e:	6811      	ldr	r1, [r2, #0]
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_IncTick+0x14>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	185b      	adds	r3, r3, r1
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	4770      	bx	lr
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	200003bc 	.word	0x200003bc
 8002a90:	20000070 	.word	0x20000070

08002a94 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002a94:	4b01      	ldr	r3, [pc, #4]	; (8002a9c <HAL_GetTick+0x8>)
 8002a96:	6818      	ldr	r0, [r3, #0]
}
 8002a98:	4770      	bx	lr
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	200003bc 	.word	0x200003bc

08002aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7ff fff6 	bl	8002a94 <HAL_GetTick>
 8002aa8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aaa:	1c63      	adds	r3, r4, #1
 8002aac:	d002      	beq.n	8002ab4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aae:	4b04      	ldr	r3, [pc, #16]	; (8002ac0 <HAL_Delay+0x20>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ab4:	f7ff ffee 	bl	8002a94 <HAL_GetTick>
 8002ab8:	1b40      	subs	r0, r0, r5
 8002aba:	42a0      	cmp	r0, r4
 8002abc:	d3fa      	bcc.n	8002ab4 <HAL_Delay+0x14>
  {
  }
}
 8002abe:	bd70      	pop	{r4, r5, r6, pc}
 8002ac0:	20000070 	.word	0x20000070

08002ac4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002ac4:	4a02      	ldr	r2, [pc, #8]	; (8002ad0 <HAL_SuspendTick+0xc>)
 8002ac6:	6813      	ldr	r3, [r2, #0]
 8002ac8:	2102      	movs	r1, #2
 8002aca:	438b      	bics	r3, r1
 8002acc:	6013      	str	r3, [r2, #0]
}
 8002ace:	4770      	bx	lr
 8002ad0:	e000e010 	.word	0xe000e010

08002ad4 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002ad4:	4a02      	ldr	r2, [pc, #8]	; (8002ae0 <HAL_ResumeTick+0xc>)
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	2102      	movs	r1, #2
 8002ada:	430b      	orrs	r3, r1
 8002adc:	6013      	str	r3, [r2, #0]
}
 8002ade:	4770      	bx	lr
 8002ae0:	e000e010 	.word	0xe000e010

08002ae4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ae6:	46c6      	mov	lr, r8
 8002ae8:	b500      	push	{lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002af2:	2800      	cmp	r0, #0
 8002af4:	d100      	bne.n	8002af8 <HAL_ADC_Init+0x14>
 8002af6:	e109      	b.n	8002d0c <HAL_ADC_Init+0x228>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002af8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d100      	bne.n	8002b00 <HAL_ADC_Init+0x1c>
 8002afe:	e0bd      	b.n	8002c7c <HAL_ADC_Init+0x198>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b00:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	00d2      	lsls	r2, r2, #3
 8002b06:	d417      	bmi.n	8002b38 <HAL_ADC_Init+0x54>
  MODIFY_REG(ADCx->CR,
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	4981      	ldr	r1, [pc, #516]	; (8002d10 <HAL_ADC_Init+0x22c>)
 8002b0c:	4011      	ands	r1, r2
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	0552      	lsls	r2, r2, #21
 8002b12:	430a      	orrs	r2, r1
 8002b14:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b16:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <HAL_ADC_Init+0x230>)
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	497f      	ldr	r1, [pc, #508]	; (8002d18 <HAL_ADC_Init+0x234>)
 8002b1c:	f7fd faf0 	bl	8000100 <__udivsi3>
 8002b20:	3001      	adds	r0, #1
 8002b22:	0040      	lsls	r0, r0, #1
 8002b24:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 8002b26:	9b01      	ldr	r3, [sp, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_ADC_Init+0x54>
    {
      wait_loop_index--;
 8002b2c:	9b01      	ldr	r3, [sp, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8002b32:	9b01      	ldr	r3, [sp, #4]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f9      	bne.n	8002b2c <HAL_ADC_Init+0x48>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b38:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b3a:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	00db      	lsls	r3, r3, #3
 8002b40:	d408      	bmi.n	8002b54 <HAL_ADC_Init+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b44:	2210      	movs	r2, #16
 8002b46:	4313      	orrs	r3, r2
 8002b48:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002b4c:	3a0f      	subs	r2, #15
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b52:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b54:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b56:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002b58:	2310      	movs	r3, #16
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2204      	movs	r2, #4
 8002b5e:	402a      	ands	r2, r5
 8002b60:	4313      	orrs	r3, r2
 8002b62:	d000      	beq.n	8002b66 <HAL_ADC_Init+0x82>
 8002b64:	e0c9      	b.n	8002cfa <HAL_ADC_Init+0x216>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002b68:	4a6c      	ldr	r2, [pc, #432]	; (8002d1c <HAL_ADC_Init+0x238>)
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	3206      	adds	r2, #6
 8002b6e:	32ff      	adds	r2, #255	; 0xff
 8002b70:	4313      	orrs	r3, r2
 8002b72:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b74:	688b      	ldr	r3, [r1, #8]
 8002b76:	07db      	lsls	r3, r3, #31
 8002b78:	d456      	bmi.n	8002c28 <HAL_ADC_Init+0x144>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b7a:	68a2      	ldr	r2, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002b7c:	7e26      	ldrb	r6, [r4, #24]
 8002b7e:	03b6      	lsls	r6, r6, #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002b80:	7e63      	ldrb	r3, [r4, #25]
 8002b82:	03db      	lsls	r3, r3, #15
 8002b84:	4698      	mov	r8, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002b86:	7ea5      	ldrb	r5, [r4, #26]
 8002b88:	036f      	lsls	r7, r5, #13
 8002b8a:	46bc      	mov	ip, r7
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002b8c:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8002b8e:	2f00      	cmp	r7, #0
 8002b90:	d001      	beq.n	8002b96 <HAL_ADC_Init+0xb2>
 8002b92:	2780      	movs	r7, #128	; 0x80
 8002b94:	017f      	lsls	r7, r7, #5
 8002b96:	68e3      	ldr	r3, [r4, #12]
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	4332      	orrs	r2, r6
 8002b9c:	4643      	mov	r3, r8
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	4663      	mov	r3, ip
 8002ba2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ba4:	6923      	ldr	r3, [r4, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	db6f      	blt.n	8002c8a <HAL_ADC_Init+0x1a6>
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	039b      	lsls	r3, r3, #14
 8002bae:	469c      	mov	ip, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002bb0:	232c      	movs	r3, #44	; 0x2c
 8002bb2:	5ce3      	ldrb	r3, [r4, r3]
 8002bb4:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	433b      	orrs	r3, r7
 8002bba:	4662      	mov	r2, ip
 8002bbc:	4313      	orrs	r3, r2

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	5ca2      	ldrb	r2, [r4, r2]
 8002bc2:	2a01      	cmp	r2, #1
 8002bc4:	d065      	beq.n	8002c92 <HAL_ADC_Init+0x1ae>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002bc6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002bc8:	2a00      	cmp	r2, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_ADC_Init+0xf4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002bcc:	25e0      	movs	r5, #224	; 0xe0
 8002bce:	006d      	lsls	r5, r5, #1
 8002bd0:	402a      	ands	r2, r5
 8002bd2:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8002bd4:	432a      	orrs	r2, r5
 8002bd6:	4313      	orrs	r3, r2
                     hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002bd8:	68ca      	ldr	r2, [r1, #12]
 8002bda:	4d51      	ldr	r5, [pc, #324]	; (8002d20 <HAL_ADC_Init+0x23c>)
 8002bdc:	402a      	ands	r2, r5
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002be2:	6863      	ldr	r3, [r4, #4]
 8002be4:	0f9b      	lsrs	r3, r3, #30
 8002be6:	079b      	lsls	r3, r3, #30
 8002be8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8002bea:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002bec:	213c      	movs	r1, #60	; 0x3c
 8002bee:	5c61      	ldrb	r1, [r4, r1]
 8002bf0:	2901      	cmp	r1, #1
 8002bf2:	d05d      	beq.n	8002cb0 <HAL_ADC_Init+0x1cc>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002bf4:	6821      	ldr	r1, [r4, #0]
 8002bf6:	690b      	ldr	r3, [r1, #16]
 8002bf8:	4d4a      	ldr	r5, [pc, #296]	; (8002d24 <HAL_ADC_Init+0x240>)
 8002bfa:	402b      	ands	r3, r5
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002c00:	6862      	ldr	r2, [r4, #4]
 8002c02:	0053      	lsls	r3, r2, #1
 8002c04:	085b      	lsrs	r3, r3, #1
 8002c06:	2180      	movs	r1, #128	; 0x80
 8002c08:	05c9      	lsls	r1, r1, #23
 8002c0a:	428b      	cmp	r3, r1
 8002c0c:	d00c      	beq.n	8002c28 <HAL_ADC_Init+0x144>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	061b      	lsls	r3, r3, #24
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d008      	beq.n	8002c28 <HAL_ADC_Init+0x144>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002c16:	4944      	ldr	r1, [pc, #272]	; (8002d28 <HAL_ADC_Init+0x244>)
 8002c18:	680b      	ldr	r3, [r1, #0]
 8002c1a:	4d44      	ldr	r5, [pc, #272]	; (8002d2c <HAL_ADC_Init+0x248>)
 8002c1c:	402b      	ands	r3, r5
 8002c1e:	25f0      	movs	r5, #240	; 0xf0
 8002c20:	03ad      	lsls	r5, r5, #14
 8002c22:	402a      	ands	r2, r5
 8002c24:	431a      	orrs	r2, r3
 8002c26:	600a      	str	r2, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002c28:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002c2a:	6953      	ldr	r3, [r2, #20]
 8002c2c:	2107      	movs	r1, #7
 8002c2e:	438b      	bics	r3, r1
 8002c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c32:	430b      	orrs	r3, r1
 8002c34:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002c36:	6821      	ldr	r1, [r4, #0]
 8002c38:	694a      	ldr	r2, [r1, #20]
 8002c3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	2570      	movs	r5, #112	; 0x70
 8002c40:	43aa      	bics	r2, r5
 8002c42:	4313      	orrs	r3, r2
 8002c44:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002c46:	6923      	ldr	r3, [r4, #16]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d13b      	bne.n	8002cc4 <HAL_ADC_Init+0x1e0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002c4c:	6822      	ldr	r2, [r4, #0]
 8002c4e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002c50:	3b10      	subs	r3, #16
 8002c52:	430b      	orrs	r3, r1
 8002c54:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c56:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002c58:	695a      	ldr	r2, [r3, #20]
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d041      	beq.n	8002ce8 <HAL_ADC_Init+0x204>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002c64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002c66:	2212      	movs	r2, #18
 8002c68:	4393      	bics	r3, r2
 8002c6a:	3a02      	subs	r2, #2
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c70:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c72:	3a0f      	subs	r2, #15
 8002c74:	4313      	orrs	r3, r2
 8002c76:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002c78:	2001      	movs	r0, #1
 8002c7a:	e043      	b.n	8002d04 <HAL_ADC_Init+0x220>
    HAL_ADC_MspInit(hadc);
 8002c7c:	f7ff fb8c 	bl	8002398 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002c80:	2300      	movs	r3, #0
 8002c82:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8002c84:	2254      	movs	r2, #84	; 0x54
 8002c86:	54a3      	strb	r3, [r4, r2]
 8002c88:	e73a      	b.n	8002b00 <HAL_ADC_Init+0x1c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	085b      	lsrs	r3, r3, #1
 8002c8e:	469c      	mov	ip, r3
 8002c90:	e78e      	b.n	8002bb0 <HAL_ADC_Init+0xcc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c92:	2d00      	cmp	r5, #0
 8002c94:	d103      	bne.n	8002c9e <HAL_ADC_Init+0x1ba>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	0252      	lsls	r2, r2, #9
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	e793      	b.n	8002bc6 <HAL_ADC_Init+0xe2>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8002ca0:	2520      	movs	r5, #32
 8002ca2:	432a      	orrs	r2, r5
 8002ca4:	65a2      	str	r2, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002ca8:	3d1f      	subs	r5, #31
 8002caa:	432a      	orrs	r2, r5
 8002cac:	65e2      	str	r2, [r4, #92]	; 0x5c
 8002cae:	e78a      	b.n	8002bc6 <HAL_ADC_Init+0xe2>
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002cb0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002cb2:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8002cb4:	4329      	orrs	r1, r5
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	e797      	b.n	8002bf4 <HAL_ADC_Init+0x110>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002cc4:	2280      	movs	r2, #128	; 0x80
 8002cc6:	0392      	lsls	r2, r2, #14
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d1c4      	bne.n	8002c56 <HAL_ADC_Init+0x172>
      MODIFY_REG(hadc->Instance->CHSELR,
 8002ccc:	6821      	ldr	r1, [r4, #0]
 8002cce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002cd0:	69e3      	ldr	r3, [r4, #28]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	221c      	movs	r2, #28
 8002cd8:	401a      	ands	r2, r3
 8002cda:	2310      	movs	r3, #16
 8002cdc:	425b      	negs	r3, r3
 8002cde:	4093      	lsls	r3, r2
 8002ce0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	628b      	str	r3, [r1, #40]	; 0x28
 8002ce6:	e7b6      	b.n	8002c56 <HAL_ADC_Init+0x172>
      ADC_CLEAR_ERRORCODE(hadc);
 8002ce8:	2300      	movs	r3, #0
 8002cea:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8002cec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cee:	2203      	movs	r2, #3
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	3a02      	subs	r2, #2
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cf8:	e004      	b.n	8002d04 <HAL_ADC_Init+0x220>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cfc:	2210      	movs	r2, #16
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d02:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8002d04:	b002      	add	sp, #8
 8002d06:	bc80      	pop	{r7}
 8002d08:	46b8      	mov	r8, r7
 8002d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	e7f9      	b.n	8002d04 <HAL_ADC_Init+0x220>
 8002d10:	6fffffe8 	.word	0x6fffffe8
 8002d14:	2000006c 	.word	0x2000006c
 8002d18:	00030d40 	.word	0x00030d40
 8002d1c:	fffffefd 	.word	0xfffffefd
 8002d20:	fffe0201 	.word	0xfffe0201
 8002d24:	1ffffc02 	.word	0x1ffffc02
 8002d28:	40012708 	.word	0x40012708
 8002d2c:	ffc3ffff 	.word	0xffc3ffff

08002d30 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d32:	0006      	movs	r6, r0
 8002d34:	000d      	movs	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002d36:	6944      	ldr	r4, [r0, #20]
 8002d38:	2c08      	cmp	r4, #8
 8002d3a:	d004      	beq.n	8002d46 <HAL_ADC_PollForConversion+0x16>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002d3c:	6803      	ldr	r3, [r0, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002d40:	2404      	movs	r4, #4
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002d42:	07db      	lsls	r3, r3, #31
 8002d44:	d41c      	bmi.n	8002d80 <HAL_ADC_PollForConversion+0x50>
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d46:	f7ff fea5 	bl	8002a94 <HAL_GetTick>
 8002d4a:	0007      	movs	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d4c:	6832      	ldr	r2, [r6, #0]
 8002d4e:	6813      	ldr	r3, [r2, #0]
 8002d50:	421c      	tst	r4, r3
 8002d52:	d11b      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x5c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002d54:	1c6b      	adds	r3, r5, #1
 8002d56:	d0fa      	beq.n	8002d4e <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d58:	f7ff fe9c 	bl	8002a94 <HAL_GetTick>
 8002d5c:	1bc0      	subs	r0, r0, r7
 8002d5e:	42a8      	cmp	r0, r5
 8002d60:	d801      	bhi.n	8002d66 <HAL_ADC_PollForConversion+0x36>
 8002d62:	2d00      	cmp	r5, #0
 8002d64:	d1f2      	bne.n	8002d4c <HAL_ADC_PollForConversion+0x1c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002d66:	6833      	ldr	r3, [r6, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	421c      	tst	r4, r3
 8002d6c:	d1ee      	bne.n	8002d4c <HAL_ADC_PollForConversion+0x1c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002d6e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002d70:	2204      	movs	r2, #4
 8002d72:	4313      	orrs	r3, r2
 8002d74:	65b3      	str	r3, [r6, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002d76:	2354      	movs	r3, #84	; 0x54
 8002d78:	2200      	movs	r2, #0
 8002d7a:	54f2      	strb	r2, [r6, r3]

          return HAL_TIMEOUT;
 8002d7c:	2003      	movs	r0, #3
 8002d7e:	e029      	b.n	8002dd4 <HAL_ADC_PollForConversion+0xa4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d80:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8002d82:	2220      	movs	r2, #32
 8002d84:	4313      	orrs	r3, r2
 8002d86:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8002d88:	2001      	movs	r0, #1
 8002d8a:	e023      	b.n	8002dd4 <HAL_ADC_PollForConversion+0xa4>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d8c:	6db1      	ldr	r1, [r6, #88]	; 0x58
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	430b      	orrs	r3, r1
 8002d94:	65b3      	str	r3, [r6, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002d96:	68d1      	ldr	r1, [r2, #12]
 8002d98:	23c0      	movs	r3, #192	; 0xc0
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	4219      	tst	r1, r3
 8002d9e:	d113      	bne.n	8002dc8 <HAL_ADC_PollForConversion+0x98>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002da0:	7eb3      	ldrb	r3, [r6, #26]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d110      	bne.n	8002dc8 <HAL_ADC_PollForConversion+0x98>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002da6:	6813      	ldr	r3, [r2, #0]
 8002da8:	071b      	lsls	r3, r3, #28
 8002daa:	d50d      	bpl.n	8002dc8 <HAL_ADC_PollForConversion+0x98>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dac:	6893      	ldr	r3, [r2, #8]
 8002dae:	075b      	lsls	r3, r3, #29
 8002db0:	d411      	bmi.n	8002dd6 <HAL_ADC_PollForConversion+0xa6>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002db2:	6853      	ldr	r3, [r2, #4]
 8002db4:	210c      	movs	r1, #12
 8002db6:	438b      	bics	r3, r1
 8002db8:	6053      	str	r3, [r2, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002dba:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002dbc:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <HAL_ADC_PollForConversion+0xbc>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	3204      	adds	r2, #4
 8002dc2:	32ff      	adds	r2, #255	; 0xff
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	65b3      	str	r3, [r6, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002dc8:	7e30      	ldrb	r0, [r6, #24]
 8002dca:	2800      	cmp	r0, #0
 8002dcc:	d10c      	bne.n	8002de8 <HAL_ADC_PollForConversion+0xb8>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002dce:	6833      	ldr	r3, [r6, #0]
 8002dd0:	220c      	movs	r2, #12
 8002dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dd6:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002dd8:	2220      	movs	r2, #32
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	65b3      	str	r3, [r6, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dde:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002de0:	3a1f      	subs	r2, #31
 8002de2:	4313      	orrs	r3, r2
 8002de4:	65f3      	str	r3, [r6, #92]	; 0x5c
 8002de6:	e7ef      	b.n	8002dc8 <HAL_ADC_PollForConversion+0x98>
  return HAL_OK;
 8002de8:	2000      	movs	r0, #0
 8002dea:	e7f3      	b.n	8002dd4 <HAL_ADC_PollForConversion+0xa4>
 8002dec:	fffffefe 	.word	0xfffffefe

08002df0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002df0:	6803      	ldr	r3, [r0, #0]
 8002df2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8002df4:	4770      	bx	lr
	...

08002df8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e02:	6905      	ldr	r5, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002e04:	3354      	adds	r3, #84	; 0x54
 8002e06:	5cc3      	ldrb	r3, [r0, r3]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d100      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x16>
 8002e0c:	e11e      	b.n	800304c <HAL_ADC_ConfigChannel+0x254>
 8002e0e:	2354      	movs	r3, #84	; 0x54
 8002e10:	2201      	movs	r2, #1
 8002e12:	54c2      	strb	r2, [r0, r3]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e14:	6800      	ldr	r0, [r0, #0]
 8002e16:	6883      	ldr	r3, [r0, #8]
 8002e18:	3203      	adds	r2, #3
 8002e1a:	0017      	movs	r7, r2
 8002e1c:	401f      	ands	r7, r3
 8002e1e:	421a      	tst	r2, r3
 8002e20:	d009      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0x3e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e22:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e24:	321c      	adds	r2, #28
 8002e26:	4313      	orrs	r3, r2
 8002e28:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e2a:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8002e2c:	2354      	movs	r3, #84	; 0x54
 8002e2e:	2200      	movs	r2, #0
 8002e30:	54e2      	strb	r2, [r4, r3]

  return tmp_hal_status;
}
 8002e32:	b003      	add	sp, #12
 8002e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8002e36:	684a      	ldr	r2, [r1, #4]
 8002e38:	2a02      	cmp	r2, #2
 8002e3a:	d100      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x46>
 8002e3c:	e0c4      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e3e:	2304      	movs	r3, #4
 8002e40:	439d      	bics	r5, r3
 8002e42:	2680      	movs	r6, #128	; 0x80
 8002e44:	0636      	lsls	r6, r6, #24
 8002e46:	42b5      	cmp	r5, r6
 8002e48:	d021      	beq.n	8002e8e <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002e4a:	251f      	movs	r5, #31
 8002e4c:	402a      	ands	r2, r5
 8002e4e:	230f      	movs	r3, #15
 8002e50:	4093      	lsls	r3, r2
 8002e52:	6e26      	ldr	r6, [r4, #96]	; 0x60
 8002e54:	439e      	bics	r6, r3
 8002e56:	680d      	ldr	r5, [r1, #0]
 8002e58:	036b      	lsls	r3, r5, #13
 8002e5a:	d148      	bne.n	8002eee <HAL_ADC_ConfigChannel+0xf6>
 8002e5c:	006d      	lsls	r5, r5, #1
 8002e5e:	0eef      	lsrs	r7, r5, #27
 8002e60:	003b      	movs	r3, r7
 8002e62:	4093      	lsls	r3, r2
 8002e64:	4333      	orrs	r3, r6
 8002e66:	6623      	str	r3, [r4, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002e68:	684a      	ldr	r2, [r1, #4]
 8002e6a:	0893      	lsrs	r3, r2, #2
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	69e5      	ldr	r5, [r4, #28]
 8002e70:	42ab      	cmp	r3, r5
 8002e72:	d812      	bhi.n	8002e9a <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 8002e74:	6a86      	ldr	r6, [r0, #40]	; 0x28
 8002e76:	251f      	movs	r5, #31
 8002e78:	402a      	ands	r2, r5
 8002e7a:	680b      	ldr	r3, [r1, #0]
 8002e7c:	0e9b      	lsrs	r3, r3, #26
 8002e7e:	3d10      	subs	r5, #16
 8002e80:	402b      	ands	r3, r5
 8002e82:	4093      	lsls	r3, r2
 8002e84:	4095      	lsls	r5, r2
 8002e86:	43ae      	bics	r6, r5
 8002e88:	4333      	orrs	r3, r6
 8002e8a:	6283      	str	r3, [r0, #40]	; 0x28
}
 8002e8c:	e005      	b.n	8002e9a <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002e8e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002e90:	680b      	ldr	r3, [r1, #0]
 8002e92:	035b      	lsls	r3, r3, #13
 8002e94:	0b5b      	lsrs	r3, r3, #13
 8002e96:	4313      	orrs	r3, r2
 8002e98:	6283      	str	r3, [r0, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e9a:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8002e9c:	6968      	ldr	r0, [r5, #20]
 8002e9e:	680b      	ldr	r3, [r1, #0]
 8002ea0:	021a      	lsls	r2, r3, #8
 8002ea2:	688b      	ldr	r3, [r1, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	4e6a      	ldr	r6, [pc, #424]	; (8003050 <HAL_ADC_ConfigChannel+0x258>)
 8002ea8:	4033      	ands	r3, r6
 8002eaa:	4390      	bics	r0, r2
 8002eac:	4303      	orrs	r3, r0
 8002eae:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002eb0:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb2:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	dab9      	bge.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002eb8:	4a66      	ldr	r2, [pc, #408]	; (8003054 <HAL_ADC_ConfigChannel+0x25c>)
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	25e0      	movs	r5, #224	; 0xe0
 8002ebe:	046d      	lsls	r5, r5, #17
 8002ec0:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002ec2:	4965      	ldr	r1, [pc, #404]	; (8003058 <HAL_ADC_ConfigChannel+0x260>)
 8002ec4:	428b      	cmp	r3, r1
 8002ec6:	d050      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002ec8:	4964      	ldr	r1, [pc, #400]	; (800305c <HAL_ADC_ConfigChannel+0x264>)
 8002eca:	428b      	cmp	r3, r1
 8002ecc:	d06e      	beq.n	8002fac <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ece:	4964      	ldr	r1, [pc, #400]	; (8003060 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed0:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ed2:	428b      	cmp	r3, r1
 8002ed4:	d1aa      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
 8002ed6:	0253      	lsls	r3, r2, #9
 8002ed8:	d4a8      	bmi.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002eda:	4b5e      	ldr	r3, [pc, #376]	; (8003054 <HAL_ADC_ConfigChannel+0x25c>)
 8002edc:	6819      	ldr	r1, [r3, #0]
 8002ede:	4a61      	ldr	r2, [pc, #388]	; (8003064 <HAL_ADC_ConfigChannel+0x26c>)
 8002ee0:	4011      	ands	r1, r2
 8002ee2:	4329      	orrs	r1, r5
 8002ee4:	2580      	movs	r5, #128	; 0x80
 8002ee6:	03ed      	lsls	r5, r5, #15
 8002ee8:	4329      	orrs	r1, r5
 8002eea:	6019      	str	r1, [r3, #0]
}
 8002eec:	e79e      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002eee:	07eb      	lsls	r3, r5, #31
 8002ef0:	d4b6      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002ef2:	2701      	movs	r7, #1
 8002ef4:	07ab      	lsls	r3, r5, #30
 8002ef6:	d4b3      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002ef8:	3701      	adds	r7, #1
 8002efa:	076b      	lsls	r3, r5, #29
 8002efc:	d4b0      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002efe:	3701      	adds	r7, #1
 8002f00:	072b      	lsls	r3, r5, #28
 8002f02:	d4ad      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f04:	3701      	adds	r7, #1
 8002f06:	06eb      	lsls	r3, r5, #27
 8002f08:	d4aa      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f0a:	3701      	adds	r7, #1
 8002f0c:	06ab      	lsls	r3, r5, #26
 8002f0e:	d4a7      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f10:	3701      	adds	r7, #1
 8002f12:	066b      	lsls	r3, r5, #25
 8002f14:	d4a4      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f16:	3701      	adds	r7, #1
 8002f18:	062b      	lsls	r3, r5, #24
 8002f1a:	d4a1      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f1c:	3701      	adds	r7, #1
 8002f1e:	05eb      	lsls	r3, r5, #23
 8002f20:	d49e      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f22:	3701      	adds	r7, #1
 8002f24:	05ab      	lsls	r3, r5, #22
 8002f26:	d49b      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f28:	3701      	adds	r7, #1
 8002f2a:	056b      	lsls	r3, r5, #21
 8002f2c:	d498      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f2e:	3701      	adds	r7, #1
 8002f30:	052b      	lsls	r3, r5, #20
 8002f32:	d495      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f34:	3701      	adds	r7, #1
 8002f36:	04eb      	lsls	r3, r5, #19
 8002f38:	d492      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f3a:	3701      	adds	r7, #1
 8002f3c:	04ab      	lsls	r3, r5, #18
 8002f3e:	d48f      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f40:	3701      	adds	r7, #1
 8002f42:	046b      	lsls	r3, r5, #17
 8002f44:	d48c      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f46:	3701      	adds	r7, #1
 8002f48:	042b      	lsls	r3, r5, #16
 8002f4a:	d489      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f4c:	3701      	adds	r7, #1
 8002f4e:	03eb      	lsls	r3, r5, #15
 8002f50:	d486      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f52:	3701      	adds	r7, #1
 8002f54:	03ab      	lsls	r3, r5, #14
 8002f56:	d483      	bmi.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	02db      	lsls	r3, r3, #11
 8002f5c:	002f      	movs	r7, r5
 8002f5e:	401f      	ands	r7, r3
 8002f60:	421d      	tst	r5, r3
 8002f62:	d100      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x16e>
 8002f64:	e77c      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
 8002f66:	2712      	movs	r7, #18
 8002f68:	e77a      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002f6a:	0213      	lsls	r3, r2, #8
 8002f6c:	d500      	bpl.n	8002f70 <HAL_ADC_ConfigChannel+0x178>
 8002f6e:	e75d      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f70:	4b38      	ldr	r3, [pc, #224]	; (8003054 <HAL_ADC_ConfigChannel+0x25c>)
 8002f72:	6819      	ldr	r1, [r3, #0]
 8002f74:	4a3b      	ldr	r2, [pc, #236]	; (8003064 <HAL_ADC_ConfigChannel+0x26c>)
 8002f76:	4011      	ands	r1, r2
 8002f78:	4329      	orrs	r1, r5
 8002f7a:	2580      	movs	r5, #128	; 0x80
 8002f7c:	042d      	lsls	r5, r5, #16
 8002f7e:	4329      	orrs	r1, r5
 8002f80:	6019      	str	r1, [r3, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f82:	4b39      	ldr	r3, [pc, #228]	; (8003068 <HAL_ADC_ConfigChannel+0x270>)
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	4939      	ldr	r1, [pc, #228]	; (800306c <HAL_ADC_ConfigChannel+0x274>)
 8002f88:	f7fd f8ba 	bl	8000100 <__udivsi3>
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	0043      	lsls	r3, r0, #1
 8002f90:	181b      	adds	r3, r3, r0
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002f96:	9b01      	ldr	r3, [sp, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d055      	beq.n	8003048 <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8002f9c:	9b01      	ldr	r3, [sp, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8002fa2:	9b01      	ldr	r3, [sp, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f9      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fa8:	2000      	movs	r0, #0
 8002faa:	e73f      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
 8002fac:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fae:	01d3      	lsls	r3, r2, #7
 8002fb0:	d500      	bpl.n	8002fb4 <HAL_ADC_ConfigChannel+0x1bc>
 8002fb2:	e73b      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
 8002fb4:	4b27      	ldr	r3, [pc, #156]	; (8003054 <HAL_ADC_ConfigChannel+0x25c>)
 8002fb6:	6819      	ldr	r1, [r3, #0]
 8002fb8:	4a2a      	ldr	r2, [pc, #168]	; (8003064 <HAL_ADC_ConfigChannel+0x26c>)
 8002fba:	4011      	ands	r1, r2
 8002fbc:	4329      	orrs	r1, r5
 8002fbe:	2580      	movs	r5, #128	; 0x80
 8002fc0:	046d      	lsls	r5, r5, #17
 8002fc2:	4329      	orrs	r1, r5
 8002fc4:	6019      	str	r1, [r3, #0]
}
 8002fc6:	e731      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fc8:	2304      	movs	r3, #4
 8002fca:	439d      	bics	r5, r3
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	061b      	lsls	r3, r3, #24
 8002fd0:	429d      	cmp	r5, r3
 8002fd2:	d01c      	beq.n	800300e <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fd4:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fd6:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db00      	blt.n	8002fde <HAL_ADC_ConfigChannel+0x1e6>
 8002fdc:	e726      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002fde:	4a1d      	ldr	r2, [pc, #116]	; (8003054 <HAL_ADC_ConfigChannel+0x25c>)
 8002fe0:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe2:	491d      	ldr	r1, [pc, #116]	; (8003058 <HAL_ADC_ConfigChannel+0x260>)
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	d019      	beq.n	800301c <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fe8:	491c      	ldr	r1, [pc, #112]	; (800305c <HAL_ADC_ConfigChannel+0x264>)
 8002fea:	428b      	cmp	r3, r1
 8002fec:	d021      	beq.n	8003032 <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fee:	491c      	ldr	r1, [pc, #112]	; (8003060 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff0:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ff2:	428b      	cmp	r3, r1
 8002ff4:	d000      	beq.n	8002ff8 <HAL_ADC_ConfigChannel+0x200>
 8002ff6:	e719      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ff8:	4916      	ldr	r1, [pc, #88]	; (8003054 <HAL_ADC_ConfigChannel+0x25c>)
 8002ffa:	680b      	ldr	r3, [r1, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ffc:	20c0      	movs	r0, #192	; 0xc0
 8002ffe:	0440      	lsls	r0, r0, #17
 8003000:	4002      	ands	r2, r0
 8003002:	4818      	ldr	r0, [pc, #96]	; (8003064 <HAL_ADC_ConfigChannel+0x26c>)
 8003004:	4003      	ands	r3, r0
 8003006:	431a      	orrs	r2, r3
 8003008:	600a      	str	r2, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800300a:	2000      	movs	r0, #0
}
 800300c:	e70e      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800300e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003010:	680b      	ldr	r3, [r1, #0]
 8003012:	035b      	lsls	r3, r3, #13
 8003014:	0b5b      	lsrs	r3, r3, #13
 8003016:	439a      	bics	r2, r3
 8003018:	6282      	str	r2, [r0, #40]	; 0x28
}
 800301a:	e7db      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800301c:	480d      	ldr	r0, [pc, #52]	; (8003054 <HAL_ADC_ConfigChannel+0x25c>)
 800301e:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003020:	23a0      	movs	r3, #160	; 0xa0
 8003022:	045b      	lsls	r3, r3, #17
 8003024:	401a      	ands	r2, r3
 8003026:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_ADC_ConfigChannel+0x26c>)
 8003028:	400b      	ands	r3, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800302e:	2000      	movs	r0, #0
}
 8003030:	e6fc      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003032:	4808      	ldr	r0, [pc, #32]	; (8003054 <HAL_ADC_ConfigChannel+0x25c>)
 8003034:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003036:	23c0      	movs	r3, #192	; 0xc0
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	401a      	ands	r2, r3
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_ADC_ConfigChannel+0x26c>)
 800303e:	400b      	ands	r3, r1
 8003040:	431a      	orrs	r2, r3
 8003042:	6002      	str	r2, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003044:	2000      	movs	r0, #0
}
 8003046:	e6f1      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
 8003048:	2000      	movs	r0, #0
 800304a:	e6ef      	b.n	8002e2c <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 800304c:	2002      	movs	r0, #2
 800304e:	e6f0      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x3a>
 8003050:	07ffff00 	.word	0x07ffff00
 8003054:	40012708 	.word	0x40012708
 8003058:	b0001000 	.word	0xb0001000
 800305c:	b8004000 	.word	0xb8004000
 8003060:	b4002000 	.word	0xb4002000
 8003064:	fe3fffff 	.word	0xfe3fffff
 8003068:	2000006c 	.word	0x2000006c
 800306c:	00030d40 	.word	0x00030d40

08003070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003072:	b083      	sub	sp, #12
 8003074:	0004      	movs	r4, r0
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003076:	2300      	movs	r3, #0
 8003078:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800307a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800307c:	689a      	ldr	r2, [r3, #8]
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800307e:	2000      	movs	r0, #0
 8003080:	07d2      	lsls	r2, r2, #31
 8003082:	d434      	bmi.n	80030ee <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003084:	6899      	ldr	r1, [r3, #8]
 8003086:	4a2c      	ldr	r2, [pc, #176]	; (8003138 <ADC_Enable+0xc8>)
 8003088:	4211      	tst	r1, r2
 800308a:	d127      	bne.n	80030dc <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	492b      	ldr	r1, [pc, #172]	; (800313c <ADC_Enable+0xcc>)
 8003090:	400a      	ands	r2, r1
 8003092:	2101      	movs	r1, #1
 8003094:	430a      	orrs	r2, r1
 8003096:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <ADC_Enable+0xd0>)
 800309a:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800309c:	021b      	lsls	r3, r3, #8
 800309e:	d50f      	bpl.n	80030c0 <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <ADC_Enable+0xd4>)
 80030a2:	6818      	ldr	r0, [r3, #0]
 80030a4:	4928      	ldr	r1, [pc, #160]	; (8003148 <ADC_Enable+0xd8>)
 80030a6:	f7fd f82b 	bl	8000100 <__udivsi3>
 80030aa:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80030ac:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 80030ae:	9b01      	ldr	r3, [sp, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d005      	beq.n	80030c0 <ADC_Enable+0x50>
        wait_loop_index--;
 80030b4:	9b01      	ldr	r3, [sp, #4]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80030ba:	9b01      	ldr	r3, [sp, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1f9      	bne.n	80030b4 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80030c0:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 80030c2:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d012      	beq.n	80030ee <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 80030c8:	f7ff fce4 	bl	8002a94 <HAL_GetTick>
 80030cc:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ce:	6823      	ldr	r3, [r4, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	07d2      	lsls	r2, r2, #31
 80030d4:	d42d      	bmi.n	8003132 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030d6:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 80030d8:	4f18      	ldr	r7, [pc, #96]	; (800313c <ADC_Enable+0xcc>)
 80030da:	e00e      	b.n	80030fa <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030de:	2210      	movs	r2, #16
 80030e0:	4313      	orrs	r3, r2
 80030e2:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030e6:	3a0f      	subs	r2, #15
 80030e8:	4313      	orrs	r3, r2
 80030ea:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 80030ec:	3001      	adds	r0, #1
}
 80030ee:	b003      	add	sp, #12
 80030f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4215      	tst	r5, r2
 80030f8:	d119      	bne.n	800312e <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	4215      	tst	r5, r2
 80030fe:	d103      	bne.n	8003108 <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	403a      	ands	r2, r7
 8003104:	432a      	orrs	r2, r5
 8003106:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003108:	f7ff fcc4 	bl	8002a94 <HAL_GetTick>
 800310c:	1b80      	subs	r0, r0, r6
 800310e:	2802      	cmp	r0, #2
 8003110:	d9ef      	bls.n	80030f2 <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	421d      	tst	r5, r3
 8003118:	d1eb      	bne.n	80030f2 <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800311c:	2210      	movs	r2, #16
 800311e:	4313      	orrs	r3, r2
 8003120:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003122:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003124:	3a0f      	subs	r2, #15
 8003126:	4313      	orrs	r3, r2
 8003128:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800312a:	2001      	movs	r0, #1
 800312c:	e7df      	b.n	80030ee <ADC_Enable+0x7e>
  return HAL_OK;
 800312e:	2000      	movs	r0, #0
 8003130:	e7dd      	b.n	80030ee <ADC_Enable+0x7e>
 8003132:	2000      	movs	r0, #0
 8003134:	e7db      	b.n	80030ee <ADC_Enable+0x7e>
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	80000017 	.word	0x80000017
 800313c:	7fffffe8 	.word	0x7fffffe8
 8003140:	40012708 	.word	0x40012708
 8003144:	2000006c 	.word	0x2000006c
 8003148:	00030d40 	.word	0x00030d40

0800314c <HAL_ADC_Start>:
{
 800314c:	b510      	push	{r4, lr}
 800314e:	0004      	movs	r4, r0
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003150:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003152:	689b      	ldr	r3, [r3, #8]
    tmp_hal_status = HAL_BUSY;
 8003154:	2002      	movs	r0, #2
 8003156:	075b      	lsls	r3, r3, #29
 8003158:	d420      	bmi.n	800319c <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 800315a:	2354      	movs	r3, #84	; 0x54
 800315c:	5ce3      	ldrb	r3, [r4, r3]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d021      	beq.n	80031a6 <HAL_ADC_Start+0x5a>
 8003162:	2354      	movs	r3, #84	; 0x54
 8003164:	2201      	movs	r2, #1
 8003166:	54e2      	strb	r2, [r4, r3]
    tmp_hal_status = ADC_Enable(hadc);
 8003168:	0020      	movs	r0, r4
 800316a:	f7ff ff81 	bl	8003070 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800316e:	2800      	cmp	r0, #0
 8003170:	d115      	bne.n	800319e <HAL_ADC_Start+0x52>
      ADC_STATE_CLR_SET(hadc->State,
 8003172:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003174:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_ADC_Start+0x60>)
 8003176:	401a      	ands	r2, r3
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4313      	orrs	r3, r2
 800317e:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003180:	2300      	movs	r3, #0
 8003182:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003184:	6822      	ldr	r2, [r4, #0]
 8003186:	211c      	movs	r1, #28
 8003188:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 800318a:	2254      	movs	r2, #84	; 0x54
 800318c:	54a3      	strb	r3, [r4, r2]
      LL_ADC_REG_StartConversion(hadc->Instance);
 800318e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003190:	6893      	ldr	r3, [r2, #8]
 8003192:	4907      	ldr	r1, [pc, #28]	; (80031b0 <HAL_ADC_Start+0x64>)
 8003194:	400b      	ands	r3, r1
 8003196:	2104      	movs	r1, #4
 8003198:	430b      	orrs	r3, r1
 800319a:	6093      	str	r3, [r2, #8]
}
 800319c:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 800319e:	2354      	movs	r3, #84	; 0x54
 80031a0:	2200      	movs	r2, #0
 80031a2:	54e2      	strb	r2, [r4, r3]
 80031a4:	e7fa      	b.n	800319c <HAL_ADC_Start+0x50>
    __HAL_LOCK(hadc);
 80031a6:	2002      	movs	r0, #2
 80031a8:	e7f8      	b.n	800319c <HAL_ADC_Start+0x50>
 80031aa:	46c0      	nop			; (mov r8, r8)
 80031ac:	fffff0fe 	.word	0xfffff0fe
 80031b0:	7fffffe8 	.word	0x7fffffe8

080031b4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b4:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80031b6:	2800      	cmp	r0, #0
 80031b8:	db14      	blt.n	80031e4 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031ba:	0884      	lsrs	r4, r0, #2
 80031bc:	00a4      	lsls	r4, r4, #2
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_NVIC_SetPriority+0x5c>)
 80031c0:	469c      	mov	ip, r3
 80031c2:	4464      	add	r4, ip
 80031c4:	26c0      	movs	r6, #192	; 0xc0
 80031c6:	00b6      	lsls	r6, r6, #2
 80031c8:	59a5      	ldr	r5, [r4, r6]
 80031ca:	2203      	movs	r2, #3
 80031cc:	4010      	ands	r0, r2
 80031ce:	00c0      	lsls	r0, r0, #3
 80031d0:	23ff      	movs	r3, #255	; 0xff
 80031d2:	001a      	movs	r2, r3
 80031d4:	4082      	lsls	r2, r0
 80031d6:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031d8:	0189      	lsls	r1, r1, #6
 80031da:	400b      	ands	r3, r1
 80031dc:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031de:	432b      	orrs	r3, r5
 80031e0:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031e4:	230f      	movs	r3, #15
 80031e6:	4003      	ands	r3, r0
 80031e8:	3b08      	subs	r3, #8
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <HAL_NVIC_SetPriority+0x60>)
 80031f0:	4694      	mov	ip, r2
 80031f2:	4463      	add	r3, ip
 80031f4:	69dc      	ldr	r4, [r3, #28]
 80031f6:	2203      	movs	r2, #3
 80031f8:	4010      	ands	r0, r2
 80031fa:	00c0      	lsls	r0, r0, #3
 80031fc:	32fc      	adds	r2, #252	; 0xfc
 80031fe:	0015      	movs	r5, r2
 8003200:	4085      	lsls	r5, r0
 8003202:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003204:	0189      	lsls	r1, r1, #6
 8003206:	400a      	ands	r2, r1
 8003208:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800320a:	4322      	orrs	r2, r4
 800320c:	61da      	str	r2, [r3, #28]
 800320e:	e7e8      	b.n	80031e2 <HAL_NVIC_SetPriority+0x2e>
 8003210:	e000e100 	.word	0xe000e100
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003218:	2800      	cmp	r0, #0
 800321a:	db05      	blt.n	8003228 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321c:	231f      	movs	r3, #31
 800321e:	4018      	ands	r0, r3
 8003220:	3b1e      	subs	r3, #30
 8003222:	4083      	lsls	r3, r0
 8003224:	4a01      	ldr	r2, [pc, #4]	; (800322c <HAL_NVIC_EnableIRQ+0x14>)
 8003226:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003228:	4770      	bx	lr
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	e000e100 	.word	0xe000e100

08003230 <HAL_NVIC_SystemReset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003230:	f3bf 8f4f 	dsb	sy
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003234:	4b03      	ldr	r3, [pc, #12]	; (8003244 <HAL_NVIC_SystemReset+0x14>)
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <HAL_NVIC_SystemReset+0x18>)
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800323e:	46c0      	nop			; (mov r8, r8)
  for(;;)                                                           /* wait until reset */
 8003240:	e7fd      	b.n	800323e <HAL_NVIC_SystemReset+0xe>
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	e000ed00 	.word	0xe000ed00
 8003248:	05fa0004 	.word	0x05fa0004

0800324c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800324c:	3801      	subs	r0, #1
 800324e:	2380      	movs	r3, #128	; 0x80
 8003250:	045b      	lsls	r3, r3, #17
 8003252:	4298      	cmp	r0, r3
 8003254:	d20f      	bcs.n	8003276 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003256:	4a09      	ldr	r2, [pc, #36]	; (800327c <HAL_SYSTICK_Config+0x30>)
 8003258:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800325a:	4809      	ldr	r0, [pc, #36]	; (8003280 <HAL_SYSTICK_Config+0x34>)
 800325c:	6a03      	ldr	r3, [r0, #32]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	0a1b      	lsrs	r3, r3, #8
 8003262:	21c0      	movs	r1, #192	; 0xc0
 8003264:	0609      	lsls	r1, r1, #24
 8003266:	430b      	orrs	r3, r1
 8003268:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800326a:	2300      	movs	r3, #0
 800326c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326e:	3307      	adds	r3, #7
 8003270:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003272:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8003274:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003276:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8003278:	e7fc      	b.n	8003274 <HAL_SYSTICK_Config+0x28>
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	e000e010 	.word	0xe000e010
 8003280:	e000ed00 	.word	0xe000ed00

08003284 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003284:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003286:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8003288:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 800328a:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800328c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800328e:	2c00      	cmp	r4, #0
 8003290:	d002      	beq.n	8003298 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003292:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8003294:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8003296:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003298:	4e0b      	ldr	r6, [pc, #44]	; (80032c8 <DMA_SetConfig+0x44>)
 800329a:	6877      	ldr	r7, [r6, #4]
 800329c:	251c      	movs	r5, #28
 800329e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80032a0:	4025      	ands	r5, r4
 80032a2:	2401      	movs	r4, #1
 80032a4:	40ac      	lsls	r4, r5
 80032a6:	433c      	orrs	r4, r7
 80032a8:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032aa:	6804      	ldr	r4, [r0, #0]
 80032ac:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032ae:	6883      	ldr	r3, [r0, #8]
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d004      	beq.n	80032be <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80032b4:	6803      	ldr	r3, [r0, #0]
 80032b6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80032b8:	6803      	ldr	r3, [r0, #0]
 80032ba:	60da      	str	r2, [r3, #12]
  }
}
 80032bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80032be:	6803      	ldr	r3, [r0, #0]
 80032c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80032c2:	6803      	ldr	r3, [r0, #0]
 80032c4:	60d9      	str	r1, [r3, #12]
 80032c6:	e7f9      	b.n	80032bc <DMA_SetConfig+0x38>
 80032c8:	40020000 	.word	0x40020000

080032cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032cc:	b510      	push	{r4, lr}
 80032ce:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80032d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80032d2:	089b      	lsrs	r3, r3, #2
 80032d4:	4a08      	ldr	r2, [pc, #32]	; (80032f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 80032d6:	4694      	mov	ip, r2
 80032d8:	4463      	add	r3, ip
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032de:	7800      	ldrb	r0, [r0, #0]
 80032e0:	3808      	subs	r0, #8
 80032e2:	2114      	movs	r1, #20
 80032e4:	f7fc ff0c 	bl	8000100 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 80032ea:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032ec:	231f      	movs	r3, #31
 80032ee:	4018      	ands	r0, r3
 80032f0:	3b1e      	subs	r3, #30
 80032f2:	4083      	lsls	r3, r0
 80032f4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80032f6:	bd10      	pop	{r4, pc}
 80032f8:	10008200 	.word	0x10008200
 80032fc:	40020880 	.word	0x40020880

08003300 <HAL_DMA_Init>:
{
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8003304:	d055      	beq.n	80033b2 <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003306:	6805      	ldr	r5, [r0, #0]
 8003308:	4b2b      	ldr	r3, [pc, #172]	; (80033b8 <HAL_DMA_Init+0xb8>)
 800330a:	18e8      	adds	r0, r5, r3
 800330c:	2114      	movs	r1, #20
 800330e:	f7fc fef7 	bl	8000100 <__udivsi3>
 8003312:	0080      	lsls	r0, r0, #2
 8003314:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8003316:	2325      	movs	r3, #37	; 0x25
 8003318:	2202      	movs	r2, #2
 800331a:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	4a27      	ldr	r2, [pc, #156]	; (80033bc <HAL_DMA_Init+0xbc>)
 8003320:	4013      	ands	r3, r2
 8003322:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003324:	6822      	ldr	r2, [r4, #0]
 8003326:	6811      	ldr	r1, [r2, #0]
 8003328:	68a3      	ldr	r3, [r4, #8]
 800332a:	68e0      	ldr	r0, [r4, #12]
 800332c:	4303      	orrs	r3, r0
 800332e:	6920      	ldr	r0, [r4, #16]
 8003330:	4303      	orrs	r3, r0
 8003332:	6960      	ldr	r0, [r4, #20]
 8003334:	4303      	orrs	r3, r0
 8003336:	69a0      	ldr	r0, [r4, #24]
 8003338:	4303      	orrs	r3, r0
 800333a:	69e0      	ldr	r0, [r4, #28]
 800333c:	4303      	orrs	r3, r0
 800333e:	6a20      	ldr	r0, [r4, #32]
 8003340:	4303      	orrs	r3, r0
 8003342:	430b      	orrs	r3, r1
 8003344:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003346:	0020      	movs	r0, r4
 8003348:	f7ff ffc0 	bl	80032cc <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	01db      	lsls	r3, r3, #7
 8003350:	68a2      	ldr	r2, [r4, #8]
 8003352:	429a      	cmp	r2, r3
 8003354:	d018      	beq.n	8003388 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003356:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003358:	233f      	movs	r3, #63	; 0x3f
 800335a:	6861      	ldr	r1, [r4, #4]
 800335c:	400b      	ands	r3, r1
 800335e:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003360:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003362:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003364:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003366:	6863      	ldr	r3, [r4, #4]
 8003368:	1e5a      	subs	r2, r3, #1
 800336a:	2a03      	cmp	r2, #3
 800336c:	d90f      	bls.n	800338e <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800336e:	2300      	movs	r3, #0
 8003370:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003372:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003374:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003376:	2300      	movs	r3, #0
 8003378:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800337a:	2225      	movs	r2, #37	; 0x25
 800337c:	2101      	movs	r1, #1
 800337e:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8003380:	3a01      	subs	r2, #1
 8003382:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003384:	2000      	movs	r0, #0
}
 8003386:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003388:	2300      	movs	r3, #0
 800338a:	6063      	str	r3, [r4, #4]
 800338c:	e7e3      	b.n	8003356 <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800338e:	223f      	movs	r2, #63	; 0x3f
 8003390:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003392:	4a0b      	ldr	r2, [pc, #44]	; (80033c0 <HAL_DMA_Init+0xc0>)
 8003394:	189a      	adds	r2, r3, r2
 8003396:	0092      	lsls	r2, r2, #2
 8003398:	6522      	str	r2, [r4, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800339a:	490a      	ldr	r1, [pc, #40]	; (80033c4 <HAL_DMA_Init+0xc4>)
 800339c:	6561      	str	r1, [r4, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800339e:	3b01      	subs	r3, #1
 80033a0:	2101      	movs	r1, #1
 80033a2:	4099      	lsls	r1, r3
 80033a4:	65a1      	str	r1, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033aa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	e7e1      	b.n	8003376 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 80033b2:	2001      	movs	r0, #1
 80033b4:	e7e7      	b.n	8003386 <HAL_DMA_Init+0x86>
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	bffdfff8 	.word	0xbffdfff8
 80033bc:	ffff800f 	.word	0xffff800f
 80033c0:	1000823f 	.word	0x1000823f
 80033c4:	40020940 	.word	0x40020940

080033c8 <HAL_DMA_Start_IT>:
{
 80033c8:	b570      	push	{r4, r5, r6, lr}
 80033ca:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80033cc:	2024      	movs	r0, #36	; 0x24
 80033ce:	5c20      	ldrb	r0, [r4, r0]
 80033d0:	2801      	cmp	r0, #1
 80033d2:	d045      	beq.n	8003460 <HAL_DMA_Start_IT+0x98>
 80033d4:	2024      	movs	r0, #36	; 0x24
 80033d6:	2501      	movs	r5, #1
 80033d8:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 80033da:	3001      	adds	r0, #1
 80033dc:	5c20      	ldrb	r0, [r4, r0]
 80033de:	2801      	cmp	r0, #1
 80033e0:	d006      	beq.n	80033f0 <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80033e6:	3b5c      	subs	r3, #92	; 0x5c
 80033e8:	2200      	movs	r2, #0
 80033ea:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 80033ec:	2001      	movs	r0, #1
}
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 80033f0:	3024      	adds	r0, #36	; 0x24
 80033f2:	3501      	adds	r5, #1
 80033f4:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f6:	2000      	movs	r0, #0
 80033f8:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80033fa:	6825      	ldr	r5, [r4, #0]
 80033fc:	6828      	ldr	r0, [r5, #0]
 80033fe:	2601      	movs	r6, #1
 8003400:	43b0      	bics	r0, r6
 8003402:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003404:	0020      	movs	r0, r4
 8003406:	f7ff ff3d 	bl	8003284 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800340a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800340c:	2b00      	cmp	r3, #0
 800340e:	d01c      	beq.n	800344a <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	6813      	ldr	r3, [r2, #0]
 8003414:	210e      	movs	r1, #14
 8003416:	430b      	orrs	r3, r1
 8003418:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800341a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	03d2      	lsls	r2, r2, #15
 8003420:	d504      	bpl.n	800342c <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	2280      	movs	r2, #128	; 0x80
 8003426:	0052      	lsls	r2, r2, #1
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800342c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800342e:	2b00      	cmp	r3, #0
 8003430:	d004      	beq.n	800343c <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	2280      	movs	r2, #128	; 0x80
 8003436:	0052      	lsls	r2, r2, #1
 8003438:	430a      	orrs	r2, r1
 800343a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800343c:	6822      	ldr	r2, [r4, #0]
 800343e:	6813      	ldr	r3, [r2, #0]
 8003440:	2101      	movs	r1, #1
 8003442:	430b      	orrs	r3, r1
 8003444:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2000      	movs	r0, #0
 8003448:	e7d1      	b.n	80033ee <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800344a:	6822      	ldr	r2, [r4, #0]
 800344c:	6813      	ldr	r3, [r2, #0]
 800344e:	2104      	movs	r1, #4
 8003450:	438b      	bics	r3, r1
 8003452:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003454:	6822      	ldr	r2, [r4, #0]
 8003456:	6813      	ldr	r3, [r2, #0]
 8003458:	3106      	adds	r1, #6
 800345a:	430b      	orrs	r3, r1
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	e7dc      	b.n	800341a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8003460:	2002      	movs	r0, #2
 8003462:	e7c4      	b.n	80033ee <HAL_DMA_Start_IT+0x26>

08003464 <HAL_DMA_Abort>:
{
 8003464:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8003466:	2800      	cmp	r0, #0
 8003468:	d036      	beq.n	80034d8 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800346a:	2325      	movs	r3, #37	; 0x25
 800346c:	5cc3      	ldrb	r3, [r0, r3]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d006      	beq.n	8003480 <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003472:	2304      	movs	r3, #4
 8003474:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8003476:	3320      	adds	r3, #32
 8003478:	2200      	movs	r2, #0
 800347a:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 800347c:	2001      	movs	r0, #1
}
 800347e:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003480:	6802      	ldr	r2, [r0, #0]
 8003482:	6813      	ldr	r3, [r2, #0]
 8003484:	210e      	movs	r1, #14
 8003486:	438b      	bics	r3, r1
 8003488:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800348a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800348c:	6813      	ldr	r3, [r2, #0]
 800348e:	4913      	ldr	r1, [pc, #76]	; (80034dc <HAL_DMA_Abort+0x78>)
 8003490:	400b      	ands	r3, r1
 8003492:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003494:	6801      	ldr	r1, [r0, #0]
 8003496:	680a      	ldr	r2, [r1, #0]
 8003498:	2301      	movs	r3, #1
 800349a:	439a      	bics	r2, r3
 800349c:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800349e:	4910      	ldr	r1, [pc, #64]	; (80034e0 <HAL_DMA_Abort+0x7c>)
 80034a0:	684c      	ldr	r4, [r1, #4]
 80034a2:	221c      	movs	r2, #28
 80034a4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80034a6:	402a      	ands	r2, r5
 80034a8:	4093      	lsls	r3, r2
 80034aa:	4323      	orrs	r3, r4
 80034ac:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ae:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80034b0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80034b2:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80034b4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d006      	beq.n	80034c8 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4907      	ldr	r1, [pc, #28]	; (80034dc <HAL_DMA_Abort+0x78>)
 80034be:	400a      	ands	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80034c4:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80034c6:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80034c8:	2325      	movs	r3, #37	; 0x25
 80034ca:	2201      	movs	r2, #1
 80034cc:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80034ce:	3b01      	subs	r3, #1
 80034d0:	2200      	movs	r2, #0
 80034d2:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80034d4:	2000      	movs	r0, #0
 80034d6:	e7d2      	b.n	800347e <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 80034d8:	2001      	movs	r0, #1
 80034da:	e7d0      	b.n	800347e <HAL_DMA_Abort+0x1a>
 80034dc:	fffffeff 	.word	0xfffffeff
 80034e0:	40020000 	.word	0x40020000

080034e4 <HAL_DMA_Abort_IT>:
{
 80034e4:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034e6:	2325      	movs	r3, #37	; 0x25
 80034e8:	5cc3      	ldrb	r3, [r0, r3]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d003      	beq.n	80034f6 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ee:	2304      	movs	r3, #4
 80034f0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80034f2:	2001      	movs	r0, #1
}
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034f6:	6802      	ldr	r2, [r0, #0]
 80034f8:	6813      	ldr	r3, [r2, #0]
 80034fa:	210e      	movs	r1, #14
 80034fc:	438b      	bics	r3, r1
 80034fe:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003500:	6801      	ldr	r1, [r0, #0]
 8003502:	680a      	ldr	r2, [r1, #0]
 8003504:	2301      	movs	r3, #1
 8003506:	439a      	bics	r2, r3
 8003508:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800350a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800350c:	680a      	ldr	r2, [r1, #0]
 800350e:	4c13      	ldr	r4, [pc, #76]	; (800355c <HAL_DMA_Abort_IT+0x78>)
 8003510:	4022      	ands	r2, r4
 8003512:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8003514:	4912      	ldr	r1, [pc, #72]	; (8003560 <HAL_DMA_Abort_IT+0x7c>)
 8003516:	684c      	ldr	r4, [r1, #4]
 8003518:	221c      	movs	r2, #28
 800351a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800351c:	402a      	ands	r2, r5
 800351e:	4093      	lsls	r3, r2
 8003520:	4323      	orrs	r3, r4
 8003522:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003524:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003526:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003528:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 800352a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800352c:	2b00      	cmp	r3, #0
 800352e:	d006      	beq.n	800353e <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	490a      	ldr	r1, [pc, #40]	; (800355c <HAL_DMA_Abort_IT+0x78>)
 8003534:	400a      	ands	r2, r1
 8003536:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003538:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800353a:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800353c:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800353e:	2325      	movs	r3, #37	; 0x25
 8003540:	2201      	movs	r2, #1
 8003542:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8003544:	3b01      	subs	r3, #1
 8003546:	2200      	movs	r2, #0
 8003548:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 800354a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 8003550:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8003552:	2000      	movs	r0, #0
 8003554:	e7ce      	b.n	80034f4 <HAL_DMA_Abort_IT+0x10>
 8003556:	2000      	movs	r0, #0
 8003558:	e7cc      	b.n	80034f4 <HAL_DMA_Abort_IT+0x10>
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	fffffeff 	.word	0xfffffeff
 8003560:	40020000 	.word	0x40020000

08003564 <HAL_DMA_IRQHandler>:
{
 8003564:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_DMA_IRQHandler+0xc8>)
 8003568:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800356a:	6804      	ldr	r4, [r0, #0]
 800356c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800356e:	231c      	movs	r3, #28
 8003570:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003572:	4013      	ands	r3, r2
 8003574:	2204      	movs	r2, #4
 8003576:	409a      	lsls	r2, r3
 8003578:	4211      	tst	r1, r2
 800357a:	d016      	beq.n	80035aa <HAL_DMA_IRQHandler+0x46>
 800357c:	076a      	lsls	r2, r5, #29
 800357e:	d514      	bpl.n	80035aa <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003580:	6823      	ldr	r3, [r4, #0]
 8003582:	069b      	lsls	r3, r3, #26
 8003584:	d403      	bmi.n	800358e <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003586:	6823      	ldr	r3, [r4, #0]
 8003588:	2204      	movs	r2, #4
 800358a:	4393      	bics	r3, r2
 800358c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800358e:	4927      	ldr	r1, [pc, #156]	; (800362c <HAL_DMA_IRQHandler+0xc8>)
 8003590:	684c      	ldr	r4, [r1, #4]
 8003592:	221c      	movs	r2, #28
 8003594:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003596:	401a      	ands	r2, r3
 8003598:	2304      	movs	r3, #4
 800359a:	4093      	lsls	r3, r2
 800359c:	4323      	orrs	r3, r4
 800359e:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80035a0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d000      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 80035a6:	4798      	blx	r3
}
 80035a8:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80035aa:	2202      	movs	r2, #2
 80035ac:	409a      	lsls	r2, r3
 80035ae:	4211      	tst	r1, r2
 80035b0:	d01c      	beq.n	80035ec <HAL_DMA_IRQHandler+0x88>
 80035b2:	07aa      	lsls	r2, r5, #30
 80035b4:	d51a      	bpl.n	80035ec <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035b6:	6823      	ldr	r3, [r4, #0]
 80035b8:	069b      	lsls	r3, r3, #26
 80035ba:	d406      	bmi.n	80035ca <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	220a      	movs	r2, #10
 80035c0:	4393      	bics	r3, r2
 80035c2:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80035c4:	2325      	movs	r3, #37	; 0x25
 80035c6:	3a09      	subs	r2, #9
 80035c8:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80035ca:	4918      	ldr	r1, [pc, #96]	; (800362c <HAL_DMA_IRQHandler+0xc8>)
 80035cc:	684c      	ldr	r4, [r1, #4]
 80035ce:	221c      	movs	r2, #28
 80035d0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035d2:	401a      	ands	r2, r3
 80035d4:	2302      	movs	r3, #2
 80035d6:	4093      	lsls	r3, r2
 80035d8:	4323      	orrs	r3, r4
 80035da:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 80035dc:	2324      	movs	r3, #36	; 0x24
 80035de:	2200      	movs	r2, #0
 80035e0:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 80035e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0df      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 80035e8:	4798      	blx	r3
 80035ea:	e7dd      	b.n	80035a8 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80035ec:	2208      	movs	r2, #8
 80035ee:	409a      	lsls	r2, r3
 80035f0:	4211      	tst	r1, r2
 80035f2:	d0d9      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x44>
 80035f4:	072b      	lsls	r3, r5, #28
 80035f6:	d5d7      	bpl.n	80035a8 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	220e      	movs	r2, #14
 80035fc:	4393      	bics	r3, r2
 80035fe:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003600:	4c0a      	ldr	r4, [pc, #40]	; (800362c <HAL_DMA_IRQHandler+0xc8>)
 8003602:	6865      	ldr	r5, [r4, #4]
 8003604:	211c      	movs	r1, #28
 8003606:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003608:	4019      	ands	r1, r3
 800360a:	2301      	movs	r3, #1
 800360c:	001a      	movs	r2, r3
 800360e:	408a      	lsls	r2, r1
 8003610:	432a      	orrs	r2, r5
 8003612:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003614:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003616:	2225      	movs	r2, #37	; 0x25
 8003618:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800361a:	3323      	adds	r3, #35	; 0x23
 800361c:	2200      	movs	r2, #0
 800361e:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8003620:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003622:	2b00      	cmp	r3, #0
 8003624:	d0c0      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8003626:	4798      	blx	r3
  return;
 8003628:	e7be      	b.n	80035a8 <HAL_DMA_IRQHandler+0x44>
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	40020000 	.word	0x40020000

08003630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003632:	46de      	mov	lr, fp
 8003634:	4657      	mov	r7, sl
 8003636:	464e      	mov	r6, r9
 8003638:	4645      	mov	r5, r8
 800363a:	b5e0      	push	{r5, r6, r7, lr}
 800363c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800363e:	680e      	ldr	r6, [r1, #0]
 8003640:	2e00      	cmp	r6, #0
 8003642:	d100      	bne.n	8003646 <HAL_GPIO_Init+0x16>
 8003644:	e0d3      	b.n	80037ee <HAL_GPIO_Init+0x1be>
 8003646:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003648:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800364a:	2401      	movs	r4, #1
 800364c:	46a4      	mov	ip, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800364e:	3402      	adds	r4, #2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003650:	25c0      	movs	r5, #192	; 0xc0
 8003652:	02ad      	lsls	r5, r5, #10
 8003654:	46a9      	mov	r9, r5
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003656:	250f      	movs	r5, #15
 8003658:	46aa      	mov	sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800365a:	4d68      	ldr	r5, [pc, #416]	; (80037fc <HAL_GPIO_Init+0x1cc>)
 800365c:	1945      	adds	r5, r0, r5
 800365e:	426f      	negs	r7, r5
 8003660:	417d      	adcs	r5, r7
 8003662:	426d      	negs	r5, r5
 8003664:	9503      	str	r5, [sp, #12]
 8003666:	e04f      	b.n	8003708 <HAL_GPIO_Init+0xd8>
        temp = GPIOx->OSPEEDR;
 8003668:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800366a:	0027      	movs	r7, r4
 800366c:	4097      	lsls	r7, r2
 800366e:	43be      	bics	r6, r7
 8003670:	46b0      	mov	r8, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003672:	68ce      	ldr	r6, [r1, #12]
 8003674:	4096      	lsls	r6, r2
 8003676:	4647      	mov	r7, r8
 8003678:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800367a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800367c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800367e:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003680:	684d      	ldr	r5, [r1, #4]
 8003682:	092d      	lsrs	r5, r5, #4
 8003684:	4667      	mov	r7, ip
 8003686:	403d      	ands	r5, r7
 8003688:	409d      	lsls	r5, r3
 800368a:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800368c:	6045      	str	r5, [r0, #4]
 800368e:	e047      	b.n	8003720 <HAL_GPIO_Init+0xf0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003690:	2600      	movs	r6, #0
 8003692:	465f      	mov	r7, fp
 8003694:	40be      	lsls	r6, r7
 8003696:	4647      	mov	r7, r8
 8003698:	433e      	orrs	r6, r7
        EXTI->EXTICR[position >> 2u] = temp;
 800369a:	662e      	str	r6, [r5, #96]	; 0x60

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800369c:	4d58      	ldr	r5, [pc, #352]	; (8003800 <HAL_GPIO_Init+0x1d0>)
 800369e:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 80036a0:	9e01      	ldr	r6, [sp, #4]
 80036a2:	43f6      	mvns	r6, r6
 80036a4:	9602      	str	r6, [sp, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80036a6:	684f      	ldr	r7, [r1, #4]
 80036a8:	02fe      	lsls	r6, r7, #11
 80036aa:	d500      	bpl.n	80036ae <HAL_GPIO_Init+0x7e>
 80036ac:	e093      	b.n	80037d6 <HAL_GPIO_Init+0x1a6>
        temp &= ~(iocurrent);
 80036ae:	9e02      	ldr	r6, [sp, #8]
 80036b0:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80036b2:	4f53      	ldr	r7, [pc, #332]	; (8003800 <HAL_GPIO_Init+0x1d0>)
 80036b4:	603d      	str	r5, [r7, #0]

        temp = EXTI->FTSR1;
 80036b6:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80036b8:	684f      	ldr	r7, [r1, #4]
 80036ba:	02be      	lsls	r6, r7, #10
 80036bc:	d500      	bpl.n	80036c0 <HAL_GPIO_Init+0x90>
 80036be:	e08d      	b.n	80037dc <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 80036c0:	9e02      	ldr	r6, [sp, #8]
 80036c2:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80036c4:	4f4e      	ldr	r7, [pc, #312]	; (8003800 <HAL_GPIO_Init+0x1d0>)
 80036c6:	607d      	str	r5, [r7, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80036c8:	2584      	movs	r5, #132	; 0x84
 80036ca:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80036cc:	684f      	ldr	r7, [r1, #4]
 80036ce:	03be      	lsls	r6, r7, #14
 80036d0:	d500      	bpl.n	80036d4 <HAL_GPIO_Init+0xa4>
 80036d2:	e086      	b.n	80037e2 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 80036d4:	9e02      	ldr	r6, [sp, #8]
 80036d6:	4035      	ands	r5, r6
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80036d8:	4f49      	ldr	r7, [pc, #292]	; (8003800 <HAL_GPIO_Init+0x1d0>)
 80036da:	46b8      	mov	r8, r7
 80036dc:	2784      	movs	r7, #132	; 0x84
 80036de:	46bb      	mov	fp, r7
 80036e0:	4647      	mov	r7, r8
 80036e2:	465e      	mov	r6, fp
 80036e4:	51bd      	str	r5, [r7, r6]

        temp = EXTI->IMR1;
 80036e6:	2580      	movs	r5, #128	; 0x80
 80036e8:	597d      	ldr	r5, [r7, r5]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80036ea:	684e      	ldr	r6, [r1, #4]
 80036ec:	03f6      	lsls	r6, r6, #15
 80036ee:	d47b      	bmi.n	80037e8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(iocurrent);
 80036f0:	9e02      	ldr	r6, [sp, #8]
 80036f2:	4035      	ands	r5, r6
 80036f4:	002f      	movs	r7, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80036f6:	4e42      	ldr	r6, [pc, #264]	; (8003800 <HAL_GPIO_Init+0x1d0>)
 80036f8:	2580      	movs	r5, #128	; 0x80
 80036fa:	5177      	str	r7, [r6, r5]
      }
    }

    position++;
 80036fc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036fe:	680e      	ldr	r6, [r1, #0]
 8003700:	3202      	adds	r2, #2
 8003702:	0035      	movs	r5, r6
 8003704:	40dd      	lsrs	r5, r3
 8003706:	d072      	beq.n	80037ee <HAL_GPIO_Init+0x1be>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003708:	4665      	mov	r5, ip
 800370a:	409d      	lsls	r5, r3
 800370c:	0037      	movs	r7, r6
 800370e:	402f      	ands	r7, r5
 8003710:	9701      	str	r7, [sp, #4]
    if (iocurrent != 0x00u)
 8003712:	422e      	tst	r6, r5
 8003714:	d0f2      	beq.n	80036fc <HAL_GPIO_Init+0xcc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003716:	684e      	ldr	r6, [r1, #4]
 8003718:	4026      	ands	r6, r4
 800371a:	3e01      	subs	r6, #1
 800371c:	2e01      	cmp	r6, #1
 800371e:	d9a3      	bls.n	8003668 <HAL_GPIO_Init+0x38>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003720:	684d      	ldr	r5, [r1, #4]
 8003722:	4025      	ands	r5, r4
 8003724:	2d03      	cmp	r5, #3
 8003726:	d023      	beq.n	8003770 <HAL_GPIO_Init+0x140>
        temp = GPIOx->PUPDR;
 8003728:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800372a:	0026      	movs	r6, r4
 800372c:	4096      	lsls	r6, r2
 800372e:	43b5      	bics	r5, r6
 8003730:	002e      	movs	r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003732:	688d      	ldr	r5, [r1, #8]
 8003734:	4095      	lsls	r5, r2
 8003736:	4335      	orrs	r5, r6
        GPIOx->PUPDR = temp;
 8003738:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800373a:	684d      	ldr	r5, [r1, #4]
 800373c:	4025      	ands	r5, r4
 800373e:	2d02      	cmp	r5, #2
 8003740:	d116      	bne.n	8003770 <HAL_GPIO_Init+0x140>
        temp = GPIOx->AFR[position >> 3u];
 8003742:	08dd      	lsrs	r5, r3, #3
 8003744:	00ad      	lsls	r5, r5, #2
 8003746:	1945      	adds	r5, r0, r5
 8003748:	9502      	str	r5, [sp, #8]
 800374a:	6a2e      	ldr	r6, [r5, #32]
 800374c:	46b0      	mov	r8, r6
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800374e:	2607      	movs	r6, #7
 8003750:	401e      	ands	r6, r3
 8003752:	00b6      	lsls	r6, r6, #2
 8003754:	4657      	mov	r7, sl
 8003756:	40b7      	lsls	r7, r6
 8003758:	46bb      	mov	fp, r7
 800375a:	4647      	mov	r7, r8
 800375c:	465d      	mov	r5, fp
 800375e:	43af      	bics	r7, r5
 8003760:	46b8      	mov	r8, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003762:	690f      	ldr	r7, [r1, #16]
 8003764:	40b7      	lsls	r7, r6
 8003766:	003e      	movs	r6, r7
 8003768:	4645      	mov	r5, r8
 800376a:	432e      	orrs	r6, r5
        GPIOx->AFR[position >> 3u] = temp;
 800376c:	9d02      	ldr	r5, [sp, #8]
 800376e:	622e      	str	r6, [r5, #32]
      temp = GPIOx->MODER;
 8003770:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003772:	0026      	movs	r6, r4
 8003774:	4096      	lsls	r6, r2
 8003776:	43b5      	bics	r5, r6
 8003778:	002e      	movs	r6, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800377a:	684d      	ldr	r5, [r1, #4]
 800377c:	4025      	ands	r5, r4
 800377e:	4095      	lsls	r5, r2
 8003780:	4335      	orrs	r5, r6
      GPIOx->MODER = temp;
 8003782:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003784:	684d      	ldr	r5, [r1, #4]
 8003786:	464e      	mov	r6, r9
 8003788:	4235      	tst	r5, r6
 800378a:	d0b7      	beq.n	80036fc <HAL_GPIO_Init+0xcc>
        temp = EXTI->EXTICR[position >> 2u];
 800378c:	089d      	lsrs	r5, r3, #2
 800378e:	00ad      	lsls	r5, r5, #2
 8003790:	4e1b      	ldr	r6, [pc, #108]	; (8003800 <HAL_GPIO_Init+0x1d0>)
 8003792:	46b0      	mov	r8, r6
 8003794:	4445      	add	r5, r8
 8003796:	6e2e      	ldr	r6, [r5, #96]	; 0x60
 8003798:	9602      	str	r6, [sp, #8]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800379a:	0027      	movs	r7, r4
 800379c:	401f      	ands	r7, r3
 800379e:	00ff      	lsls	r7, r7, #3
 80037a0:	46bb      	mov	fp, r7
 80037a2:	4657      	mov	r7, sl
 80037a4:	465e      	mov	r6, fp
 80037a6:	40b7      	lsls	r7, r6
 80037a8:	9e02      	ldr	r6, [sp, #8]
 80037aa:	43be      	bics	r6, r7
 80037ac:	46b0      	mov	r8, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80037ae:	26a0      	movs	r6, #160	; 0xa0
 80037b0:	05f6      	lsls	r6, r6, #23
 80037b2:	42b0      	cmp	r0, r6
 80037b4:	d100      	bne.n	80037b8 <HAL_GPIO_Init+0x188>
 80037b6:	e76b      	b.n	8003690 <HAL_GPIO_Init+0x60>
 80037b8:	4e12      	ldr	r6, [pc, #72]	; (8003804 <HAL_GPIO_Init+0x1d4>)
 80037ba:	42b0      	cmp	r0, r6
 80037bc:	d007      	beq.n	80037ce <HAL_GPIO_Init+0x19e>
 80037be:	4e12      	ldr	r6, [pc, #72]	; (8003808 <HAL_GPIO_Init+0x1d8>)
 80037c0:	42b0      	cmp	r0, r6
 80037c2:	d006      	beq.n	80037d2 <HAL_GPIO_Init+0x1a2>
 80037c4:	9e03      	ldr	r6, [sp, #12]
 80037c6:	4667      	mov	r7, ip
 80037c8:	43be      	bics	r6, r7
 80037ca:	3605      	adds	r6, #5
 80037cc:	e761      	b.n	8003692 <HAL_GPIO_Init+0x62>
 80037ce:	2601      	movs	r6, #1
 80037d0:	e75f      	b.n	8003692 <HAL_GPIO_Init+0x62>
 80037d2:	2602      	movs	r6, #2
 80037d4:	e75d      	b.n	8003692 <HAL_GPIO_Init+0x62>
          temp |= iocurrent;
 80037d6:	9e01      	ldr	r6, [sp, #4]
 80037d8:	4335      	orrs	r5, r6
 80037da:	e76a      	b.n	80036b2 <HAL_GPIO_Init+0x82>
          temp |= iocurrent;
 80037dc:	9e01      	ldr	r6, [sp, #4]
 80037de:	4335      	orrs	r5, r6
 80037e0:	e770      	b.n	80036c4 <HAL_GPIO_Init+0x94>
          temp |= iocurrent;
 80037e2:	9e01      	ldr	r6, [sp, #4]
 80037e4:	4335      	orrs	r5, r6
 80037e6:	e777      	b.n	80036d8 <HAL_GPIO_Init+0xa8>
          temp |= iocurrent;
 80037e8:	9f01      	ldr	r7, [sp, #4]
 80037ea:	432f      	orrs	r7, r5
 80037ec:	e783      	b.n	80036f6 <HAL_GPIO_Init+0xc6>
  }
}
 80037ee:	b005      	add	sp, #20
 80037f0:	bcf0      	pop	{r4, r5, r6, r7}
 80037f2:	46bb      	mov	fp, r7
 80037f4:	46b2      	mov	sl, r6
 80037f6:	46a9      	mov	r9, r5
 80037f8:	46a0      	mov	r8, r4
 80037fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037fc:	affff400 	.word	0xaffff400
 8003800:	40021800 	.word	0x40021800
 8003804:	50000400 	.word	0x50000400
 8003808:	50000800 	.word	0x50000800

0800380c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800380c:	2a00      	cmp	r2, #0
 800380e:	d001      	beq.n	8003814 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003810:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003812:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003814:	6281      	str	r1, [r0, #40]	; 0x28
}
 8003816:	e7fc      	b.n	8003812 <HAL_GPIO_WritePin+0x6>

08003818 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003818:	6803      	ldr	r3, [r0, #0]
 800381a:	699a      	ldr	r2, [r3, #24]
 800381c:	0792      	lsls	r2, r2, #30
 800381e:	d501      	bpl.n	8003824 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003820:	2200      	movs	r2, #0
 8003822:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003824:	6803      	ldr	r3, [r0, #0]
 8003826:	699a      	ldr	r2, [r3, #24]
 8003828:	07d2      	lsls	r2, r2, #31
 800382a:	d403      	bmi.n	8003834 <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800382c:	699a      	ldr	r2, [r3, #24]
 800382e:	2101      	movs	r1, #1
 8003830:	430a      	orrs	r2, r1
 8003832:	619a      	str	r2, [r3, #24]
  }
}
 8003834:	4770      	bx	lr
	...

08003838 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003838:	b530      	push	{r4, r5, lr}
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800383a:	6800      	ldr	r0, [r0, #0]
 800383c:	6844      	ldr	r4, [r0, #4]
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800383e:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003840:	9d03      	ldr	r5, [sp, #12]
 8003842:	432b      	orrs	r3, r5
 8003844:	431a      	orrs	r2, r3
 8003846:	0589      	lsls	r1, r1, #22
 8003848:	0d89      	lsrs	r1, r1, #22
 800384a:	430a      	orrs	r2, r1
 800384c:	0052      	lsls	r2, r2, #1
 800384e:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 8003850:	0d6b      	lsrs	r3, r5, #21
 8003852:	2180      	movs	r1, #128	; 0x80
 8003854:	00c9      	lsls	r1, r1, #3
 8003856:	400b      	ands	r3, r1
 8003858:	4902      	ldr	r1, [pc, #8]	; (8003864 <I2C_TransferConfig+0x2c>)
 800385a:	430b      	orrs	r3, r1
 800385c:	439c      	bics	r4, r3
 800385e:	4322      	orrs	r2, r4
 8003860:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003862:	bd30      	pop	{r4, r5, pc}
 8003864:	03ff63ff 	.word	0x03ff63ff

08003868 <I2C_IsErrorOccurred>:
{
 8003868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800386a:	46de      	mov	lr, fp
 800386c:	4657      	mov	r7, sl
 800386e:	464e      	mov	r6, r9
 8003870:	4645      	mov	r5, r8
 8003872:	b5e0      	push	{r5, r6, r7, lr}
 8003874:	0004      	movs	r4, r0
 8003876:	000d      	movs	r5, r1
 8003878:	4690      	mov	r8, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 800387a:	6801      	ldr	r1, [r0, #0]
 800387c:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800387e:	2210      	movs	r2, #16
 8003880:	0016      	movs	r6, r2
 8003882:	401e      	ands	r6, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003886:	421a      	tst	r2, r3
 8003888:	d048      	beq.n	800391c <I2C_IsErrorOccurred+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800388a:	2310      	movs	r3, #16
 800388c:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	4699      	mov	r9, r3
  HAL_StatusTypeDef status = HAL_OK;
 8003892:	2700      	movs	r7, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003894:	2620      	movs	r6, #32
          tmp2 = hi2c->Mode;
 8003896:	3342      	adds	r3, #66	; 0x42
 8003898:	469b      	mov	fp, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	469a      	mov	sl, r3
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038a0:	6822      	ldr	r2, [r4, #0]
 80038a2:	6993      	ldr	r3, [r2, #24]
 80038a4:	421e      	tst	r6, r3
 80038a6:	d130      	bne.n	800390a <I2C_IsErrorOccurred+0xa2>
 80038a8:	2f00      	cmp	r7, #0
 80038aa:	d132      	bne.n	8003912 <I2C_IsErrorOccurred+0xaa>
      if (Timeout != HAL_MAX_DELAY)
 80038ac:	1c6b      	adds	r3, r5, #1
 80038ae:	d0f8      	beq.n	80038a2 <I2C_IsErrorOccurred+0x3a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038b0:	f7ff f8f0 	bl	8002a94 <HAL_GetTick>
 80038b4:	4643      	mov	r3, r8
 80038b6:	1ac0      	subs	r0, r0, r3
 80038b8:	42a8      	cmp	r0, r5
 80038ba:	d801      	bhi.n	80038c0 <I2C_IsErrorOccurred+0x58>
 80038bc:	2d00      	cmp	r5, #0
 80038be:	d1ef      	bne.n	80038a0 <I2C_IsErrorOccurred+0x38>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038c0:	6822      	ldr	r2, [r4, #0]
 80038c2:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 80038c4:	465b      	mov	r3, fp
 80038c6:	5ce3      	ldrb	r3, [r4, r3]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	469c      	mov	ip, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038cc:	6991      	ldr	r1, [r2, #24]
 80038ce:	4653      	mov	r3, sl
 80038d0:	4219      	tst	r1, r3
 80038d2:	d004      	beq.n	80038de <I2C_IsErrorOccurred+0x76>
 80038d4:	0443      	lsls	r3, r0, #17
 80038d6:	d402      	bmi.n	80038de <I2C_IsErrorOccurred+0x76>
              (tmp1 != I2C_CR2_STOP) && \
 80038d8:	4663      	mov	r3, ip
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d10c      	bne.n	80038f8 <I2C_IsErrorOccurred+0x90>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	421e      	tst	r6, r3
 80038e4:	d1dc      	bne.n	80038a0 <I2C_IsErrorOccurred+0x38>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038e6:	f7ff f8d5 	bl	8002a94 <HAL_GetTick>
 80038ea:	4643      	mov	r3, r8
 80038ec:	1ac0      	subs	r0, r0, r3
 80038ee:	2819      	cmp	r0, #25
 80038f0:	d9f5      	bls.n	80038de <I2C_IsErrorOccurred+0x76>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80038f2:	46b1      	mov	r9, r6
              status = HAL_ERROR;
 80038f4:	2701      	movs	r7, #1
 80038f6:	e7d3      	b.n	80038a0 <I2C_IsErrorOccurred+0x38>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038f8:	6851      	ldr	r1, [r2, #4]
 80038fa:	2380      	movs	r3, #128	; 0x80
 80038fc:	01db      	lsls	r3, r3, #7
 80038fe:	430b      	orrs	r3, r1
 8003900:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 8003902:	f7ff f8c7 	bl	8002a94 <HAL_GetTick>
 8003906:	4680      	mov	r8, r0
 8003908:	e7e9      	b.n	80038de <I2C_IsErrorOccurred+0x76>
    if (status == HAL_OK)
 800390a:	2f00      	cmp	r7, #0
 800390c:	d101      	bne.n	8003912 <I2C_IsErrorOccurred+0xaa>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800390e:	2320      	movs	r3, #32
 8003910:	61d3      	str	r3, [r2, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003912:	2604      	movs	r6, #4
 8003914:	464b      	mov	r3, r9
 8003916:	4333      	orrs	r3, r6
 8003918:	001e      	movs	r6, r3
    status = HAL_ERROR;
 800391a:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800391c:	6822      	ldr	r2, [r4, #0]
 800391e:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003920:	05d9      	lsls	r1, r3, #23
 8003922:	d504      	bpl.n	800392e <I2C_IsErrorOccurred+0xc6>
    error_code |= HAL_I2C_ERROR_BERR;
 8003924:	2101      	movs	r1, #1
 8003926:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003928:	31ff      	adds	r1, #255	; 0xff
 800392a:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 800392c:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800392e:	055a      	lsls	r2, r3, #21
 8003930:	d527      	bpl.n	8003982 <I2C_IsErrorOccurred+0x11a>
    error_code |= HAL_I2C_ERROR_OVR;
 8003932:	2208      	movs	r2, #8
 8003934:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	2180      	movs	r1, #128	; 0x80
 800393a:	00c9      	lsls	r1, r1, #3
 800393c:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800393e:	059b      	lsls	r3, r3, #22
 8003940:	d505      	bpl.n	800394e <I2C_IsErrorOccurred+0xe6>
    error_code |= HAL_I2C_ERROR_ARLO;
 8003942:	2302      	movs	r3, #2
 8003944:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003946:	6823      	ldr	r3, [r4, #0]
 8003948:	2280      	movs	r2, #128	; 0x80
 800394a:	0092      	lsls	r2, r2, #2
 800394c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800394e:	0020      	movs	r0, r4
 8003950:	f7ff ff62 	bl	8003818 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8003954:	6822      	ldr	r2, [r4, #0]
 8003956:	6853      	ldr	r3, [r2, #4]
 8003958:	490c      	ldr	r1, [pc, #48]	; (800398c <I2C_IsErrorOccurred+0x124>)
 800395a:	400b      	ands	r3, r1
 800395c:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800395e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003960:	431e      	orrs	r6, r3
 8003962:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003964:	2341      	movs	r3, #65	; 0x41
 8003966:	2220      	movs	r2, #32
 8003968:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	2300      	movs	r3, #0
 800396c:	3222      	adds	r2, #34	; 0x22
 800396e:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003970:	3a02      	subs	r2, #2
 8003972:	54a3      	strb	r3, [r4, r2]
 8003974:	2001      	movs	r0, #1
}
 8003976:	bcf0      	pop	{r4, r5, r6, r7}
 8003978:	46bb      	mov	fp, r7
 800397a:	46b2      	mov	sl, r6
 800397c:	46a9      	mov	r9, r5
 800397e:	46a0      	mov	r8, r4
 8003980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003982:	059b      	lsls	r3, r3, #22
 8003984:	d4dd      	bmi.n	8003942 <I2C_IsErrorOccurred+0xda>
  if (status != HAL_OK)
 8003986:	2800      	cmp	r0, #0
 8003988:	d0f5      	beq.n	8003976 <I2C_IsErrorOccurred+0x10e>
 800398a:	e7e0      	b.n	800394e <I2C_IsErrorOccurred+0xe6>
 800398c:	fe00e800 	.word	0xfe00e800

08003990 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8003990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003992:	0004      	movs	r4, r0
 8003994:	000d      	movs	r5, r1
 8003996:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003998:	2702      	movs	r7, #2
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	421f      	tst	r7, r3
 80039a0:	d11c      	bne.n	80039dc <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a2:	0032      	movs	r2, r6
 80039a4:	0029      	movs	r1, r5
 80039a6:	0020      	movs	r0, r4
 80039a8:	f7ff ff5e 	bl	8003868 <I2C_IsErrorOccurred>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d117      	bne.n	80039e0 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80039b0:	1c6b      	adds	r3, r5, #1
 80039b2:	d0f2      	beq.n	800399a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b4:	f7ff f86e 	bl	8002a94 <HAL_GetTick>
 80039b8:	1b80      	subs	r0, r0, r6
 80039ba:	42a8      	cmp	r0, r5
 80039bc:	d801      	bhi.n	80039c2 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80039be:	2d00      	cmp	r5, #0
 80039c0:	d1eb      	bne.n	800399a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80039c4:	2220      	movs	r2, #32
 80039c6:	4313      	orrs	r3, r2
 80039c8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80039ca:	2341      	movs	r3, #65	; 0x41
 80039cc:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	3222      	adds	r2, #34	; 0x22
 80039d2:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 80039d4:	3a02      	subs	r2, #2
 80039d6:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 80039d8:	2001      	movs	r0, #1
 80039da:	e000      	b.n	80039de <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
  return HAL_OK;
 80039dc:	2000      	movs	r0, #0
}
 80039de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80039e0:	2001      	movs	r0, #1
 80039e2:	e7fc      	b.n	80039de <I2C_WaitOnTXISFlagUntilTimeout+0x4e>

080039e4 <I2C_WaitOnFlagUntilTimeout>:
{
 80039e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e6:	46c6      	mov	lr, r8
 80039e8:	b500      	push	{lr}
 80039ea:	4680      	mov	r8, r0
 80039ec:	000d      	movs	r5, r1
 80039ee:	0017      	movs	r7, r2
 80039f0:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f2:	4643      	mov	r3, r8
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699c      	ldr	r4, [r3, #24]
 80039f8:	402c      	ands	r4, r5
 80039fa:	1b64      	subs	r4, r4, r5
 80039fc:	4262      	negs	r2, r4
 80039fe:	4154      	adcs	r4, r2
 8003a00:	42bc      	cmp	r4, r7
 8003a02:	d118      	bne.n	8003a36 <I2C_WaitOnFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8003a04:	1c72      	adds	r2, r6, #1
 8003a06:	d0f6      	beq.n	80039f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a08:	f7ff f844 	bl	8002a94 <HAL_GetTick>
 8003a0c:	9b06      	ldr	r3, [sp, #24]
 8003a0e:	1ac0      	subs	r0, r0, r3
 8003a10:	42b0      	cmp	r0, r6
 8003a12:	d801      	bhi.n	8003a18 <I2C_WaitOnFlagUntilTimeout+0x34>
 8003a14:	2e00      	cmp	r6, #0
 8003a16:	d1ec      	bne.n	80039f2 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a18:	4643      	mov	r3, r8
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	4641      	mov	r1, r8
 8003a22:	644b      	str	r3, [r1, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	2341      	movs	r3, #65	; 0x41
 8003a26:	54ca      	strb	r2, [r1, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	3222      	adds	r2, #34	; 0x22
 8003a2c:	548b      	strb	r3, [r1, r2]
        __HAL_UNLOCK(hi2c);
 8003a2e:	3a02      	subs	r2, #2
 8003a30:	548b      	strb	r3, [r1, r2]
        return HAL_ERROR;
 8003a32:	2001      	movs	r0, #1
 8003a34:	e000      	b.n	8003a38 <I2C_WaitOnFlagUntilTimeout+0x54>
  return HAL_OK;
 8003a36:	2000      	movs	r0, #0
}
 8003a38:	bc80      	pop	{r7}
 8003a3a:	46b8      	mov	r8, r7
 8003a3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a3e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8003a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a40:	0005      	movs	r5, r0
 8003a42:	000c      	movs	r4, r1
 8003a44:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a46:	2720      	movs	r7, #32
 8003a48:	682b      	ldr	r3, [r5, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	421f      	tst	r7, r3
 8003a4e:	d11a      	bne.n	8003a86 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a50:	0032      	movs	r2, r6
 8003a52:	0021      	movs	r1, r4
 8003a54:	0028      	movs	r0, r5
 8003a56:	f7ff ff07 	bl	8003868 <I2C_IsErrorOccurred>
 8003a5a:	2800      	cmp	r0, #0
 8003a5c:	d115      	bne.n	8003a8a <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5e:	f7ff f819 	bl	8002a94 <HAL_GetTick>
 8003a62:	1b80      	subs	r0, r0, r6
 8003a64:	42a0      	cmp	r0, r4
 8003a66:	d801      	bhi.n	8003a6c <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8003a68:	2c00      	cmp	r4, #0
 8003a6a:	d1ed      	bne.n	8003a48 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a6c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003a6e:	2220      	movs	r2, #32
 8003a70:	4313      	orrs	r3, r2
 8003a72:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	2341      	movs	r3, #65	; 0x41
 8003a76:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	3222      	adds	r2, #34	; 0x22
 8003a7c:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 8003a7e:	3a02      	subs	r2, #2
 8003a80:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 8003a82:	2001      	movs	r0, #1
}
 8003a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003a86:	2000      	movs	r0, #0
 8003a88:	e7fc      	b.n	8003a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8003a8a:	2001      	movs	r0, #1
 8003a8c:	e7fa      	b.n	8003a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
	...

08003a90 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003a90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a92:	46c6      	mov	lr, r8
 8003a94:	b500      	push	{lr}
 8003a96:	0004      	movs	r4, r0
 8003a98:	000d      	movs	r5, r1
 8003a9a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a9c:	2704      	movs	r7, #4
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	421f      	tst	r7, r3
 8003aa8:	d140      	bne.n	8003b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x9c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aaa:	0032      	movs	r2, r6
 8003aac:	0029      	movs	r1, r5
 8003aae:	0020      	movs	r0, r4
 8003ab0:	f7ff feda 	bl	8003868 <I2C_IsErrorOccurred>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d13b      	bne.n	8003b30 <I2C_WaitOnRXNEFlagUntilTimeout+0xa0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ab8:	6823      	ldr	r3, [r4, #0]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	4641      	mov	r1, r8
 8003abe:	4211      	tst	r1, r2
 8003ac0:	d113      	bne.n	8003aea <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac2:	f7fe ffe7 	bl	8002a94 <HAL_GetTick>
 8003ac6:	1b80      	subs	r0, r0, r6
 8003ac8:	42a8      	cmp	r0, r5
 8003aca:	d801      	bhi.n	8003ad0 <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 8003acc:	2d00      	cmp	r5, #0
 8003ace:	d1e8      	bne.n	8003aa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ad2:	2220      	movs	r2, #32
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	2341      	movs	r3, #65	; 0x41
 8003ada:	54e2      	strb	r2, [r4, r3]
      __HAL_UNLOCK(hi2c);
 8003adc:	3b01      	subs	r3, #1
 8003ade:	2200      	movs	r2, #0
 8003ae0:	54e2      	strb	r2, [r4, r3]
      return HAL_ERROR;
 8003ae2:	2001      	movs	r0, #1
}
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	46b8      	mov	r8, r7
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	0752      	lsls	r2, r2, #29
 8003aee:	d502      	bpl.n	8003af6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003af0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8003af2:	2a00      	cmp	r2, #0
 8003af4:	d1f6      	bne.n	8003ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	06d2      	lsls	r2, r2, #27
 8003afa:	d514      	bpl.n	8003b26 <I2C_WaitOnRXNEFlagUntilTimeout+0x96>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003afc:	2210      	movs	r2, #16
 8003afe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003b00:	2304      	movs	r3, #4
 8003b02:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b04:	6823      	ldr	r3, [r4, #0]
 8003b06:	2220      	movs	r2, #32
 8003b08:	61da      	str	r2, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8003b0a:	6821      	ldr	r1, [r4, #0]
 8003b0c:	684b      	ldr	r3, [r1, #4]
 8003b0e:	4809      	ldr	r0, [pc, #36]	; (8003b34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>)
 8003b10:	4003      	ands	r3, r0
 8003b12:	604b      	str	r3, [r1, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 8003b14:	2341      	movs	r3, #65	; 0x41
 8003b16:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	3222      	adds	r2, #34	; 0x22
 8003b1c:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 8003b1e:	3a02      	subs	r2, #2
 8003b20:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 8003b22:	2001      	movs	r0, #1
 8003b24:	e7de      	b.n	8003ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	6463      	str	r3, [r4, #68]	; 0x44
 8003b2a:	e7eb      	b.n	8003b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x74>
  return HAL_OK;
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	e7d9      	b.n	8003ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      return HAL_ERROR;
 8003b30:	2001      	movs	r0, #1
 8003b32:	e7d7      	b.n	8003ae4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003b34:	fe00e800 	.word	0xfe00e800

08003b38 <HAL_I2C_Init>:
{
 8003b38:	b510      	push	{r4, lr}
 8003b3a:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8003b3c:	d059      	beq.n	8003bf2 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b3e:	2341      	movs	r3, #65	; 0x41
 8003b40:	5cc3      	ldrb	r3, [r0, r3]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d043      	beq.n	8003bce <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b46:	2341      	movs	r3, #65	; 0x41
 8003b48:	2224      	movs	r2, #36	; 0x24
 8003b4a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8003b4c:	6822      	ldr	r2, [r4, #0]
 8003b4e:	6813      	ldr	r3, [r2, #0]
 8003b50:	2101      	movs	r1, #1
 8003b52:	438b      	bics	r3, r1
 8003b54:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b56:	6822      	ldr	r2, [r4, #0]
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_I2C_Init+0xc0>)
 8003b5a:	6861      	ldr	r1, [r4, #4]
 8003b5c:	400b      	ands	r3, r1
 8003b5e:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	6893      	ldr	r3, [r2, #8]
 8003b64:	4925      	ldr	r1, [pc, #148]	; (8003bfc <HAL_I2C_Init+0xc4>)
 8003b66:	400b      	ands	r3, r1
 8003b68:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b6a:	68e3      	ldr	r3, [r4, #12]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d034      	beq.n	8003bda <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	2384      	movs	r3, #132	; 0x84
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	68a1      	ldr	r1, [r4, #8]
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b7c:	68e3      	ldr	r3, [r4, #12]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d032      	beq.n	8003be8 <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b82:	6822      	ldr	r2, [r4, #0]
 8003b84:	6851      	ldr	r1, [r2, #4]
 8003b86:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_I2C_Init+0xc8>)
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b8c:	6822      	ldr	r2, [r4, #0]
 8003b8e:	68d3      	ldr	r3, [r2, #12]
 8003b90:	491a      	ldr	r1, [pc, #104]	; (8003bfc <HAL_I2C_Init+0xc4>)
 8003b92:	400b      	ands	r3, r1
 8003b94:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b96:	6821      	ldr	r1, [r4, #0]
 8003b98:	6923      	ldr	r3, [r4, #16]
 8003b9a:	6962      	ldr	r2, [r4, #20]
 8003b9c:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b9e:	69a2      	ldr	r2, [r4, #24]
 8003ba0:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ba6:	6822      	ldr	r2, [r4, #0]
 8003ba8:	69e3      	ldr	r3, [r4, #28]
 8003baa:	6a21      	ldr	r1, [r4, #32]
 8003bac:	430b      	orrs	r3, r1
 8003bae:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 8003bb0:	6822      	ldr	r2, [r4, #0]
 8003bb2:	6813      	ldr	r3, [r2, #0]
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	430b      	orrs	r3, r1
 8003bb8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bbe:	2241      	movs	r2, #65	; 0x41
 8003bc0:	311f      	adds	r1, #31
 8003bc2:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc4:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc6:	3201      	adds	r2, #1
 8003bc8:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8003bca:	2000      	movs	r0, #0
}
 8003bcc:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8003bce:	3340      	adds	r3, #64	; 0x40
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8003bd4:	f7fe fd54 	bl	8002680 <HAL_I2C_MspInit>
 8003bd8:	e7b5      	b.n	8003b46 <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bda:	6822      	ldr	r2, [r4, #0]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	68a1      	ldr	r1, [r4, #8]
 8003be2:	430b      	orrs	r3, r1
 8003be4:	6093      	str	r3, [r2, #8]
 8003be6:	e7c9      	b.n	8003b7c <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003be8:	6823      	ldr	r3, [r4, #0]
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	0112      	lsls	r2, r2, #4
 8003bee:	605a      	str	r2, [r3, #4]
 8003bf0:	e7c7      	b.n	8003b82 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	e7ea      	b.n	8003bcc <HAL_I2C_Init+0x94>
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	f0ffffff 	.word	0xf0ffffff
 8003bfc:	ffff7fff 	.word	0xffff7fff
 8003c00:	02008000 	.word	0x02008000

08003c04 <HAL_I2C_Master_Transmit>:
{
 8003c04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c06:	46d6      	mov	lr, sl
 8003c08:	464f      	mov	r7, r9
 8003c0a:	4646      	mov	r6, r8
 8003c0c:	b5c0      	push	{r6, r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	0004      	movs	r4, r0
 8003c12:	4689      	mov	r9, r1
 8003c14:	9203      	str	r2, [sp, #12]
 8003c16:	001e      	movs	r6, r3
 8003c18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c1a:	2341      	movs	r3, #65	; 0x41
 8003c1c:	5cc3      	ldrb	r3, [r0, r3]
 8003c1e:	2b20      	cmp	r3, #32
 8003c20:	d000      	beq.n	8003c24 <HAL_I2C_Master_Transmit+0x20>
 8003c22:	e0a2      	b.n	8003d6a <HAL_I2C_Master_Transmit+0x166>
    __HAL_LOCK(hi2c);
 8003c24:	3320      	adds	r3, #32
 8003c26:	5cc3      	ldrb	r3, [r0, r3]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d100      	bne.n	8003c2e <HAL_I2C_Master_Transmit+0x2a>
 8003c2c:	e0a4      	b.n	8003d78 <HAL_I2C_Master_Transmit+0x174>
 8003c2e:	2340      	movs	r3, #64	; 0x40
 8003c30:	2201      	movs	r2, #1
 8003c32:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8003c34:	f7fe ff2e 	bl	8002a94 <HAL_GetTick>
 8003c38:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c3a:	2180      	movs	r1, #128	; 0x80
 8003c3c:	9000      	str	r0, [sp, #0]
 8003c3e:	2319      	movs	r3, #25
 8003c40:	2201      	movs	r2, #1
 8003c42:	0209      	lsls	r1, r1, #8
 8003c44:	0020      	movs	r0, r4
 8003c46:	f7ff fecd 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d000      	beq.n	8003c50 <HAL_I2C_Master_Transmit+0x4c>
 8003c4e:	e095      	b.n	8003d7c <HAL_I2C_Master_Transmit+0x178>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c50:	2341      	movs	r3, #65	; 0x41
 8003c52:	2221      	movs	r2, #33	; 0x21
 8003c54:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c56:	3301      	adds	r3, #1
 8003c58:	3a11      	subs	r2, #17
 8003c5a:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003c60:	9a03      	ldr	r2, [sp, #12]
 8003c62:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c64:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c66:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2bff      	cmp	r3, #255	; 0xff
 8003c6e:	d916      	bls.n	8003c9e <HAL_I2C_Master_Transmit+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c70:	23ff      	movs	r3, #255	; 0xff
 8003c72:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c74:	3b7f      	subs	r3, #127	; 0x7f
 8003c76:	4a45      	ldr	r2, [pc, #276]	; (8003d8c <HAL_I2C_Master_Transmit+0x188>)
 8003c78:	9200      	str	r2, [sp, #0]
 8003c7a:	045b      	lsls	r3, r3, #17
 8003c7c:	22ff      	movs	r2, #255	; 0xff
 8003c7e:	4649      	mov	r1, r9
 8003c80:	0020      	movs	r0, r4
 8003c82:	f7ff fdd9 	bl	8003838 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d056      	beq.n	8003d3c <HAL_I2C_Master_Transmit+0x138>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	049b      	lsls	r3, r3, #18
 8003c92:	469a      	mov	sl, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c94:	26ff      	movs	r6, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c96:	2380      	movs	r3, #128	; 0x80
 8003c98:	045b      	lsls	r3, r3, #17
 8003c9a:	4698      	mov	r8, r3
 8003c9c:	e01b      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8003c9e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003ca0:	b292      	uxth	r2, r2
 8003ca2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	4938      	ldr	r1, [pc, #224]	; (8003d8c <HAL_I2C_Master_Transmit+0x188>)
 8003caa:	9100      	str	r1, [sp, #0]
 8003cac:	049b      	lsls	r3, r3, #18
 8003cae:	4649      	mov	r1, r9
 8003cb0:	0020      	movs	r0, r4
 8003cb2:	f7ff fdc1 	bl	8003838 <I2C_TransferConfig>
 8003cb6:	e7e6      	b.n	8003c86 <HAL_I2C_Master_Transmit+0x82>
          hi2c->XferSize = hi2c->XferCount;
 8003cb8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003cba:	b292      	uxth	r2, r2
 8003cbc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4653      	mov	r3, sl
 8003cc6:	4649      	mov	r1, r9
 8003cc8:	0020      	movs	r0, r4
 8003cca:	f7ff fdb5 	bl	8003838 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003cce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d032      	beq.n	8003d3c <HAL_I2C_Master_Transmit+0x138>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cd6:	003a      	movs	r2, r7
 8003cd8:	0029      	movs	r1, r5
 8003cda:	0020      	movs	r0, r4
 8003cdc:	f7ff fe58 	bl	8003990 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce0:	2800      	cmp	r0, #0
 8003ce2:	d14d      	bne.n	8003d80 <HAL_I2C_Master_Transmit+0x17c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003ce8:	7812      	ldrb	r2, [r2, #0]
 8003cea:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cee:	3301      	adds	r3, #1
 8003cf0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003cf2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003cfa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d02:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003d04:	b292      	uxth	r2, r2
 8003d06:	2a00      	cmp	r2, #0
 8003d08:	d0e1      	beq.n	8003cce <HAL_I2C_Master_Transmit+0xca>
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1df      	bne.n	8003cce <HAL_I2C_Master_Transmit+0xca>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d0e:	9700      	str	r7, [sp, #0]
 8003d10:	002b      	movs	r3, r5
 8003d12:	2200      	movs	r2, #0
 8003d14:	2180      	movs	r1, #128	; 0x80
 8003d16:	0020      	movs	r0, r4
 8003d18:	f7ff fe64 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	d131      	bne.n	8003d84 <HAL_I2C_Master_Transmit+0x180>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d20:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2bff      	cmp	r3, #255	; 0xff
 8003d26:	d9c7      	bls.n	8003cb8 <HAL_I2C_Master_Transmit+0xb4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d28:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	4643      	mov	r3, r8
 8003d30:	0032      	movs	r2, r6
 8003d32:	4649      	mov	r1, r9
 8003d34:	0020      	movs	r0, r4
 8003d36:	f7ff fd7f 	bl	8003838 <I2C_TransferConfig>
 8003d3a:	e7c8      	b.n	8003cce <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3c:	003a      	movs	r2, r7
 8003d3e:	0029      	movs	r1, r5
 8003d40:	0020      	movs	r0, r4
 8003d42:	f7ff fe7c 	bl	8003a3e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	d11e      	bne.n	8003d88 <HAL_I2C_Master_Transmit+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d4a:	6823      	ldr	r3, [r4, #0]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003d50:	6821      	ldr	r1, [r4, #0]
 8003d52:	684b      	ldr	r3, [r1, #4]
 8003d54:	4d0e      	ldr	r5, [pc, #56]	; (8003d90 <HAL_I2C_Master_Transmit+0x18c>)
 8003d56:	402b      	ands	r3, r5
 8003d58:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d5a:	2341      	movs	r3, #65	; 0x41
 8003d5c:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	3222      	adds	r2, #34	; 0x22
 8003d62:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003d64:	3a02      	subs	r2, #2
 8003d66:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8003d68:	e000      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x168>
    return HAL_BUSY;
 8003d6a:	2002      	movs	r0, #2
}
 8003d6c:	b004      	add	sp, #16
 8003d6e:	bce0      	pop	{r5, r6, r7}
 8003d70:	46ba      	mov	sl, r7
 8003d72:	46b1      	mov	r9, r6
 8003d74:	46a8      	mov	r8, r5
 8003d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003d78:	2002      	movs	r0, #2
 8003d7a:	e7f7      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 8003d7c:	2001      	movs	r0, #1
 8003d7e:	e7f5      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x168>
        return HAL_ERROR;
 8003d80:	2001      	movs	r0, #1
 8003d82:	e7f3      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x168>
          return HAL_ERROR;
 8003d84:	2001      	movs	r0, #1
 8003d86:	e7f1      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x168>
      return HAL_ERROR;
 8003d88:	2001      	movs	r0, #1
 8003d8a:	e7ef      	b.n	8003d6c <HAL_I2C_Master_Transmit+0x168>
 8003d8c:	80002000 	.word	0x80002000
 8003d90:	fe00e800 	.word	0xfe00e800

08003d94 <HAL_I2C_Master_Receive>:
{
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	46d6      	mov	lr, sl
 8003d98:	464f      	mov	r7, r9
 8003d9a:	4646      	mov	r6, r8
 8003d9c:	b5c0      	push	{r6, r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	0004      	movs	r4, r0
 8003da2:	4689      	mov	r9, r1
 8003da4:	9203      	str	r2, [sp, #12]
 8003da6:	001e      	movs	r6, r3
 8003da8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003daa:	2341      	movs	r3, #65	; 0x41
 8003dac:	5cc3      	ldrb	r3, [r0, r3]
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d000      	beq.n	8003db4 <HAL_I2C_Master_Receive+0x20>
 8003db2:	e0a2      	b.n	8003efa <HAL_I2C_Master_Receive+0x166>
    __HAL_LOCK(hi2c);
 8003db4:	3320      	adds	r3, #32
 8003db6:	5cc3      	ldrb	r3, [r0, r3]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d100      	bne.n	8003dbe <HAL_I2C_Master_Receive+0x2a>
 8003dbc:	e0a4      	b.n	8003f08 <HAL_I2C_Master_Receive+0x174>
 8003dbe:	2340      	movs	r3, #64	; 0x40
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8003dc4:	f7fe fe66 	bl	8002a94 <HAL_GetTick>
 8003dc8:	0007      	movs	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003dca:	2180      	movs	r1, #128	; 0x80
 8003dcc:	9000      	str	r0, [sp, #0]
 8003dce:	2319      	movs	r3, #25
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	0209      	lsls	r1, r1, #8
 8003dd4:	0020      	movs	r0, r4
 8003dd6:	f7ff fe05 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003dda:	2800      	cmp	r0, #0
 8003ddc:	d000      	beq.n	8003de0 <HAL_I2C_Master_Receive+0x4c>
 8003dde:	e095      	b.n	8003f0c <HAL_I2C_Master_Receive+0x178>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003de0:	2341      	movs	r3, #65	; 0x41
 8003de2:	2222      	movs	r2, #34	; 0x22
 8003de4:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003de6:	3301      	adds	r3, #1
 8003de8:	3a12      	subs	r2, #18
 8003dea:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dec:	2300      	movs	r3, #0
 8003dee:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8003df0:	9a03      	ldr	r2, [sp, #12]
 8003df2:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8003df4:	8566      	strh	r6, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003df6:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2bff      	cmp	r3, #255	; 0xff
 8003dfe:	d916      	bls.n	8003e2e <HAL_I2C_Master_Receive+0x9a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e00:	23ff      	movs	r3, #255	; 0xff
 8003e02:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e04:	3b7f      	subs	r3, #127	; 0x7f
 8003e06:	4a45      	ldr	r2, [pc, #276]	; (8003f1c <HAL_I2C_Master_Receive+0x188>)
 8003e08:	9200      	str	r2, [sp, #0]
 8003e0a:	045b      	lsls	r3, r3, #17
 8003e0c:	22ff      	movs	r2, #255	; 0xff
 8003e0e:	4649      	mov	r1, r9
 8003e10:	0020      	movs	r0, r4
 8003e12:	f7ff fd11 	bl	8003838 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e16:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d056      	beq.n	8003ecc <HAL_I2C_Master_Receive+0x138>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	049b      	lsls	r3, r3, #18
 8003e22:	469a      	mov	sl, r3
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e24:	26ff      	movs	r6, #255	; 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e26:	2380      	movs	r3, #128	; 0x80
 8003e28:	045b      	lsls	r3, r3, #17
 8003e2a:	4698      	mov	r8, r3
 8003e2c:	e01b      	b.n	8003e66 <HAL_I2C_Master_Receive+0xd2>
      hi2c->XferSize = hi2c->XferCount;
 8003e2e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e30:	b292      	uxth	r2, r2
 8003e32:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	4938      	ldr	r1, [pc, #224]	; (8003f1c <HAL_I2C_Master_Receive+0x188>)
 8003e3a:	9100      	str	r1, [sp, #0]
 8003e3c:	049b      	lsls	r3, r3, #18
 8003e3e:	4649      	mov	r1, r9
 8003e40:	0020      	movs	r0, r4
 8003e42:	f7ff fcf9 	bl	8003838 <I2C_TransferConfig>
 8003e46:	e7e6      	b.n	8003e16 <HAL_I2C_Master_Receive+0x82>
          hi2c->XferSize = hi2c->XferCount;
 8003e48:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e4a:	b292      	uxth	r2, r2
 8003e4c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	2300      	movs	r3, #0
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	4653      	mov	r3, sl
 8003e56:	4649      	mov	r1, r9
 8003e58:	0020      	movs	r0, r4
 8003e5a:	f7ff fced 	bl	8003838 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003e5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d032      	beq.n	8003ecc <HAL_I2C_Master_Receive+0x138>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e66:	003a      	movs	r2, r7
 8003e68:	0029      	movs	r1, r5
 8003e6a:	0020      	movs	r0, r4
 8003e6c:	f7ff fe10 	bl	8003a90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	d14d      	bne.n	8003f10 <HAL_I2C_Master_Receive+0x17c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e74:	6823      	ldr	r3, [r4, #0]
 8003e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e78:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003e7a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003e7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e7e:	3301      	adds	r3, #1
 8003e80:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003e82:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8003e8a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e8c:	3a01      	subs	r2, #1
 8003e8e:	b292      	uxth	r2, r2
 8003e90:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e92:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003e94:	b292      	uxth	r2, r2
 8003e96:	2a00      	cmp	r2, #0
 8003e98:	d0e1      	beq.n	8003e5e <HAL_I2C_Master_Receive+0xca>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1df      	bne.n	8003e5e <HAL_I2C_Master_Receive+0xca>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e9e:	9700      	str	r7, [sp, #0]
 8003ea0:	002b      	movs	r3, r5
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	0020      	movs	r0, r4
 8003ea8:	f7ff fd9c 	bl	80039e4 <I2C_WaitOnFlagUntilTimeout>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	d131      	bne.n	8003f14 <HAL_I2C_Master_Receive+0x180>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eb0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2bff      	cmp	r3, #255	; 0xff
 8003eb6:	d9c7      	bls.n	8003e48 <HAL_I2C_Master_Receive+0xb4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003eb8:	8526      	strh	r6, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	4643      	mov	r3, r8
 8003ec0:	0032      	movs	r2, r6
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	0020      	movs	r0, r4
 8003ec6:	f7ff fcb7 	bl	8003838 <I2C_TransferConfig>
 8003eca:	e7c8      	b.n	8003e5e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ecc:	003a      	movs	r2, r7
 8003ece:	0029      	movs	r1, r5
 8003ed0:	0020      	movs	r0, r4
 8003ed2:	f7ff fdb4 	bl	8003a3e <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d11e      	bne.n	8003f18 <HAL_I2C_Master_Receive+0x184>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eda:	6823      	ldr	r3, [r4, #0]
 8003edc:	2220      	movs	r2, #32
 8003ede:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003ee0:	6821      	ldr	r1, [r4, #0]
 8003ee2:	684b      	ldr	r3, [r1, #4]
 8003ee4:	4d0e      	ldr	r5, [pc, #56]	; (8003f20 <HAL_I2C_Master_Receive+0x18c>)
 8003ee6:	402b      	ands	r3, r5
 8003ee8:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003eea:	2341      	movs	r3, #65	; 0x41
 8003eec:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	3222      	adds	r2, #34	; 0x22
 8003ef2:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8003ef4:	3a02      	subs	r2, #2
 8003ef6:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8003ef8:	e000      	b.n	8003efc <HAL_I2C_Master_Receive+0x168>
    return HAL_BUSY;
 8003efa:	2002      	movs	r0, #2
}
 8003efc:	b004      	add	sp, #16
 8003efe:	bce0      	pop	{r5, r6, r7}
 8003f00:	46ba      	mov	sl, r7
 8003f02:	46b1      	mov	r9, r6
 8003f04:	46a8      	mov	r8, r5
 8003f06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 8003f08:	2002      	movs	r0, #2
 8003f0a:	e7f7      	b.n	8003efc <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	e7f5      	b.n	8003efc <HAL_I2C_Master_Receive+0x168>
        return HAL_ERROR;
 8003f10:	2001      	movs	r0, #1
 8003f12:	e7f3      	b.n	8003efc <HAL_I2C_Master_Receive+0x168>
          return HAL_ERROR;
 8003f14:	2001      	movs	r0, #1
 8003f16:	e7f1      	b.n	8003efc <HAL_I2C_Master_Receive+0x168>
      return HAL_ERROR;
 8003f18:	2001      	movs	r0, #1
 8003f1a:	e7ef      	b.n	8003efc <HAL_I2C_Master_Receive+0x168>
 8003f1c:	80002400 	.word	0x80002400
 8003f20:	fe00e800 	.word	0xfe00e800

08003f24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f26:	2341      	movs	r3, #65	; 0x41
 8003f28:	5cc3      	ldrb	r3, [r0, r3]
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d120      	bne.n	8003f70 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2e:	3320      	adds	r3, #32
 8003f30:	5cc3      	ldrb	r3, [r0, r3]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d01e      	beq.n	8003f74 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003f36:	2440      	movs	r4, #64	; 0x40
 8003f38:	2201      	movs	r2, #1
 8003f3a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f3c:	2541      	movs	r5, #65	; 0x41
 8003f3e:	2324      	movs	r3, #36	; 0x24
 8003f40:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f42:	6806      	ldr	r6, [r0, #0]
 8003f44:	6833      	ldr	r3, [r6, #0]
 8003f46:	4393      	bics	r3, r2
 8003f48:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f4a:	6806      	ldr	r6, [r0, #0]
 8003f4c:	6833      	ldr	r3, [r6, #0]
 8003f4e:	4f0a      	ldr	r7, [pc, #40]	; (8003f78 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 8003f50:	403b      	ands	r3, r7
 8003f52:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f54:	6806      	ldr	r6, [r0, #0]
 8003f56:	6833      	ldr	r3, [r6, #0]
 8003f58:	4319      	orrs	r1, r3
 8003f5a:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f5c:	6801      	ldr	r1, [r0, #0]
 8003f5e:	680b      	ldr	r3, [r1, #0]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	2320      	movs	r3, #32
 8003f66:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003f6c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003f70:	2002      	movs	r0, #2
 8003f72:	e7fc      	b.n	8003f6e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 8003f74:	2002      	movs	r0, #2
 8003f76:	e7fa      	b.n	8003f6e <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8003f78:	ffffefff 	.word	0xffffefff

08003f7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f7c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f7e:	2341      	movs	r3, #65	; 0x41
 8003f80:	5cc3      	ldrb	r3, [r0, r3]
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d11e      	bne.n	8003fc4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f86:	3320      	adds	r3, #32
 8003f88:	5cc3      	ldrb	r3, [r0, r3]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d01c      	beq.n	8003fc8 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8003f8e:	2440      	movs	r4, #64	; 0x40
 8003f90:	2201      	movs	r2, #1
 8003f92:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f94:	2541      	movs	r5, #65	; 0x41
 8003f96:	2324      	movs	r3, #36	; 0x24
 8003f98:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f9a:	6806      	ldr	r6, [r0, #0]
 8003f9c:	6833      	ldr	r3, [r6, #0]
 8003f9e:	4393      	bics	r3, r2
 8003fa0:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fa2:	6806      	ldr	r6, [r0, #0]
 8003fa4:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fa6:	4f09      	ldr	r7, [pc, #36]	; (8003fcc <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8003fa8:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003faa:	0209      	lsls	r1, r1, #8
 8003fac:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003fae:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fb0:	6801      	ldr	r1, [r0, #0]
 8003fb2:	680b      	ldr	r3, [r1, #0]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fb8:	2320      	movs	r3, #32
 8003fba:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8003fc0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8003fc4:	2002      	movs	r0, #2
 8003fc6:	e7fc      	b.n	8003fc2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8003fc8:	2002      	movs	r0, #2
 8003fca:	e7fa      	b.n	8003fc2 <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8003fcc:	fffff0ff 	.word	0xfffff0ff

08003fd0 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	000c      	movs	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 8003fd4:	2800      	cmp	r0, #0
 8003fd6:	d011      	beq.n	8003ffc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	059b      	lsls	r3, r3, #22
 8003fde:	d50a      	bpl.n	8003ff6 <HAL_PWR_EnterSLEEPMode+0x26>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fe0:	4a0d      	ldr	r2, [pc, #52]	; (8004018 <HAL_PWR_EnterSLEEPMode+0x48>)
 8003fe2:	6913      	ldr	r3, [r2, #16]
 8003fe4:	2104      	movs	r1, #4
 8003fe6:	438b      	bics	r3, r1
 8003fe8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003fea:	2c01      	cmp	r4, #1
 8003fec:	d00f      	beq.n	800400e <HAL_PWR_EnterSLEEPMode+0x3e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003fee:	bf40      	sev
    __WFE();
 8003ff0:	bf20      	wfe
    __WFE();
 8003ff2:	bf20      	wfe
  }
}
 8003ff4:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableLowPowerRunMode();
 8003ff6:	f000 f843 	bl	8004080 <HAL_PWREx_EnableLowPowerRunMode>
 8003ffa:	e7f1      	b.n	8003fe0 <HAL_PWR_EnterSLEEPMode+0x10>
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8003ffc:	4b05      	ldr	r3, [pc, #20]	; (8004014 <HAL_PWR_EnterSLEEPMode+0x44>)
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	059b      	lsls	r3, r3, #22
 8004002:	d5ed      	bpl.n	8003fe0 <HAL_PWR_EnterSLEEPMode+0x10>
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004004:	f000 f846 	bl	8004094 <HAL_PWREx_DisableLowPowerRunMode>
 8004008:	2800      	cmp	r0, #0
 800400a:	d0e9      	beq.n	8003fe0 <HAL_PWR_EnterSLEEPMode+0x10>
 800400c:	e7f2      	b.n	8003ff4 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFI();
 800400e:	bf30      	wfi
 8004010:	e7f0      	b.n	8003ff4 <HAL_PWR_EnterSLEEPMode+0x24>
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	40007000 	.word	0x40007000
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800401c:	b510      	push	{r4, lr}
 800401e:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004020:	4913      	ldr	r1, [pc, #76]	; (8004070 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004022:	680b      	ldr	r3, [r1, #0]
 8004024:	4813      	ldr	r0, [pc, #76]	; (8004074 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8004026:	4003      	ands	r3, r0
 8004028:	4313      	orrs	r3, r2
 800402a:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800402c:	2380      	movs	r3, #128	; 0x80
 800402e:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004030:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004032:	429a      	cmp	r2, r3
 8004034:	d000      	beq.n	8004038 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8004036:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004038:	4b0f      	ldr	r3, [pc, #60]	; (8004078 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0058      	lsls	r0, r3, #1
 800403e:	18c0      	adds	r0, r0, r3
 8004040:	0040      	lsls	r0, r0, #1
 8004042:	490e      	ldr	r1, [pc, #56]	; (800407c <HAL_PWREx_ControlVoltageScaling+0x60>)
 8004044:	f7fc f85c 	bl	8000100 <__udivsi3>
 8004048:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <HAL_PWREx_ControlVoltageScaling+0x54>)
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	055b      	lsls	r3, r3, #21
 8004050:	d50a      	bpl.n	8004068 <HAL_PWREx_ControlVoltageScaling+0x4c>
 8004052:	4907      	ldr	r1, [pc, #28]	; (8004070 <HAL_PWREx_ControlVoltageScaling+0x54>)
 8004054:	2280      	movs	r2, #128	; 0x80
 8004056:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8004058:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800405a:	694b      	ldr	r3, [r1, #20]
 800405c:	4213      	tst	r3, r2
 800405e:	d005      	beq.n	800406c <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 8004060:	2800      	cmp	r0, #0
 8004062:	d1f9      	bne.n	8004058 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8004064:	2003      	movs	r0, #3
 8004066:	e7e6      	b.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8004068:	2000      	movs	r0, #0
 800406a:	e7e4      	b.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x1a>
 800406c:	2000      	movs	r0, #0
 800406e:	e7e2      	b.n	8004036 <HAL_PWREx_ControlVoltageScaling+0x1a>
 8004070:	40007000 	.word	0x40007000
 8004074:	fffff9ff 	.word	0xfffff9ff
 8004078:	2000006c 	.word	0x2000006c
 800407c:	000f4240 	.word	0x000f4240

08004080 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004080:	4a03      	ldr	r2, [pc, #12]	; (8004090 <HAL_PWREx_EnableLowPowerRunMode+0x10>)
 8004082:	6811      	ldr	r1, [r2, #0]
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	01db      	lsls	r3, r3, #7
 8004088:	430b      	orrs	r3, r1
 800408a:	6013      	str	r3, [r2, #0]
}
 800408c:	4770      	bx	lr
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	40007000 	.word	0x40007000

08004094 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004094:	b510      	push	{r4, lr}
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004096:	4b10      	ldr	r3, [pc, #64]	; (80040d8 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	0058      	lsls	r0, r3, #1
 800409c:	18c0      	adds	r0, r0, r3
 800409e:	0040      	lsls	r0, r0, #1
 80040a0:	490e      	ldr	r1, [pc, #56]	; (80040dc <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 80040a2:	f7fc f82d 	bl	8000100 <__udivsi3>
 80040a6:	3001      	adds	r0, #1

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80040a8:	4b0d      	ldr	r3, [pc, #52]	; (80040e0 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	490d      	ldr	r1, [pc, #52]	; (80040e4 <HAL_PWREx_DisableLowPowerRunMode+0x50>)
 80040ae:	400a      	ands	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	059b      	lsls	r3, r3, #22
 80040b6:	d50a      	bpl.n	80040ce <HAL_PWREx_DisableLowPowerRunMode+0x3a>
 80040b8:	4909      	ldr	r1, [pc, #36]	; (80040e0 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	0092      	lsls	r2, r2, #2
  {
    if (wait_loop_index != 0U)
    {
      wait_loop_index--;
 80040be:	3801      	subs	r0, #1
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80040c0:	694b      	ldr	r3, [r1, #20]
 80040c2:	4213      	tst	r3, r2
 80040c4:	d005      	beq.n	80040d2 <HAL_PWREx_DisableLowPowerRunMode+0x3e>
    if (wait_loop_index != 0U)
 80040c6:	2800      	cmp	r0, #0
 80040c8:	d1f9      	bne.n	80040be <HAL_PWREx_DisableLowPowerRunMode+0x2a>
    }
    else
    {
      return HAL_TIMEOUT;
 80040ca:	2003      	movs	r0, #3
 80040cc:	e002      	b.n	80040d4 <HAL_PWREx_DisableLowPowerRunMode+0x40>
    }
  }

  return HAL_OK;
 80040ce:	2000      	movs	r0, #0
 80040d0:	e000      	b.n	80040d4 <HAL_PWREx_DisableLowPowerRunMode+0x40>
 80040d2:	2000      	movs	r0, #0
}
 80040d4:	bd10      	pop	{r4, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	2000006c 	.word	0x2000006c
 80040dc:	000f4240 	.word	0x000f4240
 80040e0:	40007000 	.word	0x40007000
 80040e4:	ffffbfff 	.word	0xffffbfff

080040e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ea:	46ce      	mov	lr, r9
 80040ec:	4647      	mov	r7, r8
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b083      	sub	sp, #12
 80040f2:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040f4:	d100      	bne.n	80040f8 <HAL_RCC_OscConfig+0x10>
 80040f6:	e240      	b.n	800457a <HAL_RCC_OscConfig+0x492>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f8:	6803      	ldr	r3, [r0, #0]
 80040fa:	07db      	lsls	r3, r3, #31
 80040fc:	d538      	bpl.n	8004170 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fe:	4ac8      	ldr	r2, [pc, #800]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004100:	6891      	ldr	r1, [r2, #8]
 8004102:	2338      	movs	r3, #56	; 0x38
 8004104:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004106:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004108:	2b10      	cmp	r3, #16
 800410a:	d026      	beq.n	800415a <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800410c:	2b08      	cmp	r3, #8
 800410e:	d027      	beq.n	8004160 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004110:	6863      	ldr	r3, [r4, #4]
 8004112:	2280      	movs	r2, #128	; 0x80
 8004114:	0252      	lsls	r2, r2, #9
 8004116:	4293      	cmp	r3, r2
 8004118:	d07b      	beq.n	8004212 <HAL_RCC_OscConfig+0x12a>
 800411a:	22a0      	movs	r2, #160	; 0xa0
 800411c:	02d2      	lsls	r2, r2, #11
 800411e:	4293      	cmp	r3, r2
 8004120:	d07e      	beq.n	8004220 <HAL_RCC_OscConfig+0x138>
 8004122:	4bbf      	ldr	r3, [pc, #764]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	49bf      	ldr	r1, [pc, #764]	; (8004424 <HAL_RCC_OscConfig+0x33c>)
 8004128:	400a      	ands	r2, r1
 800412a:	601a      	str	r2, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	49be      	ldr	r1, [pc, #760]	; (8004428 <HAL_RCC_OscConfig+0x340>)
 8004130:	400a      	ands	r2, r1
 8004132:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004134:	6863      	ldr	r3, [r4, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d07e      	beq.n	8004238 <HAL_RCC_OscConfig+0x150>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413a:	f7fe fcab 	bl	8002a94 <HAL_GetTick>
 800413e:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004140:	4fb7      	ldr	r7, [pc, #732]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004142:	2680      	movs	r6, #128	; 0x80
 8004144:	02b6      	lsls	r6, r6, #10
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	4233      	tst	r3, r6
 800414a:	d111      	bne.n	8004170 <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800414c:	f7fe fca2 	bl	8002a94 <HAL_GetTick>
 8004150:	1b40      	subs	r0, r0, r5
 8004152:	2864      	cmp	r0, #100	; 0x64
 8004154:	d9f7      	bls.n	8004146 <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 8004156:	2003      	movs	r0, #3
 8004158:	e210      	b.n	800457c <HAL_RCC_OscConfig+0x494>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800415a:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800415c:	0793      	lsls	r3, r2, #30
 800415e:	d1d7      	bne.n	8004110 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004160:	4baf      	ldr	r3, [pc, #700]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	039b      	lsls	r3, r3, #14
 8004166:	d503      	bpl.n	8004170 <HAL_RCC_OscConfig+0x88>
 8004168:	6863      	ldr	r3, [r4, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d100      	bne.n	8004170 <HAL_RCC_OscConfig+0x88>
 800416e:	e20a      	b.n	8004586 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	079b      	lsls	r3, r3, #30
 8004174:	d52b      	bpl.n	80041ce <HAL_RCC_OscConfig+0xe6>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004176:	4aaa      	ldr	r2, [pc, #680]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004178:	6891      	ldr	r1, [r2, #8]
 800417a:	2338      	movs	r3, #56	; 0x38
 800417c:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800417e:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004180:	2b10      	cmp	r3, #16
 8004182:	d069      	beq.n	8004258 <HAL_RCC_OscConfig+0x170>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004184:	2b00      	cmp	r3, #0
 8004186:	d16c      	bne.n	8004262 <HAL_RCC_OscConfig+0x17a>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004188:	4ba5      	ldr	r3, [pc, #660]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	055b      	lsls	r3, r3, #21
 800418e:	d500      	bpl.n	8004192 <HAL_RCC_OscConfig+0xaa>
 8004190:	e21c      	b.n	80045cc <HAL_RCC_OscConfig+0x4e4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004192:	49a3      	ldr	r1, [pc, #652]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004194:	684a      	ldr	r2, [r1, #4]
 8004196:	6963      	ldr	r3, [r4, #20]
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	48a4      	ldr	r0, [pc, #656]	; (800442c <HAL_RCC_OscConfig+0x344>)
 800419c:	4002      	ands	r2, r0
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80041a2:	4a9f      	ldr	r2, [pc, #636]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	49a2      	ldr	r1, [pc, #648]	; (8004430 <HAL_RCC_OscConfig+0x348>)
 80041a8:	400b      	ands	r3, r1
 80041aa:	6921      	ldr	r1, [r4, #16]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80041b0:	6813      	ldr	r3, [r2, #0]
 80041b2:	049b      	lsls	r3, r3, #18
 80041b4:	0f5b      	lsrs	r3, r3, #29
 80041b6:	4a9f      	ldr	r2, [pc, #636]	; (8004434 <HAL_RCC_OscConfig+0x34c>)
 80041b8:	40da      	lsrs	r2, r3
 80041ba:	0013      	movs	r3, r2
 80041bc:	4a9e      	ldr	r2, [pc, #632]	; (8004438 <HAL_RCC_OscConfig+0x350>)
 80041be:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80041c0:	4b9e      	ldr	r3, [pc, #632]	; (800443c <HAL_RCC_OscConfig+0x354>)
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	f7fe fc1e 	bl	8002a04 <HAL_InitTick>
 80041c8:	2800      	cmp	r0, #0
 80041ca:	d000      	beq.n	80041ce <HAL_RCC_OscConfig+0xe6>
 80041cc:	e1dd      	b.n	800458a <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	071b      	lsls	r3, r3, #28
 80041d2:	d400      	bmi.n	80041d6 <HAL_RCC_OscConfig+0xee>
 80041d4:	e08b      	b.n	80042ee <HAL_RCC_OscConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80041d6:	4b92      	ldr	r3, [pc, #584]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80041d8:	689a      	ldr	r2, [r3, #8]
 80041da:	2338      	movs	r3, #56	; 0x38
 80041dc:	4013      	ands	r3, r2
 80041de:	2b18      	cmp	r3, #24
 80041e0:	d07d      	beq.n	80042de <HAL_RCC_OscConfig+0x1f6>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041e2:	69a3      	ldr	r3, [r4, #24]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d100      	bne.n	80041ea <HAL_RCC_OscConfig+0x102>
 80041e8:	e0c4      	b.n	8004374 <HAL_RCC_OscConfig+0x28c>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80041ea:	4a8d      	ldr	r2, [pc, #564]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80041ec:	6e13      	ldr	r3, [r2, #96]	; 0x60
 80041ee:	2101      	movs	r1, #1
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fe fc4e 	bl	8002a94 <HAL_GetTick>
 80041f8:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fa:	4f89      	ldr	r7, [pc, #548]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80041fc:	2602      	movs	r6, #2
 80041fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004200:	421e      	tst	r6, r3
 8004202:	d174      	bne.n	80042ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004204:	f7fe fc46 	bl	8002a94 <HAL_GetTick>
 8004208:	1b40      	subs	r0, r0, r5
 800420a:	2802      	cmp	r0, #2
 800420c:	d9f7      	bls.n	80041fe <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800420e:	2003      	movs	r0, #3
 8004210:	e1b4      	b.n	800457c <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004212:	4a83      	ldr	r2, [pc, #524]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004214:	6811      	ldr	r1, [r2, #0]
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	025b      	lsls	r3, r3, #9
 800421a:	430b      	orrs	r3, r1
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e789      	b.n	8004134 <HAL_RCC_OscConfig+0x4c>
 8004220:	4b7f      	ldr	r3, [pc, #508]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	2280      	movs	r2, #128	; 0x80
 8004226:	02d2      	lsls	r2, r2, #11
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	6819      	ldr	r1, [r3, #0]
 800422e:	2280      	movs	r2, #128	; 0x80
 8004230:	0252      	lsls	r2, r2, #9
 8004232:	430a      	orrs	r2, r1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e77d      	b.n	8004134 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8004238:	f7fe fc2c 	bl	8002a94 <HAL_GetTick>
 800423c:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800423e:	4f78      	ldr	r7, [pc, #480]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004240:	2680      	movs	r6, #128	; 0x80
 8004242:	02b6      	lsls	r6, r6, #10
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	4233      	tst	r3, r6
 8004248:	d092      	beq.n	8004170 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424a:	f7fe fc23 	bl	8002a94 <HAL_GetTick>
 800424e:	1b40      	subs	r0, r0, r5
 8004250:	2864      	cmp	r0, #100	; 0x64
 8004252:	d9f7      	bls.n	8004244 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8004254:	2003      	movs	r0, #3
 8004256:	e191      	b.n	800457c <HAL_RCC_OscConfig+0x494>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004258:	3b0d      	subs	r3, #13
 800425a:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800425c:	2b02      	cmp	r3, #2
 800425e:	d100      	bne.n	8004262 <HAL_RCC_OscConfig+0x17a>
 8004260:	e1a4      	b.n	80045ac <HAL_RCC_OscConfig+0x4c4>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004262:	68e3      	ldr	r3, [r4, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d024      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004268:	4a6d      	ldr	r2, [pc, #436]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 800426a:	6813      	ldr	r3, [r2, #0]
 800426c:	4970      	ldr	r1, [pc, #448]	; (8004430 <HAL_RCC_OscConfig+0x348>)
 800426e:	400b      	ands	r3, r1
 8004270:	6921      	ldr	r1, [r4, #16]
 8004272:	430b      	orrs	r3, r1
 8004274:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8004276:	6811      	ldr	r1, [r2, #0]
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	430b      	orrs	r3, r1
 800427e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004280:	f7fe fc08 	bl	8002a94 <HAL_GetTick>
 8004284:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004286:	4f66      	ldr	r7, [pc, #408]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004288:	2680      	movs	r6, #128	; 0x80
 800428a:	00f6      	lsls	r6, r6, #3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	4233      	tst	r3, r6
 8004290:	d106      	bne.n	80042a0 <HAL_RCC_OscConfig+0x1b8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004292:	f7fe fbff 	bl	8002a94 <HAL_GetTick>
 8004296:	1b40      	subs	r0, r0, r5
 8004298:	2802      	cmp	r0, #2
 800429a:	d9f7      	bls.n	800428c <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 800429c:	2003      	movs	r0, #3
 800429e:	e16d      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a0:	495f      	ldr	r1, [pc, #380]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80042a2:	684a      	ldr	r2, [r1, #4]
 80042a4:	6963      	ldr	r3, [r4, #20]
 80042a6:	021b      	lsls	r3, r3, #8
 80042a8:	4860      	ldr	r0, [pc, #384]	; (800442c <HAL_RCC_OscConfig+0x344>)
 80042aa:	4002      	ands	r2, r0
 80042ac:	4313      	orrs	r3, r2
 80042ae:	604b      	str	r3, [r1, #4]
 80042b0:	e78d      	b.n	80041ce <HAL_RCC_OscConfig+0xe6>
        __HAL_RCC_HSI_DISABLE();
 80042b2:	4a5b      	ldr	r2, [pc, #364]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80042b4:	6813      	ldr	r3, [r2, #0]
 80042b6:	4962      	ldr	r1, [pc, #392]	; (8004440 <HAL_RCC_OscConfig+0x358>)
 80042b8:	400b      	ands	r3, r1
 80042ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80042bc:	f7fe fbea 	bl	8002a94 <HAL_GetTick>
 80042c0:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042c2:	4f57      	ldr	r7, [pc, #348]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80042c4:	2680      	movs	r6, #128	; 0x80
 80042c6:	00f6      	lsls	r6, r6, #3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	4233      	tst	r3, r6
 80042cc:	d100      	bne.n	80042d0 <HAL_RCC_OscConfig+0x1e8>
 80042ce:	e77e      	b.n	80041ce <HAL_RCC_OscConfig+0xe6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042d0:	f7fe fbe0 	bl	8002a94 <HAL_GetTick>
 80042d4:	1b40      	subs	r0, r0, r5
 80042d6:	2802      	cmp	r0, #2
 80042d8:	d9f6      	bls.n	80042c8 <HAL_RCC_OscConfig+0x1e0>
            return HAL_TIMEOUT;
 80042da:	2003      	movs	r0, #3
 80042dc:	e14e      	b.n	800457c <HAL_RCC_OscConfig+0x494>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80042de:	4b50      	ldr	r3, [pc, #320]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	079b      	lsls	r3, r3, #30
 80042e4:	d503      	bpl.n	80042ee <HAL_RCC_OscConfig+0x206>
 80042e6:	69a3      	ldr	r3, [r4, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d100      	bne.n	80042ee <HAL_RCC_OscConfig+0x206>
 80042ec:	e14f      	b.n	800458e <HAL_RCC_OscConfig+0x4a6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	075b      	lsls	r3, r3, #29
 80042f2:	d400      	bmi.n	80042f6 <HAL_RCC_OscConfig+0x20e>
 80042f4:	e0ad      	b.n	8004452 <HAL_RCC_OscConfig+0x36a>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042f6:	4b4a      	ldr	r3, [pc, #296]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	2338      	movs	r3, #56	; 0x38
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d04c      	beq.n	800439c <HAL_RCC_OscConfig+0x2b4>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004302:	4b47      	ldr	r3, [pc, #284]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004306:	2200      	movs	r2, #0
 8004308:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	d40b      	bmi.n	8004326 <HAL_RCC_OscConfig+0x23e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	4a44      	ldr	r2, [pc, #272]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004310:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004312:	2080      	movs	r0, #128	; 0x80
 8004314:	0540      	lsls	r0, r0, #21
 8004316:	4301      	orrs	r1, r0
 8004318:	63d1      	str	r1, [r2, #60]	; 0x3c
 800431a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800431c:	4003      	ands	r3, r0
 800431e:	9301      	str	r3, [sp, #4]
 8004320:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8004322:	2301      	movs	r3, #1
 8004324:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004326:	4b47      	ldr	r3, [pc, #284]	; (8004444 <HAL_RCC_OscConfig+0x35c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	05db      	lsls	r3, r3, #23
 800432c:	d53f      	bpl.n	80043ae <HAL_RCC_OscConfig+0x2c6>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800432e:	68a3      	ldr	r3, [r4, #8]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d052      	beq.n	80043da <HAL_RCC_OscConfig+0x2f2>
 8004334:	2b05      	cmp	r3, #5
 8004336:	d056      	beq.n	80043e6 <HAL_RCC_OscConfig+0x2fe>
 8004338:	4b39      	ldr	r3, [pc, #228]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 800433a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800433c:	2101      	movs	r1, #1
 800433e:	438a      	bics	r2, r1
 8004340:	65da      	str	r2, [r3, #92]	; 0x5c
 8004342:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004344:	3103      	adds	r1, #3
 8004346:	438a      	bics	r2, r1
 8004348:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800434a:	68a3      	ldr	r3, [r4, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d054      	beq.n	80043fa <HAL_RCC_OscConfig+0x312>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fe fba0 	bl	8002a94 <HAL_GetTick>
 8004354:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004356:	4b32      	ldr	r3, [pc, #200]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004358:	4698      	mov	r8, r3
 800435a:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435c:	4d3a      	ldr	r5, [pc, #232]	; (8004448 <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800435e:	4643      	mov	r3, r8
 8004360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004362:	421f      	tst	r7, r3
 8004364:	d172      	bne.n	800444c <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fe fb95 	bl	8002a94 <HAL_GetTick>
 800436a:	1b80      	subs	r0, r0, r6
 800436c:	42a8      	cmp	r0, r5
 800436e:	d9f6      	bls.n	800435e <HAL_RCC_OscConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004370:	2003      	movs	r0, #3
 8004372:	e103      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_LSI_DISABLE();
 8004374:	4a2a      	ldr	r2, [pc, #168]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004376:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8004378:	2101      	movs	r1, #1
 800437a:	438b      	bics	r3, r1
 800437c:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 800437e:	f7fe fb89 	bl	8002a94 <HAL_GetTick>
 8004382:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004384:	4f26      	ldr	r7, [pc, #152]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004386:	2602      	movs	r6, #2
 8004388:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800438a:	421e      	tst	r6, r3
 800438c:	d0af      	beq.n	80042ee <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800438e:	f7fe fb81 	bl	8002a94 <HAL_GetTick>
 8004392:	1b40      	subs	r0, r0, r5
 8004394:	2802      	cmp	r0, #2
 8004396:	d9f7      	bls.n	8004388 <HAL_RCC_OscConfig+0x2a0>
            return HAL_TIMEOUT;
 8004398:	2003      	movs	r0, #3
 800439a:	e0ef      	b.n	800457c <HAL_RCC_OscConfig+0x494>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800439c:	4b20      	ldr	r3, [pc, #128]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	079b      	lsls	r3, r3, #30
 80043a2:	d556      	bpl.n	8004452 <HAL_RCC_OscConfig+0x36a>
 80043a4:	68a3      	ldr	r3, [r4, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d153      	bne.n	8004452 <HAL_RCC_OscConfig+0x36a>
        return HAL_ERROR;
 80043aa:	2001      	movs	r0, #1
 80043ac:	e0e6      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043ae:	4a25      	ldr	r2, [pc, #148]	; (8004444 <HAL_RCC_OscConfig+0x35c>)
 80043b0:	6811      	ldr	r1, [r2, #0]
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	430b      	orrs	r3, r1
 80043b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80043ba:	f7fe fb6b 	bl	8002a94 <HAL_GetTick>
 80043be:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043c0:	4d20      	ldr	r5, [pc, #128]	; (8004444 <HAL_RCC_OscConfig+0x35c>)
 80043c2:	2780      	movs	r7, #128	; 0x80
 80043c4:	007f      	lsls	r7, r7, #1
 80043c6:	682b      	ldr	r3, [r5, #0]
 80043c8:	423b      	tst	r3, r7
 80043ca:	d1b0      	bne.n	800432e <HAL_RCC_OscConfig+0x246>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043cc:	f7fe fb62 	bl	8002a94 <HAL_GetTick>
 80043d0:	1b80      	subs	r0, r0, r6
 80043d2:	2802      	cmp	r0, #2
 80043d4:	d9f7      	bls.n	80043c6 <HAL_RCC_OscConfig+0x2de>
            return HAL_TIMEOUT;
 80043d6:	2003      	movs	r0, #3
 80043d8:	e0d0      	b.n	800457c <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043da:	4a11      	ldr	r2, [pc, #68]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80043dc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80043de:	2101      	movs	r1, #1
 80043e0:	430b      	orrs	r3, r1
 80043e2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80043e4:	e7b1      	b.n	800434a <HAL_RCC_OscConfig+0x262>
 80043e6:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 80043e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043ea:	2104      	movs	r1, #4
 80043ec:	430a      	orrs	r2, r1
 80043ee:	65da      	str	r2, [r3, #92]	; 0x5c
 80043f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043f2:	3903      	subs	r1, #3
 80043f4:	430a      	orrs	r2, r1
 80043f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80043f8:	e7a7      	b.n	800434a <HAL_RCC_OscConfig+0x262>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fa:	f7fe fb4b 	bl	8002a94 <HAL_GetTick>
 80043fe:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <HAL_RCC_OscConfig+0x338>)
 8004402:	4698      	mov	r8, r3
 8004404:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004406:	4d10      	ldr	r5, [pc, #64]	; (8004448 <HAL_RCC_OscConfig+0x360>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004408:	4643      	mov	r3, r8
 800440a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440c:	421f      	tst	r7, r3
 800440e:	d01d      	beq.n	800444c <HAL_RCC_OscConfig+0x364>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004410:	f7fe fb40 	bl	8002a94 <HAL_GetTick>
 8004414:	1b80      	subs	r0, r0, r6
 8004416:	42a8      	cmp	r0, r5
 8004418:	d9f6      	bls.n	8004408 <HAL_RCC_OscConfig+0x320>
          {
            return HAL_TIMEOUT;
 800441a:	2003      	movs	r0, #3
 800441c:	e0ae      	b.n	800457c <HAL_RCC_OscConfig+0x494>
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	40021000 	.word	0x40021000
 8004424:	fffeffff 	.word	0xfffeffff
 8004428:	fffbffff 	.word	0xfffbffff
 800442c:	ffff80ff 	.word	0xffff80ff
 8004430:	ffffc7ff 	.word	0xffffc7ff
 8004434:	00f42400 	.word	0x00f42400
 8004438:	2000006c 	.word	0x2000006c
 800443c:	20000074 	.word	0x20000074
 8004440:	fffffeff 	.word	0xfffffeff
 8004444:	40007000 	.word	0x40007000
 8004448:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800444c:	464b      	mov	r3, r9
 800444e:	2b01      	cmp	r3, #1
 8004450:	d021      	beq.n	8004496 <HAL_RCC_OscConfig+0x3ae>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004452:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004454:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004456:	2b00      	cmp	r3, #0
 8004458:	d100      	bne.n	800445c <HAL_RCC_OscConfig+0x374>
 800445a:	e08f      	b.n	800457c <HAL_RCC_OscConfig+0x494>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800445c:	4a62      	ldr	r2, [pc, #392]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 800445e:	6891      	ldr	r1, [r2, #8]
 8004460:	2238      	movs	r2, #56	; 0x38
 8004462:	400a      	ands	r2, r1
 8004464:	2a10      	cmp	r2, #16
 8004466:	d064      	beq.n	8004532 <HAL_RCC_OscConfig+0x44a>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004468:	2b02      	cmp	r3, #2
 800446a:	d01a      	beq.n	80044a2 <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_PLL_DISABLE();
 800446c:	4a5e      	ldr	r2, [pc, #376]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	495e      	ldr	r1, [pc, #376]	; (80045ec <HAL_RCC_OscConfig+0x504>)
 8004472:	400b      	ands	r3, r1
 8004474:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004476:	f7fe fb0d 	bl	8002a94 <HAL_GetTick>
 800447a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800447c:	4e5a      	ldr	r6, [pc, #360]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 800447e:	2580      	movs	r5, #128	; 0x80
 8004480:	04ad      	lsls	r5, r5, #18
 8004482:	6833      	ldr	r3, [r6, #0]
 8004484:	422b      	tst	r3, r5
 8004486:	d04d      	beq.n	8004524 <HAL_RCC_OscConfig+0x43c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004488:	f7fe fb04 	bl	8002a94 <HAL_GetTick>
 800448c:	1b00      	subs	r0, r0, r4
 800448e:	2802      	cmp	r0, #2
 8004490:	d9f7      	bls.n	8004482 <HAL_RCC_OscConfig+0x39a>
            return HAL_TIMEOUT;
 8004492:	2003      	movs	r0, #3
 8004494:	e072      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_PWR_CLK_DISABLE();
 8004496:	4a54      	ldr	r2, [pc, #336]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 8004498:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800449a:	4955      	ldr	r1, [pc, #340]	; (80045f0 <HAL_RCC_OscConfig+0x508>)
 800449c:	400b      	ands	r3, r1
 800449e:	63d3      	str	r3, [r2, #60]	; 0x3c
 80044a0:	e7d7      	b.n	8004452 <HAL_RCC_OscConfig+0x36a>
        __HAL_RCC_PLL_DISABLE();
 80044a2:	4a51      	ldr	r2, [pc, #324]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 80044a4:	6813      	ldr	r3, [r2, #0]
 80044a6:	4951      	ldr	r1, [pc, #324]	; (80045ec <HAL_RCC_OscConfig+0x504>)
 80044a8:	400b      	ands	r3, r1
 80044aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80044ac:	f7fe faf2 	bl	8002a94 <HAL_GetTick>
 80044b0:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044b2:	4f4d      	ldr	r7, [pc, #308]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 80044b4:	2680      	movs	r6, #128	; 0x80
 80044b6:	04b6      	lsls	r6, r6, #18
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	4233      	tst	r3, r6
 80044bc:	d006      	beq.n	80044cc <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044be:	f7fe fae9 	bl	8002a94 <HAL_GetTick>
 80044c2:	1b40      	subs	r0, r0, r5
 80044c4:	2802      	cmp	r0, #2
 80044c6:	d9f7      	bls.n	80044b8 <HAL_RCC_OscConfig+0x3d0>
            return HAL_TIMEOUT;
 80044c8:	2003      	movs	r0, #3
 80044ca:	e057      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044cc:	4a46      	ldr	r2, [pc, #280]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 80044ce:	68d1      	ldr	r1, [r2, #12]
 80044d0:	6a23      	ldr	r3, [r4, #32]
 80044d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80044d4:	4303      	orrs	r3, r0
 80044d6:	4847      	ldr	r0, [pc, #284]	; (80045f4 <HAL_RCC_OscConfig+0x50c>)
 80044d8:	4001      	ands	r1, r0
 80044da:	430b      	orrs	r3, r1
 80044dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80044de:	430b      	orrs	r3, r1
 80044e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80044e2:	430b      	orrs	r3, r1
 80044e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80044e6:	0209      	lsls	r1, r1, #8
 80044e8:	430b      	orrs	r3, r1
 80044ea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 80044ec:	6811      	ldr	r1, [r2, #0]
 80044ee:	2380      	movs	r3, #128	; 0x80
 80044f0:	045b      	lsls	r3, r3, #17
 80044f2:	430b      	orrs	r3, r1
 80044f4:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80044f6:	68d1      	ldr	r1, [r2, #12]
 80044f8:	2380      	movs	r3, #128	; 0x80
 80044fa:	055b      	lsls	r3, r3, #21
 80044fc:	430b      	orrs	r3, r1
 80044fe:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8004500:	f7fe fac8 	bl	8002a94 <HAL_GetTick>
 8004504:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004506:	4e38      	ldr	r6, [pc, #224]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 8004508:	2580      	movs	r5, #128	; 0x80
 800450a:	04ad      	lsls	r5, r5, #18
 800450c:	6833      	ldr	r3, [r6, #0]
 800450e:	422b      	tst	r3, r5
 8004510:	d106      	bne.n	8004520 <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004512:	f7fe fabf 	bl	8002a94 <HAL_GetTick>
 8004516:	1b00      	subs	r0, r0, r4
 8004518:	2802      	cmp	r0, #2
 800451a:	d9f7      	bls.n	800450c <HAL_RCC_OscConfig+0x424>
            return HAL_TIMEOUT;
 800451c:	2003      	movs	r0, #3
 800451e:	e02d      	b.n	800457c <HAL_RCC_OscConfig+0x494>
  return HAL_OK;
 8004520:	2000      	movs	r0, #0
 8004522:	e02b      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004524:	4a30      	ldr	r2, [pc, #192]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 8004526:	68d3      	ldr	r3, [r2, #12]
 8004528:	4933      	ldr	r1, [pc, #204]	; (80045f8 <HAL_RCC_OscConfig+0x510>)
 800452a:	400b      	ands	r3, r1
 800452c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800452e:	2000      	movs	r0, #0
 8004530:	e024      	b.n	800457c <HAL_RCC_OscConfig+0x494>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004532:	2b01      	cmp	r3, #1
 8004534:	d02d      	beq.n	8004592 <HAL_RCC_OscConfig+0x4aa>
        temp_pllckcfg = RCC->PLLCFGR;
 8004536:	4b2c      	ldr	r3, [pc, #176]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 8004538:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	2303      	movs	r3, #3
 800453c:	4013      	ands	r3, r2
          return HAL_ERROR;
 800453e:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004540:	6a21      	ldr	r1, [r4, #32]
 8004542:	428b      	cmp	r3, r1
 8004544:	d11a      	bne.n	800457c <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004546:	2370      	movs	r3, #112	; 0x70
 8004548:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800454a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800454c:	428b      	cmp	r3, r1
 800454e:	d115      	bne.n	800457c <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004550:	21fe      	movs	r1, #254	; 0xfe
 8004552:	01c9      	lsls	r1, r1, #7
 8004554:	4011      	ands	r1, r2
 8004556:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004558:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800455a:	4299      	cmp	r1, r3
 800455c:	d10e      	bne.n	800457c <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800455e:	23f8      	movs	r3, #248	; 0xf8
 8004560:	039b      	lsls	r3, r3, #14
 8004562:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004564:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004566:	428b      	cmp	r3, r1
 8004568:	d108      	bne.n	800457c <HAL_RCC_OscConfig+0x494>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800456a:	0f50      	lsrs	r0, r2, #29
 800456c:	0740      	lsls	r0, r0, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800456e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004570:	1ac0      	subs	r0, r0, r3
 8004572:	1e43      	subs	r3, r0, #1
 8004574:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 8004576:	b2c0      	uxtb	r0, r0
 8004578:	e000      	b.n	800457c <HAL_RCC_OscConfig+0x494>
    return HAL_ERROR;
 800457a:	2001      	movs	r0, #1
}
 800457c:	b003      	add	sp, #12
 800457e:	bcc0      	pop	{r6, r7}
 8004580:	46b9      	mov	r9, r7
 8004582:	46b0      	mov	r8, r6
 8004584:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8004586:	2001      	movs	r0, #1
 8004588:	e7f8      	b.n	800457c <HAL_RCC_OscConfig+0x494>
          return HAL_ERROR;
 800458a:	2001      	movs	r0, #1
 800458c:	e7f6      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        return HAL_ERROR;
 800458e:	2001      	movs	r0, #1
 8004590:	e7f4      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        return HAL_ERROR;
 8004592:	2001      	movs	r0, #1
 8004594:	e7f2      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        return HAL_ERROR;
 8004596:	2001      	movs	r0, #1
 8004598:	e7f0      	b.n	800457c <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459a:	4913      	ldr	r1, [pc, #76]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 800459c:	684a      	ldr	r2, [r1, #4]
 800459e:	6963      	ldr	r3, [r4, #20]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	4816      	ldr	r0, [pc, #88]	; (80045fc <HAL_RCC_OscConfig+0x514>)
 80045a4:	4002      	ands	r2, r0
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045aa:	e609      	b.n	80041c0 <HAL_RCC_OscConfig+0xd8>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ac:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	055b      	lsls	r3, r3, #21
 80045b2:	d5f2      	bpl.n	800459a <HAL_RCC_OscConfig+0x4b2>
 80045b4:	68e3      	ldr	r3, [r4, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0ed      	beq.n	8004596 <HAL_RCC_OscConfig+0x4ae>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ba:	490b      	ldr	r1, [pc, #44]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 80045bc:	684a      	ldr	r2, [r1, #4]
 80045be:	6963      	ldr	r3, [r4, #20]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	480e      	ldr	r0, [pc, #56]	; (80045fc <HAL_RCC_OscConfig+0x514>)
 80045c4:	4002      	ands	r2, r0
 80045c6:	4313      	orrs	r3, r2
 80045c8:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ca:	e5f9      	b.n	80041c0 <HAL_RCC_OscConfig+0xd8>
        return HAL_ERROR;
 80045cc:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ce:	68e3      	ldr	r3, [r4, #12]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0d3      	beq.n	800457c <HAL_RCC_OscConfig+0x494>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d4:	4904      	ldr	r1, [pc, #16]	; (80045e8 <HAL_RCC_OscConfig+0x500>)
 80045d6:	684a      	ldr	r2, [r1, #4]
 80045d8:	6963      	ldr	r3, [r4, #20]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	4807      	ldr	r0, [pc, #28]	; (80045fc <HAL_RCC_OscConfig+0x514>)
 80045de:	4002      	ands	r2, r0
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045e4:	e5dd      	b.n	80041a2 <HAL_RCC_OscConfig+0xba>
 80045e6:	46c0      	nop			; (mov r8, r8)
 80045e8:	40021000 	.word	0x40021000
 80045ec:	feffffff 	.word	0xfeffffff
 80045f0:	efffffff 	.word	0xefffffff
 80045f4:	1fc1808c 	.word	0x1fc1808c
 80045f8:	effefffc 	.word	0xeffefffc
 80045fc:	ffff80ff 	.word	0xffff80ff

08004600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004600:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004602:	4b27      	ldr	r3, [pc, #156]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	2238      	movs	r2, #56	; 0x38
 8004608:	421a      	tst	r2, r3
 800460a:	d106      	bne.n	800461a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800460c:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	049b      	lsls	r3, r3, #18
 8004612:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004614:	4823      	ldr	r0, [pc, #140]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004616:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8004618:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800461a:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800461c:	689a      	ldr	r2, [r3, #8]
 800461e:	2338      	movs	r3, #56	; 0x38
 8004620:	4013      	ands	r3, r2
 8004622:	2b08      	cmp	r3, #8
 8004624:	d037      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0x96>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004626:	4b1e      	ldr	r3, [pc, #120]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	2338      	movs	r3, #56	; 0x38
 800462c:	4013      	ands	r3, r2
 800462e:	2b10      	cmp	r3, #16
 8004630:	d011      	beq.n	8004656 <HAL_RCC_GetSysClockFreq+0x56>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004632:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004634:	689a      	ldr	r2, [r3, #8]
 8004636:	2338      	movs	r3, #56	; 0x38
 8004638:	4013      	ands	r3, r2
 800463a:	2b20      	cmp	r3, #32
 800463c:	d02d      	beq.n	800469a <HAL_RCC_GetSysClockFreq+0x9a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800463e:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2038      	movs	r0, #56	; 0x38
 8004644:	4018      	ands	r0, r3
    sysclockfreq = 0U;
 8004646:	3818      	subs	r0, #24
 8004648:	4243      	negs	r3, r0
 800464a:	4158      	adcs	r0, r3
 800464c:	4240      	negs	r0, r0
 800464e:	23fa      	movs	r3, #250	; 0xfa
 8004650:	01db      	lsls	r3, r3, #7
 8004652:	4018      	ands	r0, r3
 8004654:	e7e0      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004656:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004658:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800465a:	68d1      	ldr	r1, [r2, #12]
 800465c:	0649      	lsls	r1, r1, #25
 800465e:	0f49      	lsrs	r1, r1, #29
 8004660:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004662:	43db      	mvns	r3, r3
    switch (pllsource)
 8004664:	079b      	lsls	r3, r3, #30
 8004666:	d00e      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800466a:	68d8      	ldr	r0, [r3, #12]
 800466c:	0440      	lsls	r0, r0, #17
 800466e:	0e44      	lsrs	r4, r0, #25
 8004670:	480c      	ldr	r0, [pc, #48]	; (80046a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004672:	f7fb fd45 	bl	8000100 <__udivsi3>
 8004676:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800467a:	68d9      	ldr	r1, [r3, #12]
 800467c:	0f49      	lsrs	r1, r1, #29
 800467e:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8004680:	f7fb fd3e 	bl	8000100 <__udivsi3>
 8004684:	e7c8      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004686:	68d0      	ldr	r0, [r2, #12]
 8004688:	0440      	lsls	r0, r0, #17
 800468a:	0e44      	lsrs	r4, r0, #25
 800468c:	4806      	ldr	r0, [pc, #24]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800468e:	f7fb fd37 	bl	8000100 <__udivsi3>
 8004692:	4360      	muls	r0, r4
        break;
 8004694:	e7f0      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = HSE_VALUE;
 8004696:	4804      	ldr	r0, [pc, #16]	; (80046a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004698:	e7be      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 800469a:	2080      	movs	r0, #128	; 0x80
 800469c:	0200      	lsls	r0, r0, #8
 800469e:	e7bb      	b.n	8004618 <HAL_RCC_GetSysClockFreq+0x18>
 80046a0:	40021000 	.word	0x40021000
 80046a4:	00f42400 	.word	0x00f42400
 80046a8:	007a1200 	.word	0x007a1200

080046ac <HAL_RCC_ClockConfig>:
{
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	46ce      	mov	lr, r9
 80046b0:	4647      	mov	r7, r8
 80046b2:	b580      	push	{r7, lr}
 80046b4:	0004      	movs	r4, r0
 80046b6:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d100      	bne.n	80046be <HAL_RCC_ClockConfig+0x12>
 80046bc:	e0b6      	b.n	800482c <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046be:	4b5d      	ldr	r3, [pc, #372]	; (8004834 <HAL_RCC_ClockConfig+0x188>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	2307      	movs	r3, #7
 80046c4:	4013      	ands	r3, r2
 80046c6:	428b      	cmp	r3, r1
 80046c8:	d321      	bcc.n	800470e <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	079a      	lsls	r2, r3, #30
 80046ce:	d50e      	bpl.n	80046ee <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	075b      	lsls	r3, r3, #29
 80046d2:	d505      	bpl.n	80046e0 <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80046d4:	4a58      	ldr	r2, [pc, #352]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 80046d6:	6891      	ldr	r1, [r2, #8]
 80046d8:	23e0      	movs	r3, #224	; 0xe0
 80046da:	01db      	lsls	r3, r3, #7
 80046dc:	430b      	orrs	r3, r1
 80046de:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046e0:	4a55      	ldr	r2, [pc, #340]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 80046e2:	6893      	ldr	r3, [r2, #8]
 80046e4:	4955      	ldr	r1, [pc, #340]	; (800483c <HAL_RCC_ClockConfig+0x190>)
 80046e6:	400b      	ands	r3, r1
 80046e8:	68a1      	ldr	r1, [r4, #8]
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	07db      	lsls	r3, r3, #31
 80046f2:	d55b      	bpl.n	80047ac <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f4:	6863      	ldr	r3, [r4, #4]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d023      	beq.n	8004742 <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d042      	beq.n	8004784 <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d146      	bne.n	8004790 <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004702:	4a4d      	ldr	r2, [pc, #308]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	0552      	lsls	r2, r2, #21
 8004708:	d420      	bmi.n	800474c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 800470a:	2001      	movs	r0, #1
 800470c:	e070      	b.n	80047f0 <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4a49      	ldr	r2, [pc, #292]	; (8004834 <HAL_RCC_ClockConfig+0x188>)
 8004710:	6813      	ldr	r3, [r2, #0]
 8004712:	2107      	movs	r1, #7
 8004714:	438b      	bics	r3, r1
 8004716:	432b      	orrs	r3, r5
 8004718:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800471a:	f7fe f9bb 	bl	8002a94 <HAL_GetTick>
 800471e:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004720:	4b44      	ldr	r3, [pc, #272]	; (8004834 <HAL_RCC_ClockConfig+0x188>)
 8004722:	4698      	mov	r8, r3
 8004724:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004726:	4b46      	ldr	r3, [pc, #280]	; (8004840 <HAL_RCC_ClockConfig+0x194>)
 8004728:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800472a:	4643      	mov	r3, r8
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	403b      	ands	r3, r7
 8004730:	42ab      	cmp	r3, r5
 8004732:	d0ca      	beq.n	80046ca <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004734:	f7fe f9ae 	bl	8002a94 <HAL_GetTick>
 8004738:	1b80      	subs	r0, r0, r6
 800473a:	4548      	cmp	r0, r9
 800473c:	d9f5      	bls.n	800472a <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 800473e:	2003      	movs	r0, #3
 8004740:	e056      	b.n	80047f0 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004742:	4a3d      	ldr	r2, [pc, #244]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 8004744:	6812      	ldr	r2, [r2, #0]
 8004746:	0392      	lsls	r2, r2, #14
 8004748:	d400      	bmi.n	800474c <HAL_RCC_ClockConfig+0xa0>
 800474a:	e071      	b.n	8004830 <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800474c:	493a      	ldr	r1, [pc, #232]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 800474e:	688a      	ldr	r2, [r1, #8]
 8004750:	2007      	movs	r0, #7
 8004752:	4382      	bics	r2, r0
 8004754:	4313      	orrs	r3, r2
 8004756:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8004758:	f7fe f99c 	bl	8002a94 <HAL_GetTick>
 800475c:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475e:	4b36      	ldr	r3, [pc, #216]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 8004760:	4698      	mov	r8, r3
 8004762:	2738      	movs	r7, #56	; 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004764:	4b36      	ldr	r3, [pc, #216]	; (8004840 <HAL_RCC_ClockConfig+0x194>)
 8004766:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004768:	4643      	mov	r3, r8
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	403a      	ands	r2, r7
 800476e:	6863      	ldr	r3, [r4, #4]
 8004770:	00db      	lsls	r3, r3, #3
 8004772:	429a      	cmp	r2, r3
 8004774:	d01a      	beq.n	80047ac <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004776:	f7fe f98d 	bl	8002a94 <HAL_GetTick>
 800477a:	1b80      	subs	r0, r0, r6
 800477c:	4548      	cmp	r0, r9
 800477e:	d9f3      	bls.n	8004768 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8004780:	2003      	movs	r0, #3
 8004782:	e035      	b.n	80047f0 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004784:	4a2c      	ldr	r2, [pc, #176]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	0192      	lsls	r2, r2, #6
 800478a:	d4df      	bmi.n	800474c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 800478c:	2001      	movs	r0, #1
 800478e:	e02f      	b.n	80047f0 <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004790:	2b03      	cmp	r3, #3
 8004792:	d005      	beq.n	80047a0 <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004794:	4a28      	ldr	r2, [pc, #160]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 8004796:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004798:	0792      	lsls	r2, r2, #30
 800479a:	d4d7      	bmi.n	800474c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 800479c:	2001      	movs	r0, #1
 800479e:	e027      	b.n	80047f0 <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a0:	4a25      	ldr	r2, [pc, #148]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 80047a2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80047a4:	0792      	lsls	r2, r2, #30
 80047a6:	d4d1      	bmi.n	800474c <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 80047a8:	2001      	movs	r0, #1
 80047aa:	e021      	b.n	80047f0 <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_RCC_ClockConfig+0x188>)
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	2307      	movs	r3, #7
 80047b2:	4013      	ands	r3, r2
 80047b4:	42ab      	cmp	r3, r5
 80047b6:	d81f      	bhi.n	80047f8 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	075b      	lsls	r3, r3, #29
 80047bc:	d506      	bpl.n	80047cc <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80047be:	4a1e      	ldr	r2, [pc, #120]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 80047c0:	6893      	ldr	r3, [r2, #8]
 80047c2:	4920      	ldr	r1, [pc, #128]	; (8004844 <HAL_RCC_ClockConfig+0x198>)
 80047c4:	400b      	ands	r3, r1
 80047c6:	68e1      	ldr	r1, [r4, #12]
 80047c8:	430b      	orrs	r3, r1
 80047ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80047cc:	f7ff ff18 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80047d0:	4b19      	ldr	r3, [pc, #100]	; (8004838 <HAL_RCC_ClockConfig+0x18c>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	051b      	lsls	r3, r3, #20
 80047d6:	0f1b      	lsrs	r3, r3, #28
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	4a1b      	ldr	r2, [pc, #108]	; (8004848 <HAL_RCC_ClockConfig+0x19c>)
 80047dc:	589b      	ldr	r3, [r3, r2]
 80047de:	221f      	movs	r2, #31
 80047e0:	4013      	ands	r3, r2
 80047e2:	40d8      	lsrs	r0, r3
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <HAL_RCC_ClockConfig+0x1a0>)
 80047e6:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80047e8:	4b19      	ldr	r3, [pc, #100]	; (8004850 <HAL_RCC_ClockConfig+0x1a4>)
 80047ea:	6818      	ldr	r0, [r3, #0]
 80047ec:	f7fe f90a 	bl	8002a04 <HAL_InitTick>
}
 80047f0:	bcc0      	pop	{r6, r7}
 80047f2:	46b9      	mov	r9, r7
 80047f4:	46b0      	mov	r8, r6
 80047f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047f8:	4a0e      	ldr	r2, [pc, #56]	; (8004834 <HAL_RCC_ClockConfig+0x188>)
 80047fa:	6813      	ldr	r3, [r2, #0]
 80047fc:	2107      	movs	r1, #7
 80047fe:	438b      	bics	r3, r1
 8004800:	432b      	orrs	r3, r5
 8004802:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8004804:	f7fe f946 	bl	8002a94 <HAL_GetTick>
 8004808:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <HAL_RCC_ClockConfig+0x188>)
 800480c:	4698      	mov	r8, r3
 800480e:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_ClockConfig+0x194>)
 8004812:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004814:	4643      	mov	r3, r8
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	403b      	ands	r3, r7
 800481a:	42ab      	cmp	r3, r5
 800481c:	d0cc      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800481e:	f7fe f939 	bl	8002a94 <HAL_GetTick>
 8004822:	1b80      	subs	r0, r0, r6
 8004824:	4548      	cmp	r0, r9
 8004826:	d9f5      	bls.n	8004814 <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 8004828:	2003      	movs	r0, #3
 800482a:	e7e1      	b.n	80047f0 <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 800482c:	2001      	movs	r0, #1
 800482e:	e7df      	b.n	80047f0 <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8004830:	2001      	movs	r0, #1
 8004832:	e7dd      	b.n	80047f0 <HAL_RCC_ClockConfig+0x144>
 8004834:	40022000 	.word	0x40022000
 8004838:	40021000 	.word	0x40021000
 800483c:	fffff0ff 	.word	0xfffff0ff
 8004840:	00001388 	.word	0x00001388
 8004844:	ffff8fff 	.word	0xffff8fff
 8004848:	08005968 	.word	0x08005968
 800484c:	2000006c 	.word	0x2000006c
 8004850:	20000074 	.word	0x20000074

08004854 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004856:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004858:	045b      	lsls	r3, r3, #17
 800485a:	0f5b      	lsrs	r3, r3, #29
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4a05      	ldr	r2, [pc, #20]	; (8004874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004860:	589b      	ldr	r3, [r3, r2]
 8004862:	221f      	movs	r2, #31
 8004864:	4013      	ands	r3, r2
 8004866:	4a04      	ldr	r2, [pc, #16]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004868:	6810      	ldr	r0, [r2, #0]
 800486a:	40d8      	lsrs	r0, r3
}
 800486c:	4770      	bx	lr
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	40021000 	.word	0x40021000
 8004874:	080059a8 	.word	0x080059a8
 8004878:	2000006c 	.word	0x2000006c

0800487c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800487c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487e:	46d6      	mov	lr, sl
 8004880:	464f      	mov	r7, r9
 8004882:	4646      	mov	r6, r8
 8004884:	b5c0      	push	{r6, r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	0004      	movs	r4, r0
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800488a:	2000      	movs	r0, #0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	039b      	lsls	r3, r3, #14
 8004890:	d52a      	bpl.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004892:	4b57      	ldr	r3, [pc, #348]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8004896:	2200      	movs	r2, #0
 8004898:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	d40b      	bmi.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800489e:	4a54      	ldr	r2, [pc, #336]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80048a0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80048a2:	2080      	movs	r0, #128	; 0x80
 80048a4:	0540      	lsls	r0, r0, #21
 80048a6:	4301      	orrs	r1, r0
 80048a8:	63d1      	str	r1, [r2, #60]	; 0x3c
 80048aa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80048ac:	4003      	ands	r3, r0
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80048b2:	2301      	movs	r3, #1
 80048b4:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048b6:	4a4f      	ldr	r2, [pc, #316]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80048b8:	6811      	ldr	r1, [r2, #0]
 80048ba:	2380      	movs	r3, #128	; 0x80
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	430b      	orrs	r3, r1
 80048c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048c2:	f7fe f8e7 	bl	8002a94 <HAL_GetTick>
 80048c6:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c8:	4f4a      	ldr	r7, [pc, #296]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80048ca:	2680      	movs	r6, #128	; 0x80
 80048cc:	0076      	lsls	r6, r6, #1
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	4233      	tst	r3, r6
 80048d2:	d000      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 80048d4:	e07a      	b.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d6:	f7fe f8dd 	bl	8002a94 <HAL_GetTick>
 80048da:	1b40      	subs	r0, r0, r5
 80048dc:	2802      	cmp	r0, #2
 80048de:	d9f6      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 80048e0:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048e2:	4653      	mov	r3, sl
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d05d      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048e8:	6823      	ldr	r3, [r4, #0]
 80048ea:	07db      	lsls	r3, r3, #31
 80048ec:	d506      	bpl.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048ee:	4a40      	ldr	r2, [pc, #256]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80048f0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80048f2:	2103      	movs	r1, #3
 80048f4:	438b      	bics	r3, r1
 80048f6:	6861      	ldr	r1, [r4, #4]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6553      	str	r3, [r2, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	069b      	lsls	r3, r3, #26
 8004900:	d506      	bpl.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004902:	4a3b      	ldr	r2, [pc, #236]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004904:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004906:	493c      	ldr	r1, [pc, #240]	; (80049f8 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8004908:	400b      	ands	r3, r1
 800490a:	68a1      	ldr	r1, [r4, #8]
 800490c:	430b      	orrs	r3, r1
 800490e:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	045b      	lsls	r3, r3, #17
 8004914:	d50b      	bpl.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xb2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004916:	4a36      	ldr	r2, [pc, #216]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004918:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	6921      	ldr	r1, [r4, #16]
 8004920:	430b      	orrs	r3, r1
 8004922:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004924:	2380      	movs	r3, #128	; 0x80
 8004926:	05db      	lsls	r3, r3, #23
 8004928:	6922      	ldr	r2, [r4, #16]
 800492a:	429a      	cmp	r2, r3
 800492c:	d040      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x134>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	051b      	lsls	r3, r3, #20
 8004932:	d50b      	bpl.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004934:	4a2e      	ldr	r2, [pc, #184]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004936:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8004938:	4930      	ldr	r1, [pc, #192]	; (80049fc <HAL_RCCEx_PeriphCLKConfig+0x180>)
 800493a:	400b      	ands	r3, r1
 800493c:	68e1      	ldr	r1, [r4, #12]
 800493e:	430b      	orrs	r3, r1
 8004940:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	01db      	lsls	r3, r3, #7
 8004946:	68e2      	ldr	r2, [r4, #12]
 8004948:	429a      	cmp	r2, r3
 800494a:	d038      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x142>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 800494c:	b002      	add	sp, #8
 800494e:	bce0      	pop	{r5, r6, r7}
 8004950:	46ba      	mov	sl, r7
 8004952:	46b1      	mov	r9, r6
 8004954:	46a8      	mov	r8, r5
 8004956:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004958:	6962      	ldr	r2, [r4, #20]
 800495a:	429a      	cmp	r2, r3
 800495c:	d00d      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800495e:	4a24      	ldr	r2, [pc, #144]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004960:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8004962:	4927      	ldr	r1, [pc, #156]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004964:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_FORCE();
 8004966:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 8004968:	2180      	movs	r1, #128	; 0x80
 800496a:	0249      	lsls	r1, r1, #9
 800496c:	4301      	orrs	r1, r0
 800496e:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004970:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8004972:	4824      	ldr	r0, [pc, #144]	; (8004a04 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004974:	4001      	ands	r1, r0
 8004976:	65d1      	str	r1, [r2, #92]	; 0x5c
        RCC->BDCR = tmpregister;
 8004978:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800497a:	07db      	lsls	r3, r3, #31
 800497c:	d52e      	bpl.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>
        tickstart = HAL_GetTick();
 800497e:	f7fe f889 	bl	8002a94 <HAL_GetTick>
 8004982:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004984:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8004986:	4698      	mov	r8, r3
 8004988:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498a:	4b1f      	ldr	r3, [pc, #124]	; (8004a08 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800498c:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800498e:	4643      	mov	r3, r8
 8004990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004992:	421e      	tst	r6, r3
 8004994:	d122      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x160>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fe f87d 	bl	8002a94 <HAL_GetTick>
 800499a:	1b40      	subs	r0, r0, r5
 800499c:	4548      	cmp	r0, r9
 800499e:	d9f6      	bls.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x112>
            ret = HAL_TIMEOUT;
 80049a0:	2003      	movs	r0, #3
 80049a2:	e79e      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a4:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80049a6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80049a8:	4918      	ldr	r1, [pc, #96]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80049aa:	400b      	ands	r3, r1
 80049ac:	63d3      	str	r3, [r2, #60]	; 0x3c
 80049ae:	e79b      	b.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049b0:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80049b2:	68d1      	ldr	r1, [r2, #12]
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	025b      	lsls	r3, r3, #9
 80049b8:	430b      	orrs	r3, r1
 80049ba:	60d3      	str	r3, [r2, #12]
 80049bc:	e7b7      	b.n	800492e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80049be:	4a0c      	ldr	r2, [pc, #48]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80049c0:	68d1      	ldr	r1, [r2, #12]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	025b      	lsls	r3, r3, #9
 80049c6:	430b      	orrs	r3, r1
 80049c8:	60d3      	str	r3, [r2, #12]
  return status;
 80049ca:	e7bf      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049cc:	4b08      	ldr	r3, [pc, #32]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80049ce:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80049d0:	22c0      	movs	r2, #192	; 0xc0
 80049d2:	0092      	lsls	r2, r2, #2
 80049d4:	000b      	movs	r3, r1
 80049d6:	4013      	ands	r3, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049d8:	4211      	tst	r1, r2
 80049da:	d1bd      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049dc:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 80049de:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80049e0:	4907      	ldr	r1, [pc, #28]	; (8004a00 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80049e2:	400b      	ands	r3, r1
 80049e4:	6961      	ldr	r1, [r4, #20]
 80049e6:	430b      	orrs	r3, r1
 80049e8:	65d3      	str	r3, [r2, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049ea:	2000      	movs	r0, #0
 80049ec:	e779      	b.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x66>
 80049ee:	46c0      	nop			; (mov r8, r8)
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40007000 	.word	0x40007000
 80049f8:	ffffcfff 	.word	0xffffcfff
 80049fc:	ffff3fff 	.word	0xffff3fff
 8004a00:	fffffcff 	.word	0xfffffcff
 8004a04:	fffeffff 	.word	0xfffeffff
 8004a08:	00001388 	.word	0x00001388
 8004a0c:	efffffff 	.word	0xefffffff

08004a10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a10:	0003      	movs	r3, r0

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a12:	223d      	movs	r2, #61	; 0x3d
 8004a14:	5c82      	ldrb	r2, [r0, r2]
  {
    return HAL_ERROR;
 8004a16:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004a18:	2a01      	cmp	r2, #1
 8004a1a:	d10e      	bne.n	8004a3a <HAL_TIM_Base_Start+0x2a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a1c:	323c      	adds	r2, #60	; 0x3c
 8004a1e:	2102      	movs	r1, #2
 8004a20:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a0e      	ldr	r2, [pc, #56]	; (8004a60 <HAL_TIM_Base_Start+0x50>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d008      	beq.n	8004a3c <HAL_TIM_Base_Start+0x2c>
 8004a2a:	4a0e      	ldr	r2, [pc, #56]	; (8004a64 <HAL_TIM_Base_Start+0x54>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d005      	beq.n	8004a3c <HAL_TIM_Base_Start+0x2c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	2101      	movs	r1, #1
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a38:	2000      	movs	r0, #0
}
 8004a3a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	490a      	ldr	r1, [pc, #40]	; (8004a68 <HAL_TIM_Base_Start+0x58>)
 8004a40:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a42:	2a06      	cmp	r2, #6
 8004a44:	d008      	beq.n	8004a58 <HAL_TIM_Base_Start+0x48>
 8004a46:	3907      	subs	r1, #7
 8004a48:	428a      	cmp	r2, r1
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_Base_Start+0x4c>
      __HAL_TIM_ENABLE(htim);
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	2101      	movs	r1, #1
 8004a50:	430a      	orrs	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004a54:	2000      	movs	r0, #0
 8004a56:	e7f0      	b.n	8004a3a <HAL_TIM_Base_Start+0x2a>
 8004a58:	2000      	movs	r0, #0
 8004a5a:	e7ee      	b.n	8004a3a <HAL_TIM_Base_Start+0x2a>
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	e7ec      	b.n	8004a3a <HAL_TIM_Base_Start+0x2a>
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40000400 	.word	0x40000400
 8004a68:	00010007 	.word	0x00010007

08004a6c <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a6c:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a6e:	4a2e      	ldr	r2, [pc, #184]	; (8004b28 <TIM_Base_SetConfig+0xbc>)
 8004a70:	4290      	cmp	r0, r2
 8004a72:	d031      	beq.n	8004ad8 <TIM_Base_SetConfig+0x6c>
 8004a74:	4a2d      	ldr	r2, [pc, #180]	; (8004b2c <TIM_Base_SetConfig+0xc0>)
 8004a76:	4290      	cmp	r0, r2
 8004a78:	d044      	beq.n	8004b04 <TIM_Base_SetConfig+0x98>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a7a:	4a2d      	ldr	r2, [pc, #180]	; (8004b30 <TIM_Base_SetConfig+0xc4>)
 8004a7c:	4290      	cmp	r0, r2
 8004a7e:	d045      	beq.n	8004b0c <TIM_Base_SetConfig+0xa0>
 8004a80:	4a2c      	ldr	r2, [pc, #176]	; (8004b34 <TIM_Base_SetConfig+0xc8>)
 8004a82:	4290      	cmp	r0, r2
 8004a84:	d01a      	beq.n	8004abc <TIM_Base_SetConfig+0x50>
 8004a86:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <TIM_Base_SetConfig+0xcc>)
 8004a88:	4290      	cmp	r0, r2
 8004a8a:	d009      	beq.n	8004aa0 <TIM_Base_SetConfig+0x34>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	4393      	bics	r3, r2
 8004a90:	694a      	ldr	r2, [r1, #20]
 8004a92:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004a94:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a96:	688b      	ldr	r3, [r1, #8]
 8004a98:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a9a:	680b      	ldr	r3, [r1, #0]
 8004a9c:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a9e:	e02e      	b.n	8004afe <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa0:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <TIM_Base_SetConfig+0xd0>)
 8004aa2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa4:	68ca      	ldr	r2, [r1, #12]
 8004aa6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004aa8:	2280      	movs	r2, #128	; 0x80
 8004aaa:	4393      	bics	r3, r2
 8004aac:	694a      	ldr	r2, [r1, #20]
 8004aae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004ab0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ab2:	688b      	ldr	r3, [r1, #8]
 8004ab4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ab6:	680b      	ldr	r3, [r1, #0]
 8004ab8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004aba:	e01e      	b.n	8004afa <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <TIM_Base_SetConfig+0xd0>)
 8004abe:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ac0:	68ca      	ldr	r2, [r1, #12]
 8004ac2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ac4:	2280      	movs	r2, #128	; 0x80
 8004ac6:	4393      	bics	r3, r2
 8004ac8:	694a      	ldr	r2, [r1, #20]
 8004aca:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004acc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ace:	688b      	ldr	r3, [r1, #8]
 8004ad0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ad2:	680b      	ldr	r3, [r1, #0]
 8004ad4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad6:	e010      	b.n	8004afa <TIM_Base_SetConfig+0x8e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad8:	2270      	movs	r2, #112	; 0x70
 8004ada:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004adc:	684a      	ldr	r2, [r1, #4]
 8004ade:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <TIM_Base_SetConfig+0xd0>)
 8004ae2:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae4:	68ca      	ldr	r2, [r1, #12]
 8004ae6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ae8:	2280      	movs	r2, #128	; 0x80
 8004aea:	4393      	bics	r3, r2
 8004aec:	694a      	ldr	r2, [r1, #20]
 8004aee:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004af0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004af2:	688b      	ldr	r3, [r1, #8]
 8004af4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004af6:	680b      	ldr	r3, [r1, #0]
 8004af8:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004afa:	690b      	ldr	r3, [r1, #16]
 8004afc:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004afe:	2301      	movs	r3, #1
 8004b00:	6143      	str	r3, [r0, #20]
}
 8004b02:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b04:	2270      	movs	r2, #112	; 0x70
 8004b06:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 8004b08:	684a      	ldr	r2, [r1, #4]
 8004b0a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b0c:	4a0b      	ldr	r2, [pc, #44]	; (8004b3c <TIM_Base_SetConfig+0xd0>)
 8004b0e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b10:	68ca      	ldr	r2, [r1, #12]
 8004b12:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b14:	2280      	movs	r2, #128	; 0x80
 8004b16:	4393      	bics	r3, r2
 8004b18:	694a      	ldr	r2, [r1, #20]
 8004b1a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004b1c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1e:	688b      	ldr	r3, [r1, #8]
 8004b20:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004b22:	680b      	ldr	r3, [r1, #0]
 8004b24:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b26:	e7ea      	b.n	8004afe <TIM_Base_SetConfig+0x92>
 8004b28:	40012c00 	.word	0x40012c00
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40002000 	.word	0x40002000
 8004b34:	40014400 	.word	0x40014400
 8004b38:	40014800 	.word	0x40014800
 8004b3c:	fffffcff 	.word	0xfffffcff

08004b40 <HAL_TIM_Base_Init>:
{
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8004b44:	d02a      	beq.n	8004b9c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b46:	233d      	movs	r3, #61	; 0x3d
 8004b48:	5cc3      	ldrb	r3, [r0, r3]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d020      	beq.n	8004b90 <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 8004b4e:	253d      	movs	r5, #61	; 0x3d
 8004b50:	2302      	movs	r3, #2
 8004b52:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b54:	0021      	movs	r1, r4
 8004b56:	c901      	ldmia	r1!, {r0}
 8004b58:	f7ff ff88 	bl	8004a6c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	2248      	movs	r2, #72	; 0x48
 8004b60:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b62:	3a0a      	subs	r2, #10
 8004b64:	54a3      	strb	r3, [r4, r2]
 8004b66:	3201      	adds	r2, #1
 8004b68:	54a3      	strb	r3, [r4, r2]
 8004b6a:	3201      	adds	r2, #1
 8004b6c:	54a3      	strb	r3, [r4, r2]
 8004b6e:	3201      	adds	r2, #1
 8004b70:	54a3      	strb	r3, [r4, r2]
 8004b72:	3201      	adds	r2, #1
 8004b74:	54a3      	strb	r3, [r4, r2]
 8004b76:	3201      	adds	r2, #1
 8004b78:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7a:	3201      	adds	r2, #1
 8004b7c:	54a3      	strb	r3, [r4, r2]
 8004b7e:	3201      	adds	r2, #1
 8004b80:	54a3      	strb	r3, [r4, r2]
 8004b82:	3201      	adds	r2, #1
 8004b84:	54a3      	strb	r3, [r4, r2]
 8004b86:	3201      	adds	r2, #1
 8004b88:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8004b8a:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8004b8c:	2000      	movs	r0, #0
}
 8004b8e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004b90:	333c      	adds	r3, #60	; 0x3c
 8004b92:	2200      	movs	r2, #0
 8004b94:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8004b96:	f7fd fe5b 	bl	8002850 <HAL_TIM_Base_MspInit>
 8004b9a:	e7d8      	b.n	8004b4e <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 8004b9c:	2001      	movs	r0, #1
 8004b9e:	e7f6      	b.n	8004b8e <HAL_TIM_Base_Init+0x4e>

08004ba0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ba0:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8004bac:	6801      	ldr	r1, [r0, #0]
 8004bae:	680b      	ldr	r3, [r1, #0]
 8004bb0:	25c0      	movs	r5, #192	; 0xc0
 8004bb2:	43ab      	bics	r3, r5
 8004bb4:	600b      	str	r3, [r1, #0]
 8004bb6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bba:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bbe:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004bc2:	6802      	ldr	r2, [r0, #0]
 8004bc4:	6893      	ldr	r3, [r2, #8]
 8004bc6:	4c04      	ldr	r4, [pc, #16]	; (8004bd8 <UART_EndTxTransfer+0x38>)
 8004bc8:	4023      	ands	r3, r4
 8004bca:	6093      	str	r3, [r2, #8]
 8004bcc:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bd0:	2388      	movs	r3, #136	; 0x88
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	50c2      	str	r2, [r0, r3]
}
 8004bd6:	bd30      	pop	{r4, r5, pc}
 8004bd8:	ff7fffff 	.word	0xff7fffff

08004bdc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004bdc:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bde:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be2:	2201      	movs	r2, #1
 8004be4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004be8:	6801      	ldr	r1, [r0, #0]
 8004bea:	680b      	ldr	r3, [r1, #0]
 8004bec:	4d12      	ldr	r5, [pc, #72]	; (8004c38 <UART_EndRxTransfer+0x5c>)
 8004bee:	402b      	ands	r3, r5
 8004bf0:	600b      	str	r3, [r1, #0]
 8004bf2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfa:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004bfe:	6802      	ldr	r2, [r0, #0]
 8004c00:	6893      	ldr	r3, [r2, #8]
 8004c02:	4c0e      	ldr	r4, [pc, #56]	; (8004c3c <UART_EndRxTransfer+0x60>)
 8004c04:	4023      	ands	r3, r4
 8004c06:	6093      	str	r3, [r2, #8]
 8004c08:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d006      	beq.n	8004c20 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c12:	238c      	movs	r3, #140	; 0x8c
 8004c14:	2220      	movs	r2, #32
 8004c16:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c1c:	6743      	str	r3, [r0, #116]	; 0x74
}
 8004c1e:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c20:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c24:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c28:	6802      	ldr	r2, [r0, #0]
 8004c2a:	6813      	ldr	r3, [r2, #0]
 8004c2c:	2410      	movs	r4, #16
 8004c2e:	43a3      	bics	r3, r4
 8004c30:	6013      	str	r3, [r2, #0]
 8004c32:	f381 8810 	msr	PRIMASK, r1
}
 8004c36:	e7ec      	b.n	8004c12 <UART_EndRxTransfer+0x36>
 8004c38:	fffffedf 	.word	0xfffffedf
 8004c3c:	effffffe 	.word	0xeffffffe

08004c40 <HAL_UART_TxCpltCallback>:
}
 8004c40:	4770      	bx	lr

08004c42 <HAL_UART_RxCpltCallback>:
}
 8004c42:	4770      	bx	lr

08004c44 <HAL_UART_RxHalfCpltCallback>:
}
 8004c44:	4770      	bx	lr

08004c46 <HAL_UART_ErrorCallback>:
}
 8004c46:	4770      	bx	lr

08004c48 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c48:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c4a:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004c4c:	2388      	movs	r3, #136	; 0x88
 8004c4e:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004c50:	3304      	adds	r3, #4
 8004c52:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004c54:	6823      	ldr	r3, [r4, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	d501      	bpl.n	8004c60 <UART_DMAError+0x18>
 8004c5c:	2a21      	cmp	r2, #33	; 0x21
 8004c5e:	d00e      	beq.n	8004c7e <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	065b      	lsls	r3, r3, #25
 8004c66:	d501      	bpl.n	8004c6c <UART_DMAError+0x24>
 8004c68:	2d22      	cmp	r5, #34	; 0x22
 8004c6a:	d00f      	beq.n	8004c8c <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c6c:	2290      	movs	r2, #144	; 0x90
 8004c6e:	58a3      	ldr	r3, [r4, r2]
 8004c70:	2110      	movs	r1, #16
 8004c72:	430b      	orrs	r3, r1
 8004c74:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c76:	0020      	movs	r0, r4
 8004c78:	f7ff ffe5 	bl	8004c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c7c:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8004c7e:	2356      	movs	r3, #86	; 0x56
 8004c80:	2200      	movs	r2, #0
 8004c82:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8004c84:	0020      	movs	r0, r4
 8004c86:	f7ff ff8b 	bl	8004ba0 <UART_EndTxTransfer>
 8004c8a:	e7e9      	b.n	8004c60 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 8004c8c:	235e      	movs	r3, #94	; 0x5e
 8004c8e:	2200      	movs	r2, #0
 8004c90:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 8004c92:	0020      	movs	r0, r4
 8004c94:	f7ff ffa2 	bl	8004bdc <UART_EndRxTransfer>
 8004c98:	e7e8      	b.n	8004c6c <UART_DMAError+0x24>

08004c9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c9a:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c9c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	225e      	movs	r2, #94	; 0x5e
 8004ca2:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 8004ca4:	3a08      	subs	r2, #8
 8004ca6:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ca8:	f7ff ffcd 	bl	8004c46 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004cac:	bd10      	pop	{r4, pc}
	...

08004cb0 <HAL_UART_IRQHandler>:
{
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004cb4:	6802      	ldr	r2, [r0, #0]
 8004cb6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cb8:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cba:	6891      	ldr	r1, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004cbc:	4dbb      	ldr	r5, [pc, #748]	; (8004fac <HAL_UART_IRQHandler+0x2fc>)
  if (errorflags == 0U)
 8004cbe:	422b      	tst	r3, r5
 8004cc0:	d10e      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004cc2:	069d      	lsls	r5, r3, #26
 8004cc4:	d512      	bpl.n	8004cec <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004cc6:	2520      	movs	r5, #32
 8004cc8:	4005      	ands	r5, r0
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004cca:	2680      	movs	r6, #128	; 0x80
 8004ccc:	0576      	lsls	r6, r6, #21
 8004cce:	400e      	ands	r6, r1
 8004cd0:	4335      	orrs	r5, r6
 8004cd2:	d00b      	beq.n	8004cec <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 8004cd4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d02a      	beq.n	8004d30 <HAL_UART_IRQHandler+0x80>
        huart->RxISR(huart);
 8004cda:	0020      	movs	r0, r4
 8004cdc:	4798      	blx	r3
 8004cde:	e027      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004ce0:	4eb3      	ldr	r6, [pc, #716]	; (8004fb0 <HAL_UART_IRQHandler+0x300>)
 8004ce2:	400e      	ands	r6, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004ce4:	4db3      	ldr	r5, [pc, #716]	; (8004fb4 <HAL_UART_IRQHandler+0x304>)
 8004ce6:	4005      	ands	r5, r0
 8004ce8:	4335      	orrs	r5, r6
 8004cea:	d122      	bne.n	8004d32 <HAL_UART_IRQHandler+0x82>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cec:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8004cee:	2d01      	cmp	r5, #1
 8004cf0:	d100      	bne.n	8004cf4 <HAL_UART_IRQHandler+0x44>
 8004cf2:	e0ad      	b.n	8004e50 <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cf4:	02dd      	lsls	r5, r3, #11
 8004cf6:	d502      	bpl.n	8004cfe <HAL_UART_IRQHandler+0x4e>
 8004cf8:	024d      	lsls	r5, r1, #9
 8004cfa:	d500      	bpl.n	8004cfe <HAL_UART_IRQHandler+0x4e>
 8004cfc:	e147      	b.n	8004f8e <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004cfe:	061a      	lsls	r2, r3, #24
 8004d00:	d507      	bpl.n	8004d12 <HAL_UART_IRQHandler+0x62>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	4002      	ands	r2, r0
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d06:	2580      	movs	r5, #128	; 0x80
 8004d08:	042d      	lsls	r5, r5, #16
 8004d0a:	4029      	ands	r1, r5
 8004d0c:	4311      	orrs	r1, r2
 8004d0e:	d000      	beq.n	8004d12 <HAL_UART_IRQHandler+0x62>
 8004d10:	e144      	b.n	8004f9c <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d12:	065a      	lsls	r2, r3, #25
 8004d14:	d502      	bpl.n	8004d1c <HAL_UART_IRQHandler+0x6c>
 8004d16:	0642      	lsls	r2, r0, #25
 8004d18:	d500      	bpl.n	8004d1c <HAL_UART_IRQHandler+0x6c>
 8004d1a:	e155      	b.n	8004fc8 <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d1c:	021a      	lsls	r2, r3, #8
 8004d1e:	d502      	bpl.n	8004d26 <HAL_UART_IRQHandler+0x76>
 8004d20:	0042      	lsls	r2, r0, #1
 8004d22:	d500      	bpl.n	8004d26 <HAL_UART_IRQHandler+0x76>
 8004d24:	e165      	b.n	8004ff2 <HAL_UART_IRQHandler+0x342>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d26:	01db      	lsls	r3, r3, #7
 8004d28:	d502      	bpl.n	8004d30 <HAL_UART_IRQHandler+0x80>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	da00      	bge.n	8004d30 <HAL_UART_IRQHandler+0x80>
 8004d2e:	e164      	b.n	8004ffa <HAL_UART_IRQHandler+0x34a>
}
 8004d30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d32:	07dd      	lsls	r5, r3, #31
 8004d34:	d507      	bpl.n	8004d46 <HAL_UART_IRQHandler+0x96>
 8004d36:	05c5      	lsls	r5, r0, #23
 8004d38:	d505      	bpl.n	8004d46 <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004d3a:	2701      	movs	r7, #1
 8004d3c:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d3e:	2590      	movs	r5, #144	; 0x90
 8004d40:	5962      	ldr	r2, [r4, r5]
 8004d42:	433a      	orrs	r2, r7
 8004d44:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d46:	079a      	lsls	r2, r3, #30
 8004d48:	d50c      	bpl.n	8004d64 <HAL_UART_IRQHandler+0xb4>
 8004d4a:	07ca      	lsls	r2, r1, #31
 8004d4c:	d516      	bpl.n	8004d7c <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004d4e:	6822      	ldr	r2, [r4, #0]
 8004d50:	2502      	movs	r5, #2
 8004d52:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d54:	2790      	movs	r7, #144	; 0x90
 8004d56:	59e2      	ldr	r2, [r4, r7]
 8004d58:	3502      	adds	r5, #2
 8004d5a:	432a      	orrs	r2, r5
 8004d5c:	51e2      	str	r2, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004d5e:	421d      	tst	r5, r3
 8004d60:	d104      	bne.n	8004d6c <HAL_UART_IRQHandler+0xbc>
 8004d62:	e00b      	b.n	8004d7c <HAL_UART_IRQHandler+0xcc>
 8004d64:	075a      	lsls	r2, r3, #29
 8004d66:	d509      	bpl.n	8004d7c <HAL_UART_IRQHandler+0xcc>
 8004d68:	07ca      	lsls	r2, r1, #31
 8004d6a:	d507      	bpl.n	8004d7c <HAL_UART_IRQHandler+0xcc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004d6c:	6822      	ldr	r2, [r4, #0]
 8004d6e:	2504      	movs	r5, #4
 8004d70:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d72:	358c      	adds	r5, #140	; 0x8c
 8004d74:	5962      	ldr	r2, [r4, r5]
 8004d76:	2702      	movs	r7, #2
 8004d78:	433a      	orrs	r2, r7
 8004d7a:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004d7c:	071a      	lsls	r2, r3, #28
 8004d7e:	d50a      	bpl.n	8004d96 <HAL_UART_IRQHandler+0xe6>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004d80:	2220      	movs	r2, #32
 8004d82:	4002      	ands	r2, r0
 8004d84:	4316      	orrs	r6, r2
 8004d86:	d006      	beq.n	8004d96 <HAL_UART_IRQHandler+0xe6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d88:	6822      	ldr	r2, [r4, #0]
 8004d8a:	2608      	movs	r6, #8
 8004d8c:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d8e:	2590      	movs	r5, #144	; 0x90
 8004d90:	5962      	ldr	r2, [r4, r5]
 8004d92:	4332      	orrs	r2, r6
 8004d94:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004d96:	051a      	lsls	r2, r3, #20
 8004d98:	d50a      	bpl.n	8004db0 <HAL_UART_IRQHandler+0x100>
 8004d9a:	0142      	lsls	r2, r0, #5
 8004d9c:	d508      	bpl.n	8004db0 <HAL_UART_IRQHandler+0x100>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d9e:	6822      	ldr	r2, [r4, #0]
 8004da0:	2580      	movs	r5, #128	; 0x80
 8004da2:	012d      	lsls	r5, r5, #4
 8004da4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004da6:	2590      	movs	r5, #144	; 0x90
 8004da8:	5962      	ldr	r2, [r4, r5]
 8004daa:	2620      	movs	r6, #32
 8004dac:	4332      	orrs	r2, r6
 8004dae:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db0:	2290      	movs	r2, #144	; 0x90
 8004db2:	58a2      	ldr	r2, [r4, r2]
 8004db4:	2a00      	cmp	r2, #0
 8004db6:	d0bb      	beq.n	8004d30 <HAL_UART_IRQHandler+0x80>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004db8:	069b      	lsls	r3, r3, #26
 8004dba:	d50b      	bpl.n	8004dd4 <HAL_UART_IRQHandler+0x124>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004dbc:	2320      	movs	r3, #32
 8004dbe:	4018      	ands	r0, r3
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	055b      	lsls	r3, r3, #21
 8004dc4:	4019      	ands	r1, r3
 8004dc6:	4308      	orrs	r0, r1
 8004dc8:	d004      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x124>
        if (huart->RxISR != NULL)
 8004dca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <HAL_UART_IRQHandler+0x124>
          huart->RxISR(huart);
 8004dd0:	0020      	movs	r0, r4
 8004dd2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004dd4:	2390      	movs	r3, #144	; 0x90
 8004dd6:	58e1      	ldr	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004dd8:	6823      	ldr	r3, [r4, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	2340      	movs	r3, #64	; 0x40
 8004dde:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004de0:	2228      	movs	r2, #40	; 0x28
 8004de2:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004de4:	4313      	orrs	r3, r2
 8004de6:	d02c      	beq.n	8004e42 <HAL_UART_IRQHandler+0x192>
        UART_EndRxTransfer(huart);
 8004de8:	0020      	movs	r0, r4
 8004dea:	f7ff fef7 	bl	8004bdc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	065b      	lsls	r3, r3, #25
 8004df4:	d521      	bpl.n	8004e3a <HAL_UART_IRQHandler+0x18a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004df6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e00:	6822      	ldr	r2, [r4, #0]
 8004e02:	6893      	ldr	r3, [r2, #8]
 8004e04:	2040      	movs	r0, #64	; 0x40
 8004e06:	4383      	bics	r3, r0
 8004e08:	6093      	str	r3, [r2, #8]
 8004e0a:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	58e3      	ldr	r3, [r4, r3]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <HAL_UART_IRQHandler+0x182>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e16:	4a68      	ldr	r2, [pc, #416]	; (8004fb8 <HAL_UART_IRQHandler+0x308>)
 8004e18:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e1a:	2380      	movs	r3, #128	; 0x80
 8004e1c:	58e0      	ldr	r0, [r4, r3]
 8004e1e:	f7fe fb61 	bl	80034e4 <HAL_DMA_Abort_IT>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d100      	bne.n	8004e28 <HAL_UART_IRQHandler+0x178>
 8004e26:	e783      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	58e0      	ldr	r0, [r4, r3]
 8004e2c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e2e:	4798      	blx	r3
 8004e30:	e77e      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
            HAL_UART_ErrorCallback(huart);
 8004e32:	0020      	movs	r0, r4
 8004e34:	f7ff ff07 	bl	8004c46 <HAL_UART_ErrorCallback>
 8004e38:	e77a      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
          HAL_UART_ErrorCallback(huart);
 8004e3a:	0020      	movs	r0, r4
 8004e3c:	f7ff ff03 	bl	8004c46 <HAL_UART_ErrorCallback>
 8004e40:	e776      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
        HAL_UART_ErrorCallback(huart);
 8004e42:	0020      	movs	r0, r4
 8004e44:	f7ff feff 	bl	8004c46 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e48:	2390      	movs	r3, #144	; 0x90
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	50e2      	str	r2, [r4, r3]
 8004e4e:	e76f      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e50:	06dd      	lsls	r5, r3, #27
 8004e52:	d400      	bmi.n	8004e56 <HAL_UART_IRQHandler+0x1a6>
 8004e54:	e74e      	b.n	8004cf4 <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e56:	06c5      	lsls	r5, r0, #27
 8004e58:	d400      	bmi.n	8004e5c <HAL_UART_IRQHandler+0x1ac>
 8004e5a:	e74b      	b.n	8004cf4 <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e5c:	2310      	movs	r3, #16
 8004e5e:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	6823      	ldr	r3, [r4, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	065b      	lsls	r3, r3, #25
 8004e66:	d555      	bpl.n	8004f14 <HAL_UART_IRQHandler+0x264>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	58e2      	ldr	r2, [r4, r3]
 8004e6c:	6813      	ldr	r3, [r2, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d100      	bne.n	8004e78 <HAL_UART_IRQHandler+0x1c8>
 8004e76:	e75b      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e78:	215c      	movs	r1, #92	; 0x5c
 8004e7a:	5a61      	ldrh	r1, [r4, r1]
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	d800      	bhi.n	8004e82 <HAL_UART_IRQHandler+0x1d2>
 8004e80:	e756      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
        huart->RxXferCount = nb_remaining_rx_data;
 8004e82:	215e      	movs	r1, #94	; 0x5e
 8004e84:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	069b      	lsls	r3, r3, #26
 8004e8c:	d50b      	bpl.n	8004ea6 <HAL_UART_IRQHandler+0x1f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e92:	335c      	adds	r3, #92	; 0x5c
 8004e94:	5ae3      	ldrh	r3, [r4, r3]
 8004e96:	225c      	movs	r2, #92	; 0x5c
 8004e98:	5aa1      	ldrh	r1, [r4, r2]
 8004e9a:	1ac9      	subs	r1, r1, r3
 8004e9c:	b289      	uxth	r1, r1
 8004e9e:	0020      	movs	r0, r4
 8004ea0:	f7fc fea4 	bl	8001bec <HAL_UARTEx_RxEventCallback>
 8004ea4:	e744      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eb0:	6821      	ldr	r1, [r4, #0]
 8004eb2:	680a      	ldr	r2, [r1, #0]
 8004eb4:	4d41      	ldr	r5, [pc, #260]	; (8004fbc <HAL_UART_IRQHandler+0x30c>)
 8004eb6:	402a      	ands	r2, r5
 8004eb8:	600a      	str	r2, [r1, #0]
 8004eba:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ebe:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec2:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	6821      	ldr	r1, [r4, #0]
 8004ec8:	688a      	ldr	r2, [r1, #8]
 8004eca:	439a      	bics	r2, r3
 8004ecc:	608a      	str	r2, [r1, #8]
 8004ece:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eda:	6821      	ldr	r1, [r4, #0]
 8004edc:	688a      	ldr	r2, [r1, #8]
 8004ede:	3542      	adds	r5, #66	; 0x42
 8004ee0:	35ff      	adds	r5, #255	; 0xff
 8004ee2:	43aa      	bics	r2, r5
 8004ee4:	608a      	str	r2, [r1, #8]
 8004ee6:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8004eea:	228c      	movs	r2, #140	; 0x8c
 8004eec:	2120      	movs	r1, #32
 8004eee:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ef4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef8:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efc:	6822      	ldr	r2, [r4, #0]
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	2010      	movs	r0, #16
 8004f02:	4383      	bics	r3, r0
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f0a:	2380      	movs	r3, #128	; 0x80
 8004f0c:	58e0      	ldr	r0, [r4, r3]
 8004f0e:	f7fe faa9 	bl	8003464 <HAL_DMA_Abort>
 8004f12:	e7bc      	b.n	8004e8e <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f14:	215e      	movs	r1, #94	; 0x5e
 8004f16:	5a62      	ldrh	r2, [r4, r1]
 8004f18:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8004f1a:	5a63      	ldrh	r3, [r4, r1]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d100      	bne.n	8004f24 <HAL_UART_IRQHandler+0x274>
 8004f22:	e705      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f24:	235c      	movs	r3, #92	; 0x5c
 8004f26:	5ae1      	ldrh	r1, [r4, r3]
 8004f28:	1a89      	subs	r1, r1, r2
 8004f2a:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004f2c:	2900      	cmp	r1, #0
 8004f2e:	d100      	bne.n	8004f32 <HAL_UART_IRQHandler+0x282>
 8004f30:	e6fe      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f32:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f36:	3b5b      	subs	r3, #91	; 0x5b
 8004f38:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f3c:	6820      	ldr	r0, [r4, #0]
 8004f3e:	6802      	ldr	r2, [r0, #0]
 8004f40:	4e1f      	ldr	r6, [pc, #124]	; (8004fc0 <HAL_UART_IRQHandler+0x310>)
 8004f42:	4032      	ands	r2, r6
 8004f44:	6002      	str	r2, [r0, #0]
 8004f46:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f4e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004f52:	6820      	ldr	r0, [r4, #0]
 8004f54:	6882      	ldr	r2, [r0, #8]
 8004f56:	4e1b      	ldr	r6, [pc, #108]	; (8004fc4 <HAL_UART_IRQHandler+0x314>)
 8004f58:	4032      	ands	r2, r6
 8004f5a:	6082      	str	r2, [r0, #8]
 8004f5c:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8004f60:	228c      	movs	r2, #140	; 0x8c
 8004f62:	2020      	movs	r0, #32
 8004f64:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f66:	2200      	movs	r2, #0
 8004f68:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8004f6a:	6762      	str	r2, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f6c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f70:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f74:	6822      	ldr	r2, [r4, #0]
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	2510      	movs	r5, #16
 8004f7a:	43ab      	bics	r3, r5
 8004f7c:	6013      	str	r3, [r2, #0]
 8004f7e:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f82:	2302      	movs	r3, #2
 8004f84:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f86:	0020      	movs	r0, r4
 8004f88:	f7fc fe30 	bl	8001bec <HAL_UARTEx_RxEventCallback>
 8004f8c:	e6d0      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	035b      	lsls	r3, r3, #13
 8004f92:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004f94:	0020      	movs	r0, r4
 8004f96:	f000 fbb3 	bl	8005700 <HAL_UARTEx_WakeupCallback>
    return;
 8004f9a:	e6c9      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
    if (huart->TxISR != NULL)
 8004f9c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d100      	bne.n	8004fa4 <HAL_UART_IRQHandler+0x2f4>
 8004fa2:	e6c5      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
      huart->TxISR(huart);
 8004fa4:	0020      	movs	r0, r4
 8004fa6:	4798      	blx	r3
 8004fa8:	e6c2      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
 8004faa:	46c0      	nop			; (mov r8, r8)
 8004fac:	0000080f 	.word	0x0000080f
 8004fb0:	10000001 	.word	0x10000001
 8004fb4:	04000120 	.word	0x04000120
 8004fb8:	08004c9b 	.word	0x08004c9b
 8004fbc:	fffffeff 	.word	0xfffffeff
 8004fc0:	fffffedf 	.word	0xfffffedf
 8004fc4:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fc8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004fd2:	6822      	ldr	r2, [r4, #0]
 8004fd4:	6813      	ldr	r3, [r2, #0]
 8004fd6:	2040      	movs	r0, #64	; 0x40
 8004fd8:	4383      	bics	r3, r0
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fe0:	2388      	movs	r3, #136	; 0x88
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	67a3      	str	r3, [r4, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fea:	0020      	movs	r0, r4
 8004fec:	f7ff fe28 	bl	8004c40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ff0:	e69e      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ff2:	0020      	movs	r0, r4
 8004ff4:	f000 fb86 	bl	8005704 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8004ff8:	e69a      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ffa:	0020      	movs	r0, r4
 8004ffc:	f000 fb81 	bl	8005702 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8005000:	e696      	b.n	8004d30 <HAL_UART_IRQHandler+0x80>
 8005002:	46c0      	nop			; (mov r8, r8)

08005004 <UART_DMARxHalfCplt>:
{
 8005004:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005006:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005008:	2301      	movs	r3, #1
 800500a:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800500e:	2b01      	cmp	r3, #1
 8005010:	d002      	beq.n	8005018 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8005012:	f7ff fe17 	bl	8004c44 <HAL_UART_RxHalfCpltCallback>
}
 8005016:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005018:	335b      	adds	r3, #91	; 0x5b
 800501a:	5ac1      	ldrh	r1, [r0, r3]
 800501c:	0849      	lsrs	r1, r1, #1
 800501e:	f7fc fde5 	bl	8001bec <HAL_UARTEx_RxEventCallback>
 8005022:	e7f8      	b.n	8005016 <UART_DMARxHalfCplt+0x12>

08005024 <UART_DMAReceiveCplt>:
{
 8005024:	b570      	push	{r4, r5, r6, lr}
 8005026:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005028:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	069b      	lsls	r3, r3, #26
 8005030:	d429      	bmi.n	8005086 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8005032:	235e      	movs	r3, #94	; 0x5e
 8005034:	2200      	movs	r2, #0
 8005036:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005038:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800503c:	3b5d      	subs	r3, #93	; 0x5d
 800503e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005042:	6801      	ldr	r1, [r0, #0]
 8005044:	680a      	ldr	r2, [r1, #0]
 8005046:	4d1c      	ldr	r5, [pc, #112]	; (80050b8 <UART_DMAReceiveCplt+0x94>)
 8005048:	402a      	ands	r2, r5
 800504a:	600a      	str	r2, [r1, #0]
 800504c:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005050:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005054:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005058:	6801      	ldr	r1, [r0, #0]
 800505a:	688a      	ldr	r2, [r1, #8]
 800505c:	439a      	bics	r2, r3
 800505e:	608a      	str	r2, [r1, #8]
 8005060:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005064:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005068:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506c:	6802      	ldr	r2, [r0, #0]
 800506e:	6893      	ldr	r3, [r2, #8]
 8005070:	2440      	movs	r4, #64	; 0x40
 8005072:	43a3      	bics	r3, r4
 8005074:	6093      	str	r3, [r2, #8]
 8005076:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 800507a:	238c      	movs	r3, #140	; 0x8c
 800507c:	2220      	movs	r2, #32
 800507e:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005080:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005082:	2b01      	cmp	r3, #1
 8005084:	d007      	beq.n	8005096 <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005086:	2300      	movs	r3, #0
 8005088:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800508a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d00e      	beq.n	80050ae <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8005090:	f7ff fdd7 	bl	8004c42 <HAL_UART_RxCpltCallback>
}
 8005094:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005096:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509a:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509e:	6802      	ldr	r2, [r0, #0]
 80050a0:	6813      	ldr	r3, [r2, #0]
 80050a2:	3c30      	subs	r4, #48	; 0x30
 80050a4:	43a3      	bics	r3, r4
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	f381 8810 	msr	PRIMASK, r1
}
 80050ac:	e7eb      	b.n	8005086 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ae:	335b      	adds	r3, #91	; 0x5b
 80050b0:	5ac1      	ldrh	r1, [r0, r3]
 80050b2:	f7fc fd9b 	bl	8001bec <HAL_UARTEx_RxEventCallback>
 80050b6:	e7ed      	b.n	8005094 <UART_DMAReceiveCplt+0x70>
 80050b8:	fffffeff 	.word	0xfffffeff

080050bc <UART_SetConfig>:
{
 80050bc:	b570      	push	{r4, r5, r6, lr}
 80050be:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050c0:	6801      	ldr	r1, [r0, #0]
 80050c2:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050c4:	6883      	ldr	r3, [r0, #8]
 80050c6:	6900      	ldr	r0, [r0, #16]
 80050c8:	4303      	orrs	r3, r0
 80050ca:	6960      	ldr	r0, [r4, #20]
 80050cc:	4303      	orrs	r3, r0
 80050ce:	69e0      	ldr	r0, [r4, #28]
 80050d0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050d2:	4852      	ldr	r0, [pc, #328]	; (800521c <UART_SetConfig+0x160>)
 80050d4:	4002      	ands	r2, r0
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050da:	6822      	ldr	r2, [r4, #0]
 80050dc:	6853      	ldr	r3, [r2, #4]
 80050de:	4950      	ldr	r1, [pc, #320]	; (8005220 <UART_SetConfig+0x164>)
 80050e0:	400b      	ands	r3, r1
 80050e2:	68e1      	ldr	r1, [r4, #12]
 80050e4:	430b      	orrs	r3, r1
 80050e6:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050e8:	6821      	ldr	r1, [r4, #0]
 80050ea:	688a      	ldr	r2, [r1, #8]
    tmpreg |= huart->Init.OneBitSampling;
 80050ec:	69a3      	ldr	r3, [r4, #24]
 80050ee:	6a20      	ldr	r0, [r4, #32]
 80050f0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050f2:	484c      	ldr	r0, [pc, #304]	; (8005224 <UART_SetConfig+0x168>)
 80050f4:	4002      	ands	r2, r0
 80050f6:	4313      	orrs	r3, r2
 80050f8:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80050fa:	6822      	ldr	r2, [r4, #0]
 80050fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80050fe:	210f      	movs	r1, #15
 8005100:	438b      	bics	r3, r1
 8005102:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005104:	430b      	orrs	r3, r1
 8005106:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005108:	6823      	ldr	r3, [r4, #0]
 800510a:	4a47      	ldr	r2, [pc, #284]	; (8005228 <UART_SetConfig+0x16c>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d00c      	beq.n	800512a <UART_SetConfig+0x6e>
 8005110:	4a46      	ldr	r2, [pc, #280]	; (800522c <UART_SetConfig+0x170>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005112:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005114:	4293      	cmp	r3, r2
 8005116:	d05a      	beq.n	80051ce <UART_SetConfig+0x112>
  huart->NbTxDataToProcess = 1;
 8005118:	2301      	movs	r3, #1
 800511a:	226a      	movs	r2, #106	; 0x6a
 800511c:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 800511e:	3a02      	subs	r2, #2
 8005120:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8005122:	2300      	movs	r3, #0
 8005124:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8005126:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8005128:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800512a:	4b41      	ldr	r3, [pc, #260]	; (8005230 <UART_SetConfig+0x174>)
 800512c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800512e:	2303      	movs	r3, #3
 8005130:	4013      	ands	r3, r2
 8005132:	2b02      	cmp	r3, #2
 8005134:	d03c      	beq.n	80051b0 <UART_SetConfig+0xf4>
 8005136:	d842      	bhi.n	80051be <UART_SetConfig+0x102>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00a      	beq.n	8005152 <UART_SetConfig+0x96>
 800513c:	2b01      	cmp	r3, #1
 800513e:	d144      	bne.n	80051ca <UART_SetConfig+0x10e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	021b      	lsls	r3, r3, #8
 8005144:	69e2      	ldr	r2, [r4, #28]
 8005146:	429a      	cmp	r2, r3
 8005148:	d12e      	bne.n	80051a8 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetSysClockFreq();
 800514a:	f7ff fa59 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 800514e:	0003      	movs	r3, r0
        break;
 8005150:	e007      	b.n	8005162 <UART_SetConfig+0xa6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005152:	2380      	movs	r3, #128	; 0x80
 8005154:	021b      	lsls	r3, r3, #8
 8005156:	69e2      	ldr	r2, [r4, #28]
 8005158:	429a      	cmp	r2, r3
 800515a:	d13d      	bne.n	80051d8 <UART_SetConfig+0x11c>
        pclk = HAL_RCC_GetPCLK1Freq();
 800515c:	f7ff fb7a 	bl	8004854 <HAL_RCC_GetPCLK1Freq>
 8005160:	0003      	movs	r3, r0
    if (pclk != 0U)
 8005162:	2000      	movs	r0, #0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d0d7      	beq.n	8005118 <UART_SetConfig+0x5c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005168:	6865      	ldr	r5, [r4, #4]
 800516a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800516c:	0052      	lsls	r2, r2, #1
 800516e:	4931      	ldr	r1, [pc, #196]	; (8005234 <UART_SetConfig+0x178>)
 8005170:	5a51      	ldrh	r1, [r2, r1]
 8005172:	0018      	movs	r0, r3
 8005174:	f7fa ffc4 	bl	8000100 <__udivsi3>
 8005178:	0040      	lsls	r0, r0, #1
 800517a:	086b      	lsrs	r3, r5, #1
 800517c:	18c0      	adds	r0, r0, r3
 800517e:	0029      	movs	r1, r5
 8005180:	f7fa ffbe 	bl	8000100 <__udivsi3>
 8005184:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005186:	0001      	movs	r1, r0
 8005188:	3910      	subs	r1, #16
 800518a:	4a2b      	ldr	r2, [pc, #172]	; (8005238 <UART_SetConfig+0x17c>)
        ret = HAL_ERROR;
 800518c:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800518e:	4291      	cmp	r1, r2
 8005190:	d8c2      	bhi.n	8005118 <UART_SetConfig+0x5c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005192:	4a2a      	ldr	r2, [pc, #168]	; (800523c <UART_SetConfig+0x180>)
 8005194:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 8005196:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005198:	071b      	lsls	r3, r3, #28
 800519a:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800519c:	4313      	orrs	r3, r2
 800519e:	60cb      	str	r3, [r1, #12]
 80051a0:	2000      	movs	r0, #0
 80051a2:	e7b9      	b.n	8005118 <UART_SetConfig+0x5c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051a4:	4b26      	ldr	r3, [pc, #152]	; (8005240 <UART_SetConfig+0x184>)
 80051a6:	e7df      	b.n	8005168 <UART_SetConfig+0xac>
        pclk = HAL_RCC_GetSysClockFreq();
 80051a8:	f7ff fa2a 	bl	8004600 <HAL_RCC_GetSysClockFreq>
 80051ac:	0002      	movs	r2, r0
        break;
 80051ae:	e016      	b.n	80051de <UART_SetConfig+0x122>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051b0:	2380      	movs	r3, #128	; 0x80
 80051b2:	021b      	lsls	r3, r3, #8
 80051b4:	69e2      	ldr	r2, [r4, #28]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d0f4      	beq.n	80051a4 <UART_SetConfig+0xe8>
        pclk = (uint32_t) HSI_VALUE;
 80051ba:	4a21      	ldr	r2, [pc, #132]	; (8005240 <UART_SetConfig+0x184>)
 80051bc:	e012      	b.n	80051e4 <UART_SetConfig+0x128>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051be:	69e3      	ldr	r3, [r4, #28]
 80051c0:	2280      	movs	r2, #128	; 0x80
 80051c2:	0212      	lsls	r2, r2, #8
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d0cf      	beq.n	8005168 <UART_SetConfig+0xac>
 80051c8:	e00c      	b.n	80051e4 <UART_SetConfig+0x128>
 80051ca:	2001      	movs	r0, #1
 80051cc:	e7a4      	b.n	8005118 <UART_SetConfig+0x5c>
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	021b      	lsls	r3, r3, #8
 80051d2:	69e2      	ldr	r2, [r4, #28]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d0c1      	beq.n	800515c <UART_SetConfig+0xa0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d8:	f7ff fb3c 	bl	8004854 <HAL_RCC_GetPCLK1Freq>
 80051dc:	0002      	movs	r2, r0
    if (pclk != 0U)
 80051de:	2000      	movs	r0, #0
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d099      	beq.n	8005118 <UART_SetConfig+0x5c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051e4:	6865      	ldr	r5, [r4, #4]
 80051e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4912      	ldr	r1, [pc, #72]	; (8005234 <UART_SetConfig+0x178>)
 80051ec:	5a59      	ldrh	r1, [r3, r1]
 80051ee:	0010      	movs	r0, r2
 80051f0:	f7fa ff86 	bl	8000100 <__udivsi3>
 80051f4:	086b      	lsrs	r3, r5, #1
 80051f6:	18c0      	adds	r0, r0, r3
 80051f8:	0029      	movs	r1, r5
 80051fa:	f7fa ff81 	bl	8000100 <__udivsi3>
 80051fe:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005200:	0001      	movs	r1, r0
 8005202:	3910      	subs	r1, #16
 8005204:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <UART_SetConfig+0x17c>)
        ret = HAL_ERROR;
 8005206:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005208:	4291      	cmp	r1, r2
 800520a:	d900      	bls.n	800520e <UART_SetConfig+0x152>
 800520c:	e784      	b.n	8005118 <UART_SetConfig+0x5c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	0c1b      	lsrs	r3, r3, #16
 8005214:	60d3      	str	r3, [r2, #12]
 8005216:	2000      	movs	r0, #0
 8005218:	e77e      	b.n	8005118 <UART_SetConfig+0x5c>
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	cfff69f3 	.word	0xcfff69f3
 8005220:	ffffcfff 	.word	0xffffcfff
 8005224:	11fff4ff 	.word	0x11fff4ff
 8005228:	40013800 	.word	0x40013800
 800522c:	40004400 	.word	0x40004400
 8005230:	40021000 	.word	0x40021000
 8005234:	080059c8 	.word	0x080059c8
 8005238:	0000ffef 	.word	0x0000ffef
 800523c:	0000fff0 	.word	0x0000fff0
 8005240:	00f42400 	.word	0x00f42400

08005244 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005244:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005246:	07db      	lsls	r3, r3, #31
 8005248:	d506      	bpl.n	8005258 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800524a:	6802      	ldr	r2, [r0, #0]
 800524c:	6853      	ldr	r3, [r2, #4]
 800524e:	492c      	ldr	r1, [pc, #176]	; (8005300 <UART_AdvFeatureConfig+0xbc>)
 8005250:	400b      	ands	r3, r1
 8005252:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005254:	430b      	orrs	r3, r1
 8005256:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005258:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800525a:	079b      	lsls	r3, r3, #30
 800525c:	d506      	bpl.n	800526c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800525e:	6802      	ldr	r2, [r0, #0]
 8005260:	6853      	ldr	r3, [r2, #4]
 8005262:	4928      	ldr	r1, [pc, #160]	; (8005304 <UART_AdvFeatureConfig+0xc0>)
 8005264:	400b      	ands	r3, r1
 8005266:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005268:	430b      	orrs	r3, r1
 800526a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800526c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800526e:	075b      	lsls	r3, r3, #29
 8005270:	d506      	bpl.n	8005280 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005272:	6802      	ldr	r2, [r0, #0]
 8005274:	6853      	ldr	r3, [r2, #4]
 8005276:	4924      	ldr	r1, [pc, #144]	; (8005308 <UART_AdvFeatureConfig+0xc4>)
 8005278:	400b      	ands	r3, r1
 800527a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800527c:	430b      	orrs	r3, r1
 800527e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005280:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005282:	071b      	lsls	r3, r3, #28
 8005284:	d506      	bpl.n	8005294 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005286:	6802      	ldr	r2, [r0, #0]
 8005288:	6853      	ldr	r3, [r2, #4]
 800528a:	4920      	ldr	r1, [pc, #128]	; (800530c <UART_AdvFeatureConfig+0xc8>)
 800528c:	400b      	ands	r3, r1
 800528e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005290:	430b      	orrs	r3, r1
 8005292:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005294:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005296:	06db      	lsls	r3, r3, #27
 8005298:	d506      	bpl.n	80052a8 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800529a:	6802      	ldr	r2, [r0, #0]
 800529c:	6893      	ldr	r3, [r2, #8]
 800529e:	491c      	ldr	r1, [pc, #112]	; (8005310 <UART_AdvFeatureConfig+0xcc>)
 80052a0:	400b      	ands	r3, r1
 80052a2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80052a4:	430b      	orrs	r3, r1
 80052a6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80052aa:	069b      	lsls	r3, r3, #26
 80052ac:	d506      	bpl.n	80052bc <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ae:	6802      	ldr	r2, [r0, #0]
 80052b0:	6893      	ldr	r3, [r2, #8]
 80052b2:	4918      	ldr	r1, [pc, #96]	; (8005314 <UART_AdvFeatureConfig+0xd0>)
 80052b4:	400b      	ands	r3, r1
 80052b6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80052b8:	430b      	orrs	r3, r1
 80052ba:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052bc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80052be:	065b      	lsls	r3, r3, #25
 80052c0:	d50b      	bpl.n	80052da <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c2:	6802      	ldr	r2, [r0, #0]
 80052c4:	6853      	ldr	r3, [r2, #4]
 80052c6:	4914      	ldr	r1, [pc, #80]	; (8005318 <UART_AdvFeatureConfig+0xd4>)
 80052c8:	400b      	ands	r3, r1
 80052ca:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	035b      	lsls	r3, r3, #13
 80052d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80052dc:	061b      	lsls	r3, r3, #24
 80052de:	d506      	bpl.n	80052ee <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052e0:	6802      	ldr	r2, [r0, #0]
 80052e2:	6853      	ldr	r3, [r2, #4]
 80052e4:	490d      	ldr	r1, [pc, #52]	; (800531c <UART_AdvFeatureConfig+0xd8>)
 80052e6:	400b      	ands	r3, r1
 80052e8:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80052ea:	430b      	orrs	r3, r1
 80052ec:	6053      	str	r3, [r2, #4]
}
 80052ee:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052f0:	6802      	ldr	r2, [r0, #0]
 80052f2:	6853      	ldr	r3, [r2, #4]
 80052f4:	490a      	ldr	r1, [pc, #40]	; (8005320 <UART_AdvFeatureConfig+0xdc>)
 80052f6:	400b      	ands	r3, r1
 80052f8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80052fa:	430b      	orrs	r3, r1
 80052fc:	6053      	str	r3, [r2, #4]
 80052fe:	e7ec      	b.n	80052da <UART_AdvFeatureConfig+0x96>
 8005300:	fffdffff 	.word	0xfffdffff
 8005304:	fffeffff 	.word	0xfffeffff
 8005308:	fffbffff 	.word	0xfffbffff
 800530c:	ffff7fff 	.word	0xffff7fff
 8005310:	ffffefff 	.word	0xffffefff
 8005314:	ffffdfff 	.word	0xffffdfff
 8005318:	ffefffff 	.word	0xffefffff
 800531c:	fff7ffff 	.word	0xfff7ffff
 8005320:	ff9fffff 	.word	0xff9fffff

08005324 <UART_WaitOnFlagUntilTimeout>:
{
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	46de      	mov	lr, fp
 8005328:	4657      	mov	r7, sl
 800532a:	464e      	mov	r6, r9
 800532c:	4645      	mov	r5, r8
 800532e:	b5e0      	push	{r5, r6, r7, lr}
 8005330:	4680      	mov	r8, r0
 8005332:	000d      	movs	r5, r1
 8005334:	0016      	movs	r6, r2
 8005336:	4699      	mov	r9, r3
 8005338:	9f0a      	ldr	r7, [sp, #40]	; 0x28
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800533a:	2304      	movs	r3, #4
 800533c:	469a      	mov	sl, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	469b      	mov	fp, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005344:	4643      	mov	r3, r8
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69dc      	ldr	r4, [r3, #28]
 800534a:	402c      	ands	r4, r5
 800534c:	1b64      	subs	r4, r4, r5
 800534e:	4262      	negs	r2, r4
 8005350:	4154      	adcs	r4, r2
 8005352:	42b4      	cmp	r4, r6
 8005354:	d15e      	bne.n	8005414 <UART_WaitOnFlagUntilTimeout+0xf0>
    if (Timeout != HAL_MAX_DELAY)
 8005356:	1c7a      	adds	r2, r7, #1
 8005358:	d0f6      	beq.n	8005348 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535a:	f7fd fb9b 	bl	8002a94 <HAL_GetTick>
 800535e:	464b      	mov	r3, r9
 8005360:	1ac0      	subs	r0, r0, r3
 8005362:	42b8      	cmp	r0, r7
 8005364:	d833      	bhi.n	80053ce <UART_WaitOnFlagUntilTimeout+0xaa>
 8005366:	2f00      	cmp	r7, #0
 8005368:	d031      	beq.n	80053ce <UART_WaitOnFlagUntilTimeout+0xaa>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800536a:	4643      	mov	r3, r8
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	4651      	mov	r1, sl
 8005372:	4211      	tst	r1, r2
 8005374:	d0e6      	beq.n	8005344 <UART_WaitOnFlagUntilTimeout+0x20>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	4659      	mov	r1, fp
 800537a:	420a      	tst	r2, r1
 800537c:	d0e2      	beq.n	8005344 <UART_WaitOnFlagUntilTimeout+0x20>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800537e:	2280      	movs	r2, #128	; 0x80
 8005380:	0112      	lsls	r2, r2, #4
 8005382:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005384:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005388:	2201      	movs	r2, #1
 800538a:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800538e:	4643      	mov	r3, r8
 8005390:	6819      	ldr	r1, [r3, #0]
 8005392:	680b      	ldr	r3, [r1, #0]
 8005394:	4c23      	ldr	r4, [pc, #140]	; (8005424 <UART_WaitOnFlagUntilTimeout+0x100>)
 8005396:	4023      	ands	r3, r4
 8005398:	600b      	str	r3, [r1, #0]
 800539a:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800539e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053a2:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a6:	4643      	mov	r3, r8
 80053a8:	6819      	ldr	r1, [r3, #0]
 80053aa:	688b      	ldr	r3, [r1, #8]
 80053ac:	4393      	bics	r3, r2
 80053ae:	608b      	str	r3, [r1, #8]
 80053b0:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 80053b4:	2320      	movs	r3, #32
 80053b6:	3287      	adds	r2, #135	; 0x87
 80053b8:	4641      	mov	r1, r8
 80053ba:	508b      	str	r3, [r1, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80053bc:	3204      	adds	r2, #4
 80053be:	508b      	str	r3, [r1, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053c0:	3204      	adds	r2, #4
 80053c2:	508b      	str	r3, [r1, r2]
          __HAL_UNLOCK(huart);
 80053c4:	3364      	adds	r3, #100	; 0x64
 80053c6:	2200      	movs	r2, #0
 80053c8:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 80053ca:	2003      	movs	r0, #3
 80053cc:	e023      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0xf2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ce:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d2:	2201      	movs	r2, #1
 80053d4:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053d8:	4643      	mov	r3, r8
 80053da:	6819      	ldr	r1, [r3, #0]
 80053dc:	680b      	ldr	r3, [r1, #0]
 80053de:	4c11      	ldr	r4, [pc, #68]	; (8005424 <UART_WaitOnFlagUntilTimeout+0x100>)
 80053e0:	4023      	ands	r3, r4
 80053e2:	600b      	str	r3, [r1, #0]
 80053e4:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053e8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ec:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f0:	4643      	mov	r3, r8
 80053f2:	6819      	ldr	r1, [r3, #0]
 80053f4:	688b      	ldr	r3, [r1, #8]
 80053f6:	4393      	bics	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
 80053fa:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 80053fe:	2320      	movs	r3, #32
 8005400:	3287      	adds	r2, #135	; 0x87
 8005402:	4641      	mov	r1, r8
 8005404:	508b      	str	r3, [r1, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005406:	3204      	adds	r2, #4
 8005408:	508b      	str	r3, [r1, r2]
        __HAL_UNLOCK(huart);
 800540a:	3364      	adds	r3, #100	; 0x64
 800540c:	2200      	movs	r2, #0
 800540e:	54ca      	strb	r2, [r1, r3]
        return HAL_TIMEOUT;
 8005410:	2003      	movs	r0, #3
 8005412:	e000      	b.n	8005416 <UART_WaitOnFlagUntilTimeout+0xf2>
  return HAL_OK;
 8005414:	2000      	movs	r0, #0
}
 8005416:	bcf0      	pop	{r4, r5, r6, r7}
 8005418:	46bb      	mov	fp, r7
 800541a:	46b2      	mov	sl, r6
 800541c:	46a9      	mov	r9, r5
 800541e:	46a0      	mov	r8, r4
 8005420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	fffffe5f 	.word	0xfffffe5f

08005428 <HAL_UART_Transmit>:
{
 8005428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800542a:	46ce      	mov	lr, r9
 800542c:	4647      	mov	r7, r8
 800542e:	b580      	push	{r7, lr}
 8005430:	b083      	sub	sp, #12
 8005432:	0004      	movs	r4, r0
 8005434:	000d      	movs	r5, r1
 8005436:	0016      	movs	r6, r2
 8005438:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800543a:	2388      	movs	r3, #136	; 0x88
 800543c:	58c3      	ldr	r3, [r0, r3]
 800543e:	2b20      	cmp	r3, #32
 8005440:	d15c      	bne.n	80054fc <HAL_UART_Transmit+0xd4>
    if ((pData == NULL) || (Size == 0U))
 8005442:	2900      	cmp	r1, #0
 8005444:	d060      	beq.n	8005508 <HAL_UART_Transmit+0xe0>
 8005446:	2a00      	cmp	r2, #0
 8005448:	d060      	beq.n	800550c <HAL_UART_Transmit+0xe4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	015b      	lsls	r3, r3, #5
 800544e:	6882      	ldr	r2, [r0, #8]
 8005450:	429a      	cmp	r2, r3
 8005452:	d104      	bne.n	800545e <HAL_UART_Transmit+0x36>
 8005454:	6903      	ldr	r3, [r0, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_UART_Transmit+0x36>
      if ((((uint32_t)pData) & 1U) != 0U)
 800545a:	07cb      	lsls	r3, r1, #31
 800545c:	d458      	bmi.n	8005510 <HAL_UART_Transmit+0xe8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800545e:	2390      	movs	r3, #144	; 0x90
 8005460:	2200      	movs	r2, #0
 8005462:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005464:	3b08      	subs	r3, #8
 8005466:	3221      	adds	r2, #33	; 0x21
 8005468:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 800546a:	f7fd fb13 	bl	8002a94 <HAL_GetTick>
 800546e:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8005470:	2354      	movs	r3, #84	; 0x54
 8005472:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 8005474:	3302      	adds	r3, #2
 8005476:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	015b      	lsls	r3, r3, #5
      pdata16bits = NULL;
 800547c:	2200      	movs	r2, #0
 800547e:	4691      	mov	r9, r2
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005480:	68a2      	ldr	r2, [r4, #8]
 8005482:	429a      	cmp	r2, r3
 8005484:	d006      	beq.n	8005494 <HAL_UART_Transmit+0x6c>
    while (huart->TxXferCount > 0U)
 8005486:	2356      	movs	r3, #86	; 0x56
 8005488:	5ae3      	ldrh	r3, [r4, r3]
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d028      	beq.n	80054e2 <HAL_UART_Transmit+0xba>
      huart->TxXferCount--;
 8005490:	2656      	movs	r6, #86	; 0x56
 8005492:	e016      	b.n	80054c2 <HAL_UART_Transmit+0x9a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005494:	6923      	ldr	r3, [r4, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f5      	bne.n	8005486 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 800549a:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 800549c:	2500      	movs	r5, #0
 800549e:	e7f2      	b.n	8005486 <HAL_UART_Transmit+0x5e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054a0:	6822      	ldr	r2, [r4, #0]
 80054a2:	464b      	mov	r3, r9
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	05db      	lsls	r3, r3, #23
 80054a8:	0ddb      	lsrs	r3, r3, #23
 80054aa:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80054ac:	2302      	movs	r3, #2
 80054ae:	469c      	mov	ip, r3
 80054b0:	44e1      	add	r9, ip
      huart->TxXferCount--;
 80054b2:	5ba2      	ldrh	r2, [r4, r6]
 80054b4:	3a01      	subs	r2, #1
 80054b6:	b292      	uxth	r2, r2
 80054b8:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 80054ba:	5ba3      	ldrh	r3, [r4, r6]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00f      	beq.n	80054e2 <HAL_UART_Transmit+0xba>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054c2:	9700      	str	r7, [sp, #0]
 80054c4:	4643      	mov	r3, r8
 80054c6:	2200      	movs	r2, #0
 80054c8:	2180      	movs	r1, #128	; 0x80
 80054ca:	0020      	movs	r0, r4
 80054cc:	f7ff ff2a 	bl	8005324 <UART_WaitOnFlagUntilTimeout>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	d11f      	bne.n	8005514 <HAL_UART_Transmit+0xec>
      if (pdata8bits == NULL)
 80054d4:	2d00      	cmp	r5, #0
 80054d6:	d0e3      	beq.n	80054a0 <HAL_UART_Transmit+0x78>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	782a      	ldrb	r2, [r5, #0]
 80054dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054de:	3501      	adds	r5, #1
 80054e0:	e7e7      	b.n	80054b2 <HAL_UART_Transmit+0x8a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054e2:	9700      	str	r7, [sp, #0]
 80054e4:	4643      	mov	r3, r8
 80054e6:	2200      	movs	r2, #0
 80054e8:	2140      	movs	r1, #64	; 0x40
 80054ea:	0020      	movs	r0, r4
 80054ec:	f7ff ff1a 	bl	8005324 <UART_WaitOnFlagUntilTimeout>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d111      	bne.n	8005518 <HAL_UART_Transmit+0xf0>
    huart->gState = HAL_UART_STATE_READY;
 80054f4:	2388      	movs	r3, #136	; 0x88
 80054f6:	2220      	movs	r2, #32
 80054f8:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 80054fa:	e000      	b.n	80054fe <HAL_UART_Transmit+0xd6>
    return HAL_BUSY;
 80054fc:	2002      	movs	r0, #2
}
 80054fe:	b003      	add	sp, #12
 8005500:	bcc0      	pop	{r6, r7}
 8005502:	46b9      	mov	r9, r7
 8005504:	46b0      	mov	r8, r6
 8005506:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8005508:	2001      	movs	r0, #1
 800550a:	e7f8      	b.n	80054fe <HAL_UART_Transmit+0xd6>
 800550c:	2001      	movs	r0, #1
 800550e:	e7f6      	b.n	80054fe <HAL_UART_Transmit+0xd6>
        return  HAL_ERROR;
 8005510:	2001      	movs	r0, #1
 8005512:	e7f4      	b.n	80054fe <HAL_UART_Transmit+0xd6>
        return HAL_TIMEOUT;
 8005514:	2003      	movs	r0, #3
 8005516:	e7f2      	b.n	80054fe <HAL_UART_Transmit+0xd6>
      return HAL_TIMEOUT;
 8005518:	2003      	movs	r0, #3
 800551a:	e7f0      	b.n	80054fe <HAL_UART_Transmit+0xd6>

0800551c <UART_CheckIdleState>:
{
 800551c:	b530      	push	{r4, r5, lr}
 800551e:	b083      	sub	sp, #12
 8005520:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005522:	2390      	movs	r3, #144	; 0x90
 8005524:	2200      	movs	r2, #0
 8005526:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8005528:	f7fd fab4 	bl	8002a94 <HAL_GetTick>
 800552c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800552e:	6822      	ldr	r2, [r4, #0]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	0713      	lsls	r3, r2, #28
 8005534:	d410      	bmi.n	8005558 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	075b      	lsls	r3, r3, #29
 800553c:	d419      	bmi.n	8005572 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800553e:	2320      	movs	r3, #32
 8005540:	2288      	movs	r2, #136	; 0x88
 8005542:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005544:	3204      	adds	r2, #4
 8005546:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005548:	2300      	movs	r3, #0
 800554a:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800554c:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800554e:	3a08      	subs	r2, #8
 8005550:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8005552:	2000      	movs	r0, #0
}
 8005554:	b003      	add	sp, #12
 8005556:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005558:	2180      	movs	r1, #128	; 0x80
 800555a:	4b0c      	ldr	r3, [pc, #48]	; (800558c <UART_CheckIdleState+0x70>)
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	0003      	movs	r3, r0
 8005560:	2200      	movs	r2, #0
 8005562:	0389      	lsls	r1, r1, #14
 8005564:	0020      	movs	r0, r4
 8005566:	f7ff fedd 	bl	8005324 <UART_WaitOnFlagUntilTimeout>
 800556a:	2800      	cmp	r0, #0
 800556c:	d0e3      	beq.n	8005536 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800556e:	2003      	movs	r0, #3
 8005570:	e7f0      	b.n	8005554 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	4b05      	ldr	r3, [pc, #20]	; (800558c <UART_CheckIdleState+0x70>)
 8005576:	9300      	str	r3, [sp, #0]
 8005578:	002b      	movs	r3, r5
 800557a:	2200      	movs	r2, #0
 800557c:	03c9      	lsls	r1, r1, #15
 800557e:	0020      	movs	r0, r4
 8005580:	f7ff fed0 	bl	8005324 <UART_WaitOnFlagUntilTimeout>
 8005584:	2800      	cmp	r0, #0
 8005586:	d0da      	beq.n	800553e <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8005588:	2003      	movs	r0, #3
 800558a:	e7e3      	b.n	8005554 <UART_CheckIdleState+0x38>
 800558c:	01ffffff 	.word	0x01ffffff

08005590 <HAL_UART_Init>:
{
 8005590:	b510      	push	{r4, lr}
 8005592:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8005594:	d030      	beq.n	80055f8 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8005596:	2388      	movs	r3, #136	; 0x88
 8005598:	58c3      	ldr	r3, [r0, r3]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d022      	beq.n	80055e4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 800559e:	2388      	movs	r3, #136	; 0x88
 80055a0:	2224      	movs	r2, #36	; 0x24
 80055a2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	6813      	ldr	r3, [r2, #0]
 80055a8:	2101      	movs	r1, #1
 80055aa:	438b      	bics	r3, r1
 80055ac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055ae:	0020      	movs	r0, r4
 80055b0:	f7ff fd84 	bl	80050bc <UART_SetConfig>
 80055b4:	2801      	cmp	r0, #1
 80055b6:	d014      	beq.n	80055e2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d118      	bne.n	80055f0 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	6853      	ldr	r3, [r2, #4]
 80055c2:	490e      	ldr	r1, [pc, #56]	; (80055fc <HAL_UART_Init+0x6c>)
 80055c4:	400b      	ands	r3, r1
 80055c6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055c8:	6822      	ldr	r2, [r4, #0]
 80055ca:	6893      	ldr	r3, [r2, #8]
 80055cc:	212a      	movs	r1, #42	; 0x2a
 80055ce:	438b      	bics	r3, r1
 80055d0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	6813      	ldr	r3, [r2, #0]
 80055d6:	3929      	subs	r1, #41	; 0x29
 80055d8:	430b      	orrs	r3, r1
 80055da:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80055dc:	0020      	movs	r0, r4
 80055de:	f7ff ff9d 	bl	800551c <UART_CheckIdleState>
}
 80055e2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80055e4:	3384      	adds	r3, #132	; 0x84
 80055e6:	2200      	movs	r2, #0
 80055e8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 80055ea:	f7fd f983 	bl	80028f4 <HAL_UART_MspInit>
 80055ee:	e7d6      	b.n	800559e <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 80055f0:	0020      	movs	r0, r4
 80055f2:	f7ff fe27 	bl	8005244 <UART_AdvFeatureConfig>
 80055f6:	e7e2      	b.n	80055be <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 80055f8:	2001      	movs	r0, #1
 80055fa:	e7f2      	b.n	80055e2 <HAL_UART_Init+0x52>
 80055fc:	ffffb7ff 	.word	0xffffb7ff

08005600 <UART_Start_Receive_DMA>:
{
 8005600:	b510      	push	{r4, lr}
 8005602:	0004      	movs	r4, r0
 8005604:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8005606:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8005608:	225c      	movs	r2, #92	; 0x5c
 800560a:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800560c:	3234      	adds	r2, #52	; 0x34
 800560e:	2100      	movs	r1, #0
 8005610:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005612:	3a04      	subs	r2, #4
 8005614:	3122      	adds	r1, #34	; 0x22
 8005616:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8005618:	3a0c      	subs	r2, #12
 800561a:	5882      	ldr	r2, [r0, r2]
 800561c:	2a00      	cmp	r2, #0
 800561e:	d013      	beq.n	8005648 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005620:	4921      	ldr	r1, [pc, #132]	; (80056a8 <UART_Start_Receive_DMA+0xa8>)
 8005622:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005624:	2280      	movs	r2, #128	; 0x80
 8005626:	5881      	ldr	r1, [r0, r2]
 8005628:	4820      	ldr	r0, [pc, #128]	; (80056ac <UART_Start_Receive_DMA+0xac>)
 800562a:	6308      	str	r0, [r1, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800562c:	58a1      	ldr	r1, [r4, r2]
 800562e:	4820      	ldr	r0, [pc, #128]	; (80056b0 <UART_Start_Receive_DMA+0xb0>)
 8005630:	6348      	str	r0, [r1, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8005632:	58a1      	ldr	r1, [r4, r2]
 8005634:	2000      	movs	r0, #0
 8005636:	6388      	str	r0, [r1, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005638:	6821      	ldr	r1, [r4, #0]
 800563a:	3124      	adds	r1, #36	; 0x24
 800563c:	58a0      	ldr	r0, [r4, r2]
 800563e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005640:	f7fd fec2 	bl	80033c8 <HAL_DMA_Start_IT>
 8005644:	2800      	cmp	r0, #0
 8005646:	d126      	bne.n	8005696 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800564e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005652:	2301      	movs	r3, #1
 8005654:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	6810      	ldr	r0, [r2, #0]
 800565c:	33ff      	adds	r3, #255	; 0xff
 800565e:	4303      	orrs	r3, r0
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005666:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	2301      	movs	r3, #1
 800566c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005670:	6821      	ldr	r1, [r4, #0]
 8005672:	688a      	ldr	r2, [r1, #8]
 8005674:	431a      	orrs	r2, r3
 8005676:	608a      	str	r2, [r1, #8]
 8005678:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800567c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005684:	6822      	ldr	r2, [r4, #0]
 8005686:	6893      	ldr	r3, [r2, #8]
 8005688:	2040      	movs	r0, #64	; 0x40
 800568a:	4303      	orrs	r3, r0
 800568c:	6093      	str	r3, [r2, #8]
 800568e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8005692:	2000      	movs	r0, #0
}
 8005694:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005696:	2390      	movs	r3, #144	; 0x90
 8005698:	2210      	movs	r2, #16
 800569a:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 800569c:	3b04      	subs	r3, #4
 800569e:	3210      	adds	r2, #16
 80056a0:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 80056a2:	2001      	movs	r0, #1
 80056a4:	e7f6      	b.n	8005694 <UART_Start_Receive_DMA+0x94>
 80056a6:	46c0      	nop			; (mov r8, r8)
 80056a8:	08005025 	.word	0x08005025
 80056ac:	08005005 	.word	0x08005005
 80056b0:	08004c49 	.word	0x08004c49

080056b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b6:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056b8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d105      	bne.n	80056ca <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 80056be:	3301      	adds	r3, #1
 80056c0:	226a      	movs	r2, #106	; 0x6a
 80056c2:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 80056c4:	3a02      	subs	r2, #2
 80056c6:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056ca:	6803      	ldr	r3, [r0, #0]
 80056cc:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056d2:	4f09      	ldr	r7, [pc, #36]	; (80056f8 <UARTEx_SetNbDataToProcess+0x44>)
 80056d4:	5cf8      	ldrb	r0, [r7, r3]
 80056d6:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80056d8:	4e08      	ldr	r6, [pc, #32]	; (80056fc <UARTEx_SetNbDataToProcess+0x48>)
 80056da:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80056dc:	f7fa fd9a 	bl	8000214 <__divsi3>
 80056e0:	236a      	movs	r3, #106	; 0x6a
 80056e2:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056e4:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056e6:	0f5b      	lsrs	r3, r3, #29
 80056e8:	5cf8      	ldrb	r0, [r7, r3]
 80056ea:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 80056ec:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80056ee:	f7fa fd91 	bl	8000214 <__divsi3>
 80056f2:	2368      	movs	r3, #104	; 0x68
 80056f4:	52e0      	strh	r0, [r4, r3]
}
 80056f6:	e7e7      	b.n	80056c8 <UARTEx_SetNbDataToProcess+0x14>
 80056f8:	080059e8 	.word	0x080059e8
 80056fc:	080059e0 	.word	0x080059e0

08005700 <HAL_UARTEx_WakeupCallback>:
}
 8005700:	4770      	bx	lr

08005702 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005702:	4770      	bx	lr

08005704 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005704:	4770      	bx	lr
	...

08005708 <HAL_UARTEx_DisableFifoMode>:
{
 8005708:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800570a:	2384      	movs	r3, #132	; 0x84
 800570c:	5cc3      	ldrb	r3, [r0, r3]
 800570e:	2b01      	cmp	r3, #1
 8005710:	d015      	beq.n	800573e <HAL_UARTEx_DisableFifoMode+0x36>
 8005712:	2484      	movs	r4, #132	; 0x84
 8005714:	2601      	movs	r6, #1
 8005716:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8005718:	2588      	movs	r5, #136	; 0x88
 800571a:	2324      	movs	r3, #36	; 0x24
 800571c:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800571e:	6802      	ldr	r2, [r0, #0]
 8005720:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005722:	6811      	ldr	r1, [r2, #0]
 8005724:	43b1      	bics	r1, r6
 8005726:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005728:	4a06      	ldr	r2, [pc, #24]	; (8005744 <HAL_UARTEx_DisableFifoMode+0x3c>)
 800572a:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800572c:	2200      	movs	r2, #0
 800572e:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005730:	6801      	ldr	r1, [r0, #0]
 8005732:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005734:	2320      	movs	r3, #32
 8005736:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8005738:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 800573a:	2000      	movs	r0, #0
}
 800573c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800573e:	2002      	movs	r0, #2
 8005740:	e7fc      	b.n	800573c <HAL_UARTEx_DisableFifoMode+0x34>
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	dfffffff 	.word	0xdfffffff

08005748 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	0004      	movs	r4, r0
 800574c:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 800574e:	2384      	movs	r3, #132	; 0x84
 8005750:	5cc3      	ldrb	r3, [r0, r3]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d01b      	beq.n	800578e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8005756:	2584      	movs	r5, #132	; 0x84
 8005758:	2001      	movs	r0, #1
 800575a:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 800575c:	2688      	movs	r6, #136	; 0x88
 800575e:	2324      	movs	r3, #36	; 0x24
 8005760:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005766:	6819      	ldr	r1, [r3, #0]
 8005768:	4381      	bics	r1, r0
 800576a:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	6883      	ldr	r3, [r0, #8]
 8005770:	00db      	lsls	r3, r3, #3
 8005772:	08d9      	lsrs	r1, r3, #3
 8005774:	4311      	orrs	r1, r2
 8005776:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005778:	0020      	movs	r0, r4
 800577a:	f7ff ff9b 	bl	80056b4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005782:	2320      	movs	r3, #32
 8005784:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8005786:	2300      	movs	r3, #0
 8005788:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800578a:	2000      	movs	r0, #0
}
 800578c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 800578e:	2002      	movs	r0, #2
 8005790:	e7fc      	b.n	800578c <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08005794 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005796:	0004      	movs	r4, r0
 8005798:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 800579a:	2284      	movs	r2, #132	; 0x84
 800579c:	5c82      	ldrb	r2, [r0, r2]
 800579e:	2a01      	cmp	r2, #1
 80057a0:	d01b      	beq.n	80057da <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80057a2:	2584      	movs	r5, #132	; 0x84
 80057a4:	2001      	movs	r0, #1
 80057a6:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80057a8:	2688      	movs	r6, #136	; 0x88
 80057aa:	2224      	movs	r2, #36	; 0x24
 80057ac:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057ae:	6822      	ldr	r2, [r4, #0]
 80057b0:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80057b2:	6811      	ldr	r1, [r2, #0]
 80057b4:	4381      	bics	r1, r0
 80057b6:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80057b8:	6822      	ldr	r2, [r4, #0]
 80057ba:	6891      	ldr	r1, [r2, #8]
 80057bc:	4808      	ldr	r0, [pc, #32]	; (80057e0 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 80057be:	4001      	ands	r1, r0
 80057c0:	4319      	orrs	r1, r3
 80057c2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80057c4:	0020      	movs	r0, r4
 80057c6:	f7ff ff75 	bl	80056b4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80057ce:	2320      	movs	r3, #32
 80057d0:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80057d2:	2300      	movs	r3, #0
 80057d4:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80057d6:	2000      	movs	r0, #0
}
 80057d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80057da:	2002      	movs	r0, #2
 80057dc:	e7fc      	b.n	80057d8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80057de:	46c0      	nop			; (mov r8, r8)
 80057e0:	f1ffffff 	.word	0xf1ffffff

080057e4 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 80057e4:	b510      	push	{r4, lr}
 80057e6:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80057e8:	238c      	movs	r3, #140	; 0x8c
 80057ea:	58c3      	ldr	r3, [r0, r3]
 80057ec:	2b20      	cmp	r3, #32
 80057ee:	d12b      	bne.n	8005848 <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d02b      	beq.n	800584c <HAL_UARTEx_ReceiveToIdle_DMA+0x68>
 80057f4:	2a00      	cmp	r2, #0
 80057f6:	d02b      	beq.n	8005850 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f8:	2380      	movs	r3, #128	; 0x80
 80057fa:	015b      	lsls	r3, r3, #5
 80057fc:	6880      	ldr	r0, [r0, #8]
 80057fe:	4298      	cmp	r0, r3
 8005800:	d105      	bne.n	800580e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
 8005802:	6923      	ldr	r3, [r4, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d102      	bne.n	800580e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
        return  HAL_ERROR;
 8005808:	2001      	movs	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800580a:	07cb      	lsls	r3, r1, #31
 800580c:	d41d      	bmi.n	800584a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800580e:	2301      	movs	r3, #1
 8005810:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005812:	2300      	movs	r3, #0
 8005814:	6723      	str	r3, [r4, #112]	; 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005816:	0020      	movs	r0, r4
 8005818:	f7ff fef2 	bl	8005600 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800581c:	2800      	cmp	r0, #0
 800581e:	d114      	bne.n	800584a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005820:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8005822:	2b01      	cmp	r3, #1
 8005824:	d001      	beq.n	800582a <HAL_UARTEx_ReceiveToIdle_DMA+0x46>
        status = HAL_ERROR;
 8005826:	2001      	movs	r0, #1
 8005828:	e00f      	b.n	800584a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	2110      	movs	r1, #16
 800582e:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005830:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005834:	2301      	movs	r3, #1
 8005836:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800583a:	6822      	ldr	r2, [r4, #0]
 800583c:	6813      	ldr	r3, [r2, #0]
 800583e:	430b      	orrs	r3, r1
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	f38c 8810 	msr	PRIMASK, ip
}
 8005846:	e000      	b.n	800584a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
    return HAL_BUSY;
 8005848:	2002      	movs	r0, #2
}
 800584a:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800584c:	2001      	movs	r0, #1
 800584e:	e7fc      	b.n	800584a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8005850:	2001      	movs	r0, #1
 8005852:	e7fa      	b.n	800584a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>

08005854 <__libc_init_array>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	2600      	movs	r6, #0
 8005858:	4d0c      	ldr	r5, [pc, #48]	; (800588c <__libc_init_array+0x38>)
 800585a:	4c0d      	ldr	r4, [pc, #52]	; (8005890 <__libc_init_array+0x3c>)
 800585c:	1b64      	subs	r4, r4, r5
 800585e:	10a4      	asrs	r4, r4, #2
 8005860:	42a6      	cmp	r6, r4
 8005862:	d109      	bne.n	8005878 <__libc_init_array+0x24>
 8005864:	2600      	movs	r6, #0
 8005866:	f000 f821 	bl	80058ac <_init>
 800586a:	4d0a      	ldr	r5, [pc, #40]	; (8005894 <__libc_init_array+0x40>)
 800586c:	4c0a      	ldr	r4, [pc, #40]	; (8005898 <__libc_init_array+0x44>)
 800586e:	1b64      	subs	r4, r4, r5
 8005870:	10a4      	asrs	r4, r4, #2
 8005872:	42a6      	cmp	r6, r4
 8005874:	d105      	bne.n	8005882 <__libc_init_array+0x2e>
 8005876:	bd70      	pop	{r4, r5, r6, pc}
 8005878:	00b3      	lsls	r3, r6, #2
 800587a:	58eb      	ldr	r3, [r5, r3]
 800587c:	4798      	blx	r3
 800587e:	3601      	adds	r6, #1
 8005880:	e7ee      	b.n	8005860 <__libc_init_array+0xc>
 8005882:	00b3      	lsls	r3, r6, #2
 8005884:	58eb      	ldr	r3, [r5, r3]
 8005886:	4798      	blx	r3
 8005888:	3601      	adds	r6, #1
 800588a:	e7f2      	b.n	8005872 <__libc_init_array+0x1e>
 800588c:	080059f0 	.word	0x080059f0
 8005890:	080059f0 	.word	0x080059f0
 8005894:	080059f0 	.word	0x080059f0
 8005898:	080059f4 	.word	0x080059f4

0800589c <memset>:
 800589c:	0003      	movs	r3, r0
 800589e:	1882      	adds	r2, r0, r2
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d100      	bne.n	80058a6 <memset+0xa>
 80058a4:	4770      	bx	lr
 80058a6:	7019      	strb	r1, [r3, #0]
 80058a8:	3301      	adds	r3, #1
 80058aa:	e7f9      	b.n	80058a0 <memset+0x4>

080058ac <_init>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr

080058b8 <_fini>:
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	46c0      	nop			; (mov r8, r8)
 80058bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058be:	bc08      	pop	{r3}
 80058c0:	469e      	mov	lr, r3
 80058c2:	4770      	bx	lr
