
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b04  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08003bbc  08003bbc  00013bbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d28  08003d28  000200c0  2**0
                  CONTENTS
  4 .ARM          00000000  08003d28  08003d28  000200c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d28  08003d28  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08003d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  200000c0  08003df0  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000328  08003df0  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c9d9  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039d4  00000000  00000000  0003cac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000136d8  00000000  00000000  00040495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011d8  00000000  00000000  00053b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010d0  00000000  00000000  00054d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000183b3  00000000  00000000  00055e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fb8c  00000000  00000000  0006e1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093423  00000000  00000000  0008dd57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012117a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003270  00000000  00000000  001211cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200000c0 	.word	0x200000c0
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003ba4 	.word	0x08003ba4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200000c4 	.word	0x200000c4
 80000fc:	08003ba4 	.word	0x08003ba4

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	; 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	; 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			; (mov r8, r8)

08000400 <SM_ChangeState>:
      }
   }
}
static void SM_ChangeState()
{
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8000400:	2300      	movs	r3, #0
 8000402:	e000      	b.n	8000406 <SM_ChangeState+0x6>
 8000404:	3301      	adds	r3, #1
 8000406:	2b08      	cmp	r3, #8
 8000408:	d818      	bhi.n	800043c <SM_ChangeState+0x3c>
   {
      if(SmPtr.State == TransitionTable[i].Source && SmPtr.NewEvent == TransitionTable[i].Event)
 800040a:	4a0e      	ldr	r2, [pc, #56]	; (8000444 <SM_ChangeState+0x44>)
 800040c:	7911      	ldrb	r1, [r2, #4]
 800040e:	005a      	lsls	r2, r3, #1
 8000410:	18d2      	adds	r2, r2, r3
 8000412:	480d      	ldr	r0, [pc, #52]	; (8000448 <SM_ChangeState+0x48>)
 8000414:	5c12      	ldrb	r2, [r2, r0]
 8000416:	4291      	cmp	r1, r2
 8000418:	d1f4      	bne.n	8000404 <SM_ChangeState+0x4>
 800041a:	4a0a      	ldr	r2, [pc, #40]	; (8000444 <SM_ChangeState+0x44>)
 800041c:	7950      	ldrb	r0, [r2, #5]
 800041e:	0059      	lsls	r1, r3, #1
 8000420:	18c9      	adds	r1, r1, r3
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <SM_ChangeState+0x48>)
 8000424:	1852      	adds	r2, r2, r1
 8000426:	7892      	ldrb	r2, [r2, #2]
 8000428:	4290      	cmp	r0, r2
 800042a:	d1eb      	bne.n	8000404 <SM_ChangeState+0x4>
      {
         SmPtr.State = TransitionTable[i].Destination;
 800042c:	0059      	lsls	r1, r3, #1
 800042e:	18c9      	adds	r1, r1, r3
 8000430:	4a05      	ldr	r2, [pc, #20]	; (8000448 <SM_ChangeState+0x48>)
 8000432:	1852      	adds	r2, r2, r1
 8000434:	7851      	ldrb	r1, [r2, #1]
 8000436:	4a03      	ldr	r2, [pc, #12]	; (8000444 <SM_ChangeState+0x44>)
 8000438:	7111      	strb	r1, [r2, #4]
 800043a:	e7e3      	b.n	8000404 <SM_ChangeState+0x4>
      }
   }
   SmPtr.NewEvent = SM_EVENT_NOTHING;
 800043c:	4b01      	ldr	r3, [pc, #4]	; (8000444 <SM_ChangeState+0x44>)
 800043e:	2200      	movs	r2, #0
 8000440:	715a      	strb	r2, [r3, #5]
}
 8000442:	4770      	bx	lr
 8000444:	200000e8 	.word	0x200000e8
 8000448:	20000034 	.word	0x20000034

0800044c <SM_DebugFunction>:
   SmPtr.UartFlag = LS_NO_UART_RECIVE;
   SmPtr.NewEvent = SM_EVENT_END_SLEEP;
}
static void SM_DebugFunction()
{
}
 800044c:	4770      	bx	lr

0800044e <SM_ErrorFunction>:
static void SM_ErrorFunction()
{
}
 800044e:	4770      	bx	lr

08000450 <SM_ParseUartFunction>:
{
 8000450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   for(int i = 0; i < 3; i++)
 8000452:	2400      	movs	r4, #0
 8000454:	e012      	b.n	800047c <SM_ParseUartFunction+0x2c>
      for(int j = 0; j < SizeUartData; j++)
 8000456:	3301      	adds	r3, #1
 8000458:	4a36      	ldr	r2, [pc, #216]	; (8000534 <SM_ParseUartFunction+0xe4>)
 800045a:	7812      	ldrb	r2, [r2, #0]
 800045c:	429a      	cmp	r2, r3
 800045e:	dd09      	ble.n	8000474 <SM_ParseUartFunction+0x24>
         if(data[j] != LsCommands[i].Commands[j])
 8000460:	4a35      	ldr	r2, [pc, #212]	; (8000538 <SM_ParseUartFunction+0xe8>)
 8000462:	5cd1      	ldrb	r1, [r2, r3]
 8000464:	00e2      	lsls	r2, r4, #3
 8000466:	4835      	ldr	r0, [pc, #212]	; (800053c <SM_ParseUartFunction+0xec>)
 8000468:	5812      	ldr	r2, [r2, r0]
 800046a:	5cd2      	ldrb	r2, [r2, r3]
 800046c:	4291      	cmp	r1, r2
 800046e:	d0f2      	beq.n	8000456 <SM_ParseUartFunction+0x6>
            Parse = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	e000      	b.n	8000476 <SM_ParseUartFunction+0x26>
      Parse = 1;
 8000474:	2301      	movs	r3, #1
      if(Parse == 1)
 8000476:	2b01      	cmp	r3, #1
 8000478:	d004      	beq.n	8000484 <SM_ParseUartFunction+0x34>
   for(int i = 0; i < 3; i++)
 800047a:	3401      	adds	r4, #1
 800047c:	2c02      	cmp	r4, #2
 800047e:	dc03      	bgt.n	8000488 <SM_ParseUartFunction+0x38>
      for(int j = 0; j < SizeUartData; j++)
 8000480:	2300      	movs	r3, #0
 8000482:	e7e9      	b.n	8000458 <SM_ParseUartFunction+0x8>
         Command = i;
 8000484:	b2e4      	uxtb	r4, r4
         break;
 8000486:	e000      	b.n	800048a <SM_ParseUartFunction+0x3a>
   uint8_t Command = 255;
 8000488:	24ff      	movs	r4, #255	; 0xff
   switch(Command)
 800048a:	0025      	movs	r5, r4
 800048c:	2c01      	cmp	r4, #1
 800048e:	d02f      	beq.n	80004f0 <SM_ParseUartFunction+0xa0>
 8000490:	2c02      	cmp	r4, #2
 8000492:	d033      	beq.n	80004fc <SM_ParseUartFunction+0xac>
 8000494:	2c00      	cmp	r4, #0
 8000496:	d027      	beq.n	80004e8 <SM_ParseUartFunction+0x98>
   if(Command != 255)
 8000498:	2cff      	cmp	r4, #255	; 0xff
 800049a:	d035      	beq.n	8000508 <SM_ParseUartFunction+0xb8>
      HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 800049c:	2680      	movs	r6, #128	; 0x80
 800049e:	01b6      	lsls	r6, r6, #6
 80004a0:	24a0      	movs	r4, #160	; 0xa0
 80004a2:	05e4      	lsls	r4, r4, #23
 80004a4:	2201      	movs	r2, #1
 80004a6:	0031      	movs	r1, r6
 80004a8:	0020      	movs	r0, r4
 80004aa:	f000 ffb3 	bl	8001414 <HAL_GPIO_WritePin>
      HAL_UART_Transmit(&huart1, (uint8_t *)LsCommands[Command].Commands, LsCommands[Command].SizeCommands, 1000);
 80004ae:	4a23      	ldr	r2, [pc, #140]	; (800053c <SM_ParseUartFunction+0xec>)
 80004b0:	00eb      	lsls	r3, r5, #3
 80004b2:	5899      	ldr	r1, [r3, r2]
 80004b4:	27fa      	movs	r7, #250	; 0xfa
 80004b6:	00bf      	lsls	r7, r7, #2
 80004b8:	18d3      	adds	r3, r2, r3
 80004ba:	889a      	ldrh	r2, [r3, #4]
 80004bc:	4d20      	ldr	r5, [pc, #128]	; (8000540 <SM_ParseUartFunction+0xf0>)
 80004be:	003b      	movs	r3, r7
 80004c0:	0028      	movs	r0, r5
 80004c2:	f002 fcbb 	bl	8002e3c <HAL_UART_Transmit>
      HAL_UART_Transmit(&huart1, (uint8_t *)LS_STATUS_OK, sizeof(LS_STATUS_OK) - 1, 1000);
 80004c6:	003b      	movs	r3, r7
 80004c8:	2206      	movs	r2, #6
 80004ca:	491e      	ldr	r1, [pc, #120]	; (8000544 <SM_ParseUartFunction+0xf4>)
 80004cc:	0028      	movs	r0, r5
 80004ce:	f002 fcb5 	bl	8002e3c <HAL_UART_Transmit>
      HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 80004d2:	2200      	movs	r2, #0
 80004d4:	0031      	movs	r1, r6
 80004d6:	0020      	movs	r0, r4
 80004d8:	f000 ff9c 	bl	8001414 <HAL_GPIO_WritePin>
   SmPtr.UartFlag = LS_NO_UART_RECIVE;
 80004dc:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <SM_ParseUartFunction+0xf8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	71da      	strb	r2, [r3, #7]
   SmPtr.NewEvent = SM_EVENT_END_SLEEP;
 80004e2:	3204      	adds	r2, #4
 80004e4:	715a      	strb	r2, [r3, #5]
}
 80004e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         SmPtr.NewEvent = SM_EVENT_END_SLEEP;
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <SM_ParseUartFunction+0xf8>)
 80004ea:	2204      	movs	r2, #4
 80004ec:	715a      	strb	r2, [r3, #5]
         break;
 80004ee:	e7d3      	b.n	8000498 <SM_ParseUartFunction+0x48>
         SmPtr.DebugFlag = LS_DEBUG_COMMUNICATION;
 80004f0:	4b15      	ldr	r3, [pc, #84]	; (8000548 <SM_ParseUartFunction+0xf8>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	719a      	strb	r2, [r3, #6]
         SmPtr.NewEvent  = SM_EVENT_END_SLEEP;
 80004f6:	3203      	adds	r2, #3
 80004f8:	715a      	strb	r2, [r3, #5]
         break;
 80004fa:	e7cd      	b.n	8000498 <SM_ParseUartFunction+0x48>
         SmPtr.DebugFlag = LS_NO_DEBUG;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <SM_ParseUartFunction+0xf8>)
 80004fe:	2200      	movs	r2, #0
 8000500:	719a      	strb	r2, [r3, #6]
         SmPtr.NewEvent  = SM_EVENT_END_SLEEP;
 8000502:	3204      	adds	r2, #4
 8000504:	715a      	strb	r2, [r3, #5]
         break;
 8000506:	e7c7      	b.n	8000498 <SM_ParseUartFunction+0x48>
      HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 8000508:	2580      	movs	r5, #128	; 0x80
 800050a:	01ad      	lsls	r5, r5, #6
 800050c:	24a0      	movs	r4, #160	; 0xa0
 800050e:	05e4      	lsls	r4, r4, #23
 8000510:	2201      	movs	r2, #1
 8000512:	0029      	movs	r1, r5
 8000514:	0020      	movs	r0, r4
 8000516:	f000 ff7d 	bl	8001414 <HAL_GPIO_WritePin>
      HAL_UART_Transmit(&huart1, (uint8_t *)LS_STATUS_ERROR, sizeof(LS_STATUS_ERROR) - 1, 1000);
 800051a:	23fa      	movs	r3, #250	; 0xfa
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	2209      	movs	r2, #9
 8000520:	490a      	ldr	r1, [pc, #40]	; (800054c <SM_ParseUartFunction+0xfc>)
 8000522:	4807      	ldr	r0, [pc, #28]	; (8000540 <SM_ParseUartFunction+0xf0>)
 8000524:	f002 fc8a 	bl	8002e3c <HAL_UART_Transmit>
      HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 8000528:	2200      	movs	r2, #0
 800052a:	0029      	movs	r1, r5
 800052c:	0020      	movs	r0, r4
 800052e:	f000 ff71 	bl	8001414 <HAL_GPIO_WritePin>
 8000532:	e7d3      	b.n	80004dc <SM_ParseUartFunction+0x8c>
 8000534:	200000e4 	.word	0x200000e4
 8000538:	200000f0 	.word	0x200000f0
 800053c:	2000001c 	.word	0x2000001c
 8000540:	20000280 	.word	0x20000280
 8000544:	08003bbc 	.word	0x08003bbc
 8000548:	200000e8 	.word	0x200000e8
 800054c:	08003bc4 	.word	0x08003bc4

08000550 <SM_WaitForMeasurmentIsFinished>:
{
 8000550:	b570      	push	{r4, r5, r6, lr}
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 8000552:	2580      	movs	r5, #128	; 0x80
 8000554:	01ad      	lsls	r5, r5, #6
 8000556:	24a0      	movs	r4, #160	; 0xa0
 8000558:	05e4      	lsls	r4, r4, #23
 800055a:	2201      	movs	r2, #1
 800055c:	0029      	movs	r1, r5
 800055e:	0020      	movs	r0, r4
 8000560:	f000 ff58 	bl	8001414 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(&huart1, (uint8_t *)STATE_ID_WAIT_FOR_MEASURMENT_IS_FINISHED, sizeof(STATE_ID_WAIT_FOR_MEASURMENT_IS_FINISHED) - 1, 1000);
 8000564:	23fa      	movs	r3, #250	; 0xfa
 8000566:	009b      	lsls	r3, r3, #2
 8000568:	2226      	movs	r2, #38	; 0x26
 800056a:	490a      	ldr	r1, [pc, #40]	; (8000594 <SM_WaitForMeasurmentIsFinished+0x44>)
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <SM_WaitForMeasurmentIsFinished+0x48>)
 800056e:	f002 fc65 	bl	8002e3c <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 8000572:	2200      	movs	r2, #0
 8000574:	0029      	movs	r1, r5
 8000576:	0020      	movs	r0, r4
 8000578:	f000 ff4c 	bl	8001414 <HAL_GPIO_WritePin>
   if(SmPtr.UartFlag == LS_NO_UART_RECIVE)
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <SM_WaitForMeasurmentIsFinished+0x4c>)
 800057e:	79db      	ldrb	r3, [r3, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d103      	bne.n	800058c <SM_WaitForMeasurmentIsFinished+0x3c>
      SmPtr.NewEvent = SM_EVENT_END_RUNNING;
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <SM_WaitForMeasurmentIsFinished+0x4c>)
 8000586:	2203      	movs	r2, #3
 8000588:	715a      	strb	r2, [r3, #5]
}
 800058a:	bd70      	pop	{r4, r5, r6, pc}
      SmPtr.NewEvent = SM_EVENT_UART;
 800058c:	4b03      	ldr	r3, [pc, #12]	; (800059c <SM_WaitForMeasurmentIsFinished+0x4c>)
 800058e:	2205      	movs	r2, #5
 8000590:	715a      	strb	r2, [r3, #5]
}
 8000592:	e7fa      	b.n	800058a <SM_WaitForMeasurmentIsFinished+0x3a>
 8000594:	08003bd0 	.word	0x08003bd0
 8000598:	20000280 	.word	0x20000280
 800059c:	200000e8 	.word	0x200000e8

080005a0 <SM_RunningFunction>:
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 80005a2:	2580      	movs	r5, #128	; 0x80
 80005a4:	01ad      	lsls	r5, r5, #6
 80005a6:	24a0      	movs	r4, #160	; 0xa0
 80005a8:	05e4      	lsls	r4, r4, #23
 80005aa:	2201      	movs	r2, #1
 80005ac:	0029      	movs	r1, r5
 80005ae:	0020      	movs	r0, r4
 80005b0:	f000 ff30 	bl	8001414 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(&huart1, (uint8_t *)STATE_ID_RUNNING, sizeof(STATE_ID_RUNNING) - 1, 1000);
 80005b4:	23fa      	movs	r3, #250	; 0xfa
 80005b6:	009b      	lsls	r3, r3, #2
 80005b8:	220e      	movs	r2, #14
 80005ba:	490a      	ldr	r1, [pc, #40]	; (80005e4 <SM_RunningFunction+0x44>)
 80005bc:	480a      	ldr	r0, [pc, #40]	; (80005e8 <SM_RunningFunction+0x48>)
 80005be:	f002 fc3d 	bl	8002e3c <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 80005c2:	2200      	movs	r2, #0
 80005c4:	0029      	movs	r1, r5
 80005c6:	0020      	movs	r0, r4
 80005c8:	f000 ff24 	bl	8001414 <HAL_GPIO_WritePin>
   if(SmPtr.UartFlag == LS_NO_UART_RECIVE)
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <SM_RunningFunction+0x4c>)
 80005ce:	79db      	ldrb	r3, [r3, #7]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d103      	bne.n	80005dc <SM_RunningFunction+0x3c>
      SmPtr.NewEvent = SM_EVENT_START_CONVESION;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <SM_RunningFunction+0x4c>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	715a      	strb	r2, [r3, #5]
}
 80005da:	bd70      	pop	{r4, r5, r6, pc}
      SmPtr.NewEvent = SM_EVENT_UART;
 80005dc:	4b03      	ldr	r3, [pc, #12]	; (80005ec <SM_RunningFunction+0x4c>)
 80005de:	2205      	movs	r2, #5
 80005e0:	715a      	strb	r2, [r3, #5]
}
 80005e2:	e7fa      	b.n	80005da <SM_RunningFunction+0x3a>
 80005e4:	08003bf8 	.word	0x08003bf8
 80005e8:	20000280 	.word	0x20000280
 80005ec:	200000e8 	.word	0x200000e8

080005f0 <SM_SleppFunction>:
{
 80005f0:	b570      	push	{r4, r5, r6, lr}
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 80005f2:	2580      	movs	r5, #128	; 0x80
 80005f4:	01ad      	lsls	r5, r5, #6
 80005f6:	24a0      	movs	r4, #160	; 0xa0
 80005f8:	05e4      	lsls	r4, r4, #23
 80005fa:	2201      	movs	r2, #1
 80005fc:	0029      	movs	r1, r5
 80005fe:	0020      	movs	r0, r4
 8000600:	f000 ff08 	bl	8001414 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(&huart1, (uint8_t *)STATE_ID_SLEEP, sizeof(STATE_ID_SLEEP) - 1, 1000);
 8000604:	23fa      	movs	r3, #250	; 0xfa
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	220c      	movs	r2, #12
 800060a:	490e      	ldr	r1, [pc, #56]	; (8000644 <SM_SleppFunction+0x54>)
 800060c:	480e      	ldr	r0, [pc, #56]	; (8000648 <SM_SleppFunction+0x58>)
 800060e:	f002 fc15 	bl	8002e3c <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 8000612:	2200      	movs	r2, #0
 8000614:	0029      	movs	r1, r5
 8000616:	0020      	movs	r0, r4
 8000618:	f000 fefc 	bl	8001414 <HAL_GPIO_WritePin>
   HAL_SuspendTick();
 800061c:	f000 fbf6 	bl	8000e0c <HAL_SuspendTick>
   HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000620:	2101      	movs	r1, #1
 8000622:	2000      	movs	r0, #0
 8000624:	f001 f9a0 	bl	8001968 <HAL_PWR_EnterSLEEPMode>
   HAL_ResumeTick();
 8000628:	f000 fbf8 	bl	8000e1c <HAL_ResumeTick>
   if(SmPtr.UartFlag == LS_NO_UART_RECIVE)
 800062c:	4b07      	ldr	r3, [pc, #28]	; (800064c <SM_SleppFunction+0x5c>)
 800062e:	79db      	ldrb	r3, [r3, #7]
 8000630:	2b00      	cmp	r3, #0
 8000632:	d103      	bne.n	800063c <SM_SleppFunction+0x4c>
      SmPtr.NewEvent = SM_EVENT_END_SLEEP;
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <SM_SleppFunction+0x5c>)
 8000636:	2204      	movs	r2, #4
 8000638:	715a      	strb	r2, [r3, #5]
}
 800063a:	bd70      	pop	{r4, r5, r6, pc}
      SmPtr.NewEvent = SM_EVENT_UART;
 800063c:	4b03      	ldr	r3, [pc, #12]	; (800064c <SM_SleppFunction+0x5c>)
 800063e:	2205      	movs	r2, #5
 8000640:	715a      	strb	r2, [r3, #5]
}
 8000642:	e7fa      	b.n	800063a <SM_SleppFunction+0x4a>
 8000644:	08003c08 	.word	0x08003c08
 8000648:	20000280 	.word	0x20000280
 800064c:	200000e8 	.word	0x200000e8

08000650 <SM_InitializeFunction>:
{
 8000650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bh1750_Init(&Bh, &hi2c2, 35, One_Time_H_Resolution_Mode);
 8000652:	2320      	movs	r3, #32
 8000654:	2223      	movs	r2, #35	; 0x23
 8000656:	4915      	ldr	r1, [pc, #84]	; (80006ac <SM_InitializeFunction+0x5c>)
 8000658:	4815      	ldr	r0, [pc, #84]	; (80006b0 <SM_InitializeFunction+0x60>)
 800065a:	f000 f8cb 	bl	80007f4 <bh1750_Init>
   SmPtr.DebugFlag = LS_NO_DEBUG;
 800065e:	4e15      	ldr	r6, [pc, #84]	; (80006b4 <SM_InitializeFunction+0x64>)
 8000660:	2300      	movs	r3, #0
 8000662:	71b3      	strb	r3, [r6, #6]
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 8000664:	2580      	movs	r5, #128	; 0x80
 8000666:	01ad      	lsls	r5, r5, #6
 8000668:	24a0      	movs	r4, #160	; 0xa0
 800066a:	05e4      	lsls	r4, r4, #23
 800066c:	2200      	movs	r2, #0
 800066e:	0029      	movs	r1, r5
 8000670:	0020      	movs	r0, r4
 8000672:	f000 fecf 	bl	8001414 <HAL_GPIO_WritePin>
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, data, 100);
 8000676:	4f10      	ldr	r7, [pc, #64]	; (80006b8 <SM_InitializeFunction+0x68>)
 8000678:	2264      	movs	r2, #100	; 0x64
 800067a:	4910      	ldr	r1, [pc, #64]	; (80006bc <SM_InitializeFunction+0x6c>)
 800067c:	0038      	movs	r0, r7
 800067e:	f002 fdbb 	bl	80031f8 <HAL_UARTEx_ReceiveToIdle_DMA>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 8000682:	2201      	movs	r2, #1
 8000684:	0029      	movs	r1, r5
 8000686:	0020      	movs	r0, r4
 8000688:	f000 fec4 	bl	8001414 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(&huart1, (uint8_t *)INITIALIZED_COMPLETE, sizeof(INITIALIZED_COMPLETE) - 1, 1000);
 800068c:	23fa      	movs	r3, #250	; 0xfa
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	2216      	movs	r2, #22
 8000692:	490b      	ldr	r1, [pc, #44]	; (80006c0 <SM_InitializeFunction+0x70>)
 8000694:	0038      	movs	r0, r7
 8000696:	f002 fbd1 	bl	8002e3c <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 800069a:	2200      	movs	r2, #0
 800069c:	0029      	movs	r1, r5
 800069e:	0020      	movs	r0, r4
 80006a0:	f000 feb8 	bl	8001414 <HAL_GPIO_WritePin>
   SmPtr.NewEvent = SM_EVENT_INITIALIZE_OK;
 80006a4:	2301      	movs	r3, #1
 80006a6:	7173      	strb	r3, [r6, #5]
}
 80006a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	20000154 	.word	0x20000154
 80006b0:	200000dc 	.word	0x200000dc
 80006b4:	200000e8 	.word	0x200000e8
 80006b8:	20000280 	.word	0x20000280
 80006bc:	200000f0 	.word	0x200000f0
 80006c0:	08003c18 	.word	0x08003c18

080006c4 <SM_MainFunction>:
{
 80006c4:	b510      	push	{r4, lr}
   if(HAL_GetTick() - SmPtr.LastTick > 1000)
 80006c6:	f000 fb89 	bl	8000ddc <HAL_GetTick>
 80006ca:	4b0b      	ldr	r3, [pc, #44]	; (80006f8 <SM_MainFunction+0x34>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	1ac0      	subs	r0, r0, r3
 80006d0:	23fa      	movs	r3, #250	; 0xfa
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	4298      	cmp	r0, r3
 80006d6:	d800      	bhi.n	80006da <SM_MainFunction+0x16>
}
 80006d8:	bd10      	pop	{r4, pc}
      SM_ChangeState();
 80006da:	f7ff fe91 	bl	8000400 <SM_ChangeState>
      SmPtr.LastTick = HAL_GetTick();
 80006de:	f000 fb7d 	bl	8000ddc <HAL_GetTick>
 80006e2:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <SM_MainFunction+0x34>)
 80006e4:	6018      	str	r0, [r3, #0]
      if(Function[SmPtr.State].SmFunction != NULL)
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <SM_MainFunction+0x38>)
 80006ec:	589b      	ldr	r3, [r3, r2]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d0f2      	beq.n	80006d8 <SM_MainFunction+0x14>
         Function[SmPtr.State].SmFunction();
 80006f2:	4798      	blx	r3
}
 80006f4:	e7f0      	b.n	80006d8 <SM_MainFunction+0x14>
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	200000e8 	.word	0x200000e8
 80006fc:	20000000 	.word	0x20000000

08000700 <HAL_UARTEx_RxEventCallback>:
#ifndef DEBUG_SWDIO
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000702:	46ce      	mov	lr, r9
 8000704:	4647      	mov	r7, r8
 8000706:	b580      	push	{r7, lr}
 8000708:	b087      	sub	sp, #28
 800070a:	0004      	movs	r4, r0
 800070c:	000d      	movs	r5, r1
   if(SmPtr.DebugFlag == LS_DEBUG_COMMUNICATION)
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <HAL_UARTEx_RxEventCallback+0x94>)
 8000710:	799b      	ldrb	r3, [r3, #6]
 8000712:	2b01      	cmp	r3, #1
 8000714:	d00e      	beq.n	8000734 <HAL_UARTEx_RxEventCallback+0x34>
      SizeUartData   = Size;
      SmPtr.UartFlag = LS_UART_RECIVE;
   }
   else
   {
      SizeUartData   = Size;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <HAL_UARTEx_RxEventCallback+0x98>)
 8000718:	7019      	strb	r1, [r3, #0]
      SmPtr.UartFlag = LS_UART_RECIVE;
 800071a:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <HAL_UARTEx_RxEventCallback+0x94>)
 800071c:	2201      	movs	r2, #1
 800071e:	71da      	strb	r2, [r3, #7]
      HAL_UARTEx_ReceiveToIdle_DMA(huart, data, 1000);
 8000720:	32f9      	adds	r2, #249	; 0xf9
 8000722:	0092      	lsls	r2, r2, #2
 8000724:	491d      	ldr	r1, [pc, #116]	; (800079c <HAL_UARTEx_RxEventCallback+0x9c>)
 8000726:	f002 fd67 	bl	80031f8 <HAL_UARTEx_ReceiveToIdle_DMA>
   }
}
 800072a:	b007      	add	sp, #28
 800072c:	bcc0      	pop	{r6, r7}
 800072e:	46b9      	mov	r9, r7
 8000730:	46b0      	mov	r8, r6
 8000732:	bdf0      	pop	{r4, r5, r6, r7, pc}
      HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 8000734:	2380      	movs	r3, #128	; 0x80
 8000736:	019b      	lsls	r3, r3, #6
 8000738:	4699      	mov	r9, r3
 800073a:	23a0      	movs	r3, #160	; 0xa0
 800073c:	05db      	lsls	r3, r3, #23
 800073e:	4698      	mov	r8, r3
 8000740:	2201      	movs	r2, #1
 8000742:	4649      	mov	r1, r9
 8000744:	0018      	movs	r0, r3
 8000746:	f000 fe65 	bl	8001414 <HAL_GPIO_WritePin>
      HAL_UART_Transmit(huart, data, Size, 1000);
 800074a:	26fa      	movs	r6, #250	; 0xfa
 800074c:	00b6      	lsls	r6, r6, #2
 800074e:	4f13      	ldr	r7, [pc, #76]	; (800079c <HAL_UARTEx_RxEventCallback+0x9c>)
 8000750:	0033      	movs	r3, r6
 8000752:	002a      	movs	r2, r5
 8000754:	0039      	movs	r1, r7
 8000756:	0020      	movs	r0, r4
 8000758:	f002 fb70 	bl	8002e3c <HAL_UART_Transmit>
      uint8_t l = sprintf((char *)d, "%d \n", Size);
 800075c:	002a      	movs	r2, r5
 800075e:	4910      	ldr	r1, [pc, #64]	; (80007a0 <HAL_UARTEx_RxEventCallback+0xa0>)
 8000760:	a801      	add	r0, sp, #4
 8000762:	f002 fdb5 	bl	80032d0 <siprintf>
      HAL_UART_Transmit(huart, d, l, 1000);
 8000766:	b2c2      	uxtb	r2, r0
 8000768:	0033      	movs	r3, r6
 800076a:	a901      	add	r1, sp, #4
 800076c:	0020      	movs	r0, r4
 800076e:	f002 fb65 	bl	8002e3c <HAL_UART_Transmit>
      HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 8000772:	2200      	movs	r2, #0
 8000774:	4649      	mov	r1, r9
 8000776:	4640      	mov	r0, r8
 8000778:	f000 fe4c 	bl	8001414 <HAL_GPIO_WritePin>
      HAL_UARTEx_ReceiveToIdle_DMA(huart, data, 1000);
 800077c:	0032      	movs	r2, r6
 800077e:	0039      	movs	r1, r7
 8000780:	0020      	movs	r0, r4
 8000782:	f002 fd39 	bl	80031f8 <HAL_UARTEx_ReceiveToIdle_DMA>
      SizeUartData   = Size;
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <HAL_UARTEx_RxEventCallback+0x98>)
 8000788:	701d      	strb	r5, [r3, #0]
      SmPtr.UartFlag = LS_UART_RECIVE;
 800078a:	4b02      	ldr	r3, [pc, #8]	; (8000794 <HAL_UARTEx_RxEventCallback+0x94>)
 800078c:	2201      	movs	r2, #1
 800078e:	71da      	strb	r2, [r3, #7]
 8000790:	e7cb      	b.n	800072a <HAL_UARTEx_RxEventCallback+0x2a>
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	200000e8 	.word	0x200000e8
 8000798:	200000e4 	.word	0x200000e4
 800079c:	200000f0 	.word	0x200000f0
 80007a0:	08003c30 	.word	0x08003c30

080007a4 <bh1750_TransmitData>:
 *      Author: Marcin
 */
#include "main.h"
#include "bh1750.h"
void bh1750_TransmitData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
 80007a4:	b520      	push	{r5, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	000d      	movs	r5, r1
	HAL_I2C_Master_Transmit(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
 80007aa:	7901      	ldrb	r1, [r0, #4]
 80007ac:	0013      	movs	r3, r2
 80007ae:	0049      	lsls	r1, r1, #1
 80007b0:	6800      	ldr	r0, [r0, #0]
 80007b2:	22fa      	movs	r2, #250	; 0xfa
 80007b4:	0092      	lsls	r2, r2, #2
 80007b6:	9200      	str	r2, [sp, #0]
 80007b8:	002a      	movs	r2, r5
 80007ba:	f000 ffc5 	bl	8001748 <HAL_I2C_Master_Transmit>
}
 80007be:	b002      	add	sp, #8
 80007c0:	bd20      	pop	{r5, pc}

080007c2 <bh1750_ChangeState>:
void bh1750_ReceiveData(bh1750_t *bh,uint8_t *data,uint8_t size)
{
	HAL_I2C_Master_Receive(bh->bh_i2c, (bh->addr<<1), data, size, 1000);
}
void bh1750_ChangeState(bh1750_t *bh,bh1750State_t s)
{
 80007c2:	b510      	push	{r4, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	0004      	movs	r4, r0
 80007c8:	466b      	mov	r3, sp
 80007ca:	71d9      	strb	r1, [r3, #7]
	if(s==Continuously_H_Resolution_Mode||s==Continuously_H_Resolution_Mode2||s==Continuously_L_Resolution_Mode)
 80007cc:	b2ca      	uxtb	r2, r1
 80007ce:	0013      	movs	r3, r2
 80007d0:	3b10      	subs	r3, #16
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d901      	bls.n	80007dc <bh1750_ChangeState+0x1a>
 80007d8:	2a13      	cmp	r2, #19
 80007da:	d105      	bne.n	80007e8 <bh1750_ChangeState+0x26>
	bh1750_TransmitData(bh,&s,1);
 80007dc:	2201      	movs	r2, #1
 80007de:	466b      	mov	r3, sp
 80007e0:	1dd9      	adds	r1, r3, #7
 80007e2:	0020      	movs	r0, r4
 80007e4:	f7ff ffde 	bl	80007a4 <bh1750_TransmitData>
	bh->state=s;
 80007e8:	466b      	mov	r3, sp
 80007ea:	3307      	adds	r3, #7
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	7163      	strb	r3, [r4, #5]
}
 80007f0:	b002      	add	sp, #8
 80007f2:	bd10      	pop	{r4, pc}

080007f4 <bh1750_Init>:
	HAL_Delay(200);
	uint16_t rowMeasurment=bh1750_ReadMeasurment(bh);
	return rowMeasurment;
}
void bh1750_Init(bh1750_t *bh,I2C_HandleTypeDef* i2c,uint8_t addres,bh1750State_t s)
{
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	0004      	movs	r4, r0
 80007f8:	1e1d      	subs	r5, r3, #0
	bh->bh_i2c=i2c;
 80007fa:	6001      	str	r1, [r0, #0]
	bh->addr=addres;
 80007fc:	7102      	strb	r2, [r0, #4]
	if(s!=0)
 80007fe:	d101      	bne.n	8000804 <bh1750_Init+0x10>
	bh1750_ChangeState(bh, s);
	bh->state=s;
 8000800:	7165      	strb	r5, [r4, #5]
}
 8000802:	bd70      	pop	{r4, r5, r6, pc}
	bh1750_ChangeState(bh, s);
 8000804:	0019      	movs	r1, r3
 8000806:	f7ff ffdc 	bl	80007c2 <bh1750_ChangeState>
 800080a:	e7f9      	b.n	8000800 <bh1750_Init+0xc>

0800080c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800080c:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800080e:	4a05      	ldr	r2, [pc, #20]	; (8000824 <MX_DMA_Init+0x18>)
 8000810:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8000812:	2301      	movs	r3, #1
 8000814:	4319      	orrs	r1, r3
 8000816:	6391      	str	r1, [r2, #56]	; 0x38
 8000818:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800081a:	4013      	ands	r3, r2
 800081c:	9301      	str	r3, [sp, #4]
 800081e:	9b01      	ldr	r3, [sp, #4]

}
 8000820:	b002      	add	sp, #8
 8000822:	4770      	bx	lr
 8000824:	40021000 	.word	0x40021000

08000828 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000828:	b570      	push	{r4, r5, r6, lr}
 800082a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082c:	2214      	movs	r2, #20
 800082e:	2100      	movs	r1, #0
 8000830:	a803      	add	r0, sp, #12
 8000832:	f002 fd45 	bl	80032c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000836:	4b12      	ldr	r3, [pc, #72]	; (8000880 <MX_GPIO_Init+0x58>)
 8000838:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800083a:	2202      	movs	r2, #2
 800083c:	4311      	orrs	r1, r2
 800083e:	6359      	str	r1, [r3, #52]	; 0x34
 8000840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000842:	400a      	ands	r2, r1
 8000844:	9201      	str	r2, [sp, #4]
 8000846:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800084a:	2401      	movs	r4, #1
 800084c:	4322      	orrs	r2, r4
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
 8000850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000852:	4023      	ands	r3, r4
 8000854:	9302      	str	r3, [sp, #8]
 8000856:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 8000858:	2680      	movs	r6, #128	; 0x80
 800085a:	01b6      	lsls	r6, r6, #6
 800085c:	25a0      	movs	r5, #160	; 0xa0
 800085e:	05ed      	lsls	r5, r5, #23
 8000860:	2200      	movs	r2, #0
 8000862:	0031      	movs	r1, r6
 8000864:	0028      	movs	r0, r5
 8000866:	f000 fdd5 	bl	8001414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_Selector_Pin;
 800086a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(MAX485_Selector_GPIO_Port, &GPIO_InitStruct);
 8000874:	a903      	add	r1, sp, #12
 8000876:	0028      	movs	r0, r5
 8000878:	f000 fd10 	bl	800129c <HAL_GPIO_Init>

}
 800087c:	b008      	add	sp, #32
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000884:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000886:	4814      	ldr	r0, [pc, #80]	; (80008d8 <MX_I2C2_Init+0x54>)
 8000888:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_I2C2_Init+0x58>)
 800088a:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_I2C2_Init+0x5c>)
 800088e:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	6083      	str	r3, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000894:	2201      	movs	r2, #1
 8000896:	60c2      	str	r2, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000898:	6103      	str	r3, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800089a:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800089c:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008a2:	f000 feeb 	bl	800167c <HAL_I2C_Init>
 80008a6:	2800      	cmp	r0, #0
 80008a8:	d10c      	bne.n	80008c4 <MX_I2C2_Init+0x40>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008aa:	2100      	movs	r1, #0
 80008ac:	480a      	ldr	r0, [pc, #40]	; (80008d8 <MX_I2C2_Init+0x54>)
 80008ae:	f001 f805 	bl	80018bc <HAL_I2CEx_ConfigAnalogFilter>
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d109      	bne.n	80008ca <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008b6:	2100      	movs	r1, #0
 80008b8:	4807      	ldr	r0, [pc, #28]	; (80008d8 <MX_I2C2_Init+0x54>)
 80008ba:	f001 f82b 	bl	8001914 <HAL_I2CEx_ConfigDigitalFilter>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d106      	bne.n	80008d0 <MX_I2C2_Init+0x4c>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008c2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80008c4:	f000 f852 	bl	800096c <Error_Handler>
 80008c8:	e7ef      	b.n	80008aa <MX_I2C2_Init+0x26>
    Error_Handler();
 80008ca:	f000 f84f 	bl	800096c <Error_Handler>
 80008ce:	e7f2      	b.n	80008b6 <MX_I2C2_Init+0x32>
    Error_Handler();
 80008d0:	f000 f84c 	bl	800096c <Error_Handler>
}
 80008d4:	e7f5      	b.n	80008c2 <MX_I2C2_Init+0x3e>
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	20000154 	.word	0x20000154
 80008dc:	40005800 	.word	0x40005800
 80008e0:	00303d5b 	.word	0x00303d5b

080008e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008e4:	b510      	push	{r4, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	2214      	movs	r2, #20
 80008ec:	2100      	movs	r1, #0
 80008ee:	a803      	add	r0, sp, #12
 80008f0:	f002 fce6 	bl	80032c0 <memset>
  if(i2cHandle->Instance==I2C2)
 80008f4:	6822      	ldr	r2, [r4, #0]
 80008f6:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_I2C_MspInit+0x5c>)
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d001      	beq.n	8000900 <HAL_I2C_MspInit+0x1c>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80008fc:	b008      	add	sp, #32
 80008fe:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000900:	4c10      	ldr	r4, [pc, #64]	; (8000944 <HAL_I2C_MspInit+0x60>)
 8000902:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000904:	2301      	movs	r3, #1
 8000906:	431a      	orrs	r2, r3
 8000908:	6362      	str	r2, [r4, #52]	; 0x34
 800090a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800090c:	4013      	ands	r3, r2
 800090e:	9301      	str	r3, [sp, #4]
 8000910:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000912:	23c0      	movs	r3, #192	; 0xc0
 8000914:	015b      	lsls	r3, r3, #5
 8000916:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000918:	2312      	movs	r3, #18
 800091a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800091c:	3b0c      	subs	r3, #12
 800091e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	20a0      	movs	r0, #160	; 0xa0
 8000922:	a903      	add	r1, sp, #12
 8000924:	05c0      	lsls	r0, r0, #23
 8000926:	f000 fcb9 	bl	800129c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800092a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800092c:	2180      	movs	r1, #128	; 0x80
 800092e:	03c9      	lsls	r1, r1, #15
 8000930:	430a      	orrs	r2, r1
 8000932:	63e2      	str	r2, [r4, #60]	; 0x3c
 8000934:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000936:	400b      	ands	r3, r1
 8000938:	9302      	str	r3, [sp, #8]
 800093a:	9b02      	ldr	r3, [sp, #8]
}
 800093c:	e7de      	b.n	80008fc <HAL_I2C_MspInit+0x18>
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40005800 	.word	0x40005800
 8000944:	40021000 	.word	0x40021000

08000948 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000948:	b510      	push	{r4, lr}
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	2009      	movs	r0, #9
 8000950:	f000 fa6c 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000954:	2009      	movs	r0, #9
 8000956:	f000 fa99 	bl	8000e8c <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	201b      	movs	r0, #27
 8000960:	f000 fa64 	bl	8000e2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000964:	201b      	movs	r0, #27
 8000966:	f000 fa91 	bl	8000e8c <HAL_NVIC_EnableIRQ>
}
 800096a:	bd10      	pop	{r4, pc}

0800096c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 800096e:	e7fe      	b.n	800096e <Error_Handler+0x2>

08000970 <SystemClock_Config>:
{
 8000970:	b500      	push	{lr}
 8000972:	b093      	sub	sp, #76	; 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000974:	2234      	movs	r2, #52	; 0x34
 8000976:	2100      	movs	r1, #0
 8000978:	a805      	add	r0, sp, #20
 800097a:	f002 fca1 	bl	80032c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097e:	2210      	movs	r2, #16
 8000980:	2100      	movs	r1, #0
 8000982:	a801      	add	r0, sp, #4
 8000984:	f002 fc9c 	bl	80032c0 <memset>
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000988:	2080      	movs	r0, #128	; 0x80
 800098a:	0080      	lsls	r0, r0, #2
 800098c:	f001 f812 	bl	80019b4 <HAL_PWREx_ControlVoltageScaling>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000990:	230a      	movs	r3, #10
 8000992:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000994:	33f6      	adds	r3, #246	; 0xf6
 8000996:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000998:	2300      	movs	r3, #0
 800099a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2240      	movs	r2, #64	; 0x40
 800099e:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009a0:	3a3f      	subs	r2, #63	; 0x3f
 80009a2:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a4:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	a805      	add	r0, sp, #20
 80009a8:	f001 f85c 	bl	8001a64 <HAL_RCC_OscConfig>
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d10d      	bne.n	80009cc <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	2307      	movs	r3, #7
 80009b2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b4:	2300      	movs	r3, #0
 80009b6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ba:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	a801      	add	r0, sp, #4
 80009c0:	f001 fafe 	bl	8001fc0 <HAL_RCC_ClockConfig>
 80009c4:	2800      	cmp	r0, #0
 80009c6:	d103      	bne.n	80009d0 <SystemClock_Config+0x60>
}
 80009c8:	b013      	add	sp, #76	; 0x4c
 80009ca:	bd00      	pop	{pc}
    Error_Handler();
 80009cc:	f7ff ffce 	bl	800096c <Error_Handler>
    Error_Handler();
 80009d0:	f7ff ffcc 	bl	800096c <Error_Handler>

080009d4 <main>:
{
 80009d4:	b510      	push	{r4, lr}
  HAL_Init();
 80009d6:	f000 f9e1 	bl	8000d9c <HAL_Init>
  SystemClock_Config();
 80009da:	f7ff ffc9 	bl	8000970 <SystemClock_Config>
  MX_GPIO_Init();
 80009de:	f7ff ff23 	bl	8000828 <MX_GPIO_Init>
  MX_DMA_Init();
 80009e2:	f7ff ff13 	bl	800080c <MX_DMA_Init>
  MX_I2C2_Init();
 80009e6:	f7ff ff4d 	bl	8000884 <MX_I2C2_Init>
  MX_RTC_Init();
 80009ea:	f000 f813 	bl	8000a14 <MX_RTC_Init>
  MX_TIM17_Init();
 80009ee:	f000 f8b5 	bl	8000b5c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80009f2:	f000 f8e5 	bl	8000bc0 <MX_USART1_UART_Init>
  MX_NVIC_Init();
 80009f6:	f7ff ffa7 	bl	8000948 <MX_NVIC_Init>
   HAL_TIM_Base_Start(&htim17);
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <main+0x38>)
 80009fc:	f001 fd3e 	bl	800247c <HAL_TIM_Base_Start>
   HAL_Delay(10000);
 8000a00:	4803      	ldr	r0, [pc, #12]	; (8000a10 <main+0x3c>)
 8000a02:	f000 f9f1 	bl	8000de8 <HAL_Delay>
      SM_MainFunction();
 8000a06:	f7ff fe5d 	bl	80006c4 <SM_MainFunction>
   while(1)
 8000a0a:	e7fc      	b.n	8000a06 <main+0x32>
 8000a0c:	200001d8 	.word	0x200001d8
 8000a10:	00002710 	.word	0x00002710

08000a14 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000a14:	b510      	push	{r4, lr}

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_RTC_Init+0x34>)
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_RTC_Init+0x38>)
 8000a1a:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	6083      	str	r3, [r0, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000a20:	227f      	movs	r2, #127	; 0x7f
 8000a22:	60c2      	str	r2, [r0, #12]
  hrtc.Init.SynchPrediv = 255;
 8000a24:	3280      	adds	r2, #128	; 0x80
 8000a26:	6102      	str	r2, [r0, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a28:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a2a:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a2c:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a2e:	2280      	movs	r2, #128	; 0x80
 8000a30:	05d2      	lsls	r2, r2, #23
 8000a32:	6202      	str	r2, [r0, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a34:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a36:	f001 fcc5 	bl	80023c4 <HAL_RTC_Init>
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d100      	bne.n	8000a40 <MX_RTC_Init+0x2c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a3e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a40:	f7ff ff94 	bl	800096c <Error_Handler>
}
 8000a44:	e7fb      	b.n	8000a3e <MX_RTC_Init+0x2a>
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	200001a8 	.word	0x200001a8
 8000a4c:	40002800 	.word	0x40002800

08000a50 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000a50:	b510      	push	{r4, lr}
 8000a52:	b088      	sub	sp, #32
 8000a54:	0004      	movs	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a56:	2218      	movs	r2, #24
 8000a58:	2100      	movs	r1, #0
 8000a5a:	a802      	add	r0, sp, #8
 8000a5c:	f002 fc30 	bl	80032c0 <memset>
  if(rtcHandle->Instance==RTC)
 8000a60:	6822      	ldr	r2, [r4, #0]
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_RTC_MspInit+0x58>)
 8000a64:	429a      	cmp	r2, r3
 8000a66:	d001      	beq.n	8000a6c <HAL_RTC_MspInit+0x1c>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000a68:	b008      	add	sp, #32
 8000a6a:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a6c:	2380      	movs	r3, #128	; 0x80
 8000a6e:	029b      	lsls	r3, r3, #10
 8000a70:	9302      	str	r3, [sp, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a78:	a802      	add	r0, sp, #8
 8000a7a:	f001 fb81 	bl	8002180 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	d10f      	bne.n	8000aa2 <HAL_RTC_MspInit+0x52>
    __HAL_RCC_RTC_ENABLE();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <HAL_RTC_MspInit+0x5c>)
 8000a84:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8000a86:	2280      	movs	r2, #128	; 0x80
 8000a88:	0212      	lsls	r2, r2, #8
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	00c9      	lsls	r1, r1, #3
 8000a94:	430a      	orrs	r2, r1
 8000a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a9a:	400b      	ands	r3, r1
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	9b01      	ldr	r3, [sp, #4]
}
 8000aa0:	e7e2      	b.n	8000a68 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8000aa2:	f7ff ff63 	bl	800096c <Error_Handler>
 8000aa6:	e7ec      	b.n	8000a82 <HAL_RTC_MspInit+0x32>
 8000aa8:	40002800 	.word	0x40002800
 8000aac:	40021000 	.word	0x40021000

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_MspInit+0x2c>)
 8000ab4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4311      	orrs	r1, r2
 8000aba:	6419      	str	r1, [r3, #64]	; 0x40
 8000abc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000abe:	400a      	ands	r2, r1
 8000ac0:	9200      	str	r2, [sp, #0]
 8000ac2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	0549      	lsls	r1, r1, #21
 8000aca:	430a      	orrs	r2, r1
 8000acc:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ad0:	400b      	ands	r3, r1
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	b002      	add	sp, #8
 8000ad8:	4770      	bx	lr
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	40021000 	.word	0x40021000

08000ae0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae0:	e7fe      	b.n	8000ae0 <NMI_Handler>

08000ae2 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <HardFault_Handler>

08000ae4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	4770      	bx	lr

08000ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aea:	f000 f96b 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aee:	bd10      	pop	{r4, pc}

08000af0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000af0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000af2:	4802      	ldr	r0, [pc, #8]	; (8000afc <DMA1_Channel1_IRQHandler+0xc>)
 8000af4:	f000 fb6c 	bl	80011d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000af8:	bd10      	pop	{r4, pc}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	20000224 	.word	0x20000224

08000b00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000b00:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b02:	4802      	ldr	r0, [pc, #8]	; (8000b0c <USART1_IRQHandler+0xc>)
 8000b04:	f001 fdf6 	bl	80026f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b08:	bd10      	pop	{r4, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	20000280 	.word	0x20000280

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b510      	push	{r4, lr}
 8000b12:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a0c      	ldr	r2, [pc, #48]	; (8000b48 <_sbrk+0x38>)
 8000b16:	490d      	ldr	r1, [pc, #52]	; (8000b4c <_sbrk+0x3c>)
 8000b18:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b1a:	490d      	ldr	r1, [pc, #52]	; (8000b50 <_sbrk+0x40>)
 8000b1c:	6809      	ldr	r1, [r1, #0]
 8000b1e:	2900      	cmp	r1, #0
 8000b20:	d007      	beq.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b22:	490b      	ldr	r1, [pc, #44]	; (8000b50 <_sbrk+0x40>)
 8000b24:	6808      	ldr	r0, [r1, #0]
 8000b26:	18c3      	adds	r3, r0, r3
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d806      	bhi.n	8000b3a <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000b2c:	4a08      	ldr	r2, [pc, #32]	; (8000b50 <_sbrk+0x40>)
 8000b2e:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000b30:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000b32:	4907      	ldr	r1, [pc, #28]	; (8000b50 <_sbrk+0x40>)
 8000b34:	4807      	ldr	r0, [pc, #28]	; (8000b54 <_sbrk+0x44>)
 8000b36:	6008      	str	r0, [r1, #0]
 8000b38:	e7f3      	b.n	8000b22 <_sbrk+0x12>
    errno = ENOMEM;
 8000b3a:	f002 fb97 	bl	800326c <__errno>
 8000b3e:	230c      	movs	r3, #12
 8000b40:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000b42:	2001      	movs	r0, #1
 8000b44:	4240      	negs	r0, r0
 8000b46:	e7f3      	b.n	8000b30 <_sbrk+0x20>
 8000b48:	20002000 	.word	0x20002000
 8000b4c:	00000800 	.word	0x00000800
 8000b50:	200001d4 	.word	0x200001d4
 8000b54:	20000328 	.word	0x20000328

08000b58 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b58:	4770      	bx	lr
	...

08000b5c <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000b5c:	b510      	push	{r4, lr}
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000b5e:	480a      	ldr	r0, [pc, #40]	; (8000b88 <MX_TIM17_Init+0x2c>)
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_TIM17_Init+0x30>)
 8000b62:	6003      	str	r3, [r0, #0]
  htim17.Init.Prescaler = 15;
 8000b64:	230f      	movs	r3, #15
 8000b66:	6043      	str	r3, [r0, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	6083      	str	r3, [r0, #8]
  htim17.Init.Period = 65535;
 8000b6c:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <MX_TIM17_Init+0x34>)
 8000b6e:	60c2      	str	r2, [r0, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	6103      	str	r3, [r0, #16]
  htim17.Init.RepetitionCounter = 0;
 8000b72:	6143      	str	r3, [r0, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b74:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b76:	f001 fcf1 	bl	800255c <HAL_TIM_Base_Init>
 8000b7a:	2800      	cmp	r0, #0
 8000b7c:	d100      	bne.n	8000b80 <MX_TIM17_Init+0x24>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b7e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b80:	f7ff fef4 	bl	800096c <Error_Handler>
}
 8000b84:	e7fb      	b.n	8000b7e <MX_TIM17_Init+0x22>
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	200001d8 	.word	0x200001d8
 8000b8c:	40014800 	.word	0x40014800
 8000b90:	0000ffff 	.word	0x0000ffff

08000b94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b94:	b082      	sub	sp, #8

  if(tim_baseHandle->Instance==TIM17)
 8000b96:	6802      	ldr	r2, [r0, #0]
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <HAL_TIM_Base_MspInit+0x24>)
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d001      	beq.n	8000ba2 <HAL_TIM_Base_MspInit+0xe>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000b9e:	b002      	add	sp, #8
 8000ba0:	4770      	bx	lr
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000ba2:	4a06      	ldr	r2, [pc, #24]	; (8000bbc <HAL_TIM_Base_MspInit+0x28>)
 8000ba4:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000ba6:	2080      	movs	r0, #128	; 0x80
 8000ba8:	02c0      	lsls	r0, r0, #11
 8000baa:	4301      	orrs	r1, r0
 8000bac:	6411      	str	r1, [r2, #64]	; 0x40
 8000bae:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000bb0:	4003      	ands	r3, r0
 8000bb2:	9301      	str	r3, [sp, #4]
 8000bb4:	9b01      	ldr	r3, [sp, #4]
}
 8000bb6:	e7f2      	b.n	8000b9e <HAL_TIM_Base_MspInit+0xa>
 8000bb8:	40014800 	.word	0x40014800
 8000bbc:	40021000 	.word	0x40021000

08000bc0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bc0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc2:	4819      	ldr	r0, [pc, #100]	; (8000c28 <MX_USART1_UART_Init+0x68>)
 8000bc4:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_USART1_UART_Init+0x6c>)
 8000bc6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 2400;
 8000bc8:	2396      	movs	r3, #150	; 0x96
 8000bca:	011b      	lsls	r3, r3, #4
 8000bcc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be0:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be2:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be4:	f002 f9dc 	bl	8002fa0 <HAL_UART_Init>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d111      	bne.n	8000c10 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bec:	2100      	movs	r1, #0
 8000bee:	480e      	ldr	r0, [pc, #56]	; (8000c28 <MX_USART1_UART_Init+0x68>)
 8000bf0:	f002 fab4 	bl	800315c <HAL_UARTEx_SetTxFifoThreshold>
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	d10e      	bne.n	8000c16 <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <MX_USART1_UART_Init+0x68>)
 8000bfc:	f002 fad4 	bl	80031a8 <HAL_UARTEx_SetRxFifoThreshold>
 8000c00:	2800      	cmp	r0, #0
 8000c02:	d10b      	bne.n	8000c1c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c04:	4808      	ldr	r0, [pc, #32]	; (8000c28 <MX_USART1_UART_Init+0x68>)
 8000c06:	f002 fa89 	bl	800311c <HAL_UARTEx_DisableFifoMode>
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d109      	bne.n	8000c22 <MX_USART1_UART_Init+0x62>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c10:	f7ff feac 	bl	800096c <Error_Handler>
 8000c14:	e7ea      	b.n	8000bec <MX_USART1_UART_Init+0x2c>
    Error_Handler();
 8000c16:	f7ff fea9 	bl	800096c <Error_Handler>
 8000c1a:	e7ed      	b.n	8000bf8 <MX_USART1_UART_Init+0x38>
    Error_Handler();
 8000c1c:	f7ff fea6 	bl	800096c <Error_Handler>
 8000c20:	e7f0      	b.n	8000c04 <MX_USART1_UART_Init+0x44>
    Error_Handler();
 8000c22:	f7ff fea3 	bl	800096c <Error_Handler>
}
 8000c26:	e7f2      	b.n	8000c0e <MX_USART1_UART_Init+0x4e>
 8000c28:	20000280 	.word	0x20000280
 8000c2c:	40013800 	.word	0x40013800

08000c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c30:	b530      	push	{r4, r5, lr}
 8000c32:	b08f      	sub	sp, #60	; 0x3c
 8000c34:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	2214      	movs	r2, #20
 8000c38:	2100      	movs	r1, #0
 8000c3a:	a809      	add	r0, sp, #36	; 0x24
 8000c3c:	f002 fb40 	bl	80032c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c40:	2218      	movs	r2, #24
 8000c42:	2100      	movs	r1, #0
 8000c44:	a803      	add	r0, sp, #12
 8000c46:	f002 fb3b 	bl	80032c0 <memset>
  if(uartHandle->Instance==USART1)
 8000c4a:	4b24      	ldr	r3, [pc, #144]	; (8000cdc <HAL_UART_MspInit+0xac>)
 8000c4c:	6822      	ldr	r2, [r4, #0]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d001      	beq.n	8000c56 <HAL_UART_MspInit+0x26>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c52:	b00f      	add	sp, #60	; 0x3c
 8000c54:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c56:	2301      	movs	r3, #1
 8000c58:	9303      	str	r3, [sp, #12]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	9304      	str	r3, [sp, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5e:	a803      	add	r0, sp, #12
 8000c60:	f001 fa8e 	bl	8002180 <HAL_RCCEx_PeriphCLKConfig>
 8000c64:	2800      	cmp	r0, #0
 8000c66:	d132      	bne.n	8000cce <HAL_UART_MspInit+0x9e>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c68:	4b1d      	ldr	r3, [pc, #116]	; (8000ce0 <HAL_UART_MspInit+0xb0>)
 8000c6a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000c6c:	2080      	movs	r0, #128	; 0x80
 8000c6e:	01c0      	lsls	r0, r0, #7
 8000c70:	4301      	orrs	r1, r0
 8000c72:	6419      	str	r1, [r3, #64]	; 0x40
 8000c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c76:	4002      	ands	r2, r0
 8000c78:	9201      	str	r2, [sp, #4]
 8000c7a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000c7e:	2202      	movs	r2, #2
 8000c80:	4311      	orrs	r1, r2
 8000c82:	6359      	str	r1, [r3, #52]	; 0x34
 8000c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c86:	4013      	ands	r3, r2
 8000c88:	9302      	str	r3, [sp, #8]
 8000c8a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000c8c:	23c0      	movs	r3, #192	; 0xc0
 8000c8e:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2500      	movs	r5, #0
 8000c94:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	950c      	str	r5, [sp, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000c98:	950d      	str	r5, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	a909      	add	r1, sp, #36	; 0x24
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <HAL_UART_MspInit+0xb4>)
 8000c9e:	f000 fafd 	bl	800129c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0xb8>)
 8000ca4:	4b11      	ldr	r3, [pc, #68]	; (8000cec <HAL_UART_MspInit+0xbc>)
 8000ca6:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ca8:	2332      	movs	r3, #50	; 0x32
 8000caa:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cac:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cae:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb0:	334e      	adds	r3, #78	; 0x4e
 8000cb2:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cb4:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb6:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cb8:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cba:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cbc:	f000 f962 	bl	8000f84 <HAL_DMA_Init>
 8000cc0:	2800      	cmp	r0, #0
 8000cc2:	d107      	bne.n	8000cd4 <HAL_UART_MspInit+0xa4>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000cc4:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <HAL_UART_MspInit+0xb8>)
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	50a3      	str	r3, [r4, r2]
 8000cca:	629c      	str	r4, [r3, #40]	; 0x28
}
 8000ccc:	e7c1      	b.n	8000c52 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8000cce:	f7ff fe4d 	bl	800096c <Error_Handler>
 8000cd2:	e7c9      	b.n	8000c68 <HAL_UART_MspInit+0x38>
      Error_Handler();
 8000cd4:	f7ff fe4a 	bl	800096c <Error_Handler>
 8000cd8:	e7f4      	b.n	8000cc4 <HAL_UART_MspInit+0x94>
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	40013800 	.word	0x40013800
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	50000400 	.word	0x50000400
 8000ce8:	20000224 	.word	0x20000224
 8000cec:	40020008 	.word	0x40020008

08000cf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cf2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf4:	f7ff ff30 	bl	8000b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <LoopForever+0xe>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d10:	4c0a      	ldr	r4, [pc, #40]	; (8000d3c <LoopForever+0x16>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d1e:	f002 faab 	bl	8003278 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000d22:	f7ff fe57 	bl	80009d4 <main>

08000d26 <LoopForever>:

LoopForever:
  b LoopForever
 8000d26:	e7fe      	b.n	8000d26 <LoopForever>
  ldr   r0, =_estack
 8000d28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8000d34:	08003d30 	.word	0x08003d30
  ldr r2, =_sbss
 8000d38:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8000d3c:	20000328 	.word	0x20000328

08000d40 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC1_IRQHandler>
	...

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b510      	push	{r4, lr}
 8000d46:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d48:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_InitTick+0x4c>)
 8000d4a:	7819      	ldrb	r1, [r3, #0]
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_InitTick+0x10>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000d52:	bd10      	pop	{r4, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d54:	20fa      	movs	r0, #250	; 0xfa
 8000d56:	0080      	lsls	r0, r0, #2
 8000d58:	f7ff f9dc 	bl	8000114 <__udivsi3>
 8000d5c:	0001      	movs	r1, r0
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_InitTick+0x50>)
 8000d60:	6818      	ldr	r0, [r3, #0]
 8000d62:	f7ff f9d7 	bl	8000114 <__udivsi3>
 8000d66:	f000 f89d 	bl	8000ea4 <HAL_SYSTICK_Config>
 8000d6a:	2800      	cmp	r0, #0
 8000d6c:	d10d      	bne.n	8000d8a <HAL_InitTick+0x46>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6e:	2c03      	cmp	r4, #3
 8000d70:	d901      	bls.n	8000d76 <HAL_InitTick+0x32>
        status = HAL_ERROR;
 8000d72:	2001      	movs	r0, #1
 8000d74:	e7ed      	b.n	8000d52 <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d76:	3001      	adds	r0, #1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	0021      	movs	r1, r4
 8000d7c:	4240      	negs	r0, r0
 8000d7e:	f000 f855 	bl	8000e2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d82:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_InitTick+0x54>)
 8000d84:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d86:	2000      	movs	r0, #0
 8000d88:	e7e3      	b.n	8000d52 <HAL_InitTick+0xe>
      status = HAL_ERROR;
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	e7e1      	b.n	8000d52 <HAL_InitTick+0xe>
 8000d8e:	46c0      	nop			; (mov r8, r8)
 8000d90:	20000054 	.word	0x20000054
 8000d94:	20000050 	.word	0x20000050
 8000d98:	20000058 	.word	0x20000058

08000d9c <HAL_Init>:
{
 8000d9c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_Init+0x24>)
 8000da0:	6811      	ldr	r1, [r2, #0]
 8000da2:	2380      	movs	r3, #128	; 0x80
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	430b      	orrs	r3, r1
 8000da8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000daa:	2003      	movs	r0, #3
 8000dac:	f7ff ffca 	bl	8000d44 <HAL_InitTick>
 8000db0:	1e04      	subs	r4, r0, #0
 8000db2:	d002      	beq.n	8000dba <HAL_Init+0x1e>
    status = HAL_ERROR;
 8000db4:	2401      	movs	r4, #1
}
 8000db6:	0020      	movs	r0, r4
 8000db8:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 8000dba:	f7ff fe79 	bl	8000ab0 <HAL_MspInit>
 8000dbe:	e7fa      	b.n	8000db6 <HAL_Init+0x1a>
 8000dc0:	40022000 	.word	0x40022000

08000dc4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_IncTick+0x10>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <HAL_IncTick+0x14>)
 8000dca:	6811      	ldr	r1, [r2, #0]
 8000dcc:	185b      	adds	r3, r3, r1
 8000dce:	6013      	str	r3, [r2, #0]
}
 8000dd0:	4770      	bx	lr
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	20000054 	.word	0x20000054
 8000dd8:	20000314 	.word	0x20000314

08000ddc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ddc:	4b01      	ldr	r3, [pc, #4]	; (8000de4 <HAL_GetTick+0x8>)
 8000dde:	6818      	ldr	r0, [r3, #0]
}
 8000de0:	4770      	bx	lr
 8000de2:	46c0      	nop			; (mov r8, r8)
 8000de4:	20000314 	.word	0x20000314

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b570      	push	{r4, r5, r6, lr}
 8000dea:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000dec:	f7ff fff6 	bl	8000ddc <HAL_GetTick>
 8000df0:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000df2:	1c63      	adds	r3, r4, #1
 8000df4:	d002      	beq.n	8000dfc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <HAL_Delay+0x20>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dfc:	f7ff ffee 	bl	8000ddc <HAL_GetTick>
 8000e00:	1b40      	subs	r0, r0, r5
 8000e02:	42a0      	cmp	r0, r4
 8000e04:	d3fa      	bcc.n	8000dfc <HAL_Delay+0x14>
  {
  }
}
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	20000054 	.word	0x20000054

08000e0c <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000e0c:	4a02      	ldr	r2, [pc, #8]	; (8000e18 <HAL_SuspendTick+0xc>)
 8000e0e:	6813      	ldr	r3, [r2, #0]
 8000e10:	2102      	movs	r1, #2
 8000e12:	438b      	bics	r3, r1
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	4770      	bx	lr
 8000e18:	e000e010 	.word	0xe000e010

08000e1c <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000e1c:	4a02      	ldr	r2, [pc, #8]	; (8000e28 <HAL_ResumeTick+0xc>)
 8000e1e:	6813      	ldr	r3, [r2, #0]
 8000e20:	2102      	movs	r1, #2
 8000e22:	430b      	orrs	r3, r1
 8000e24:	6013      	str	r3, [r2, #0]
}
 8000e26:	4770      	bx	lr
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	2800      	cmp	r0, #0
 8000e30:	db11      	blt.n	8000e56 <HAL_NVIC_SetPriority+0x2a>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e32:	0883      	lsrs	r3, r0, #2
 8000e34:	4e13      	ldr	r6, [pc, #76]	; (8000e84 <HAL_NVIC_SetPriority+0x58>)
 8000e36:	33c0      	adds	r3, #192	; 0xc0
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	599d      	ldr	r5, [r3, r6]
 8000e3c:	2403      	movs	r4, #3
 8000e3e:	4020      	ands	r0, r4
 8000e40:	00c0      	lsls	r0, r0, #3
 8000e42:	22ff      	movs	r2, #255	; 0xff
 8000e44:	0014      	movs	r4, r2
 8000e46:	4084      	lsls	r4, r0
 8000e48:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e4a:	0189      	lsls	r1, r1, #6
 8000e4c:	400a      	ands	r2, r1
 8000e4e:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e50:	432a      	orrs	r2, r5
 8000e52:	519a      	str	r2, [r3, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8000e54:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e56:	230f      	movs	r3, #15
 8000e58:	4003      	ands	r3, r0
 8000e5a:	3b08      	subs	r3, #8
 8000e5c:	089b      	lsrs	r3, r3, #2
 8000e5e:	3306      	adds	r3, #6
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_NVIC_SetPriority+0x5c>)
 8000e64:	4694      	mov	ip, r2
 8000e66:	4463      	add	r3, ip
 8000e68:	685c      	ldr	r4, [r3, #4]
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	4010      	ands	r0, r2
 8000e6e:	00c0      	lsls	r0, r0, #3
 8000e70:	32fc      	adds	r2, #252	; 0xfc
 8000e72:	0015      	movs	r5, r2
 8000e74:	4085      	lsls	r5, r0
 8000e76:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e78:	0189      	lsls	r1, r1, #6
 8000e7a:	400a      	ands	r2, r1
 8000e7c:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7e:	4322      	orrs	r2, r4
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	e7e7      	b.n	8000e54 <HAL_NVIC_SetPriority+0x28>
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	db05      	blt.n	8000e9c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e90:	231f      	movs	r3, #31
 8000e92:	4018      	ands	r0, r3
 8000e94:	3b1e      	subs	r3, #30
 8000e96:	4083      	lsls	r3, r0
 8000e98:	4a01      	ldr	r2, [pc, #4]	; (8000ea0 <HAL_NVIC_EnableIRQ+0x14>)
 8000e9a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000e9c:	4770      	bx	lr
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	2380      	movs	r3, #128	; 0x80
 8000ea8:	045b      	lsls	r3, r3, #17
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d20f      	bcs.n	8000ece <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eae:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <HAL_SYSTICK_Config+0x30>)
 8000eb0:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <HAL_SYSTICK_Config+0x34>)
 8000eb4:	6a03      	ldr	r3, [r0, #32]
 8000eb6:	021b      	lsls	r3, r3, #8
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	21c0      	movs	r1, #192	; 0xc0
 8000ebc:	0609      	lsls	r1, r1, #24
 8000ebe:	430b      	orrs	r3, r1
 8000ec0:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ec6:	3307      	adds	r3, #7
 8000ec8:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eca:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8000ecc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000ece:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 8000ed0:	e7fc      	b.n	8000ecc <HAL_SYSTICK_Config+0x28>
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	e000e010 	.word	0xe000e010
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000edc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ede:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8000ee0:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8000ee2:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8000ee4:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000ee6:	2c00      	cmp	r4, #0
 8000ee8:	d002      	beq.n	8000ef0 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eea:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8000eec:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000eee:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000ef0:	4f0b      	ldr	r7, [pc, #44]	; (8000f20 <DMA_SetConfig+0x44>)
 8000ef2:	687c      	ldr	r4, [r7, #4]
 8000ef4:	261c      	movs	r6, #28
 8000ef6:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000ef8:	402e      	ands	r6, r5
 8000efa:	2501      	movs	r5, #1
 8000efc:	40b5      	lsls	r5, r6
 8000efe:	432c      	orrs	r4, r5
 8000f00:	607c      	str	r4, [r7, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f02:	6804      	ldr	r4, [r0, #0]
 8000f04:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f06:	6883      	ldr	r3, [r0, #8]
 8000f08:	2b10      	cmp	r3, #16
 8000f0a:	d004      	beq.n	8000f16 <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000f0c:	6803      	ldr	r3, [r0, #0]
 8000f0e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000f10:	6803      	ldr	r3, [r0, #0]
 8000f12:	60da      	str	r2, [r3, #12]
  }
}
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 8000f16:	6803      	ldr	r3, [r0, #0]
 8000f18:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000f1a:	6803      	ldr	r3, [r0, #0]
 8000f1c:	60d9      	str	r1, [r3, #12]
 8000f1e:	e7f9      	b.n	8000f14 <DMA_SetConfig+0x38>
 8000f20:	40020000 	.word	0x40020000

08000f24 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f24:	b510      	push	{r4, lr}
 8000f26:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000f28:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8000f2e:	4694      	mov	ip, r2
 8000f30:	4463      	add	r3, ip
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	6443      	str	r3, [r0, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f36:	20ff      	movs	r0, #255	; 0xff
 8000f38:	6823      	ldr	r3, [r4, #0]
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3808      	subs	r0, #8
 8000f3e:	2114      	movs	r1, #20
 8000f40:	f7ff f8e8 	bl	8000114 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8000f46:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000f48:	231f      	movs	r3, #31
 8000f4a:	4018      	ands	r0, r3
 8000f4c:	3b1e      	subs	r3, #30
 8000f4e:	4083      	lsls	r3, r0
 8000f50:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 8000f52:	bd10      	pop	{r4, pc}
 8000f54:	10008200 	.word	0x10008200
 8000f58:	40020880 	.word	0x40020880

08000f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000f5c:	233f      	movs	r3, #63	; 0x3f
 8000f5e:	6842      	ldr	r2, [r0, #4]
 8000f60:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000f62:	4a06      	ldr	r2, [pc, #24]	; (8000f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8000f64:	189a      	adds	r2, r3, r2
 8000f66:	0092      	lsls	r2, r2, #2
 8000f68:	6502      	str	r2, [r0, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8000f6c:	6542      	str	r2, [r0, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	2203      	movs	r2, #3
 8000f72:	401a      	ands	r2, r3
 8000f74:	2301      	movs	r3, #1
 8000f76:	4093      	lsls	r3, r2
 8000f78:	6583      	str	r3, [r0, #88]	; 0x58
}
 8000f7a:	4770      	bx	lr
 8000f7c:	1000823f 	.word	0x1000823f
 8000f80:	40020940 	.word	0x40020940

08000f84 <HAL_DMA_Init>:
{
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8000f88:	d04d      	beq.n	8001026 <HAL_DMA_Init+0xa2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f8a:	6805      	ldr	r5, [r0, #0]
 8000f8c:	4b27      	ldr	r3, [pc, #156]	; (800102c <HAL_DMA_Init+0xa8>)
 8000f8e:	18e8      	adds	r0, r5, r3
 8000f90:	2114      	movs	r1, #20
 8000f92:	f7ff f8bf 	bl	8000114 <__udivsi3>
 8000f96:	0080      	lsls	r0, r0, #2
 8000f98:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f9a:	2325      	movs	r3, #37	; 0x25
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fa0:	682b      	ldr	r3, [r5, #0]
 8000fa2:	4a23      	ldr	r2, [pc, #140]	; (8001030 <HAL_DMA_Init+0xac>)
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000fa8:	6821      	ldr	r1, [r4, #0]
 8000faa:	680a      	ldr	r2, [r1, #0]
 8000fac:	68a3      	ldr	r3, [r4, #8]
 8000fae:	68e0      	ldr	r0, [r4, #12]
 8000fb0:	4303      	orrs	r3, r0
 8000fb2:	6920      	ldr	r0, [r4, #16]
 8000fb4:	4303      	orrs	r3, r0
 8000fb6:	6960      	ldr	r0, [r4, #20]
 8000fb8:	4303      	orrs	r3, r0
 8000fba:	69a0      	ldr	r0, [r4, #24]
 8000fbc:	4303      	orrs	r3, r0
 8000fbe:	69e0      	ldr	r0, [r4, #28]
 8000fc0:	4303      	orrs	r3, r0
 8000fc2:	6a20      	ldr	r0, [r4, #32]
 8000fc4:	4303      	orrs	r3, r0
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fca:	0020      	movs	r0, r4
 8000fcc:	f7ff ffaa 	bl	8000f24 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	01db      	lsls	r3, r3, #7
 8000fd4:	68a2      	ldr	r2, [r4, #8]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d018      	beq.n	800100c <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000fda:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000fdc:	233f      	movs	r3, #63	; 0x3f
 8000fde:	6861      	ldr	r1, [r4, #4]
 8000fe0:	400b      	ands	r3, r1
 8000fe2:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000fe4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000fe6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000fe8:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000fea:	6863      	ldr	r3, [r4, #4]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d90f      	bls.n	8001012 <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	6523      	str	r3, [r4, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000ff6:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000ff8:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	2225      	movs	r2, #37	; 0x25
 8001000:	2101      	movs	r1, #1
 8001002:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 8001004:	3a01      	subs	r2, #1
 8001006:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8001008:	2000      	movs	r0, #0
}
 800100a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800100c:	2300      	movs	r3, #0
 800100e:	6063      	str	r3, [r4, #4]
 8001010:	e7e3      	b.n	8000fda <HAL_DMA_Init+0x56>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001012:	0020      	movs	r0, r4
 8001014:	f7ff ffa2 	bl	8000f5c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001018:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800101e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001020:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	e7e9      	b.n	8000ffa <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 8001026:	2001      	movs	r0, #1
 8001028:	e7ef      	b.n	800100a <HAL_DMA_Init+0x86>
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	bffdfff8 	.word	0xbffdfff8
 8001030:	ffff800f 	.word	0xffff800f

08001034 <HAL_DMA_Start_IT>:
{
 8001034:	b570      	push	{r4, r5, r6, lr}
 8001036:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8001038:	2024      	movs	r0, #36	; 0x24
 800103a:	5c20      	ldrb	r0, [r4, r0]
 800103c:	2801      	cmp	r0, #1
 800103e:	d045      	beq.n	80010cc <HAL_DMA_Start_IT+0x98>
 8001040:	2024      	movs	r0, #36	; 0x24
 8001042:	2501      	movs	r5, #1
 8001044:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8001046:	3001      	adds	r0, #1
 8001048:	5c20      	ldrb	r0, [r4, r0]
 800104a:	2801      	cmp	r0, #1
 800104c:	d006      	beq.n	800105c <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001052:	3b5c      	subs	r3, #92	; 0x5c
 8001054:	2200      	movs	r2, #0
 8001056:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8001058:	2001      	movs	r0, #1
}
 800105a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800105c:	3024      	adds	r0, #36	; 0x24
 800105e:	3501      	adds	r5, #1
 8001060:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001062:	2000      	movs	r0, #0
 8001064:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001066:	6825      	ldr	r5, [r4, #0]
 8001068:	6828      	ldr	r0, [r5, #0]
 800106a:	2601      	movs	r6, #1
 800106c:	43b0      	bics	r0, r6
 800106e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001070:	0020      	movs	r0, r4
 8001072:	f7ff ff33 	bl	8000edc <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8001076:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01c      	beq.n	80010b6 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800107c:	6822      	ldr	r2, [r4, #0]
 800107e:	6813      	ldr	r3, [r2, #0]
 8001080:	210e      	movs	r1, #14
 8001082:	430b      	orrs	r3, r1
 8001084:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001086:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	03d2      	lsls	r2, r2, #15
 800108c:	d504      	bpl.n	8001098 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800108e:	6819      	ldr	r1, [r3, #0]
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	0052      	lsls	r2, r2, #1
 8001094:	430a      	orrs	r2, r1
 8001096:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8001098:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800109a:	2b00      	cmp	r3, #0
 800109c:	d004      	beq.n	80010a8 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800109e:	6819      	ldr	r1, [r3, #0]
 80010a0:	2280      	movs	r2, #128	; 0x80
 80010a2:	0052      	lsls	r2, r2, #1
 80010a4:	430a      	orrs	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80010a8:	6822      	ldr	r2, [r4, #0]
 80010aa:	6813      	ldr	r3, [r2, #0]
 80010ac:	2101      	movs	r1, #1
 80010ae:	430b      	orrs	r3, r1
 80010b0:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010b2:	2000      	movs	r0, #0
 80010b4:	e7d1      	b.n	800105a <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	6813      	ldr	r3, [r2, #0]
 80010ba:	2104      	movs	r1, #4
 80010bc:	438b      	bics	r3, r1
 80010be:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010c0:	6822      	ldr	r2, [r4, #0]
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	3106      	adds	r1, #6
 80010c6:	430b      	orrs	r3, r1
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e7dc      	b.n	8001086 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 80010cc:	2002      	movs	r0, #2
 80010ce:	e7c4      	b.n	800105a <HAL_DMA_Start_IT+0x26>

080010d0 <HAL_DMA_Abort>:
{
 80010d0:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 80010d2:	2800      	cmp	r0, #0
 80010d4:	d036      	beq.n	8001144 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010d6:	2325      	movs	r3, #37	; 0x25
 80010d8:	5cc3      	ldrb	r3, [r0, r3]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d006      	beq.n	80010ec <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010de:	2304      	movs	r3, #4
 80010e0:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80010e2:	3320      	adds	r3, #32
 80010e4:	2200      	movs	r2, #0
 80010e6:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80010e8:	2001      	movs	r0, #1
}
 80010ea:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ec:	6802      	ldr	r2, [r0, #0]
 80010ee:	6813      	ldr	r3, [r2, #0]
 80010f0:	210e      	movs	r1, #14
 80010f2:	438b      	bics	r3, r1
 80010f4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80010f8:	6813      	ldr	r3, [r2, #0]
 80010fa:	4913      	ldr	r1, [pc, #76]	; (8001148 <HAL_DMA_Abort+0x78>)
 80010fc:	400b      	ands	r3, r1
 80010fe:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001100:	6801      	ldr	r1, [r0, #0]
 8001102:	680a      	ldr	r2, [r1, #0]
 8001104:	2301      	movs	r3, #1
 8001106:	439a      	bics	r2, r3
 8001108:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800110a:	4c10      	ldr	r4, [pc, #64]	; (800114c <HAL_DMA_Abort+0x7c>)
 800110c:	6862      	ldr	r2, [r4, #4]
 800110e:	211c      	movs	r1, #28
 8001110:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001112:	4029      	ands	r1, r5
 8001114:	408b      	lsls	r3, r1
 8001116:	4313      	orrs	r3, r2
 8001118:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800111a:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800111c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800111e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001120:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001122:	2b00      	cmp	r3, #0
 8001124:	d006      	beq.n	8001134 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	4907      	ldr	r1, [pc, #28]	; (8001148 <HAL_DMA_Abort+0x78>)
 800112a:	400a      	ands	r2, r1
 800112c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800112e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001130:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8001132:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001134:	2325      	movs	r3, #37	; 0x25
 8001136:	2201      	movs	r2, #1
 8001138:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 800113a:	3b01      	subs	r3, #1
 800113c:	2200      	movs	r2, #0
 800113e:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001140:	2000      	movs	r0, #0
 8001142:	e7d2      	b.n	80010ea <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8001144:	2001      	movs	r0, #1
 8001146:	e7d0      	b.n	80010ea <HAL_DMA_Abort+0x1a>
 8001148:	fffffeff 	.word	0xfffffeff
 800114c:	40020000 	.word	0x40020000

08001150 <HAL_DMA_Abort_IT>:
{
 8001150:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001152:	2325      	movs	r3, #37	; 0x25
 8001154:	5cc3      	ldrb	r3, [r0, r3]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d003      	beq.n	8001162 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800115a:	2304      	movs	r3, #4
 800115c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800115e:	2001      	movs	r0, #1
}
 8001160:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001162:	6802      	ldr	r2, [r0, #0]
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	210e      	movs	r1, #14
 8001168:	438b      	bics	r3, r1
 800116a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800116c:	6801      	ldr	r1, [r0, #0]
 800116e:	680a      	ldr	r2, [r1, #0]
 8001170:	2301      	movs	r3, #1
 8001172:	439a      	bics	r2, r3
 8001174:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001176:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001178:	680a      	ldr	r2, [r1, #0]
 800117a:	4c13      	ldr	r4, [pc, #76]	; (80011c8 <HAL_DMA_Abort_IT+0x78>)
 800117c:	4022      	ands	r2, r4
 800117e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8001180:	4c12      	ldr	r4, [pc, #72]	; (80011cc <HAL_DMA_Abort_IT+0x7c>)
 8001182:	6862      	ldr	r2, [r4, #4]
 8001184:	211c      	movs	r1, #28
 8001186:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001188:	4029      	ands	r1, r5
 800118a:	408b      	lsls	r3, r1
 800118c:	4313      	orrs	r3, r2
 800118e:	6063      	str	r3, [r4, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001190:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001192:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001194:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8001196:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001198:	2b00      	cmp	r3, #0
 800119a:	d006      	beq.n	80011aa <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	490a      	ldr	r1, [pc, #40]	; (80011c8 <HAL_DMA_Abort_IT+0x78>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80011a6:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80011a8:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80011aa:	2325      	movs	r3, #37	; 0x25
 80011ac:	2201      	movs	r2, #1
 80011ae:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80011b0:	3b01      	subs	r3, #1
 80011b2:	2200      	movs	r2, #0
 80011b4:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 80011b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 80011bc:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80011be:	2000      	movs	r0, #0
 80011c0:	e7ce      	b.n	8001160 <HAL_DMA_Abort_IT+0x10>
 80011c2:	2000      	movs	r0, #0
 80011c4:	e7cc      	b.n	8001160 <HAL_DMA_Abort_IT+0x10>
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	fffffeff 	.word	0xfffffeff
 80011cc:	40020000 	.word	0x40020000

080011d0 <HAL_DMA_IRQHandler>:
{
 80011d0:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 80011d2:	4b31      	ldr	r3, [pc, #196]	; (8001298 <HAL_DMA_IRQHandler+0xc8>)
 80011d4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80011d6:	6804      	ldr	r4, [r0, #0]
 80011d8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80011da:	231c      	movs	r3, #28
 80011dc:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80011de:	4013      	ands	r3, r2
 80011e0:	2204      	movs	r2, #4
 80011e2:	409a      	lsls	r2, r3
 80011e4:	4211      	tst	r1, r2
 80011e6:	d016      	beq.n	8001216 <HAL_DMA_IRQHandler+0x46>
 80011e8:	076a      	lsls	r2, r5, #29
 80011ea:	d514      	bpl.n	8001216 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	069b      	lsls	r3, r3, #26
 80011f0:	d403      	bmi.n	80011fa <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011f2:	6823      	ldr	r3, [r4, #0]
 80011f4:	2204      	movs	r2, #4
 80011f6:	4393      	bics	r3, r2
 80011f8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80011fa:	4c27      	ldr	r4, [pc, #156]	; (8001298 <HAL_DMA_IRQHandler+0xc8>)
 80011fc:	6863      	ldr	r3, [r4, #4]
 80011fe:	211c      	movs	r1, #28
 8001200:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001202:	4011      	ands	r1, r2
 8001204:	2204      	movs	r2, #4
 8001206:	408a      	lsls	r2, r1
 8001208:	4313      	orrs	r3, r2
 800120a:	6063      	str	r3, [r4, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 800120c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800120e:	2b00      	cmp	r3, #0
 8001210:	d000      	beq.n	8001214 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 8001212:	4798      	blx	r3
}
 8001214:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001216:	2202      	movs	r2, #2
 8001218:	409a      	lsls	r2, r3
 800121a:	4211      	tst	r1, r2
 800121c:	d01c      	beq.n	8001258 <HAL_DMA_IRQHandler+0x88>
 800121e:	07aa      	lsls	r2, r5, #30
 8001220:	d51a      	bpl.n	8001258 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001222:	6823      	ldr	r3, [r4, #0]
 8001224:	069b      	lsls	r3, r3, #26
 8001226:	d406      	bmi.n	8001236 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	220a      	movs	r2, #10
 800122c:	4393      	bics	r3, r2
 800122e:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8001230:	2325      	movs	r3, #37	; 0x25
 8001232:	3a09      	subs	r2, #9
 8001234:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001236:	4c18      	ldr	r4, [pc, #96]	; (8001298 <HAL_DMA_IRQHandler+0xc8>)
 8001238:	6863      	ldr	r3, [r4, #4]
 800123a:	211c      	movs	r1, #28
 800123c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800123e:	4011      	ands	r1, r2
 8001240:	2202      	movs	r2, #2
 8001242:	408a      	lsls	r2, r1
 8001244:	4313      	orrs	r3, r2
 8001246:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hdma);
 8001248:	2324      	movs	r3, #36	; 0x24
 800124a:	2200      	movs	r2, #0
 800124c:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800124e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001250:	2b00      	cmp	r3, #0
 8001252:	d0df      	beq.n	8001214 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8001254:	4798      	blx	r3
 8001256:	e7dd      	b.n	8001214 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001258:	2208      	movs	r2, #8
 800125a:	409a      	lsls	r2, r3
 800125c:	4211      	tst	r1, r2
 800125e:	d0d9      	beq.n	8001214 <HAL_DMA_IRQHandler+0x44>
 8001260:	072b      	lsls	r3, r5, #28
 8001262:	d5d7      	bpl.n	8001214 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	220e      	movs	r2, #14
 8001268:	4393      	bics	r3, r2
 800126a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800126c:	4c0a      	ldr	r4, [pc, #40]	; (8001298 <HAL_DMA_IRQHandler+0xc8>)
 800126e:	6862      	ldr	r2, [r4, #4]
 8001270:	211c      	movs	r1, #28
 8001272:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001274:	4019      	ands	r1, r3
 8001276:	2301      	movs	r3, #1
 8001278:	001d      	movs	r5, r3
 800127a:	408d      	lsls	r5, r1
 800127c:	432a      	orrs	r2, r5
 800127e:	6062      	str	r2, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001280:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001282:	2225      	movs	r2, #37	; 0x25
 8001284:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8001286:	3323      	adds	r3, #35	; 0x23
 8001288:	2200      	movs	r2, #0
 800128a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 800128c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0c0      	beq.n	8001214 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8001292:	4798      	blx	r3
  return;
 8001294:	e7be      	b.n	8001214 <HAL_DMA_IRQHandler+0x44>
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	40020000 	.word	0x40020000

0800129c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800129e:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	e05a      	b.n	8001358 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012a2:	6884      	ldr	r4, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012a4:	005f      	lsls	r7, r3, #1
 80012a6:	2603      	movs	r6, #3
 80012a8:	40be      	lsls	r6, r7
 80012aa:	43b4      	bics	r4, r6
 80012ac:	0026      	movs	r6, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012ae:	68cc      	ldr	r4, [r1, #12]
 80012b0:	40bc      	lsls	r4, r7
 80012b2:	4334      	orrs	r4, r6
        GPIOx->OSPEEDR = temp;
 80012b4:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b6:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012b8:	4394      	bics	r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	684a      	ldr	r2, [r1, #4]
 80012bc:	0916      	lsrs	r6, r2, #4
 80012be:	2201      	movs	r2, #1
 80012c0:	4032      	ands	r2, r6
 80012c2:	409a      	lsls	r2, r3
 80012c4:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80012c6:	6042      	str	r2, [r0, #4]
 80012c8:	e056      	b.n	8001378 <HAL_GPIO_Init+0xdc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ca:	08dc      	lsrs	r4, r3, #3
 80012cc:	3408      	adds	r4, #8
 80012ce:	00a4      	lsls	r4, r4, #2
 80012d0:	5826      	ldr	r6, [r4, r0]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012d2:	3205      	adds	r2, #5
 80012d4:	401a      	ands	r2, r3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	270f      	movs	r7, #15
 80012da:	4097      	lsls	r7, r2
 80012dc:	43be      	bics	r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012de:	690f      	ldr	r7, [r1, #16]
 80012e0:	4097      	lsls	r7, r2
 80012e2:	003a      	movs	r2, r7
 80012e4:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3u] = temp;
 80012e6:	5022      	str	r2, [r4, r0]
 80012e8:	e05a      	b.n	80013a0 <HAL_GPIO_Init+0x104>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80012ea:	2603      	movs	r6, #3
 80012ec:	e000      	b.n	80012f0 <HAL_GPIO_Init+0x54>
 80012ee:	2600      	movs	r6, #0
 80012f0:	40a6      	lsls	r6, r4
 80012f2:	0034      	movs	r4, r6
 80012f4:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2u] = temp;
 80012f6:	4e43      	ldr	r6, [pc, #268]	; (8001404 <HAL_GPIO_Init+0x168>)
 80012f8:	3218      	adds	r2, #24
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	5194      	str	r4, [r2, r6]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012fe:	6834      	ldr	r4, [r6, #0]
        temp &= ~(iocurrent);
 8001300:	43ea      	mvns	r2, r5
 8001302:	0026      	movs	r6, r4
 8001304:	43ae      	bics	r6, r5
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001306:	684f      	ldr	r7, [r1, #4]
 8001308:	02ff      	lsls	r7, r7, #11
 800130a:	d501      	bpl.n	8001310 <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 800130c:	432c      	orrs	r4, r5
 800130e:	0026      	movs	r6, r4
        }
        EXTI->RTSR1 = temp;
 8001310:	4c3c      	ldr	r4, [pc, #240]	; (8001404 <HAL_GPIO_Init+0x168>)
 8001312:	6026      	str	r6, [r4, #0]

        temp = EXTI->FTSR1;
 8001314:	6864      	ldr	r4, [r4, #4]
        temp &= ~(iocurrent);
 8001316:	0026      	movs	r6, r4
 8001318:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800131a:	684f      	ldr	r7, [r1, #4]
 800131c:	02bf      	lsls	r7, r7, #10
 800131e:	d501      	bpl.n	8001324 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8001320:	432c      	orrs	r4, r5
 8001322:	0026      	movs	r6, r4
        }
        EXTI->FTSR1 = temp;
 8001324:	4c37      	ldr	r4, [pc, #220]	; (8001404 <HAL_GPIO_Init+0x168>)
 8001326:	6066      	str	r6, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001328:	2684      	movs	r6, #132	; 0x84
 800132a:	59a4      	ldr	r4, [r4, r6]
        temp &= ~(iocurrent);
 800132c:	0026      	movs	r6, r4
 800132e:	4016      	ands	r6, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001330:	684f      	ldr	r7, [r1, #4]
 8001332:	03bf      	lsls	r7, r7, #14
 8001334:	d501      	bpl.n	800133a <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8001336:	432c      	orrs	r4, r5
 8001338:	0026      	movs	r6, r4
        }
        EXTI->EMR1 = temp;
 800133a:	4c32      	ldr	r4, [pc, #200]	; (8001404 <HAL_GPIO_Init+0x168>)
 800133c:	2784      	movs	r7, #132	; 0x84
 800133e:	51e6      	str	r6, [r4, r7]

        temp = EXTI->IMR1;
 8001340:	2680      	movs	r6, #128	; 0x80
 8001342:	59a4      	ldr	r4, [r4, r6]
        temp &= ~(iocurrent);
 8001344:	4022      	ands	r2, r4
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001346:	684e      	ldr	r6, [r1, #4]
 8001348:	03f6      	lsls	r6, r6, #15
 800134a:	d501      	bpl.n	8001350 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 800134c:	002a      	movs	r2, r5
 800134e:	4322      	orrs	r2, r4
        }
        EXTI->IMR1 = temp;
 8001350:	4d2c      	ldr	r5, [pc, #176]	; (8001404 <HAL_GPIO_Init+0x168>)
 8001352:	2480      	movs	r4, #128	; 0x80
 8001354:	512a      	str	r2, [r5, r4]
      }
    }

    position++;
 8001356:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001358:	680c      	ldr	r4, [r1, #0]
 800135a:	0022      	movs	r2, r4
 800135c:	40da      	lsrs	r2, r3
 800135e:	d04f      	beq.n	8001400 <HAL_GPIO_Init+0x164>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001360:	2201      	movs	r2, #1
 8001362:	409a      	lsls	r2, r3
 8001364:	0025      	movs	r5, r4
 8001366:	4015      	ands	r5, r2
    if (iocurrent != 0x00u)
 8001368:	4214      	tst	r4, r2
 800136a:	d0f4      	beq.n	8001356 <HAL_GPIO_Init+0xba>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800136c:	2403      	movs	r4, #3
 800136e:	684e      	ldr	r6, [r1, #4]
 8001370:	4034      	ands	r4, r6
 8001372:	3c01      	subs	r4, #1
 8001374:	2c01      	cmp	r4, #1
 8001376:	d994      	bls.n	80012a2 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001378:	2203      	movs	r2, #3
 800137a:	684c      	ldr	r4, [r1, #4]
 800137c:	4022      	ands	r2, r4
 800137e:	2a03      	cmp	r2, #3
 8001380:	d009      	beq.n	8001396 <HAL_GPIO_Init+0xfa>
        temp = GPIOx->PUPDR;
 8001382:	68c2      	ldr	r2, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001384:	005e      	lsls	r6, r3, #1
 8001386:	2403      	movs	r4, #3
 8001388:	40b4      	lsls	r4, r6
 800138a:	43a2      	bics	r2, r4
 800138c:	0014      	movs	r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800138e:	688a      	ldr	r2, [r1, #8]
 8001390:	40b2      	lsls	r2, r6
 8001392:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001394:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001396:	2203      	movs	r2, #3
 8001398:	684c      	ldr	r4, [r1, #4]
 800139a:	4022      	ands	r2, r4
 800139c:	2a02      	cmp	r2, #2
 800139e:	d094      	beq.n	80012ca <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 80013a0:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013a2:	005e      	lsls	r6, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	0017      	movs	r7, r2
 80013a8:	40b7      	lsls	r7, r6
 80013aa:	43bc      	bics	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013ac:	684f      	ldr	r7, [r1, #4]
 80013ae:	403a      	ands	r2, r7
 80013b0:	40b2      	lsls	r2, r6
 80013b2:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 80013b4:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b6:	22c0      	movs	r2, #192	; 0xc0
 80013b8:	0292      	lsls	r2, r2, #10
 80013ba:	684c      	ldr	r4, [r1, #4]
 80013bc:	4214      	tst	r4, r2
 80013be:	d0ca      	beq.n	8001356 <HAL_GPIO_Init+0xba>
        temp = EXTI->EXTICR[position >> 2u];
 80013c0:	089a      	lsrs	r2, r3, #2
 80013c2:	0014      	movs	r4, r2
 80013c4:	3418      	adds	r4, #24
 80013c6:	00a4      	lsls	r4, r4, #2
 80013c8:	4e0e      	ldr	r6, [pc, #56]	; (8001404 <HAL_GPIO_Init+0x168>)
 80013ca:	59a7      	ldr	r7, [r4, r6]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80013cc:	2403      	movs	r4, #3
 80013ce:	401c      	ands	r4, r3
 80013d0:	00e4      	lsls	r4, r4, #3
 80013d2:	260f      	movs	r6, #15
 80013d4:	40a6      	lsls	r6, r4
 80013d6:	43b7      	bics	r7, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80013d8:	26a0      	movs	r6, #160	; 0xa0
 80013da:	05f6      	lsls	r6, r6, #23
 80013dc:	42b0      	cmp	r0, r6
 80013de:	d086      	beq.n	80012ee <HAL_GPIO_Init+0x52>
 80013e0:	4e09      	ldr	r6, [pc, #36]	; (8001408 <HAL_GPIO_Init+0x16c>)
 80013e2:	42b0      	cmp	r0, r6
 80013e4:	d008      	beq.n	80013f8 <HAL_GPIO_Init+0x15c>
 80013e6:	4e09      	ldr	r6, [pc, #36]	; (800140c <HAL_GPIO_Init+0x170>)
 80013e8:	42b0      	cmp	r0, r6
 80013ea:	d007      	beq.n	80013fc <HAL_GPIO_Init+0x160>
 80013ec:	4e08      	ldr	r6, [pc, #32]	; (8001410 <HAL_GPIO_Init+0x174>)
 80013ee:	42b0      	cmp	r0, r6
 80013f0:	d100      	bne.n	80013f4 <HAL_GPIO_Init+0x158>
 80013f2:	e77a      	b.n	80012ea <HAL_GPIO_Init+0x4e>
 80013f4:	2605      	movs	r6, #5
 80013f6:	e77b      	b.n	80012f0 <HAL_GPIO_Init+0x54>
 80013f8:	2601      	movs	r6, #1
 80013fa:	e779      	b.n	80012f0 <HAL_GPIO_Init+0x54>
 80013fc:	2602      	movs	r6, #2
 80013fe:	e777      	b.n	80012f0 <HAL_GPIO_Init+0x54>
  }
}
 8001400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	40021800 	.word	0x40021800
 8001408:	50000400 	.word	0x50000400
 800140c:	50000800 	.word	0x50000800
 8001410:	50000c00 	.word	0x50000c00

08001414 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001414:	2a00      	cmp	r2, #0
 8001416:	d001      	beq.n	800141c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001418:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800141a:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800141c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800141e:	e7fc      	b.n	800141a <HAL_GPIO_WritePin+0x6>

08001420 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001420:	6803      	ldr	r3, [r0, #0]
 8001422:	699a      	ldr	r2, [r3, #24]
 8001424:	0792      	lsls	r2, r2, #30
 8001426:	d501      	bpl.n	800142c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001428:	2200      	movs	r2, #0
 800142a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800142c:	6803      	ldr	r3, [r0, #0]
 800142e:	699a      	ldr	r2, [r3, #24]
 8001430:	07d2      	lsls	r2, r2, #31
 8001432:	d403      	bmi.n	800143c <I2C_Flush_TXDR+0x1c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	2101      	movs	r1, #1
 8001438:	430a      	orrs	r2, r1
 800143a:	619a      	str	r2, [r3, #24]
  }
}
 800143c:	4770      	bx	lr
	...

08001440 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001440:	b510      	push	{r4, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001442:	0589      	lsls	r1, r1, #22
 8001444:	0d89      	lsrs	r1, r1, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001446:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001448:	4311      	orrs	r1, r2
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800144a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800144c:	9b02      	ldr	r3, [sp, #8]
 800144e:	4319      	orrs	r1, r3
 8001450:	0049      	lsls	r1, r1, #1
 8001452:	0849      	lsrs	r1, r1, #1
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001454:	6804      	ldr	r4, [r0, #0]
 8001456:	6862      	ldr	r2, [r4, #4]
 8001458:	0d5b      	lsrs	r3, r3, #21
 800145a:	2080      	movs	r0, #128	; 0x80
 800145c:	00c0      	lsls	r0, r0, #3
 800145e:	4003      	ands	r3, r0
 8001460:	4802      	ldr	r0, [pc, #8]	; (800146c <I2C_TransferConfig+0x2c>)
 8001462:	4303      	orrs	r3, r0
 8001464:	439a      	bics	r2, r3
 8001466:	4311      	orrs	r1, r2
 8001468:	6061      	str	r1, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800146a:	bd10      	pop	{r4, pc}
 800146c:	03ff63ff 	.word	0x03ff63ff

08001470 <I2C_IsErrorOccurred>:
{
 8001470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001472:	46c6      	mov	lr, r8
 8001474:	b500      	push	{lr}
 8001476:	0004      	movs	r4, r0
 8001478:	000d      	movs	r5, r1
 800147a:	0017      	movs	r7, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 800147c:	6801      	ldr	r1, [r0, #0]
 800147e:	698b      	ldr	r3, [r1, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001480:	2210      	movs	r2, #16
 8001482:	0016      	movs	r6, r2
 8001484:	401e      	ands	r6, r3
 8001486:	421a      	tst	r2, r3
 8001488:	d100      	bne.n	800148c <I2C_IsErrorOccurred+0x1c>
 800148a:	e075      	b.n	8001578 <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800148c:	2310      	movs	r3, #16
 800148e:	61cb      	str	r3, [r1, #28]
  uint32_t error_code = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	4698      	mov	r8, r3
  HAL_StatusTypeDef status = HAL_OK;
 8001494:	2600      	movs	r6, #0
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001496:	6823      	ldr	r3, [r4, #0]
 8001498:	6998      	ldr	r0, [r3, #24]
 800149a:	0682      	lsls	r2, r0, #26
 800149c:	d431      	bmi.n	8001502 <I2C_IsErrorOccurred+0x92>
 800149e:	2e00      	cmp	r6, #0
 80014a0:	d12f      	bne.n	8001502 <I2C_IsErrorOccurred+0x92>
      if (Timeout != HAL_MAX_DELAY)
 80014a2:	1c6b      	adds	r3, r5, #1
 80014a4:	d0f7      	beq.n	8001496 <I2C_IsErrorOccurred+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80014a6:	f7ff fc99 	bl	8000ddc <HAL_GetTick>
 80014aa:	1bc0      	subs	r0, r0, r7
 80014ac:	42a8      	cmp	r0, r5
 80014ae:	d801      	bhi.n	80014b4 <I2C_IsErrorOccurred+0x44>
 80014b0:	2d00      	cmp	r5, #0
 80014b2:	d1f0      	bne.n	8001496 <I2C_IsErrorOccurred+0x26>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80014b4:	6821      	ldr	r1, [r4, #0]
 80014b6:	684b      	ldr	r3, [r1, #4]
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	01d2      	lsls	r2, r2, #7
 80014bc:	4013      	ands	r3, r2
          tmp2 = hi2c->Mode;
 80014be:	2242      	movs	r2, #66	; 0x42
 80014c0:	5ca2      	ldrb	r2, [r4, r2]
 80014c2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80014c4:	6988      	ldr	r0, [r1, #24]
 80014c6:	0400      	lsls	r0, r0, #16
 80014c8:	d503      	bpl.n	80014d2 <I2C_IsErrorOccurred+0x62>
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <I2C_IsErrorOccurred+0x62>
              (tmp1 != I2C_CR2_STOP) && \
 80014ce:	2a20      	cmp	r2, #32
 80014d0:	d10e      	bne.n	80014f0 <I2C_IsErrorOccurred+0x80>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80014d2:	6823      	ldr	r3, [r4, #0]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	069b      	lsls	r3, r3, #26
 80014d8:	d4dd      	bmi.n	8001496 <I2C_IsErrorOccurred+0x26>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80014da:	f7ff fc7f 	bl	8000ddc <HAL_GetTick>
 80014de:	1bc0      	subs	r0, r0, r7
 80014e0:	2819      	cmp	r0, #25
 80014e2:	d9f6      	bls.n	80014d2 <I2C_IsErrorOccurred+0x62>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80014e4:	2320      	movs	r3, #32
 80014e6:	4642      	mov	r2, r8
 80014e8:	431a      	orrs	r2, r3
 80014ea:	4690      	mov	r8, r2
              status = HAL_ERROR;
 80014ec:	2601      	movs	r6, #1
              break;
 80014ee:	e7d2      	b.n	8001496 <I2C_IsErrorOccurred+0x26>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80014f0:	684a      	ldr	r2, [r1, #4]
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	01db      	lsls	r3, r3, #7
 80014f6:	4313      	orrs	r3, r2
 80014f8:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80014fa:	f7ff fc6f 	bl	8000ddc <HAL_GetTick>
 80014fe:	0007      	movs	r7, r0
 8001500:	e7e7      	b.n	80014d2 <I2C_IsErrorOccurred+0x62>
    if (status == HAL_OK)
 8001502:	2e00      	cmp	r6, #0
 8001504:	d101      	bne.n	800150a <I2C_IsErrorOccurred+0x9a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001506:	2220      	movs	r2, #32
 8001508:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800150a:	2604      	movs	r6, #4
 800150c:	4643      	mov	r3, r8
 800150e:	4333      	orrs	r3, r6
 8001510:	001e      	movs	r6, r3
    status = HAL_ERROR;
 8001512:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001518:	05d9      	lsls	r1, r3, #23
 800151a:	d504      	bpl.n	8001526 <I2C_IsErrorOccurred+0xb6>
    error_code |= HAL_I2C_ERROR_BERR;
 800151c:	2101      	movs	r1, #1
 800151e:	430e      	orrs	r6, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001520:	31ff      	adds	r1, #255	; 0xff
 8001522:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001524:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001526:	055a      	lsls	r2, r3, #21
 8001528:	d506      	bpl.n	8001538 <I2C_IsErrorOccurred+0xc8>
    error_code |= HAL_I2C_ERROR_OVR;
 800152a:	2208      	movs	r2, #8
 800152c:	4316      	orrs	r6, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800152e:	6822      	ldr	r2, [r4, #0]
 8001530:	2180      	movs	r1, #128	; 0x80
 8001532:	00c9      	lsls	r1, r1, #3
 8001534:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8001536:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001538:	059b      	lsls	r3, r3, #22
 800153a:	d51f      	bpl.n	800157c <I2C_IsErrorOccurred+0x10c>
    error_code |= HAL_I2C_ERROR_ARLO;
 800153c:	2302      	movs	r3, #2
 800153e:	431e      	orrs	r6, r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001540:	6823      	ldr	r3, [r4, #0]
 8001542:	2280      	movs	r2, #128	; 0x80
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8001548:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800154a:	0020      	movs	r0, r4
 800154c:	f7ff ff68 	bl	8001420 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001550:	6822      	ldr	r2, [r4, #0]
 8001552:	6853      	ldr	r3, [r2, #4]
 8001554:	490b      	ldr	r1, [pc, #44]	; (8001584 <I2C_IsErrorOccurred+0x114>)
 8001556:	400b      	ands	r3, r1
 8001558:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800155a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800155c:	431e      	orrs	r6, r3
 800155e:	6466      	str	r6, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001560:	2341      	movs	r3, #65	; 0x41
 8001562:	2220      	movs	r2, #32
 8001564:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001566:	2300      	movs	r3, #0
 8001568:	3222      	adds	r2, #34	; 0x22
 800156a:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 800156c:	3a02      	subs	r2, #2
 800156e:	54a3      	strb	r3, [r4, r2]
}
 8001570:	0028      	movs	r0, r5
 8001572:	bc80      	pop	{r7}
 8001574:	46b8      	mov	r8, r7
 8001576:	bdf0      	pop	{r4, r5, r6, r7, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8001578:	2500      	movs	r5, #0
 800157a:	e7cb      	b.n	8001514 <I2C_IsErrorOccurred+0xa4>
  if (status != HAL_OK)
 800157c:	2d00      	cmp	r5, #0
 800157e:	d0f7      	beq.n	8001570 <I2C_IsErrorOccurred+0x100>
 8001580:	e7e3      	b.n	800154a <I2C_IsErrorOccurred+0xda>
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	fe00e800 	.word	0xfe00e800

08001588 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001588:	b570      	push	{r4, r5, r6, lr}
 800158a:	0004      	movs	r4, r0
 800158c:	000d      	movs	r5, r1
 800158e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001590:	6823      	ldr	r3, [r4, #0]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	079b      	lsls	r3, r3, #30
 8001596:	d41c      	bmi.n	80015d2 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001598:	0032      	movs	r2, r6
 800159a:	0029      	movs	r1, r5
 800159c:	0020      	movs	r0, r4
 800159e:	f7ff ff67 	bl	8001470 <I2C_IsErrorOccurred>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d117      	bne.n	80015d6 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 80015a6:	1c6b      	adds	r3, r5, #1
 80015a8:	d0f2      	beq.n	8001590 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015aa:	f7ff fc17 	bl	8000ddc <HAL_GetTick>
 80015ae:	1b80      	subs	r0, r0, r6
 80015b0:	42a8      	cmp	r0, r5
 80015b2:	d801      	bhi.n	80015b8 <I2C_WaitOnTXISFlagUntilTimeout+0x30>
 80015b4:	2d00      	cmp	r5, #0
 80015b6:	d1eb      	bne.n	8001590 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015ba:	2220      	movs	r2, #32
 80015bc:	4313      	orrs	r3, r2
 80015be:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	2341      	movs	r3, #65	; 0x41
 80015c2:	54e2      	strb	r2, [r4, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	3222      	adds	r2, #34	; 0x22
 80015c8:	54a3      	strb	r3, [r4, r2]
        __HAL_UNLOCK(hi2c);
 80015ca:	3a02      	subs	r2, #2
 80015cc:	54a3      	strb	r3, [r4, r2]
        return HAL_ERROR;
 80015ce:	2001      	movs	r0, #1
 80015d0:	e000      	b.n	80015d4 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  return HAL_OK;
 80015d2:	2000      	movs	r0, #0
}
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80015d6:	2001      	movs	r0, #1
 80015d8:	e7fc      	b.n	80015d4 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>

080015da <I2C_WaitOnFlagUntilTimeout>:
{
 80015da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015dc:	46c6      	mov	lr, r8
 80015de:	b500      	push	{lr}
 80015e0:	0007      	movs	r7, r0
 80015e2:	000d      	movs	r5, r1
 80015e4:	4690      	mov	r8, r2
 80015e6:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	699c      	ldr	r4, [r3, #24]
 80015ec:	402c      	ands	r4, r5
 80015ee:	1b64      	subs	r4, r4, r5
 80015f0:	4263      	negs	r3, r4
 80015f2:	415c      	adcs	r4, r3
 80015f4:	4544      	cmp	r4, r8
 80015f6:	d116      	bne.n	8001626 <I2C_WaitOnFlagUntilTimeout+0x4c>
    if (Timeout != HAL_MAX_DELAY)
 80015f8:	1c73      	adds	r3, r6, #1
 80015fa:	d0f5      	beq.n	80015e8 <I2C_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015fc:	f7ff fbee 	bl	8000ddc <HAL_GetTick>
 8001600:	9b06      	ldr	r3, [sp, #24]
 8001602:	1ac0      	subs	r0, r0, r3
 8001604:	42b0      	cmp	r0, r6
 8001606:	d801      	bhi.n	800160c <I2C_WaitOnFlagUntilTimeout+0x32>
 8001608:	2e00      	cmp	r6, #0
 800160a:	d1ed      	bne.n	80015e8 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800160c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800160e:	2220      	movs	r2, #32
 8001610:	4313      	orrs	r3, r2
 8001612:	647b      	str	r3, [r7, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001614:	2341      	movs	r3, #65	; 0x41
 8001616:	54fa      	strb	r2, [r7, r3]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001618:	2300      	movs	r3, #0
 800161a:	3222      	adds	r2, #34	; 0x22
 800161c:	54bb      	strb	r3, [r7, r2]
        __HAL_UNLOCK(hi2c);
 800161e:	3a02      	subs	r2, #2
 8001620:	54bb      	strb	r3, [r7, r2]
        return HAL_ERROR;
 8001622:	2001      	movs	r0, #1
 8001624:	e000      	b.n	8001628 <I2C_WaitOnFlagUntilTimeout+0x4e>
  return HAL_OK;
 8001626:	2000      	movs	r0, #0
}
 8001628:	bc80      	pop	{r7}
 800162a:	46b8      	mov	r8, r7
 800162c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800162e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800162e:	b570      	push	{r4, r5, r6, lr}
 8001630:	0005      	movs	r5, r0
 8001632:	000c      	movs	r4, r1
 8001634:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	069b      	lsls	r3, r3, #26
 800163c:	d41a      	bmi.n	8001674 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800163e:	0032      	movs	r2, r6
 8001640:	0021      	movs	r1, r4
 8001642:	0028      	movs	r0, r5
 8001644:	f7ff ff14 	bl	8001470 <I2C_IsErrorOccurred>
 8001648:	2800      	cmp	r0, #0
 800164a:	d115      	bne.n	8001678 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800164c:	f7ff fbc6 	bl	8000ddc <HAL_GetTick>
 8001650:	1b80      	subs	r0, r0, r6
 8001652:	42a0      	cmp	r0, r4
 8001654:	d801      	bhi.n	800165a <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8001656:	2c00      	cmp	r4, #0
 8001658:	d1ed      	bne.n	8001636 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800165a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800165c:	2220      	movs	r2, #32
 800165e:	4313      	orrs	r3, r2
 8001660:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001662:	2341      	movs	r3, #65	; 0x41
 8001664:	54ea      	strb	r2, [r5, r3]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	3222      	adds	r2, #34	; 0x22
 800166a:	54ab      	strb	r3, [r5, r2]
      __HAL_UNLOCK(hi2c);
 800166c:	3a02      	subs	r2, #2
 800166e:	54ab      	strb	r3, [r5, r2]
      return HAL_ERROR;
 8001670:	2001      	movs	r0, #1
}
 8001672:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8001674:	2000      	movs	r0, #0
 8001676:	e7fc      	b.n	8001672 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
      return HAL_ERROR;
 8001678:	2001      	movs	r0, #1
 800167a:	e7fa      	b.n	8001672 <I2C_WaitOnSTOPFlagUntilTimeout+0x44>

0800167c <HAL_I2C_Init>:
{
 800167c:	b510      	push	{r4, lr}
 800167e:	1e04      	subs	r4, r0, #0
  if (hi2c == NULL)
 8001680:	d059      	beq.n	8001736 <HAL_I2C_Init+0xba>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001682:	2341      	movs	r3, #65	; 0x41
 8001684:	5cc3      	ldrb	r3, [r0, r3]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d043      	beq.n	8001712 <HAL_I2C_Init+0x96>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800168a:	2341      	movs	r3, #65	; 0x41
 800168c:	2224      	movs	r2, #36	; 0x24
 800168e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8001690:	6822      	ldr	r2, [r4, #0]
 8001692:	6813      	ldr	r3, [r2, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	438b      	bics	r3, r1
 8001698:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800169a:	6822      	ldr	r2, [r4, #0]
 800169c:	4b27      	ldr	r3, [pc, #156]	; (800173c <HAL_I2C_Init+0xc0>)
 800169e:	6861      	ldr	r1, [r4, #4]
 80016a0:	400b      	ands	r3, r1
 80016a2:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016a4:	6822      	ldr	r2, [r4, #0]
 80016a6:	6893      	ldr	r3, [r2, #8]
 80016a8:	4925      	ldr	r1, [pc, #148]	; (8001740 <HAL_I2C_Init+0xc4>)
 80016aa:	400b      	ands	r3, r1
 80016ac:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ae:	68e3      	ldr	r3, [r4, #12]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d034      	beq.n	800171e <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016b4:	6822      	ldr	r2, [r4, #0]
 80016b6:	2384      	movs	r3, #132	; 0x84
 80016b8:	021b      	lsls	r3, r3, #8
 80016ba:	68a1      	ldr	r1, [r4, #8]
 80016bc:	430b      	orrs	r3, r1
 80016be:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016c0:	68e3      	ldr	r3, [r4, #12]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d032      	beq.n	800172c <HAL_I2C_Init+0xb0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016c6:	6822      	ldr	r2, [r4, #0]
 80016c8:	6851      	ldr	r1, [r2, #4]
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_I2C_Init+0xc8>)
 80016cc:	430b      	orrs	r3, r1
 80016ce:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	68d3      	ldr	r3, [r2, #12]
 80016d4:	491a      	ldr	r1, [pc, #104]	; (8001740 <HAL_I2C_Init+0xc4>)
 80016d6:	400b      	ands	r3, r1
 80016d8:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016da:	6923      	ldr	r3, [r4, #16]
 80016dc:	6962      	ldr	r2, [r4, #20]
 80016de:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016e0:	69a2      	ldr	r2, [r4, #24]
 80016e2:	0212      	lsls	r2, r2, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016e4:	6821      	ldr	r1, [r4, #0]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ea:	6822      	ldr	r2, [r4, #0]
 80016ec:	69e3      	ldr	r3, [r4, #28]
 80016ee:	6a21      	ldr	r1, [r4, #32]
 80016f0:	430b      	orrs	r3, r1
 80016f2:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80016f4:	6822      	ldr	r2, [r4, #0]
 80016f6:	6813      	ldr	r3, [r2, #0]
 80016f8:	2101      	movs	r1, #1
 80016fa:	430b      	orrs	r3, r1
 80016fc:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fe:	2300      	movs	r3, #0
 8001700:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001702:	2241      	movs	r2, #65	; 0x41
 8001704:	311f      	adds	r1, #31
 8001706:	54a1      	strb	r1, [r4, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001708:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800170a:	3201      	adds	r2, #1
 800170c:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 800170e:	2000      	movs	r0, #0
}
 8001710:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8001712:	3340      	adds	r3, #64	; 0x40
 8001714:	2200      	movs	r2, #0
 8001716:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8001718:	f7ff f8e4 	bl	80008e4 <HAL_I2C_MspInit>
 800171c:	e7b5      	b.n	800168a <HAL_I2C_Init+0xe>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800171e:	6822      	ldr	r2, [r4, #0]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	68a1      	ldr	r1, [r4, #8]
 8001726:	430b      	orrs	r3, r1
 8001728:	6093      	str	r3, [r2, #8]
 800172a:	e7c9      	b.n	80016c0 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800172c:	6823      	ldr	r3, [r4, #0]
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	e7c7      	b.n	80016c6 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8001736:	2001      	movs	r0, #1
 8001738:	e7ea      	b.n	8001710 <HAL_I2C_Init+0x94>
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	f0ffffff 	.word	0xf0ffffff
 8001740:	ffff7fff 	.word	0xffff7fff
 8001744:	02008000 	.word	0x02008000

08001748 <HAL_I2C_Master_Transmit>:
{
 8001748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800174a:	b085      	sub	sp, #20
 800174c:	0004      	movs	r4, r0
 800174e:	000f      	movs	r7, r1
 8001750:	9202      	str	r2, [sp, #8]
 8001752:	9303      	str	r3, [sp, #12]
 8001754:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001756:	2341      	movs	r3, #65	; 0x41
 8001758:	5cc3      	ldrb	r3, [r0, r3]
 800175a:	2b20      	cmp	r3, #32
 800175c:	d000      	beq.n	8001760 <HAL_I2C_Master_Transmit+0x18>
 800175e:	e09b      	b.n	8001898 <HAL_I2C_Master_Transmit+0x150>
    __HAL_LOCK(hi2c);
 8001760:	3320      	adds	r3, #32
 8001762:	5cc3      	ldrb	r3, [r0, r3]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d100      	bne.n	800176a <HAL_I2C_Master_Transmit+0x22>
 8001768:	e099      	b.n	800189e <HAL_I2C_Master_Transmit+0x156>
 800176a:	2340      	movs	r3, #64	; 0x40
 800176c:	2201      	movs	r2, #1
 800176e:	54c2      	strb	r2, [r0, r3]
    tickstart = HAL_GetTick();
 8001770:	f7ff fb34 	bl	8000ddc <HAL_GetTick>
 8001774:	0006      	movs	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	9000      	str	r0, [sp, #0]
 800177a:	2319      	movs	r3, #25
 800177c:	2201      	movs	r2, #1
 800177e:	0209      	lsls	r1, r1, #8
 8001780:	0020      	movs	r0, r4
 8001782:	f7ff ff2a 	bl	80015da <I2C_WaitOnFlagUntilTimeout>
 8001786:	2800      	cmp	r0, #0
 8001788:	d000      	beq.n	800178c <HAL_I2C_Master_Transmit+0x44>
 800178a:	e08a      	b.n	80018a2 <HAL_I2C_Master_Transmit+0x15a>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800178c:	2341      	movs	r3, #65	; 0x41
 800178e:	2221      	movs	r2, #33	; 0x21
 8001790:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001792:	3301      	adds	r3, #1
 8001794:	3a11      	subs	r2, #17
 8001796:	54e2      	strb	r2, [r4, r3]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001798:	2300      	movs	r3, #0
 800179a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800179c:	9a02      	ldr	r2, [sp, #8]
 800179e:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80017a0:	9a03      	ldr	r2, [sp, #12]
 80017a2:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80017a4:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80017a6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d90b      	bls.n	80017c6 <HAL_I2C_Master_Transmit+0x7e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80017ae:	23ff      	movs	r3, #255	; 0xff
 80017b0:	8523      	strh	r3, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80017b2:	3b7f      	subs	r3, #127	; 0x7f
 80017b4:	4a3f      	ldr	r2, [pc, #252]	; (80018b4 <HAL_I2C_Master_Transmit+0x16c>)
 80017b6:	9200      	str	r2, [sp, #0]
 80017b8:	045b      	lsls	r3, r3, #17
 80017ba:	22ff      	movs	r2, #255	; 0xff
 80017bc:	0039      	movs	r1, r7
 80017be:	0020      	movs	r0, r4
 80017c0:	f7ff fe3e 	bl	8001440 <I2C_TransferConfig>
 80017c4:	e018      	b.n	80017f8 <HAL_I2C_Master_Transmit+0xb0>
      hi2c->XferSize = hi2c->XferCount;
 80017c6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80017c8:	b292      	uxth	r2, r2
 80017ca:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017cc:	2380      	movs	r3, #128	; 0x80
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	4938      	ldr	r1, [pc, #224]	; (80018b4 <HAL_I2C_Master_Transmit+0x16c>)
 80017d2:	9100      	str	r1, [sp, #0]
 80017d4:	049b      	lsls	r3, r3, #18
 80017d6:	0039      	movs	r1, r7
 80017d8:	0020      	movs	r0, r4
 80017da:	f7ff fe31 	bl	8001440 <I2C_TransferConfig>
 80017de:	e00b      	b.n	80017f8 <HAL_I2C_Master_Transmit+0xb0>
          hi2c->XferSize = hi2c->XferCount;
 80017e0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80017e2:	b292      	uxth	r2, r2
 80017e4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017e6:	2380      	movs	r3, #128	; 0x80
 80017e8:	b2d2      	uxtb	r2, r2
 80017ea:	2100      	movs	r1, #0
 80017ec:	9100      	str	r1, [sp, #0]
 80017ee:	049b      	lsls	r3, r3, #18
 80017f0:	0039      	movs	r1, r7
 80017f2:	0020      	movs	r0, r4
 80017f4:	f7ff fe24 	bl	8001440 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80017fa:	b29b      	uxth	r3, r3
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d034      	beq.n	800186a <HAL_I2C_Master_Transmit+0x122>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001800:	0032      	movs	r2, r6
 8001802:	0029      	movs	r1, r5
 8001804:	0020      	movs	r0, r4
 8001806:	f7ff febf 	bl	8001588 <I2C_WaitOnTXISFlagUntilTimeout>
 800180a:	2800      	cmp	r0, #0
 800180c:	d14b      	bne.n	80018a6 <HAL_I2C_Master_Transmit+0x15e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800180e:	6823      	ldr	r3, [r4, #0]
 8001810:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001812:	7812      	ldrb	r2, [r2, #0]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001818:	3301      	adds	r3, #1
 800181a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800181c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800181e:	3b01      	subs	r3, #1
 8001820:	b29b      	uxth	r3, r3
 8001822:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001824:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001826:	3b01      	subs	r3, #1
 8001828:	b29b      	uxth	r3, r3
 800182a:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800182c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800182e:	b292      	uxth	r2, r2
 8001830:	2a00      	cmp	r2, #0
 8001832:	d0e1      	beq.n	80017f8 <HAL_I2C_Master_Transmit+0xb0>
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1df      	bne.n	80017f8 <HAL_I2C_Master_Transmit+0xb0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001838:	9600      	str	r6, [sp, #0]
 800183a:	002b      	movs	r3, r5
 800183c:	2200      	movs	r2, #0
 800183e:	2180      	movs	r1, #128	; 0x80
 8001840:	0020      	movs	r0, r4
 8001842:	f7ff feca 	bl	80015da <I2C_WaitOnFlagUntilTimeout>
 8001846:	2800      	cmp	r0, #0
 8001848:	d12f      	bne.n	80018aa <HAL_I2C_Master_Transmit+0x162>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800184a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800184c:	b29b      	uxth	r3, r3
 800184e:	2bff      	cmp	r3, #255	; 0xff
 8001850:	d9c6      	bls.n	80017e0 <HAL_I2C_Master_Transmit+0x98>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001852:	23ff      	movs	r3, #255	; 0xff
 8001854:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001856:	3b7f      	subs	r3, #127	; 0x7f
 8001858:	2200      	movs	r2, #0
 800185a:	9200      	str	r2, [sp, #0]
 800185c:	045b      	lsls	r3, r3, #17
 800185e:	32ff      	adds	r2, #255	; 0xff
 8001860:	0039      	movs	r1, r7
 8001862:	0020      	movs	r0, r4
 8001864:	f7ff fdec 	bl	8001440 <I2C_TransferConfig>
 8001868:	e7c6      	b.n	80017f8 <HAL_I2C_Master_Transmit+0xb0>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800186a:	0032      	movs	r2, r6
 800186c:	0029      	movs	r1, r5
 800186e:	0020      	movs	r0, r4
 8001870:	f7ff fedd 	bl	800162e <I2C_WaitOnSTOPFlagUntilTimeout>
 8001874:	2800      	cmp	r0, #0
 8001876:	d11a      	bne.n	80018ae <HAL_I2C_Master_Transmit+0x166>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	2220      	movs	r2, #32
 800187c:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800187e:	6821      	ldr	r1, [r4, #0]
 8001880:	684b      	ldr	r3, [r1, #4]
 8001882:	4d0d      	ldr	r5, [pc, #52]	; (80018b8 <HAL_I2C_Master_Transmit+0x170>)
 8001884:	402b      	ands	r3, r5
 8001886:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8001888:	2341      	movs	r3, #65	; 0x41
 800188a:	54e2      	strb	r2, [r4, r3]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	3222      	adds	r2, #34	; 0x22
 8001890:	54a3      	strb	r3, [r4, r2]
    __HAL_UNLOCK(hi2c);
 8001892:	3a02      	subs	r2, #2
 8001894:	54a3      	strb	r3, [r4, r2]
    return HAL_OK;
 8001896:	e000      	b.n	800189a <HAL_I2C_Master_Transmit+0x152>
    return HAL_BUSY;
 8001898:	2002      	movs	r0, #2
}
 800189a:	b005      	add	sp, #20
 800189c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 800189e:	2002      	movs	r0, #2
 80018a0:	e7fb      	b.n	800189a <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 80018a2:	2001      	movs	r0, #1
 80018a4:	e7f9      	b.n	800189a <HAL_I2C_Master_Transmit+0x152>
        return HAL_ERROR;
 80018a6:	2001      	movs	r0, #1
 80018a8:	e7f7      	b.n	800189a <HAL_I2C_Master_Transmit+0x152>
          return HAL_ERROR;
 80018aa:	2001      	movs	r0, #1
 80018ac:	e7f5      	b.n	800189a <HAL_I2C_Master_Transmit+0x152>
      return HAL_ERROR;
 80018ae:	2001      	movs	r0, #1
 80018b0:	e7f3      	b.n	800189a <HAL_I2C_Master_Transmit+0x152>
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	80002000 	.word	0x80002000
 80018b8:	fe00e800 	.word	0xfe00e800

080018bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018be:	2341      	movs	r3, #65	; 0x41
 80018c0:	5cc3      	ldrb	r3, [r0, r3]
 80018c2:	2b20      	cmp	r3, #32
 80018c4:	d120      	bne.n	8001908 <HAL_I2CEx_ConfigAnalogFilter+0x4c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018c6:	3320      	adds	r3, #32
 80018c8:	5cc3      	ldrb	r3, [r0, r3]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d01e      	beq.n	800190c <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80018ce:	2440      	movs	r4, #64	; 0x40
 80018d0:	2201      	movs	r2, #1
 80018d2:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018d4:	2541      	movs	r5, #65	; 0x41
 80018d6:	2324      	movs	r3, #36	; 0x24
 80018d8:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018da:	6806      	ldr	r6, [r0, #0]
 80018dc:	6833      	ldr	r3, [r6, #0]
 80018de:	4393      	bics	r3, r2
 80018e0:	6033      	str	r3, [r6, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80018e2:	6806      	ldr	r6, [r0, #0]
 80018e4:	6833      	ldr	r3, [r6, #0]
 80018e6:	4f0a      	ldr	r7, [pc, #40]	; (8001910 <HAL_I2CEx_ConfigAnalogFilter+0x54>)
 80018e8:	403b      	ands	r3, r7
 80018ea:	6033      	str	r3, [r6, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80018ec:	6806      	ldr	r6, [r0, #0]
 80018ee:	6833      	ldr	r3, [r6, #0]
 80018f0:	4319      	orrs	r1, r3
 80018f2:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018f4:	6801      	ldr	r1, [r0, #0]
 80018f6:	680b      	ldr	r3, [r1, #0]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018fc:	2320      	movs	r3, #32
 80018fe:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001900:	2300      	movs	r3, #0
 8001902:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001904:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001908:	2002      	movs	r0, #2
 800190a:	e7fc      	b.n	8001906 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
    __HAL_LOCK(hi2c);
 800190c:	2002      	movs	r0, #2
 800190e:	e7fa      	b.n	8001906 <HAL_I2CEx_ConfigAnalogFilter+0x4a>
 8001910:	ffffefff 	.word	0xffffefff

08001914 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001916:	2341      	movs	r3, #65	; 0x41
 8001918:	5cc3      	ldrb	r3, [r0, r3]
 800191a:	2b20      	cmp	r3, #32
 800191c:	d11e      	bne.n	800195c <HAL_I2CEx_ConfigDigitalFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191e:	3320      	adds	r3, #32
 8001920:	5cc3      	ldrb	r3, [r0, r3]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d01c      	beq.n	8001960 <HAL_I2CEx_ConfigDigitalFilter+0x4c>
 8001926:	2440      	movs	r4, #64	; 0x40
 8001928:	2201      	movs	r2, #1
 800192a:	5502      	strb	r2, [r0, r4]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800192c:	2541      	movs	r5, #65	; 0x41
 800192e:	2324      	movs	r3, #36	; 0x24
 8001930:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001932:	6806      	ldr	r6, [r0, #0]
 8001934:	6833      	ldr	r3, [r6, #0]
 8001936:	4393      	bics	r3, r2
 8001938:	6033      	str	r3, [r6, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800193a:	6806      	ldr	r6, [r0, #0]
 800193c:	6833      	ldr	r3, [r6, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800193e:	4f09      	ldr	r7, [pc, #36]	; (8001964 <HAL_I2CEx_ConfigDigitalFilter+0x50>)
 8001940:	403b      	ands	r3, r7

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001942:	0209      	lsls	r1, r1, #8
 8001944:	4319      	orrs	r1, r3

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001946:	6031      	str	r1, [r6, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001948:	6801      	ldr	r1, [r0, #0]
 800194a:	680b      	ldr	r3, [r1, #0]
 800194c:	4313      	orrs	r3, r2
 800194e:	600b      	str	r3, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001950:	2320      	movs	r3, #32
 8001952:	5543      	strb	r3, [r0, r5]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001954:	2300      	movs	r3, #0
 8001956:	5503      	strb	r3, [r0, r4]

    return HAL_OK;
 8001958:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800195c:	2002      	movs	r0, #2
 800195e:	e7fc      	b.n	800195a <HAL_I2CEx_ConfigDigitalFilter+0x46>
    __HAL_LOCK(hi2c);
 8001960:	2002      	movs	r0, #2
 8001962:	e7fa      	b.n	800195a <HAL_I2CEx_ConfigDigitalFilter+0x46>
 8001964:	fffff0ff 	.word	0xfffff0ff

08001968 <HAL_PWR_EnterSLEEPMode>:
  * @note   When WFI entry is used, tick interrupt have to be disabled if not
  *         desired as the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8001968:	b510      	push	{r4, lr}
 800196a:	000c      	movs	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator != PWR_MAINREGULATOR_ON)
 800196c:	2800      	cmp	r0, #0
 800196e:	d011      	beq.n	8001994 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if ((PWR->SR2 & PWR_SR2_REGLPF) == 0x00u)
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_PWR_EnterSLEEPMode+0x44>)
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	059b      	lsls	r3, r3, #22
 8001976:	d50a      	bpl.n	800198e <HAL_PWR_EnterSLEEPMode+0x26>
      }
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001978:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_PWR_EnterSLEEPMode+0x48>)
 800197a:	6913      	ldr	r3, [r2, #16]
 800197c:	2104      	movs	r1, #4
 800197e:	438b      	bics	r3, r1
 8001980:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8001982:	2c01      	cmp	r4, #1
 8001984:	d00f      	beq.n	80019a6 <HAL_PWR_EnterSLEEPMode+0x3e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001986:	bf40      	sev
    __WFE();
 8001988:	bf20      	wfe
    __WFE();
 800198a:	bf20      	wfe
  }
}
 800198c:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableLowPowerRunMode();
 800198e:	f000 f83b 	bl	8001a08 <HAL_PWREx_EnableLowPowerRunMode>
 8001992:	e7f1      	b.n	8001978 <HAL_PWR_EnterSLEEPMode+0x10>
    if ((PWR->SR2 & PWR_SR2_REGLPF) != 0x00u)
 8001994:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_PWR_EnterSLEEPMode+0x44>)
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	059b      	lsls	r3, r3, #22
 800199a:	d5ed      	bpl.n	8001978 <HAL_PWR_EnterSLEEPMode+0x10>
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800199c:	f000 f83e 	bl	8001a1c <HAL_PWREx_DisableLowPowerRunMode>
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d0e9      	beq.n	8001978 <HAL_PWR_EnterSLEEPMode+0x10>
 80019a4:	e7f2      	b.n	800198c <HAL_PWR_EnterSLEEPMode+0x24>
    __WFI();
 80019a6:	bf30      	wfi
 80019a8:	e7f0      	b.n	800198c <HAL_PWR_EnterSLEEPMode+0x24>
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40007000 	.word	0x40007000
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019b4:	b510      	push	{r4, lr}
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019b6:	4a10      	ldr	r2, [pc, #64]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80019b8:	6813      	ldr	r3, [r2, #0]
 80019ba:	4910      	ldr	r1, [pc, #64]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0x48>)
 80019bc:	400b      	ands	r3, r1
 80019be:	4303      	orrs	r3, r0
 80019c0:	6013      	str	r3, [r2, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4298      	cmp	r0, r3
 80019c8:	d001      	beq.n	80019ce <HAL_PWREx_ControlVoltageScaling+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80019ca:	2000      	movs	r0, #0
}
 80019cc:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80019ce:	4b0c      	ldr	r3, [pc, #48]	; (8001a00 <HAL_PWREx_ControlVoltageScaling+0x4c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	0058      	lsls	r0, r3, #1
 80019d4:	18c0      	adds	r0, r0, r3
 80019d6:	0040      	lsls	r0, r0, #1
 80019d8:	490a      	ldr	r1, [pc, #40]	; (8001a04 <HAL_PWREx_ControlVoltageScaling+0x50>)
 80019da:	f7fe fb9b 	bl	8000114 <__udivsi3>
 80019de:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0x44>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	055b      	lsls	r3, r3, #21
 80019e6:	d503      	bpl.n	80019f0 <HAL_PWREx_ControlVoltageScaling+0x3c>
      if (wait_loop_index != 0U)
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x40>
        wait_loop_index--;
 80019ec:	3801      	subs	r0, #1
 80019ee:	e7f7      	b.n	80019e0 <HAL_PWREx_ControlVoltageScaling+0x2c>
  return HAL_OK;
 80019f0:	2000      	movs	r0, #0
 80019f2:	e7eb      	b.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x18>
        return HAL_TIMEOUT;
 80019f4:	2003      	movs	r0, #3
 80019f6:	e7e9      	b.n	80019cc <HAL_PWREx_ControlVoltageScaling+0x18>
 80019f8:	40007000 	.word	0x40007000
 80019fc:	fffff9ff 	.word	0xfffff9ff
 8001a00:	20000050 	.word	0x20000050
 8001a04:	000f4240 	.word	0x000f4240

08001a08 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8001a08:	4a03      	ldr	r2, [pc, #12]	; (8001a18 <HAL_PWREx_EnableLowPowerRunMode+0x10>)
 8001a0a:	6811      	ldr	r1, [r2, #0]
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	01db      	lsls	r3, r3, #7
 8001a10:	430b      	orrs	r3, r1
 8001a12:	6013      	str	r3, [r2, #0]
}
 8001a14:	4770      	bx	lr
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	40007000 	.word	0x40007000

08001a1c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8001a1c:	b510      	push	{r4, lr}
  uint32_t wait_loop_index = ((PWR_REGLPF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_PWREx_DisableLowPowerRunMode+0x38>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	0058      	lsls	r0, r3, #1
 8001a24:	18c0      	adds	r0, r0, r3
 8001a26:	0040      	lsls	r0, r0, #1
 8001a28:	490b      	ldr	r1, [pc, #44]	; (8001a58 <HAL_PWREx_DisableLowPowerRunMode+0x3c>)
 8001a2a:	f7fe fb73 	bl	8000114 <__udivsi3>
 8001a2e:	3001      	adds	r0, #1

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8001a32:	6813      	ldr	r3, [r2, #0]
 8001a34:	490a      	ldr	r1, [pc, #40]	; (8001a60 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8001a36:	400b      	ands	r3, r1
 8001a38:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001a3a:	e000      	b.n	8001a3e <HAL_PWREx_DisableLowPowerRunMode+0x22>
  {
    if (wait_loop_index != 0U)
    {
      wait_loop_index--;
 8001a3c:	3801      	subs	r0, #1
  while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	059b      	lsls	r3, r3, #22
 8001a44:	d503      	bpl.n	8001a4e <HAL_PWREx_DisableLowPowerRunMode+0x32>
    if (wait_loop_index != 0U)
 8001a46:	2800      	cmp	r0, #0
 8001a48:	d1f8      	bne.n	8001a3c <HAL_PWREx_DisableLowPowerRunMode+0x20>
    }
    else
    {
      return HAL_TIMEOUT;
 8001a4a:	2003      	movs	r0, #3
 8001a4c:	e000      	b.n	8001a50 <HAL_PWREx_DisableLowPowerRunMode+0x34>
    }
  }

  return HAL_OK;
 8001a4e:	2000      	movs	r0, #0
}
 8001a50:	bd10      	pop	{r4, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	20000050 	.word	0x20000050
 8001a58:	000f4240 	.word	0x000f4240
 8001a5c:	40007000 	.word	0x40007000
 8001a60:	ffffbfff 	.word	0xffffbfff

08001a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6a:	d100      	bne.n	8001a6e <HAL_RCC_OscConfig+0xa>
 8001a6c:	e229      	b.n	8001ec2 <HAL_RCC_OscConfig+0x45e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6e:	6803      	ldr	r3, [r0, #0]
 8001a70:	07db      	lsls	r3, r3, #31
 8001a72:	d539      	bpl.n	8001ae8 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a74:	4ac1      	ldr	r2, [pc, #772]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001a76:	6891      	ldr	r1, [r2, #8]
 8001a78:	2338      	movs	r3, #56	; 0x38
 8001a7a:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7c:	68d1      	ldr	r1, [r2, #12]
 8001a7e:	2203      	movs	r2, #3
 8001a80:	400a      	ands	r2, r1

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d026      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x70>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a86:	2b08      	cmp	r3, #8
 8001a88:	d026      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x74>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8a:	6863      	ldr	r3, [r4, #4]
 8001a8c:	2280      	movs	r2, #128	; 0x80
 8001a8e:	0252      	lsls	r2, r2, #9
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d07f      	beq.n	8001b94 <HAL_RCC_OscConfig+0x130>
 8001a94:	22a0      	movs	r2, #160	; 0xa0
 8001a96:	02d2      	lsls	r2, r2, #11
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d100      	bne.n	8001a9e <HAL_RCC_OscConfig+0x3a>
 8001a9c:	e081      	b.n	8001ba2 <HAL_RCC_OscConfig+0x13e>
 8001a9e:	4bb7      	ldr	r3, [pc, #732]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	49b7      	ldr	r1, [pc, #732]	; (8001d80 <HAL_RCC_OscConfig+0x31c>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	49b6      	ldr	r1, [pc, #728]	; (8001d84 <HAL_RCC_OscConfig+0x320>)
 8001aac:	400a      	ands	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab0:	6863      	ldr	r3, [r4, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d100      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x54>
 8001ab6:	e080      	b.n	8001bba <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f990 	bl	8000ddc <HAL_GetTick>
 8001abc:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abe:	4baf      	ldr	r3, [pc, #700]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	039b      	lsls	r3, r3, #14
 8001ac4:	d410      	bmi.n	8001ae8 <HAL_RCC_OscConfig+0x84>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac6:	f7ff f989 	bl	8000ddc <HAL_GetTick>
 8001aca:	1b40      	subs	r0, r0, r5
 8001acc:	2864      	cmp	r0, #100	; 0x64
 8001ace:	d9f6      	bls.n	8001abe <HAL_RCC_OscConfig+0x5a>
          {
            return HAL_TIMEOUT;
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	e1f7      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001ad4:	2a03      	cmp	r2, #3
 8001ad6:	d1d6      	bne.n	8001a86 <HAL_RCC_OscConfig+0x22>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	4ba8      	ldr	r3, [pc, #672]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	039b      	lsls	r3, r3, #14
 8001ade:	d503      	bpl.n	8001ae8 <HAL_RCC_OscConfig+0x84>
 8001ae0:	6863      	ldr	r3, [r4, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d100      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x84>
 8001ae6:	e1ef      	b.n	8001ec8 <HAL_RCC_OscConfig+0x464>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	079b      	lsls	r3, r3, #30
 8001aec:	d531      	bpl.n	8001b52 <HAL_RCC_OscConfig+0xee>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aee:	4aa3      	ldr	r2, [pc, #652]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001af0:	6893      	ldr	r3, [r2, #8]
 8001af2:	2138      	movs	r1, #56	; 0x38
 8001af4:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001af6:	68d1      	ldr	r1, [r2, #12]
 8001af8:	2203      	movs	r2, #3
 8001afa:	400a      	ands	r2, r1
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001afc:	2b10      	cmp	r3, #16
 8001afe:	d06a      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x172>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d16b      	bne.n	8001bdc <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b04:	4a9d      	ldr	r2, [pc, #628]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	0552      	lsls	r2, r2, #21
 8001b0a:	d503      	bpl.n	8001b14 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	68e2      	ldr	r2, [r4, #12]
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	d100      	bne.n	8001b14 <HAL_RCC_OscConfig+0xb0>
 8001b12:	e1db      	b.n	8001ecc <HAL_RCC_OscConfig+0x468>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4899      	ldr	r0, [pc, #612]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001b16:	6842      	ldr	r2, [r0, #4]
 8001b18:	499b      	ldr	r1, [pc, #620]	; (8001d88 <HAL_RCC_OscConfig+0x324>)
 8001b1a:	400a      	ands	r2, r1
 8001b1c:	6961      	ldr	r1, [r4, #20]
 8001b1e:	0209      	lsls	r1, r1, #8
 8001b20:	430a      	orrs	r2, r1
 8001b22:	6042      	str	r2, [r0, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10d      	bne.n	8001b44 <HAL_RCC_OscConfig+0xe0>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b28:	6803      	ldr	r3, [r0, #0]
 8001b2a:	4998      	ldr	r1, [pc, #608]	; (8001d8c <HAL_RCC_OscConfig+0x328>)
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	6921      	ldr	r1, [r4, #16]
 8001b30:	430b      	orrs	r3, r1
 8001b32:	6003      	str	r3, [r0, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b34:	6803      	ldr	r3, [r0, #0]
 8001b36:	0adb      	lsrs	r3, r3, #11
 8001b38:	2207      	movs	r2, #7
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	4b94      	ldr	r3, [pc, #592]	; (8001d90 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	40d3      	lsrs	r3, r2
 8001b40:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_RCC_OscConfig+0x330>)
 8001b42:	6013      	str	r3, [r2, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b44:	4b94      	ldr	r3, [pc, #592]	; (8001d98 <HAL_RCC_OscConfig+0x334>)
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	f7ff f8fc 	bl	8000d44 <HAL_InitTick>
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d000      	beq.n	8001b52 <HAL_RCC_OscConfig+0xee>
 8001b50:	e1be      	b.n	8001ed0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	071b      	lsls	r3, r3, #28
 8001b56:	d400      	bmi.n	8001b5a <HAL_RCC_OscConfig+0xf6>
 8001b58:	e081      	b.n	8001c5e <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b5a:	4b88      	ldr	r3, [pc, #544]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	2338      	movs	r3, #56	; 0x38
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b18      	cmp	r3, #24
 8001b64:	d073      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1ea>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b66:	69a3      	ldr	r3, [r4, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d100      	bne.n	8001b6e <HAL_RCC_OscConfig+0x10a>
 8001b6c:	e0b4      	b.n	8001cd8 <HAL_RCC_OscConfig+0x274>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b6e:	4a83      	ldr	r2, [pc, #524]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001b70:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001b72:	2101      	movs	r1, #1
 8001b74:	430b      	orrs	r3, r1
 8001b76:	6613      	str	r3, [r2, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff f930 	bl	8000ddc <HAL_GetTick>
 8001b7c:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7e:	4b7f      	ldr	r3, [pc, #508]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b82:	079b      	lsls	r3, r3, #30
 8001b84:	d46b      	bmi.n	8001c5e <HAL_RCC_OscConfig+0x1fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b86:	f7ff f929 	bl	8000ddc <HAL_GetTick>
 8001b8a:	1b40      	subs	r0, r0, r5
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d9f6      	bls.n	8001b7e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001b90:	2003      	movs	r0, #3
 8001b92:	e197      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b94:	4a79      	ldr	r2, [pc, #484]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001b96:	6811      	ldr	r1, [r2, #0]
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	025b      	lsls	r3, r3, #9
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e786      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4c>
 8001ba2:	4b76      	ldr	r3, [pc, #472]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001ba4:	6819      	ldr	r1, [r3, #0]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	02d2      	lsls	r2, r2, #11
 8001baa:	430a      	orrs	r2, r1
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	0252      	lsls	r2, r2, #9
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	e77a      	b.n	8001ab0 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001bba:	f7ff f90f 	bl	8000ddc <HAL_GetTick>
 8001bbe:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bc0:	4b6e      	ldr	r3, [pc, #440]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	039b      	lsls	r3, r3, #14
 8001bc6:	d58f      	bpl.n	8001ae8 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff f908 	bl	8000ddc <HAL_GetTick>
 8001bcc:	1b40      	subs	r0, r0, r5
 8001bce:	2864      	cmp	r0, #100	; 0x64
 8001bd0:	d9f6      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x15c>
            return HAL_TIMEOUT;
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	e176      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001bd6:	2a02      	cmp	r2, #2
 8001bd8:	d192      	bne.n	8001b00 <HAL_RCC_OscConfig+0x9c>
 8001bda:	e793      	b.n	8001b04 <HAL_RCC_OscConfig+0xa0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bdc:	68e3      	ldr	r3, [r4, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d022      	beq.n	8001c28 <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001be2:	4a66      	ldr	r2, [pc, #408]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	4969      	ldr	r1, [pc, #420]	; (8001d8c <HAL_RCC_OscConfig+0x328>)
 8001be8:	400b      	ands	r3, r1
 8001bea:	6921      	ldr	r1, [r4, #16]
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	6811      	ldr	r1, [r2, #0]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	430b      	orrs	r3, r1
 8001bf8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001bfa:	f7ff f8ef 	bl	8000ddc <HAL_GetTick>
 8001bfe:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c00:	4b5e      	ldr	r3, [pc, #376]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	055b      	lsls	r3, r3, #21
 8001c06:	d406      	bmi.n	8001c16 <HAL_RCC_OscConfig+0x1b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff f8e8 	bl	8000ddc <HAL_GetTick>
 8001c0c:	1b40      	subs	r0, r0, r5
 8001c0e:	2802      	cmp	r0, #2
 8001c10:	d9f6      	bls.n	8001c00 <HAL_RCC_OscConfig+0x19c>
            return HAL_TIMEOUT;
 8001c12:	2003      	movs	r0, #3
 8001c14:	e156      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4959      	ldr	r1, [pc, #356]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001c18:	684b      	ldr	r3, [r1, #4]
 8001c1a:	4a5b      	ldr	r2, [pc, #364]	; (8001d88 <HAL_RCC_OscConfig+0x324>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	6962      	ldr	r2, [r4, #20]
 8001c20:	0212      	lsls	r2, r2, #8
 8001c22:	4313      	orrs	r3, r2
 8001c24:	604b      	str	r3, [r1, #4]
 8001c26:	e794      	b.n	8001b52 <HAL_RCC_OscConfig+0xee>
        __HAL_RCC_HSI_DISABLE();
 8001c28:	4a54      	ldr	r2, [pc, #336]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001c2a:	6813      	ldr	r3, [r2, #0]
 8001c2c:	495b      	ldr	r1, [pc, #364]	; (8001d9c <HAL_RCC_OscConfig+0x338>)
 8001c2e:	400b      	ands	r3, r1
 8001c30:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c32:	f7ff f8d3 	bl	8000ddc <HAL_GetTick>
 8001c36:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	055b      	lsls	r3, r3, #21
 8001c3e:	d588      	bpl.n	8001b52 <HAL_RCC_OscConfig+0xee>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff f8cc 	bl	8000ddc <HAL_GetTick>
 8001c44:	1b40      	subs	r0, r0, r5
 8001c46:	2802      	cmp	r0, #2
 8001c48:	d9f6      	bls.n	8001c38 <HAL_RCC_OscConfig+0x1d4>
            return HAL_TIMEOUT;
 8001c4a:	2003      	movs	r0, #3
 8001c4c:	e13a      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c4e:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c52:	079b      	lsls	r3, r3, #30
 8001c54:	d503      	bpl.n	8001c5e <HAL_RCC_OscConfig+0x1fa>
 8001c56:	69a3      	ldr	r3, [r4, #24]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d100      	bne.n	8001c5e <HAL_RCC_OscConfig+0x1fa>
 8001c5c:	e13a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x470>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	075b      	lsls	r3, r3, #29
 8001c62:	d400      	bmi.n	8001c66 <HAL_RCC_OscConfig+0x202>
 8001c64:	e0a2      	b.n	8001dac <HAL_RCC_OscConfig+0x348>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c66:	4b45      	ldr	r3, [pc, #276]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	2338      	movs	r3, #56	; 0x38
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d045      	beq.n	8001cfe <HAL_RCC_OscConfig+0x29a>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c72:	4b42      	ldr	r3, [pc, #264]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	d44a      	bmi.n	8001d10 <HAL_RCC_OscConfig+0x2ac>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	4a40      	ldr	r2, [pc, #256]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001c7c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c7e:	2080      	movs	r0, #128	; 0x80
 8001c80:	0540      	lsls	r0, r0, #21
 8001c82:	4301      	orrs	r1, r0
 8001c84:	63d1      	str	r1, [r2, #60]	; 0x3c
 8001c86:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001c88:	4003      	ands	r3, r0
 8001c8a:	9301      	str	r3, [sp, #4]
 8001c8c:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 8001c8e:	2501      	movs	r5, #1
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c90:	4b43      	ldr	r3, [pc, #268]	; (8001da0 <HAL_RCC_OscConfig+0x33c>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	05db      	lsls	r3, r3, #23
 8001c96:	d53d      	bpl.n	8001d14 <HAL_RCC_OscConfig+0x2b0>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	68a3      	ldr	r3, [r4, #8]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d04e      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2d8>
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d052      	beq.n	8001d48 <HAL_RCC_OscConfig+0x2e4>
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001ca4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	438a      	bics	r2, r1
 8001caa:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001cae:	3103      	adds	r1, #3
 8001cb0:	438a      	bics	r2, r1
 8001cb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cb4:	68a3      	ldr	r3, [r4, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d050      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2f8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff f88f 	bl	8000ddc <HAL_GetTick>
 8001cbe:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	079b      	lsls	r3, r3, #30
 8001cc6:	d46f      	bmi.n	8001da8 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7ff f888 	bl	8000ddc <HAL_GetTick>
 8001ccc:	1b80      	subs	r0, r0, r6
 8001cce:	4b35      	ldr	r3, [pc, #212]	; (8001da4 <HAL_RCC_OscConfig+0x340>)
 8001cd0:	4298      	cmp	r0, r3
 8001cd2:	d9f5      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x25c>
          {
            return HAL_TIMEOUT;
 8001cd4:	2003      	movs	r0, #3
 8001cd6:	e0f5      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
        __HAL_RCC_LSI_DISABLE();
 8001cd8:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001cda:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001cdc:	2101      	movs	r1, #1
 8001cde:	438b      	bics	r3, r1
 8001ce0:	6613      	str	r3, [r2, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001ce2:	f7ff f87b 	bl	8000ddc <HAL_GetTick>
 8001ce6:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce8:	4b24      	ldr	r3, [pc, #144]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cec:	079b      	lsls	r3, r3, #30
 8001cee:	d5b6      	bpl.n	8001c5e <HAL_RCC_OscConfig+0x1fa>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7ff f874 	bl	8000ddc <HAL_GetTick>
 8001cf4:	1b40      	subs	r0, r0, r5
 8001cf6:	2802      	cmp	r0, #2
 8001cf8:	d9f6      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x284>
            return HAL_TIMEOUT;
 8001cfa:	2003      	movs	r0, #3
 8001cfc:	e0e2      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d02:	079b      	lsls	r3, r3, #30
 8001d04:	d552      	bpl.n	8001dac <HAL_RCC_OscConfig+0x348>
 8001d06:	68a3      	ldr	r3, [r4, #8]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d14f      	bne.n	8001dac <HAL_RCC_OscConfig+0x348>
        return HAL_ERROR;
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	e0d9      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
    FlagStatus       pwrclkchanged = RESET;
 8001d10:	2500      	movs	r5, #0
 8001d12:	e7bd      	b.n	8001c90 <HAL_RCC_OscConfig+0x22c>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d14:	4a22      	ldr	r2, [pc, #136]	; (8001da0 <HAL_RCC_OscConfig+0x33c>)
 8001d16:	6811      	ldr	r1, [r2, #0]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d20:	f7ff f85c 	bl	8000ddc <HAL_GetTick>
 8001d24:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <HAL_RCC_OscConfig+0x33c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	05db      	lsls	r3, r3, #23
 8001d2c:	d4b4      	bmi.n	8001c98 <HAL_RCC_OscConfig+0x234>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d2e:	f7ff f855 	bl	8000ddc <HAL_GetTick>
 8001d32:	1b80      	subs	r0, r0, r6
 8001d34:	2802      	cmp	r0, #2
 8001d36:	d9f6      	bls.n	8001d26 <HAL_RCC_OscConfig+0x2c2>
            return HAL_TIMEOUT;
 8001d38:	2003      	movs	r0, #3
 8001d3a:	e0c3      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	4a0f      	ldr	r2, [pc, #60]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001d3e:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001d40:	2101      	movs	r1, #1
 8001d42:	430b      	orrs	r3, r1
 8001d44:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d46:	e7b5      	b.n	8001cb4 <HAL_RCC_OscConfig+0x250>
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001d4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d4c:	2104      	movs	r1, #4
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d54:	3903      	subs	r1, #3
 8001d56:	430a      	orrs	r2, r1
 8001d58:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d5a:	e7ab      	b.n	8001cb4 <HAL_RCC_OscConfig+0x250>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff f83e 	bl	8000ddc <HAL_GetTick>
 8001d60:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_OscConfig+0x318>)
 8001d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d66:	079b      	lsls	r3, r3, #30
 8001d68:	d51e      	bpl.n	8001da8 <HAL_RCC_OscConfig+0x344>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7ff f837 	bl	8000ddc <HAL_GetTick>
 8001d6e:	1b80      	subs	r0, r0, r6
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_RCC_OscConfig+0x340>)
 8001d72:	4298      	cmp	r0, r3
 8001d74:	d9f5      	bls.n	8001d62 <HAL_RCC_OscConfig+0x2fe>
          {
            return HAL_TIMEOUT;
 8001d76:	2003      	movs	r0, #3
 8001d78:	e0a4      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	fffeffff 	.word	0xfffeffff
 8001d84:	fffbffff 	.word	0xfffbffff
 8001d88:	ffff80ff 	.word	0xffff80ff
 8001d8c:	ffffc7ff 	.word	0xffffc7ff
 8001d90:	00f42400 	.word	0x00f42400
 8001d94:	20000050 	.word	0x20000050
 8001d98:	20000058 	.word	0x20000058
 8001d9c:	fffffeff 	.word	0xfffffeff
 8001da0:	40007000 	.word	0x40007000
 8001da4:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001da8:	2d01      	cmp	r5, #1
 8001daa:	d01e      	beq.n	8001dea <HAL_RCC_OscConfig+0x386>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001dac:	69e3      	ldr	r3, [r4, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d100      	bne.n	8001db4 <HAL_RCC_OscConfig+0x350>
 8001db2:	e091      	b.n	8001ed8 <HAL_RCC_OscConfig+0x474>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001db4:	4a4f      	ldr	r2, [pc, #316]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001db6:	6891      	ldr	r1, [r2, #8]
 8001db8:	2238      	movs	r2, #56	; 0x38
 8001dba:	400a      	ands	r2, r1
 8001dbc:	2a10      	cmp	r2, #16
 8001dbe:	d05e      	beq.n	8001e7e <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d018      	beq.n	8001df6 <HAL_RCC_OscConfig+0x392>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dc4:	4a4b      	ldr	r2, [pc, #300]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001dc6:	6813      	ldr	r3, [r2, #0]
 8001dc8:	494b      	ldr	r1, [pc, #300]	; (8001ef8 <HAL_RCC_OscConfig+0x494>)
 8001dca:	400b      	ands	r3, r1
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dce:	f7ff f805 	bl	8000ddc <HAL_GetTick>
 8001dd2:	0004      	movs	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	d549      	bpl.n	8001e70 <HAL_RCC_OscConfig+0x40c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7fe fffe 	bl	8000ddc <HAL_GetTick>
 8001de0:	1b00      	subs	r0, r0, r4
 8001de2:	2802      	cmp	r0, #2
 8001de4:	d9f6      	bls.n	8001dd4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001de6:	2003      	movs	r0, #3
 8001de8:	e06c      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
        __HAL_RCC_PWR_CLK_DISABLE();
 8001dea:	4a42      	ldr	r2, [pc, #264]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001dec:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8001dee:	4943      	ldr	r1, [pc, #268]	; (8001efc <HAL_RCC_OscConfig+0x498>)
 8001df0:	400b      	ands	r3, r1
 8001df2:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001df4:	e7da      	b.n	8001dac <HAL_RCC_OscConfig+0x348>
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4a3f      	ldr	r2, [pc, #252]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001df8:	6813      	ldr	r3, [r2, #0]
 8001dfa:	493f      	ldr	r1, [pc, #252]	; (8001ef8 <HAL_RCC_OscConfig+0x494>)
 8001dfc:	400b      	ands	r3, r1
 8001dfe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e00:	f7fe ffec 	bl	8000ddc <HAL_GetTick>
 8001e04:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e06:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	019b      	lsls	r3, r3, #6
 8001e0c:	d506      	bpl.n	8001e1c <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe ffe5 	bl	8000ddc <HAL_GetTick>
 8001e12:	1b40      	subs	r0, r0, r5
 8001e14:	2802      	cmp	r0, #2
 8001e16:	d9f6      	bls.n	8001e06 <HAL_RCC_OscConfig+0x3a2>
            return HAL_TIMEOUT;
 8001e18:	2003      	movs	r0, #3
 8001e1a:	e053      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e1c:	4a35      	ldr	r2, [pc, #212]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001e1e:	68d3      	ldr	r3, [r2, #12]
 8001e20:	4937      	ldr	r1, [pc, #220]	; (8001f00 <HAL_RCC_OscConfig+0x49c>)
 8001e22:	4019      	ands	r1, r3
 8001e24:	6a23      	ldr	r3, [r4, #32]
 8001e26:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001e28:	4303      	orrs	r3, r0
 8001e2a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e2c:	0200      	lsls	r0, r0, #8
 8001e2e:	4303      	orrs	r3, r0
 8001e30:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001e32:	4303      	orrs	r3, r0
 8001e34:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001e36:	4303      	orrs	r3, r0
 8001e38:	430b      	orrs	r3, r1
 8001e3a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8001e3c:	6811      	ldr	r1, [r2, #0]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	045b      	lsls	r3, r3, #17
 8001e42:	430b      	orrs	r3, r1
 8001e44:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001e46:	68d1      	ldr	r1, [r2, #12]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	055b      	lsls	r3, r3, #21
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8001e50:	f7fe ffc4 	bl	8000ddc <HAL_GetTick>
 8001e54:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e56:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	019b      	lsls	r3, r3, #6
 8001e5c:	d406      	bmi.n	8001e6c <HAL_RCC_OscConfig+0x408>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5e:	f7fe ffbd 	bl	8000ddc <HAL_GetTick>
 8001e62:	1b00      	subs	r0, r0, r4
 8001e64:	2802      	cmp	r0, #2
 8001e66:	d9f6      	bls.n	8001e56 <HAL_RCC_OscConfig+0x3f2>
            return HAL_TIMEOUT;
 8001e68:	2003      	movs	r0, #3
 8001e6a:	e02b      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	e029      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001e70:	4a20      	ldr	r2, [pc, #128]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001e72:	68d3      	ldr	r3, [r2, #12]
 8001e74:	4923      	ldr	r1, [pc, #140]	; (8001f04 <HAL_RCC_OscConfig+0x4a0>)
 8001e76:	400b      	ands	r3, r1
 8001e78:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	e022      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d02c      	beq.n	8001edc <HAL_RCC_OscConfig+0x478>
        temp_pllckcfg = RCC->PLLCFGR;
 8001e82:	4b1c      	ldr	r3, [pc, #112]	; (8001ef4 <HAL_RCC_OscConfig+0x490>)
 8001e84:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	2303      	movs	r3, #3
 8001e88:	4013      	ands	r3, r2
 8001e8a:	6a21      	ldr	r1, [r4, #32]
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	d127      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x47c>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e90:	2370      	movs	r3, #112	; 0x70
 8001e92:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e96:	428b      	cmp	r3, r1
 8001e98:	d124      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x480>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9a:	21fe      	movs	r1, #254	; 0xfe
 8001e9c:	01c9      	lsls	r1, r1, #7
 8001e9e:	4011      	ands	r1, r2
 8001ea0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ea2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ea4:	4299      	cmp	r1, r3
 8001ea6:	d11f      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x484>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ea8:	23f8      	movs	r3, #248	; 0xf8
 8001eaa:	039b      	lsls	r3, r3, #14
 8001eac:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eae:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001eb0:	428b      	cmp	r3, r1
 8001eb2:	d11b      	bne.n	8001eec <HAL_RCC_OscConfig+0x488>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001eb4:	0f52      	lsrs	r2, r2, #29
 8001eb6:	0752      	lsls	r2, r2, #29
 8001eb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d118      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x48c>
  return HAL_OK;
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	e000      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
    return HAL_ERROR;
 8001ec2:	2001      	movs	r0, #1
}
 8001ec4:	b002      	add	sp, #8
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001ec8:	2001      	movs	r0, #1
 8001eca:	e7fb      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
        return HAL_ERROR;
 8001ecc:	2001      	movs	r0, #1
 8001ece:	e7f9      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	e7f7      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
        return HAL_ERROR;
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	e7f5      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
  return HAL_OK;
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e7f3      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
        return HAL_ERROR;
 8001edc:	2001      	movs	r0, #1
 8001ede:	e7f1      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
          return HAL_ERROR;
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	e7ef      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	e7ed      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
 8001ee8:	2001      	movs	r0, #1
 8001eea:	e7eb      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
 8001eec:	2001      	movs	r0, #1
 8001eee:	e7e9      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	e7e7      	b.n	8001ec4 <HAL_RCC_OscConfig+0x460>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	feffffff 	.word	0xfeffffff
 8001efc:	efffffff 	.word	0xefffffff
 8001f00:	1fc1808c 	.word	0x1fc1808c
 8001f04:	effefffc 	.word	0xeffefffc

08001f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f08:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f0a:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2238      	movs	r2, #56	; 0x38
 8001f10:	421a      	tst	r2, r3
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0x1c>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f14:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	0ad2      	lsrs	r2, r2, #11
 8001f1a:	2307      	movs	r3, #7
 8001f1c:	4013      	ands	r3, r2

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f1e:	4826      	ldr	r0, [pc, #152]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f20:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8001f22:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f24:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	2338      	movs	r3, #56	; 0x38
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d03b      	beq.n	8001fa8 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f30:	4b20      	ldr	r3, [pc, #128]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	2338      	movs	r3, #56	; 0x38
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b10      	cmp	r3, #16
 8001f3a:	d00d      	beq.n	8001f58 <HAL_RCC_GetSysClockFreq+0x50>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	2338      	movs	r3, #56	; 0x38
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	d031      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0xa4>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f48:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	2338      	movs	r3, #56	; 0x38
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b18      	cmp	r3, #24
 8001f52:	d026      	beq.n	8001fa2 <HAL_RCC_GetSysClockFreq+0x9a>
    sysclockfreq = 0U;
 8001f54:	2000      	movs	r0, #0
  return sysclockfreq;
 8001f56:	e7e4      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x1a>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f58:	4a16      	ldr	r2, [pc, #88]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f5a:	68d1      	ldr	r1, [r2, #12]
 8001f5c:	3b0d      	subs	r3, #13
 8001f5e:	400b      	ands	r3, r1
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f60:	68d2      	ldr	r2, [r2, #12]
 8001f62:	0912      	lsrs	r2, r2, #4
 8001f64:	2107      	movs	r1, #7
 8001f66:	4011      	ands	r1, r2
 8001f68:	3101      	adds	r1, #1
    switch (pllsource)
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d00f      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x86>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001f6e:	4812      	ldr	r0, [pc, #72]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f70:	f7fe f8d0 	bl	8000114 <__udivsi3>
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	0a12      	lsrs	r2, r2, #8
 8001f7a:	237f      	movs	r3, #127	; 0x7f
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	4358      	muls	r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f82:	68d9      	ldr	r1, [r3, #12]
 8001f84:	0f49      	lsrs	r1, r1, #29
 8001f86:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8001f88:	f7fe f8c4 	bl	8000114 <__udivsi3>
 8001f8c:	e7c9      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x1a>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f8e:	480b      	ldr	r0, [pc, #44]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f90:	f7fe f8c0 	bl	8000114 <__udivsi3>
 8001f94:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xac>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	0a12      	lsrs	r2, r2, #8
 8001f9a:	237f      	movs	r3, #127	; 0x7f
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	4358      	muls	r0, r3
        break;
 8001fa0:	e7ee      	b.n	8001f80 <HAL_RCC_GetSysClockFreq+0x78>
    sysclockfreq = LSI_VALUE;
 8001fa2:	20fa      	movs	r0, #250	; 0xfa
 8001fa4:	01c0      	lsls	r0, r0, #7
 8001fa6:	e7bc      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = HSE_VALUE;
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xb4>)
 8001faa:	e7ba      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = LSE_VALUE;
 8001fac:	2080      	movs	r0, #128	; 0x80
 8001fae:	0200      	lsls	r0, r0, #8
 8001fb0:	e7b7      	b.n	8001f22 <HAL_RCC_GetSysClockFreq+0x1a>
 8001fb2:	46c0      	nop			; (mov r8, r8)
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	00f42400 	.word	0x00f42400
 8001fbc:	007a1200 	.word	0x007a1200

08001fc0 <HAL_RCC_ClockConfig>:
{
 8001fc0:	b570      	push	{r4, r5, r6, lr}
 8001fc2:	0004      	movs	r4, r0
 8001fc4:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001fc6:	2800      	cmp	r0, #0
 8001fc8:	d100      	bne.n	8001fcc <HAL_RCC_ClockConfig+0xc>
 8001fca:	e0aa      	b.n	8002122 <HAL_RCC_ClockConfig+0x162>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fcc:	4b57      	ldr	r3, [pc, #348]	; (800212c <HAL_RCC_ClockConfig+0x16c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2307      	movs	r3, #7
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	428b      	cmp	r3, r1
 8001fd6:	d321      	bcc.n	800201c <HAL_RCC_ClockConfig+0x5c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	079a      	lsls	r2, r3, #30
 8001fdc:	d50e      	bpl.n	8001ffc <HAL_RCC_ClockConfig+0x3c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fde:	075b      	lsls	r3, r3, #29
 8001fe0:	d505      	bpl.n	8001fee <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001fe2:	4a53      	ldr	r2, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 8001fe4:	6891      	ldr	r1, [r2, #8]
 8001fe6:	23e0      	movs	r3, #224	; 0xe0
 8001fe8:	01db      	lsls	r3, r3, #7
 8001fea:	430b      	orrs	r3, r1
 8001fec:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fee:	4a50      	ldr	r2, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 8001ff0:	6893      	ldr	r3, [r2, #8]
 8001ff2:	4950      	ldr	r1, [pc, #320]	; (8002134 <HAL_RCC_ClockConfig+0x174>)
 8001ff4:	400b      	ands	r3, r1
 8001ff6:	68a1      	ldr	r1, [r4, #8]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	07db      	lsls	r3, r3, #31
 8002000:	d554      	bpl.n	80020ac <HAL_RCC_ClockConfig+0xec>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002002:	6863      	ldr	r3, [r4, #4]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d020      	beq.n	800204a <HAL_RCC_ClockConfig+0x8a>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002008:	2b02      	cmp	r3, #2
 800200a:	d03b      	beq.n	8002084 <HAL_RCC_ClockConfig+0xc4>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800200c:	2b00      	cmp	r3, #0
 800200e:	d13f      	bne.n	8002090 <HAL_RCC_ClockConfig+0xd0>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002010:	4a47      	ldr	r2, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 8002012:	6812      	ldr	r2, [r2, #0]
 8002014:	0552      	lsls	r2, r2, #21
 8002016:	d41c      	bmi.n	8002052 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 8002018:	2001      	movs	r0, #1
 800201a:	e06a      	b.n	80020f2 <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201c:	4a43      	ldr	r2, [pc, #268]	; (800212c <HAL_RCC_ClockConfig+0x16c>)
 800201e:	6813      	ldr	r3, [r2, #0]
 8002020:	2107      	movs	r1, #7
 8002022:	438b      	bics	r3, r1
 8002024:	432b      	orrs	r3, r5
 8002026:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002028:	f7fe fed8 	bl	8000ddc <HAL_GetTick>
 800202c:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_ClockConfig+0x16c>)
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	2307      	movs	r3, #7
 8002034:	4013      	ands	r3, r2
 8002036:	42ab      	cmp	r3, r5
 8002038:	d0ce      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203a:	f7fe fecf 	bl	8000ddc <HAL_GetTick>
 800203e:	1b80      	subs	r0, r0, r6
 8002040:	4a3d      	ldr	r2, [pc, #244]	; (8002138 <HAL_RCC_ClockConfig+0x178>)
 8002042:	4290      	cmp	r0, r2
 8002044:	d9f3      	bls.n	800202e <HAL_RCC_ClockConfig+0x6e>
        return HAL_TIMEOUT;
 8002046:	2003      	movs	r0, #3
 8002048:	e053      	b.n	80020f2 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800204a:	4a39      	ldr	r2, [pc, #228]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	0392      	lsls	r2, r2, #14
 8002050:	d569      	bpl.n	8002126 <HAL_RCC_ClockConfig+0x166>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002052:	4937      	ldr	r1, [pc, #220]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 8002054:	688a      	ldr	r2, [r1, #8]
 8002056:	2007      	movs	r0, #7
 8002058:	4382      	bics	r2, r0
 800205a:	4313      	orrs	r3, r2
 800205c:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800205e:	f7fe febd 	bl	8000ddc <HAL_GetTick>
 8002062:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002064:	4b32      	ldr	r3, [pc, #200]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2238      	movs	r2, #56	; 0x38
 800206a:	401a      	ands	r2, r3
 800206c:	6863      	ldr	r3, [r4, #4]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	429a      	cmp	r2, r3
 8002072:	d01b      	beq.n	80020ac <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7fe feb2 	bl	8000ddc <HAL_GetTick>
 8002078:	1b80      	subs	r0, r0, r6
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCC_ClockConfig+0x178>)
 800207c:	4298      	cmp	r0, r3
 800207e:	d9f1      	bls.n	8002064 <HAL_RCC_ClockConfig+0xa4>
        return HAL_TIMEOUT;
 8002080:	2003      	movs	r0, #3
 8002082:	e036      	b.n	80020f2 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002084:	4a2a      	ldr	r2, [pc, #168]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 8002086:	6812      	ldr	r2, [r2, #0]
 8002088:	0192      	lsls	r2, r2, #6
 800208a:	d4e2      	bmi.n	8002052 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800208c:	2001      	movs	r0, #1
 800208e:	e030      	b.n	80020f2 <HAL_RCC_ClockConfig+0x132>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002090:	2b03      	cmp	r3, #3
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_ClockConfig+0xe0>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002094:	4a26      	ldr	r2, [pc, #152]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 8002096:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002098:	0792      	lsls	r2, r2, #30
 800209a:	d4da      	bmi.n	8002052 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 800209c:	2001      	movs	r0, #1
 800209e:	e028      	b.n	80020f2 <HAL_RCC_ClockConfig+0x132>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020a0:	4a23      	ldr	r2, [pc, #140]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 80020a2:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80020a4:	0792      	lsls	r2, r2, #30
 80020a6:	d4d4      	bmi.n	8002052 <HAL_RCC_ClockConfig+0x92>
        return HAL_ERROR;
 80020a8:	2001      	movs	r0, #1
 80020aa:	e022      	b.n	80020f2 <HAL_RCC_ClockConfig+0x132>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_RCC_ClockConfig+0x16c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2307      	movs	r3, #7
 80020b2:	4013      	ands	r3, r2
 80020b4:	42ab      	cmp	r3, r5
 80020b6:	d81d      	bhi.n	80020f4 <HAL_RCC_ClockConfig+0x134>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	6823      	ldr	r3, [r4, #0]
 80020ba:	075b      	lsls	r3, r3, #29
 80020bc:	d506      	bpl.n	80020cc <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80020be:	4a1c      	ldr	r2, [pc, #112]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 80020c0:	6893      	ldr	r3, [r2, #8]
 80020c2:	491e      	ldr	r1, [pc, #120]	; (800213c <HAL_RCC_ClockConfig+0x17c>)
 80020c4:	400b      	ands	r3, r1
 80020c6:	68e1      	ldr	r1, [r4, #12]
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020cc:	f7ff ff1c 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <HAL_RCC_ClockConfig+0x170>)
 80020d2:	689a      	ldr	r2, [r3, #8]
 80020d4:	0a12      	lsrs	r2, r2, #8
 80020d6:	230f      	movs	r3, #15
 80020d8:	4013      	ands	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4a18      	ldr	r2, [pc, #96]	; (8002140 <HAL_RCC_ClockConfig+0x180>)
 80020de:	589a      	ldr	r2, [r3, r2]
 80020e0:	231f      	movs	r3, #31
 80020e2:	4013      	ands	r3, r2
 80020e4:	40d8      	lsrs	r0, r3
 80020e6:	4b17      	ldr	r3, [pc, #92]	; (8002144 <HAL_RCC_ClockConfig+0x184>)
 80020e8:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 80020ea:	4b17      	ldr	r3, [pc, #92]	; (8002148 <HAL_RCC_ClockConfig+0x188>)
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	f7fe fe29 	bl	8000d44 <HAL_InitTick>
}
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020f4:	4a0d      	ldr	r2, [pc, #52]	; (800212c <HAL_RCC_ClockConfig+0x16c>)
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	2107      	movs	r1, #7
 80020fa:	438b      	bics	r3, r1
 80020fc:	432b      	orrs	r3, r5
 80020fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002100:	f7fe fe6c 	bl	8000ddc <HAL_GetTick>
 8002104:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x16c>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	2307      	movs	r3, #7
 800210c:	4013      	ands	r3, r2
 800210e:	42ab      	cmp	r3, r5
 8002110:	d0d2      	beq.n	80020b8 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002112:	f7fe fe63 	bl	8000ddc <HAL_GetTick>
 8002116:	1b80      	subs	r0, r0, r6
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <HAL_RCC_ClockConfig+0x178>)
 800211a:	4298      	cmp	r0, r3
 800211c:	d9f3      	bls.n	8002106 <HAL_RCC_ClockConfig+0x146>
        return HAL_TIMEOUT;
 800211e:	2003      	movs	r0, #3
 8002120:	e7e7      	b.n	80020f2 <HAL_RCC_ClockConfig+0x132>
    return HAL_ERROR;
 8002122:	2001      	movs	r0, #1
 8002124:	e7e5      	b.n	80020f2 <HAL_RCC_ClockConfig+0x132>
        return HAL_ERROR;
 8002126:	2001      	movs	r0, #1
 8002128:	e7e3      	b.n	80020f2 <HAL_RCC_ClockConfig+0x132>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	40022000 	.word	0x40022000
 8002130:	40021000 	.word	0x40021000
 8002134:	fffff0ff 	.word	0xfffff0ff
 8002138:	00001388 	.word	0x00001388
 800213c:	ffff8fff 	.word	0xffff8fff
 8002140:	08003c6c 	.word	0x08003c6c
 8002144:	20000050 	.word	0x20000050
 8002148:	20000058 	.word	0x20000058

0800214c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800214c:	4b01      	ldr	r3, [pc, #4]	; (8002154 <HAL_RCC_GetHCLKFreq+0x8>)
 800214e:	6818      	ldr	r0, [r3, #0]
}
 8002150:	4770      	bx	lr
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	20000050 	.word	0x20000050

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b510      	push	{r4, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800215a:	f7ff fff7 	bl	800214c <HAL_RCC_GetHCLKFreq>
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	0b12      	lsrs	r2, r2, #12
 8002164:	2307      	movs	r3, #7
 8002166:	4013      	ands	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	4a04      	ldr	r2, [pc, #16]	; (800217c <HAL_RCC_GetPCLK1Freq+0x24>)
 800216c:	589a      	ldr	r2, [r3, r2]
 800216e:	231f      	movs	r3, #31
 8002170:	4013      	ands	r3, r2
 8002172:	40d8      	lsrs	r0, r3
}
 8002174:	bd10      	pop	{r4, pc}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	40021000 	.word	0x40021000
 800217c:	08003cac 	.word	0x08003cac

08002180 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002182:	b083      	sub	sp, #12
 8002184:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002186:	6803      	ldr	r3, [r0, #0]
 8002188:	039b      	lsls	r3, r3, #14
 800218a:	d562      	bpl.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xd2>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800218c:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	d41e      	bmi.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	4a51      	ldr	r2, [pc, #324]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002196:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002198:	2080      	movs	r0, #128	; 0x80
 800219a:	0540      	lsls	r0, r0, #21
 800219c:	4301      	orrs	r1, r0
 800219e:	63d1      	str	r1, [r2, #60]	; 0x3c
 80021a0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80021a2:	4003      	ands	r3, r0
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80021a8:	2601      	movs	r6, #1
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021aa:	4a4d      	ldr	r2, [pc, #308]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ac:	6811      	ldr	r1, [r2, #0]
 80021ae:	2380      	movs	r3, #128	; 0x80
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	430b      	orrs	r3, r1
 80021b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021b6:	f7fe fe11 	bl	8000ddc <HAL_GetTick>
 80021ba:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80021bc:	4b48      	ldr	r3, [pc, #288]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	05db      	lsls	r3, r3, #23
 80021c2:	d408      	bmi.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021c4:	f7fe fe0a 	bl	8000ddc <HAL_GetTick>
 80021c8:	1b40      	subs	r0, r0, r5
 80021ca:	2802      	cmp	r0, #2
 80021cc:	d9f6      	bls.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x3c>
      {
        ret = HAL_TIMEOUT;
 80021ce:	2503      	movs	r5, #3
 80021d0:	e002      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x58>
    FlagStatus       pwrclkchanged = RESET;
 80021d2:	2600      	movs	r6, #0
 80021d4:	e7e9      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80021d6:	2500      	movs	r5, #0
        break;
      }
    }

    if (ret == HAL_OK)
 80021d8:	2d00      	cmp	r5, #0
 80021da:	d123      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021dc:	4b3f      	ldr	r3, [pc, #252]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021de:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80021e0:	22c0      	movs	r2, #192	; 0xc0
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	000b      	movs	r3, r1
 80021e6:	4013      	ands	r3, r2

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021e8:	4211      	tst	r1, r2
 80021ea:	d010      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80021ec:	6962      	ldr	r2, [r4, #20]
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d00d      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021f2:	4a3a      	ldr	r2, [pc, #232]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80021f4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80021f6:	493b      	ldr	r1, [pc, #236]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021f8:	400b      	ands	r3, r1
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021fa:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	0249      	lsls	r1, r1, #9
 8002200:	4301      	orrs	r1, r0
 8002202:	65d1      	str	r1, [r2, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002204:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002206:	4838      	ldr	r0, [pc, #224]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002208:	4001      	ands	r1, r0
 800220a:	65d1      	str	r1, [r2, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800220c:	65d3      	str	r3, [r2, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800220e:	07db      	lsls	r3, r3, #31
 8002210:	d410      	bmi.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0xb4>
            break;
          }
        }
      }

      if (ret == HAL_OK)
 8002212:	2d00      	cmp	r5, #0
 8002214:	d106      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002216:	4a31      	ldr	r2, [pc, #196]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002218:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 800221a:	4932      	ldr	r1, [pc, #200]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800221c:	400b      	ands	r3, r1
 800221e:	6961      	ldr	r1, [r4, #20]
 8002220:	430b      	orrs	r3, r1
 8002222:	65d3      	str	r3, [r2, #92]	; 0x5c
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002224:	2e01      	cmp	r6, #1
 8002226:	d115      	bne.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4a2c      	ldr	r2, [pc, #176]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800222a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800222c:	492f      	ldr	r1, [pc, #188]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800222e:	400b      	ands	r3, r1
 8002230:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002232:	e00f      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        tickstart = HAL_GetTick();
 8002234:	f7fe fdd2 	bl	8000ddc <HAL_GetTick>
 8002238:	0007      	movs	r7, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800223a:	4b28      	ldr	r3, [pc, #160]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	079b      	lsls	r3, r3, #30
 8002240:	d4e7      	bmi.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x92>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fdcb 	bl	8000ddc <HAL_GetTick>
 8002246:	1bc0      	subs	r0, r0, r7
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800224a:	4298      	cmp	r0, r3
 800224c:	d9f5      	bls.n	800223a <HAL_RCCEx_PeriphCLKConfig+0xba>
            ret = HAL_TIMEOUT;
 800224e:	2503      	movs	r5, #3
 8002250:	e7df      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x92>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002252:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	07db      	lsls	r3, r3, #31
 8002258:	d506      	bpl.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800225a:	4a20      	ldr	r2, [pc, #128]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800225c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800225e:	2103      	movs	r1, #3
 8002260:	438b      	bics	r3, r1
 8002262:	6861      	ldr	r1, [r4, #4]
 8002264:	430b      	orrs	r3, r1
 8002266:	6553      	str	r3, [r2, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	069b      	lsls	r3, r3, #26
 800226c:	d506      	bpl.n	800227c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226e:	4a1b      	ldr	r2, [pc, #108]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002270:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002272:	4920      	ldr	r1, [pc, #128]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 8002274:	400b      	ands	r3, r1
 8002276:	68a1      	ldr	r1, [r4, #8]
 8002278:	430b      	orrs	r3, r1
 800227a:	6553      	str	r3, [r2, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800227c:	6823      	ldr	r3, [r4, #0]
 800227e:	045b      	lsls	r3, r3, #17
 8002280:	d50b      	bpl.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002282:	4a16      	ldr	r2, [pc, #88]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002284:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	6921      	ldr	r1, [r4, #16]
 800228c:	430b      	orrs	r3, r1
 800228e:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002290:	2380      	movs	r3, #128	; 0x80
 8002292:	05db      	lsls	r3, r3, #23
 8002294:	6922      	ldr	r2, [r4, #16]
 8002296:	429a      	cmp	r2, r3
 8002298:	d011      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x13e>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	051b      	lsls	r3, r3, #20
 800229e:	d50b      	bpl.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022a2:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80022a4:	4914      	ldr	r1, [pc, #80]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 80022a6:	400b      	ands	r3, r1
 80022a8:	68e1      	ldr	r1, [r4, #12]
 80022aa:	430b      	orrs	r3, r1
 80022ac:	6553      	str	r3, [r2, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022ae:	68e2      	ldr	r2, [r4, #12]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	01db      	lsls	r3, r3, #7
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d009      	beq.n	80022cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 80022b8:	0028      	movs	r0, r5
 80022ba:	b003      	add	sp, #12
 80022bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022be:	4a07      	ldr	r2, [pc, #28]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022c0:	68d1      	ldr	r1, [r2, #12]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	025b      	lsls	r3, r3, #9
 80022c6:	430b      	orrs	r3, r1
 80022c8:	60d3      	str	r3, [r2, #12]
 80022ca:	e7e6      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022cc:	4a03      	ldr	r2, [pc, #12]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80022ce:	68d1      	ldr	r1, [r2, #12]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	025b      	lsls	r3, r3, #9
 80022d4:	430b      	orrs	r3, r1
 80022d6:	60d3      	str	r3, [r2, #12]
 80022d8:	e7ee      	b.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40007000 	.word	0x40007000
 80022e4:	fffffcff 	.word	0xfffffcff
 80022e8:	fffeffff 	.word	0xfffeffff
 80022ec:	efffffff 	.word	0xefffffff
 80022f0:	00001388 	.word	0x00001388
 80022f4:	ffffcfff 	.word	0xffffcfff
 80022f8:	ffff3fff 	.word	0xffff3fff

080022fc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80022fc:	b570      	push	{r4, r5, r6, lr}
 80022fe:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002300:	6802      	ldr	r2, [r0, #0]
 8002302:	68d3      	ldr	r3, [r2, #12]
 8002304:	21a0      	movs	r1, #160	; 0xa0
 8002306:	438b      	bics	r3, r1
 8002308:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800230a:	f7fe fd67 	bl	8000ddc <HAL_GetTick>
 800230e:	0005      	movs	r5, r0

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	069b      	lsls	r3, r3, #26
 8002316:	d408      	bmi.n	800232a <HAL_RTC_WaitForSynchro+0x2e>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002318:	f7fe fd60 	bl	8000ddc <HAL_GetTick>
 800231c:	1b40      	subs	r0, r0, r5
 800231e:	23fa      	movs	r3, #250	; 0xfa
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4298      	cmp	r0, r3
 8002324:	d9f4      	bls.n	8002310 <HAL_RTC_WaitForSynchro+0x14>
    {
      return HAL_TIMEOUT;
 8002326:	2003      	movs	r0, #3
 8002328:	e000      	b.n	800232c <HAL_RTC_WaitForSynchro+0x30>
    }
  }

  return HAL_OK;
 800232a:	2000      	movs	r0, #0
}
 800232c:	bd70      	pop	{r4, r5, r6, pc}

0800232e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800232e:	b570      	push	{r4, r5, r6, lr}
 8002330:	0004      	movs	r4, r0
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002332:	6803      	ldr	r3, [r0, #0]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	0652      	lsls	r2, r2, #25
 8002338:	d502      	bpl.n	8002340 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;  
 800233a:	2500      	movs	r5, #0
      }
    }
  }

  return status;
}
 800233c:	0028      	movs	r0, r5
 800233e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002340:	68da      	ldr	r2, [r3, #12]
 8002342:	2180      	movs	r1, #128	; 0x80
 8002344:	430a      	orrs	r2, r1
 8002346:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8002348:	f7fe fd48 	bl	8000ddc <HAL_GetTick>
 800234c:	0006      	movs	r6, r0
  HAL_StatusTypeDef status = HAL_OK;  
 800234e:	2500      	movs	r5, #0
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002350:	6823      	ldr	r3, [r4, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	065b      	lsls	r3, r3, #25
 8002356:	d4f1      	bmi.n	800233c <RTC_EnterInitMode+0xe>
 8002358:	2d03      	cmp	r5, #3
 800235a:	d0ef      	beq.n	800233c <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800235c:	f7fe fd3e 	bl	8000ddc <HAL_GetTick>
 8002360:	1b80      	subs	r0, r0, r6
 8002362:	22fa      	movs	r2, #250	; 0xfa
 8002364:	0092      	lsls	r2, r2, #2
 8002366:	4290      	cmp	r0, r2
 8002368:	d9f2      	bls.n	8002350 <RTC_EnterInitMode+0x22>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800236a:	2329      	movs	r3, #41	; 0x29
 800236c:	2203      	movs	r2, #3
 800236e:	54e2      	strb	r2, [r4, r3]
        status = HAL_TIMEOUT;
 8002370:	2503      	movs	r5, #3
 8002372:	e7ed      	b.n	8002350 <RTC_EnterInitMode+0x22>

08002374 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002374:	b510      	push	{r4, lr}
 8002376:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002378:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <RTC_ExitInitMode+0x4c>)
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	438a      	bics	r2, r1
 8002380:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	069b      	lsls	r3, r3, #26
 8002386:	d408      	bmi.n	800239a <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002388:	f7ff ffb8 	bl	80022fc <HAL_RTC_WaitForSynchro>
 800238c:	2800      	cmp	r0, #0
 800238e:	d016      	beq.n	80023be <RTC_ExitInitMode+0x4a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002390:	2329      	movs	r3, #41	; 0x29
 8002392:	2203      	movs	r2, #3
 8002394:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 8002396:	2003      	movs	r0, #3
 8002398:	e011      	b.n	80023be <RTC_ExitInitMode+0x4a>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800239a:	4a09      	ldr	r2, [pc, #36]	; (80023c0 <RTC_ExitInitMode+0x4c>)
 800239c:	6993      	ldr	r3, [r2, #24]
 800239e:	2120      	movs	r1, #32
 80023a0:	438b      	bics	r3, r1
 80023a2:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023a4:	f7ff ffaa 	bl	80022fc <HAL_RTC_WaitForSynchro>
 80023a8:	2800      	cmp	r0, #0
 80023aa:	d003      	beq.n	80023b4 <RTC_ExitInitMode+0x40>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023ac:	2329      	movs	r3, #41	; 0x29
 80023ae:	2203      	movs	r2, #3
 80023b0:	54e2      	strb	r2, [r4, r3]
      status = HAL_TIMEOUT;
 80023b2:	2003      	movs	r0, #3
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80023b4:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <RTC_ExitInitMode+0x4c>)
 80023b6:	6993      	ldr	r3, [r2, #24]
 80023b8:	2120      	movs	r1, #32
 80023ba:	430b      	orrs	r3, r1
 80023bc:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 80023be:	bd10      	pop	{r4, pc}
 80023c0:	40002800 	.word	0x40002800

080023c4 <HAL_RTC_Init>:
{
 80023c4:	b570      	push	{r4, r5, r6, lr}
 80023c6:	1e04      	subs	r4, r0, #0
  if(hrtc != NULL)
 80023c8:	d053      	beq.n	8002472 <HAL_RTC_Init+0xae>
    if(hrtc->State == HAL_RTC_STATE_RESET)
 80023ca:	2329      	movs	r3, #41	; 0x29
 80023cc:	5cc3      	ldrb	r3, [r0, r3]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00b      	beq.n	80023ea <HAL_RTC_Init+0x26>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80023d2:	2329      	movs	r3, #41	; 0x29
 80023d4:	2202      	movs	r2, #2
 80023d6:	54e2      	strb	r2, [r4, r3]
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80023d8:	6823      	ldr	r3, [r4, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	06d2      	lsls	r2, r2, #27
 80023de:	d50d      	bpl.n	80023fc <HAL_RTC_Init+0x38>
      status = HAL_OK;
 80023e0:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 80023e2:	2329      	movs	r3, #41	; 0x29
 80023e4:	2201      	movs	r2, #1
 80023e6:	54e2      	strb	r2, [r4, r3]
}
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
      hrtc->Lock = HAL_UNLOCKED;
 80023ea:	3328      	adds	r3, #40	; 0x28
 80023ec:	2200      	movs	r2, #0
 80023ee:	54c2      	strb	r2, [r0, r3]
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80023f0:	2388      	movs	r3, #136	; 0x88
 80023f2:	021b      	lsls	r3, r3, #8
 80023f4:	6043      	str	r3, [r0, #4]
      HAL_RTC_MspInit(hrtc);
 80023f6:	f7fe fb2b 	bl	8000a50 <HAL_RTC_MspInit>
 80023fa:	e7ea      	b.n	80023d2 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023fc:	22ca      	movs	r2, #202	; 0xca
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002400:	6823      	ldr	r3, [r4, #0]
 8002402:	3a77      	subs	r2, #119	; 0x77
 8002404:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8002406:	0020      	movs	r0, r4
 8002408:	f7ff ff91 	bl	800232e <RTC_EnterInitMode>
      if(status == HAL_OK)
 800240c:	2800      	cmp	r0, #0
 800240e:	d015      	beq.n	800243c <HAL_RTC_Init+0x78>
      if (status == HAL_OK)
 8002410:	2800      	cmp	r0, #0
 8002412:	d10d      	bne.n	8002430 <HAL_RTC_Init+0x6c>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002414:	6822      	ldr	r2, [r4, #0]
 8002416:	6993      	ldr	r3, [r2, #24]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800241e:	6821      	ldr	r1, [r4, #0]
 8002420:	698a      	ldr	r2, [r1, #24]
 8002422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002424:	6a25      	ldr	r5, [r4, #32]
 8002426:	432b      	orrs	r3, r5
 8002428:	69a5      	ldr	r5, [r4, #24]
 800242a:	432b      	orrs	r3, r5
 800242c:	4313      	orrs	r3, r2
 800242e:	618b      	str	r3, [r1, #24]
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	22ff      	movs	r2, #255	; 0xff
 8002434:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002436:	2800      	cmp	r0, #0
 8002438:	d1d6      	bne.n	80023e8 <HAL_RTC_Init+0x24>
 800243a:	e7d2      	b.n	80023e2 <HAL_RTC_Init+0x1e>
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800243c:	6822      	ldr	r2, [r4, #0]
 800243e:	6993      	ldr	r3, [r2, #24]
 8002440:	490d      	ldr	r1, [pc, #52]	; (8002478 <HAL_RTC_Init+0xb4>)
 8002442:	400b      	ands	r3, r1
 8002444:	6193      	str	r3, [r2, #24]
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002446:	6821      	ldr	r1, [r4, #0]
 8002448:	698a      	ldr	r2, [r1, #24]
 800244a:	68a3      	ldr	r3, [r4, #8]
 800244c:	6960      	ldr	r0, [r4, #20]
 800244e:	4303      	orrs	r3, r0
 8002450:	69e0      	ldr	r0, [r4, #28]
 8002452:	4303      	orrs	r3, r0
 8002454:	4313      	orrs	r3, r2
 8002456:	618b      	str	r3, [r1, #24]
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002458:	6823      	ldr	r3, [r4, #0]
 800245a:	6922      	ldr	r2, [r4, #16]
 800245c:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800245e:	6821      	ldr	r1, [r4, #0]
 8002460:	690b      	ldr	r3, [r1, #16]
 8002462:	68e2      	ldr	r2, [r4, #12]
 8002464:	0412      	lsls	r2, r2, #16
 8002466:	4313      	orrs	r3, r2
 8002468:	610b      	str	r3, [r1, #16]
        status = RTC_ExitInitMode(hrtc);
 800246a:	0020      	movs	r0, r4
 800246c:	f7ff ff82 	bl	8002374 <RTC_ExitInitMode>
 8002470:	e7ce      	b.n	8002410 <HAL_RTC_Init+0x4c>
  HAL_StatusTypeDef status = HAL_ERROR;
 8002472:	2001      	movs	r0, #1
 8002474:	e7b8      	b.n	80023e8 <HAL_RTC_Init+0x24>
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	fb8fffbf 	.word	0xfb8fffbf

0800247c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800247c:	233d      	movs	r3, #61	; 0x3d
 800247e:	5cc3      	ldrb	r3, [r0, r3]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d11d      	bne.n	80024c0 <HAL_TIM_Base_Start+0x44>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	333c      	adds	r3, #60	; 0x3c
 8002486:	2202      	movs	r2, #2
 8002488:	54c2      	strb	r2, [r0, r3]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800248a:	6803      	ldr	r3, [r0, #0]
 800248c:	4a0f      	ldr	r2, [pc, #60]	; (80024cc <HAL_TIM_Base_Start+0x50>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d008      	beq.n	80024a4 <HAL_TIM_Base_Start+0x28>
 8002492:	4a0f      	ldr	r2, [pc, #60]	; (80024d0 <HAL_TIM_Base_Start+0x54>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d005      	beq.n	80024a4 <HAL_TIM_Base_Start+0x28>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2101      	movs	r1, #1
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a0:	2000      	movs	r0, #0
 80024a2:	e00e      	b.n	80024c2 <HAL_TIM_Base_Start+0x46>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	490b      	ldr	r1, [pc, #44]	; (80024d4 <HAL_TIM_Base_Start+0x58>)
 80024a8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024aa:	2a06      	cmp	r2, #6
 80024ac:	d00a      	beq.n	80024c4 <HAL_TIM_Base_Start+0x48>
 80024ae:	3907      	subs	r1, #7
 80024b0:	428a      	cmp	r2, r1
 80024b2:	d009      	beq.n	80024c8 <HAL_TIM_Base_Start+0x4c>
      __HAL_TIM_ENABLE(htim);
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	2101      	movs	r1, #1
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80024bc:	2000      	movs	r0, #0
 80024be:	e000      	b.n	80024c2 <HAL_TIM_Base_Start+0x46>
    return HAL_ERROR;
 80024c0:	2001      	movs	r0, #1
}
 80024c2:	4770      	bx	lr
  return HAL_OK;
 80024c4:	2000      	movs	r0, #0
 80024c6:	e7fc      	b.n	80024c2 <HAL_TIM_Base_Start+0x46>
 80024c8:	2000      	movs	r0, #0
 80024ca:	e7fa      	b.n	80024c2 <HAL_TIM_Base_Start+0x46>
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40000400 	.word	0x40000400
 80024d4:	00010007 	.word	0x00010007

080024d8 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024d8:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024da:	4a1a      	ldr	r2, [pc, #104]	; (8002544 <TIM_Base_SetConfig+0x6c>)
 80024dc:	4290      	cmp	r0, r2
 80024de:	d002      	beq.n	80024e6 <TIM_Base_SetConfig+0xe>
 80024e0:	4a19      	ldr	r2, [pc, #100]	; (8002548 <TIM_Base_SetConfig+0x70>)
 80024e2:	4290      	cmp	r0, r2
 80024e4:	d103      	bne.n	80024ee <TIM_Base_SetConfig+0x16>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e6:	2270      	movs	r2, #112	; 0x70
 80024e8:	4393      	bics	r3, r2
    tmpcr1 |= Structure->CounterMode;
 80024ea:	684a      	ldr	r2, [r1, #4]
 80024ec:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ee:	4a15      	ldr	r2, [pc, #84]	; (8002544 <TIM_Base_SetConfig+0x6c>)
 80024f0:	4290      	cmp	r0, r2
 80024f2:	d00b      	beq.n	800250c <TIM_Base_SetConfig+0x34>
 80024f4:	4a14      	ldr	r2, [pc, #80]	; (8002548 <TIM_Base_SetConfig+0x70>)
 80024f6:	4290      	cmp	r0, r2
 80024f8:	d008      	beq.n	800250c <TIM_Base_SetConfig+0x34>
 80024fa:	4a14      	ldr	r2, [pc, #80]	; (800254c <TIM_Base_SetConfig+0x74>)
 80024fc:	4290      	cmp	r0, r2
 80024fe:	d005      	beq.n	800250c <TIM_Base_SetConfig+0x34>
 8002500:	4a13      	ldr	r2, [pc, #76]	; (8002550 <TIM_Base_SetConfig+0x78>)
 8002502:	4290      	cmp	r0, r2
 8002504:	d002      	beq.n	800250c <TIM_Base_SetConfig+0x34>
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <TIM_Base_SetConfig+0x7c>)
 8002508:	4290      	cmp	r0, r2
 800250a:	d103      	bne.n	8002514 <TIM_Base_SetConfig+0x3c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800250c:	4a12      	ldr	r2, [pc, #72]	; (8002558 <TIM_Base_SetConfig+0x80>)
 800250e:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002510:	68ca      	ldr	r2, [r1, #12]
 8002512:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002514:	2280      	movs	r2, #128	; 0x80
 8002516:	4393      	bics	r3, r2
 8002518:	694a      	ldr	r2, [r1, #20]
 800251a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800251c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251e:	688b      	ldr	r3, [r1, #8]
 8002520:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002522:	680b      	ldr	r3, [r1, #0]
 8002524:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <TIM_Base_SetConfig+0x6c>)
 8002528:	4298      	cmp	r0, r3
 800252a:	d005      	beq.n	8002538 <TIM_Base_SetConfig+0x60>
 800252c:	4b08      	ldr	r3, [pc, #32]	; (8002550 <TIM_Base_SetConfig+0x78>)
 800252e:	4298      	cmp	r0, r3
 8002530:	d002      	beq.n	8002538 <TIM_Base_SetConfig+0x60>
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <TIM_Base_SetConfig+0x7c>)
 8002534:	4298      	cmp	r0, r3
 8002536:	d101      	bne.n	800253c <TIM_Base_SetConfig+0x64>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002538:	690b      	ldr	r3, [r1, #16]
 800253a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800253c:	2301      	movs	r3, #1
 800253e:	6143      	str	r3, [r0, #20]
}
 8002540:	4770      	bx	lr
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	40012c00 	.word	0x40012c00
 8002548:	40000400 	.word	0x40000400
 800254c:	40002000 	.word	0x40002000
 8002550:	40014400 	.word	0x40014400
 8002554:	40014800 	.word	0x40014800
 8002558:	fffffcff 	.word	0xfffffcff

0800255c <HAL_TIM_Base_Init>:
{
 800255c:	b570      	push	{r4, r5, r6, lr}
 800255e:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8002560:	d02a      	beq.n	80025b8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002562:	233d      	movs	r3, #61	; 0x3d
 8002564:	5cc3      	ldrb	r3, [r0, r3]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d020      	beq.n	80025ac <HAL_TIM_Base_Init+0x50>
  htim->State = HAL_TIM_STATE_BUSY;
 800256a:	253d      	movs	r5, #61	; 0x3d
 800256c:	2302      	movs	r3, #2
 800256e:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002570:	0021      	movs	r1, r4
 8002572:	c901      	ldmia	r1!, {r0}
 8002574:	f7ff ffb0 	bl	80024d8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002578:	2301      	movs	r3, #1
 800257a:	2248      	movs	r2, #72	; 0x48
 800257c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800257e:	3a0a      	subs	r2, #10
 8002580:	54a3      	strb	r3, [r4, r2]
 8002582:	3201      	adds	r2, #1
 8002584:	54a3      	strb	r3, [r4, r2]
 8002586:	3201      	adds	r2, #1
 8002588:	54a3      	strb	r3, [r4, r2]
 800258a:	3201      	adds	r2, #1
 800258c:	54a3      	strb	r3, [r4, r2]
 800258e:	3201      	adds	r2, #1
 8002590:	54a3      	strb	r3, [r4, r2]
 8002592:	3201      	adds	r2, #1
 8002594:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002596:	3201      	adds	r2, #1
 8002598:	54a3      	strb	r3, [r4, r2]
 800259a:	3201      	adds	r2, #1
 800259c:	54a3      	strb	r3, [r4, r2]
 800259e:	3201      	adds	r2, #1
 80025a0:	54a3      	strb	r3, [r4, r2]
 80025a2:	3201      	adds	r2, #1
 80025a4:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80025a6:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80025a8:	2000      	movs	r0, #0
}
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80025ac:	333c      	adds	r3, #60	; 0x3c
 80025ae:	2200      	movs	r2, #0
 80025b0:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80025b2:	f7fe faef 	bl	8000b94 <HAL_TIM_Base_MspInit>
 80025b6:	e7d8      	b.n	800256a <HAL_TIM_Base_Init+0xe>
    return HAL_ERROR;
 80025b8:	2001      	movs	r0, #1
 80025ba:	e7f6      	b.n	80025aa <HAL_TIM_Base_Init+0x4e>

080025bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80025bc:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025be:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c2:	2201      	movs	r2, #1
 80025c4:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80025c8:	6801      	ldr	r1, [r0, #0]
 80025ca:	680b      	ldr	r3, [r1, #0]
 80025cc:	25c0      	movs	r5, #192	; 0xc0
 80025ce:	43ab      	bics	r3, r5
 80025d0:	600b      	str	r3, [r1, #0]
 80025d2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025d6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025da:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80025de:	6802      	ldr	r2, [r0, #0]
 80025e0:	6893      	ldr	r3, [r2, #8]
 80025e2:	4c04      	ldr	r4, [pc, #16]	; (80025f4 <UART_EndTxTransfer+0x38>)
 80025e4:	4023      	ands	r3, r4
 80025e6:	6093      	str	r3, [r2, #8]
 80025e8:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025ec:	2388      	movs	r3, #136	; 0x88
 80025ee:	2220      	movs	r2, #32
 80025f0:	50c2      	str	r2, [r0, r3]
}
 80025f2:	bd30      	pop	{r4, r5, pc}
 80025f4:	ff7fffff 	.word	0xff7fffff

080025f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025f8:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fe:	2201      	movs	r2, #1
 8002600:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002604:	6801      	ldr	r1, [r0, #0]
 8002606:	680b      	ldr	r3, [r1, #0]
 8002608:	4d12      	ldr	r5, [pc, #72]	; (8002654 <UART_EndRxTransfer+0x5c>)
 800260a:	402b      	ands	r3, r5
 800260c:	600b      	str	r3, [r1, #0]
 800260e:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002612:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002616:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800261a:	6802      	ldr	r2, [r0, #0]
 800261c:	6893      	ldr	r3, [r2, #8]
 800261e:	4c0e      	ldr	r4, [pc, #56]	; (8002658 <UART_EndRxTransfer+0x60>)
 8002620:	4023      	ands	r3, r4
 8002622:	6093      	str	r3, [r2, #8]
 8002624:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002628:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800262a:	2b01      	cmp	r3, #1
 800262c:	d006      	beq.n	800263c <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800262e:	238c      	movs	r3, #140	; 0x8c
 8002630:	2220      	movs	r2, #32
 8002632:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002634:	2300      	movs	r3, #0
 8002636:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002638:	6743      	str	r3, [r0, #116]	; 0x74
}
 800263a:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800263c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002640:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002644:	6802      	ldr	r2, [r0, #0]
 8002646:	6813      	ldr	r3, [r2, #0]
 8002648:	2410      	movs	r4, #16
 800264a:	43a3      	bics	r3, r4
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	f381 8810 	msr	PRIMASK, r1
}
 8002652:	e7ec      	b.n	800262e <UART_EndRxTransfer+0x36>
 8002654:	fffffedf 	.word	0xfffffedf
 8002658:	effffffe 	.word	0xeffffffe

0800265c <HAL_UART_TxCpltCallback>:
}
 800265c:	4770      	bx	lr

0800265e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800265e:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002660:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002664:	2301      	movs	r3, #1
 8002666:	f383 8810 	msr	PRIMASK, r3
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800266a:	6802      	ldr	r2, [r0, #0]
 800266c:	6813      	ldr	r3, [r2, #0]
 800266e:	2440      	movs	r4, #64	; 0x40
 8002670:	43a3      	bics	r3, r4
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002678:	2388      	movs	r3, #136	; 0x88
 800267a:	2220      	movs	r2, #32
 800267c:	50c2      	str	r2, [r0, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800267e:	2300      	movs	r3, #0
 8002680:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002682:	f7ff ffeb 	bl	800265c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002686:	bd10      	pop	{r4, pc}

08002688 <HAL_UART_RxCpltCallback>:
}
 8002688:	4770      	bx	lr

0800268a <HAL_UART_RxHalfCpltCallback>:
}
 800268a:	4770      	bx	lr

0800268c <HAL_UART_ErrorCallback>:
}
 800268c:	4770      	bx	lr

0800268e <UART_DMAError>:
{
 800268e:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002690:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8002692:	2388      	movs	r3, #136	; 0x88
 8002694:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8002696:	3304      	adds	r3, #4
 8002698:	58e5      	ldr	r5, [r4, r3]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800269a:	6823      	ldr	r3, [r4, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	061b      	lsls	r3, r3, #24
 80026a0:	d501      	bpl.n	80026a6 <UART_DMAError+0x18>
 80026a2:	2a21      	cmp	r2, #33	; 0x21
 80026a4:	d00e      	beq.n	80026c4 <UART_DMAError+0x36>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	065b      	lsls	r3, r3, #25
 80026ac:	d501      	bpl.n	80026b2 <UART_DMAError+0x24>
 80026ae:	2d22      	cmp	r5, #34	; 0x22
 80026b0:	d00f      	beq.n	80026d2 <UART_DMAError+0x44>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80026b2:	2290      	movs	r2, #144	; 0x90
 80026b4:	58a3      	ldr	r3, [r4, r2]
 80026b6:	2110      	movs	r1, #16
 80026b8:	430b      	orrs	r3, r1
 80026ba:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 80026bc:	0020      	movs	r0, r4
 80026be:	f7ff ffe5 	bl	800268c <HAL_UART_ErrorCallback>
}
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 80026c4:	2356      	movs	r3, #86	; 0x56
 80026c6:	2200      	movs	r2, #0
 80026c8:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 80026ca:	0020      	movs	r0, r4
 80026cc:	f7ff ff76 	bl	80025bc <UART_EndTxTransfer>
 80026d0:	e7e9      	b.n	80026a6 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80026d2:	235e      	movs	r3, #94	; 0x5e
 80026d4:	2200      	movs	r2, #0
 80026d6:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80026d8:	0020      	movs	r0, r4
 80026da:	f7ff ff8d 	bl	80025f8 <UART_EndRxTransfer>
 80026de:	e7e8      	b.n	80026b2 <UART_DMAError+0x24>

080026e0 <UART_DMAAbortOnError>:
{
 80026e0:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80026e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	225e      	movs	r2, #94	; 0x5e
 80026e8:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80026ea:	3a08      	subs	r2, #8
 80026ec:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 80026ee:	f7ff ffcd 	bl	800268c <HAL_UART_ErrorCallback>
}
 80026f2:	bd10      	pop	{r4, pc}

080026f4 <HAL_UART_IRQHandler>:
{
 80026f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026f6:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026f8:	6802      	ldr	r2, [r0, #0]
 80026fa:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026fc:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026fe:	6895      	ldr	r5, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002700:	49bd      	ldr	r1, [pc, #756]	; (80029f8 <HAL_UART_IRQHandler+0x304>)
 8002702:	001e      	movs	r6, r3
 8002704:	400e      	ands	r6, r1
  if (errorflags == 0U)
 8002706:	420b      	tst	r3, r1
 8002708:	d105      	bne.n	8002716 <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800270a:	0699      	lsls	r1, r3, #26
 800270c:	d503      	bpl.n	8002716 <HAL_UART_IRQHandler+0x22>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800270e:	0681      	lsls	r1, r0, #26
 8002710:	d42c      	bmi.n	800276c <HAL_UART_IRQHandler+0x78>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002712:	00e9      	lsls	r1, r5, #3
 8002714:	d42a      	bmi.n	800276c <HAL_UART_IRQHandler+0x78>
  if ((errorflags != 0U)
 8002716:	2e00      	cmp	r6, #0
 8002718:	d007      	beq.n	800272a <HAL_UART_IRQHandler+0x36>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800271a:	49b8      	ldr	r1, [pc, #736]	; (80029fc <HAL_UART_IRQHandler+0x308>)
 800271c:	002e      	movs	r6, r5
 800271e:	400e      	ands	r6, r1
 8002720:	420d      	tst	r5, r1
 8002722:	d129      	bne.n	8002778 <HAL_UART_IRQHandler+0x84>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002724:	49b6      	ldr	r1, [pc, #728]	; (8002a00 <HAL_UART_IRQHandler+0x30c>)
 8002726:	4208      	tst	r0, r1
 8002728:	d126      	bne.n	8002778 <HAL_UART_IRQHandler+0x84>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800272a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800272c:	2901      	cmp	r1, #1
 800272e:	d100      	bne.n	8002732 <HAL_UART_IRQHandler+0x3e>
 8002730:	e0aa      	b.n	8002888 <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002732:	02d9      	lsls	r1, r3, #11
 8002734:	d502      	bpl.n	800273c <HAL_UART_IRQHandler+0x48>
 8002736:	0269      	lsls	r1, r5, #9
 8002738:	d500      	bpl.n	800273c <HAL_UART_IRQHandler+0x48>
 800273a:	e143      	b.n	80029c4 <HAL_UART_IRQHandler+0x2d0>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800273c:	061a      	lsls	r2, r3, #24
 800273e:	d505      	bpl.n	800274c <HAL_UART_IRQHandler+0x58>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002740:	0602      	lsls	r2, r0, #24
 8002742:	d500      	bpl.n	8002746 <HAL_UART_IRQHandler+0x52>
 8002744:	e145      	b.n	80029d2 <HAL_UART_IRQHandler+0x2de>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002746:	022a      	lsls	r2, r5, #8
 8002748:	d500      	bpl.n	800274c <HAL_UART_IRQHandler+0x58>
 800274a:	e142      	b.n	80029d2 <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800274c:	065a      	lsls	r2, r3, #25
 800274e:	d502      	bpl.n	8002756 <HAL_UART_IRQHandler+0x62>
 8002750:	0642      	lsls	r2, r0, #25
 8002752:	d500      	bpl.n	8002756 <HAL_UART_IRQHandler+0x62>
 8002754:	e144      	b.n	80029e0 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002756:	021a      	lsls	r2, r3, #8
 8002758:	d502      	bpl.n	8002760 <HAL_UART_IRQHandler+0x6c>
 800275a:	0042      	lsls	r2, r0, #1
 800275c:	d500      	bpl.n	8002760 <HAL_UART_IRQHandler+0x6c>
 800275e:	e143      	b.n	80029e8 <HAL_UART_IRQHandler+0x2f4>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002760:	01db      	lsls	r3, r3, #7
 8002762:	d502      	bpl.n	800276a <HAL_UART_IRQHandler+0x76>
 8002764:	2800      	cmp	r0, #0
 8002766:	da00      	bge.n	800276a <HAL_UART_IRQHandler+0x76>
 8002768:	e142      	b.n	80029f0 <HAL_UART_IRQHandler+0x2fc>
}
 800276a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (huart->RxISR != NULL)
 800276c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0fb      	beq.n	800276a <HAL_UART_IRQHandler+0x76>
        huart->RxISR(huart);
 8002772:	0020      	movs	r0, r4
 8002774:	4798      	blx	r3
      return;
 8002776:	e7f8      	b.n	800276a <HAL_UART_IRQHandler+0x76>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002778:	07d9      	lsls	r1, r3, #31
 800277a:	d507      	bpl.n	800278c <HAL_UART_IRQHandler+0x98>
 800277c:	05c1      	lsls	r1, r0, #23
 800277e:	d505      	bpl.n	800278c <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002780:	2701      	movs	r7, #1
 8002782:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002784:	2190      	movs	r1, #144	; 0x90
 8002786:	5862      	ldr	r2, [r4, r1]
 8002788:	433a      	orrs	r2, r7
 800278a:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800278c:	079a      	lsls	r2, r3, #30
 800278e:	d509      	bpl.n	80027a4 <HAL_UART_IRQHandler+0xb0>
 8002790:	07ea      	lsls	r2, r5, #31
 8002792:	d507      	bpl.n	80027a4 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002794:	6822      	ldr	r2, [r4, #0]
 8002796:	2102      	movs	r1, #2
 8002798:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800279a:	318e      	adds	r1, #142	; 0x8e
 800279c:	5862      	ldr	r2, [r4, r1]
 800279e:	2704      	movs	r7, #4
 80027a0:	433a      	orrs	r2, r7
 80027a2:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027a4:	075a      	lsls	r2, r3, #29
 80027a6:	d509      	bpl.n	80027bc <HAL_UART_IRQHandler+0xc8>
 80027a8:	07ea      	lsls	r2, r5, #31
 80027aa:	d507      	bpl.n	80027bc <HAL_UART_IRQHandler+0xc8>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027ac:	6822      	ldr	r2, [r4, #0]
 80027ae:	2104      	movs	r1, #4
 80027b0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027b2:	318c      	adds	r1, #140	; 0x8c
 80027b4:	5862      	ldr	r2, [r4, r1]
 80027b6:	2702      	movs	r7, #2
 80027b8:	433a      	orrs	r2, r7
 80027ba:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027bc:	071a      	lsls	r2, r3, #28
 80027be:	d50a      	bpl.n	80027d6 <HAL_UART_IRQHandler+0xe2>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027c0:	0682      	lsls	r2, r0, #26
 80027c2:	d401      	bmi.n	80027c8 <HAL_UART_IRQHandler+0xd4>
 80027c4:	2e00      	cmp	r6, #0
 80027c6:	d006      	beq.n	80027d6 <HAL_UART_IRQHandler+0xe2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027c8:	6822      	ldr	r2, [r4, #0]
 80027ca:	2608      	movs	r6, #8
 80027cc:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ce:	2190      	movs	r1, #144	; 0x90
 80027d0:	5862      	ldr	r2, [r4, r1]
 80027d2:	4332      	orrs	r2, r6
 80027d4:	5062      	str	r2, [r4, r1]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027d6:	051a      	lsls	r2, r3, #20
 80027d8:	d50a      	bpl.n	80027f0 <HAL_UART_IRQHandler+0xfc>
 80027da:	0142      	lsls	r2, r0, #5
 80027dc:	d508      	bpl.n	80027f0 <HAL_UART_IRQHandler+0xfc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027de:	6822      	ldr	r2, [r4, #0]
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	0109      	lsls	r1, r1, #4
 80027e4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80027e6:	2190      	movs	r1, #144	; 0x90
 80027e8:	5862      	ldr	r2, [r4, r1]
 80027ea:	2620      	movs	r6, #32
 80027ec:	4332      	orrs	r2, r6
 80027ee:	5062      	str	r2, [r4, r1]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027f0:	2290      	movs	r2, #144	; 0x90
 80027f2:	58a2      	ldr	r2, [r4, r2]
 80027f4:	2a00      	cmp	r2, #0
 80027f6:	d0b8      	beq.n	800276a <HAL_UART_IRQHandler+0x76>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027f8:	069b      	lsls	r3, r3, #26
 80027fa:	d508      	bpl.n	800280e <HAL_UART_IRQHandler+0x11a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027fc:	0683      	lsls	r3, r0, #26
 80027fe:	d401      	bmi.n	8002804 <HAL_UART_IRQHandler+0x110>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002800:	00eb      	lsls	r3, r5, #3
 8002802:	d504      	bpl.n	800280e <HAL_UART_IRQHandler+0x11a>
        if (huart->RxISR != NULL)
 8002804:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <HAL_UART_IRQHandler+0x11a>
          huart->RxISR(huart);
 800280a:	0020      	movs	r0, r4
 800280c:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800280e:	2390      	movs	r3, #144	; 0x90
 8002810:	58e2      	ldr	r2, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002812:	6823      	ldr	r3, [r4, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	065b      	lsls	r3, r3, #25
 8002818:	d402      	bmi.n	8002820 <HAL_UART_IRQHandler+0x12c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800281a:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800281c:	4213      	tst	r3, r2
 800281e:	d02c      	beq.n	800287a <HAL_UART_IRQHandler+0x186>
        UART_EndRxTransfer(huart);
 8002820:	0020      	movs	r0, r4
 8002822:	f7ff fee9 	bl	80025f8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002826:	6823      	ldr	r3, [r4, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	065b      	lsls	r3, r3, #25
 800282c:	d521      	bpl.n	8002872 <HAL_UART_IRQHandler+0x17e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800282e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002832:	2301      	movs	r3, #1
 8002834:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002838:	6822      	ldr	r2, [r4, #0]
 800283a:	6893      	ldr	r3, [r2, #8]
 800283c:	2040      	movs	r0, #64	; 0x40
 800283e:	4383      	bics	r3, r0
 8002840:	6093      	str	r3, [r2, #8]
 8002842:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	58e3      	ldr	r3, [r4, r3]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <HAL_UART_IRQHandler+0x176>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800284e:	4a6d      	ldr	r2, [pc, #436]	; (8002a04 <HAL_UART_IRQHandler+0x310>)
 8002850:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	58e0      	ldr	r0, [r4, r3]
 8002856:	f7fe fc7b 	bl	8001150 <HAL_DMA_Abort_IT>
 800285a:	2800      	cmp	r0, #0
 800285c:	d100      	bne.n	8002860 <HAL_UART_IRQHandler+0x16c>
 800285e:	e784      	b.n	800276a <HAL_UART_IRQHandler+0x76>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	58e0      	ldr	r0, [r4, r3]
 8002864:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002866:	4798      	blx	r3
 8002868:	e77f      	b.n	800276a <HAL_UART_IRQHandler+0x76>
            HAL_UART_ErrorCallback(huart);
 800286a:	0020      	movs	r0, r4
 800286c:	f7ff ff0e 	bl	800268c <HAL_UART_ErrorCallback>
 8002870:	e77b      	b.n	800276a <HAL_UART_IRQHandler+0x76>
          HAL_UART_ErrorCallback(huart);
 8002872:	0020      	movs	r0, r4
 8002874:	f7ff ff0a 	bl	800268c <HAL_UART_ErrorCallback>
 8002878:	e777      	b.n	800276a <HAL_UART_IRQHandler+0x76>
        HAL_UART_ErrorCallback(huart);
 800287a:	0020      	movs	r0, r4
 800287c:	f7ff ff06 	bl	800268c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002880:	2390      	movs	r3, #144	; 0x90
 8002882:	2200      	movs	r2, #0
 8002884:	50e2      	str	r2, [r4, r3]
    return;
 8002886:	e770      	b.n	800276a <HAL_UART_IRQHandler+0x76>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002888:	06d9      	lsls	r1, r3, #27
 800288a:	d400      	bmi.n	800288e <HAL_UART_IRQHandler+0x19a>
 800288c:	e751      	b.n	8002732 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800288e:	06c1      	lsls	r1, r0, #27
 8002890:	d400      	bmi.n	8002894 <HAL_UART_IRQHandler+0x1a0>
 8002892:	e74e      	b.n	8002732 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002894:	2310      	movs	r3, #16
 8002896:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002898:	6823      	ldr	r3, [r4, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	065b      	lsls	r3, r3, #25
 800289e:	d555      	bpl.n	800294c <HAL_UART_IRQHandler+0x258>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	58e2      	ldr	r2, [r4, r3]
 80028a4:	6813      	ldr	r3, [r2, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d100      	bne.n	80028b0 <HAL_UART_IRQHandler+0x1bc>
 80028ae:	e75c      	b.n	800276a <HAL_UART_IRQHandler+0x76>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028b0:	215c      	movs	r1, #92	; 0x5c
 80028b2:	5a61      	ldrh	r1, [r4, r1]
 80028b4:	4299      	cmp	r1, r3
 80028b6:	d800      	bhi.n	80028ba <HAL_UART_IRQHandler+0x1c6>
 80028b8:	e757      	b.n	800276a <HAL_UART_IRQHandler+0x76>
        huart->RxXferCount = nb_remaining_rx_data;
 80028ba:	215e      	movs	r1, #94	; 0x5e
 80028bc:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80028be:	6813      	ldr	r3, [r2, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	069b      	lsls	r3, r3, #26
 80028c4:	d50b      	bpl.n	80028de <HAL_UART_IRQHandler+0x1ea>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028c6:	2302      	movs	r3, #2
 80028c8:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028ca:	335a      	adds	r3, #90	; 0x5a
 80028cc:	5ae1      	ldrh	r1, [r4, r3]
 80028ce:	3302      	adds	r3, #2
 80028d0:	5ae3      	ldrh	r3, [r4, r3]
 80028d2:	1ac9      	subs	r1, r1, r3
 80028d4:	b289      	uxth	r1, r1
 80028d6:	0020      	movs	r0, r4
 80028d8:	f7fd ff12 	bl	8000700 <HAL_UARTEx_RxEventCallback>
      return;
 80028dc:	e745      	b.n	800276a <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028de:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028e2:	2301      	movs	r3, #1
 80028e4:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028e8:	6821      	ldr	r1, [r4, #0]
 80028ea:	680a      	ldr	r2, [r1, #0]
 80028ec:	4d46      	ldr	r5, [pc, #280]	; (8002a08 <HAL_UART_IRQHandler+0x314>)
 80028ee:	402a      	ands	r2, r5
 80028f0:	600a      	str	r2, [r1, #0]
 80028f2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028f6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028fa:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028fe:	6821      	ldr	r1, [r4, #0]
 8002900:	688a      	ldr	r2, [r1, #8]
 8002902:	439a      	bics	r2, r3
 8002904:	608a      	str	r2, [r1, #8]
 8002906:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800290a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290e:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002912:	6821      	ldr	r1, [r4, #0]
 8002914:	688a      	ldr	r2, [r1, #8]
 8002916:	3542      	adds	r5, #66	; 0x42
 8002918:	35ff      	adds	r5, #255	; 0xff
 800291a:	43aa      	bics	r2, r5
 800291c:	608a      	str	r2, [r1, #8]
 800291e:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 8002922:	228c      	movs	r2, #140	; 0x8c
 8002924:	2120      	movs	r1, #32
 8002926:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002928:	2200      	movs	r2, #0
 800292a:	66e2      	str	r2, [r4, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800292c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002930:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	6813      	ldr	r3, [r2, #0]
 8002938:	2010      	movs	r0, #16
 800293a:	4383      	bics	r3, r0
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	58e0      	ldr	r0, [r4, r3]
 8002946:	f7fe fbc3 	bl	80010d0 <HAL_DMA_Abort>
 800294a:	e7bc      	b.n	80028c6 <HAL_UART_IRQHandler+0x1d2>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800294c:	235c      	movs	r3, #92	; 0x5c
 800294e:	5ae1      	ldrh	r1, [r4, r3]
 8002950:	3302      	adds	r3, #2
 8002952:	5ae2      	ldrh	r2, [r4, r3]
 8002954:	1a89      	subs	r1, r1, r2
 8002956:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8002958:	5ae3      	ldrh	r3, [r4, r3]
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d100      	bne.n	8002962 <HAL_UART_IRQHandler+0x26e>
 8002960:	e703      	b.n	800276a <HAL_UART_IRQHandler+0x76>
          && (nb_rx_data > 0U))
 8002962:	2900      	cmp	r1, #0
 8002964:	d100      	bne.n	8002968 <HAL_UART_IRQHandler+0x274>
 8002966:	e700      	b.n	800276a <HAL_UART_IRQHandler+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002968:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800296c:	2301      	movs	r3, #1
 800296e:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002972:	6820      	ldr	r0, [r4, #0]
 8002974:	6802      	ldr	r2, [r0, #0]
 8002976:	4e25      	ldr	r6, [pc, #148]	; (8002a0c <HAL_UART_IRQHandler+0x318>)
 8002978:	4032      	ands	r2, r6
 800297a:	6002      	str	r2, [r0, #0]
 800297c:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002980:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002984:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002988:	6820      	ldr	r0, [r4, #0]
 800298a:	6882      	ldr	r2, [r0, #8]
 800298c:	4e20      	ldr	r6, [pc, #128]	; (8002a10 <HAL_UART_IRQHandler+0x31c>)
 800298e:	4032      	ands	r2, r6
 8002990:	6082      	str	r2, [r0, #8]
 8002992:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8002996:	228c      	movs	r2, #140	; 0x8c
 8002998:	2020      	movs	r0, #32
 800299a:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800299c:	2200      	movs	r2, #0
 800299e:	66e2      	str	r2, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 80029a0:	6762      	str	r2, [r4, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029a2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a6:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029aa:	6822      	ldr	r2, [r4, #0]
 80029ac:	6813      	ldr	r3, [r2, #0]
 80029ae:	2510      	movs	r5, #16
 80029b0:	43ab      	bics	r3, r5
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029b8:	2302      	movs	r3, #2
 80029ba:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029bc:	0020      	movs	r0, r4
 80029be:	f7fd fe9f 	bl	8000700 <HAL_UARTEx_RxEventCallback>
      return;
 80029c2:	e6d2      	b.n	800276a <HAL_UART_IRQHandler+0x76>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	035b      	lsls	r3, r3, #13
 80029c8:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80029ca:	0020      	movs	r0, r4
 80029cc:	f000 fba2 	bl	8003114 <HAL_UARTEx_WakeupCallback>
    return;
 80029d0:	e6cb      	b.n	800276a <HAL_UART_IRQHandler+0x76>
    if (huart->TxISR != NULL)
 80029d2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d100      	bne.n	80029da <HAL_UART_IRQHandler+0x2e6>
 80029d8:	e6c7      	b.n	800276a <HAL_UART_IRQHandler+0x76>
      huart->TxISR(huart);
 80029da:	0020      	movs	r0, r4
 80029dc:	4798      	blx	r3
    return;
 80029de:	e6c4      	b.n	800276a <HAL_UART_IRQHandler+0x76>
    UART_EndTransmit_IT(huart);
 80029e0:	0020      	movs	r0, r4
 80029e2:	f7ff fe3c 	bl	800265e <UART_EndTransmit_IT>
    return;
 80029e6:	e6c0      	b.n	800276a <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029e8:	0020      	movs	r0, r4
 80029ea:	f000 fb95 	bl	8003118 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80029ee:	e6bc      	b.n	800276a <HAL_UART_IRQHandler+0x76>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029f0:	0020      	movs	r0, r4
 80029f2:	f000 fb90 	bl	8003116 <HAL_UARTEx_RxFifoFullCallback>
    return;
 80029f6:	e6b8      	b.n	800276a <HAL_UART_IRQHandler+0x76>
 80029f8:	0000080f 	.word	0x0000080f
 80029fc:	10000001 	.word	0x10000001
 8002a00:	04000120 	.word	0x04000120
 8002a04:	080026e1 	.word	0x080026e1
 8002a08:	fffffeff 	.word	0xfffffeff
 8002a0c:	fffffedf 	.word	0xfffffedf
 8002a10:	effffffe 	.word	0xeffffffe

08002a14 <UART_DMARxHalfCplt>:
{
 8002a14:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a16:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a1c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d002      	beq.n	8002a28 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8002a22:	f7ff fe32 	bl	800268a <HAL_UART_RxHalfCpltCallback>
}
 8002a26:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002a28:	335b      	adds	r3, #91	; 0x5b
 8002a2a:	5ac1      	ldrh	r1, [r0, r3]
 8002a2c:	0849      	lsrs	r1, r1, #1
 8002a2e:	f7fd fe67 	bl	8000700 <HAL_UARTEx_RxEventCallback>
 8002a32:	e7f8      	b.n	8002a26 <UART_DMARxHalfCplt+0x12>

08002a34 <UART_DMAReceiveCplt>:
{
 8002a34:	b570      	push	{r4, r5, r6, lr}
 8002a36:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002a38:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	069b      	lsls	r3, r3, #26
 8002a40:	d429      	bmi.n	8002a96 <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8002a42:	235e      	movs	r3, #94	; 0x5e
 8002a44:	2200      	movs	r2, #0
 8002a46:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a48:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4c:	3b5d      	subs	r3, #93	; 0x5d
 8002a4e:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a52:	6801      	ldr	r1, [r0, #0]
 8002a54:	680a      	ldr	r2, [r1, #0]
 8002a56:	4d1c      	ldr	r5, [pc, #112]	; (8002ac8 <UART_DMAReceiveCplt+0x94>)
 8002a58:	402a      	ands	r2, r5
 8002a5a:	600a      	str	r2, [r1, #0]
 8002a5c:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a60:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a64:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a68:	6801      	ldr	r1, [r0, #0]
 8002a6a:	688a      	ldr	r2, [r1, #8]
 8002a6c:	439a      	bics	r2, r3
 8002a6e:	608a      	str	r2, [r1, #8]
 8002a70:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a74:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a78:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a7c:	6802      	ldr	r2, [r0, #0]
 8002a7e:	6893      	ldr	r3, [r2, #8]
 8002a80:	2440      	movs	r4, #64	; 0x40
 8002a82:	43a3      	bics	r3, r4
 8002a84:	6093      	str	r3, [r2, #8]
 8002a86:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 8002a8a:	238c      	movs	r3, #140	; 0x8c
 8002a8c:	2220      	movs	r2, #32
 8002a8e:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a90:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d007      	beq.n	8002aa6 <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a96:	2300      	movs	r3, #0
 8002a98:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a9a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d00e      	beq.n	8002abe <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 8002aa0:	f7ff fdf2 	bl	8002688 <HAL_UART_RxCpltCallback>
}
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aaa:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aae:	6802      	ldr	r2, [r0, #0]
 8002ab0:	6813      	ldr	r3, [r2, #0]
 8002ab2:	3c30      	subs	r4, #48	; 0x30
 8002ab4:	43a3      	bics	r3, r4
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	f381 8810 	msr	PRIMASK, r1
}
 8002abc:	e7eb      	b.n	8002a96 <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002abe:	335b      	adds	r3, #91	; 0x5b
 8002ac0:	5ac1      	ldrh	r1, [r0, r3]
 8002ac2:	f7fd fe1d 	bl	8000700 <HAL_UARTEx_RxEventCallback>
 8002ac6:	e7ed      	b.n	8002aa4 <UART_DMAReceiveCplt+0x70>
 8002ac8:	fffffeff 	.word	0xfffffeff

08002acc <UART_SetConfig>:
{
 8002acc:	b510      	push	{r4, lr}
 8002ace:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ad0:	6883      	ldr	r3, [r0, #8]
 8002ad2:	6902      	ldr	r2, [r0, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	6942      	ldr	r2, [r0, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	69c2      	ldr	r2, [r0, #28]
 8002adc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ade:	6801      	ldr	r1, [r0, #0]
 8002ae0:	680a      	ldr	r2, [r1, #0]
 8002ae2:	485c      	ldr	r0, [pc, #368]	; (8002c54 <UART_SetConfig+0x188>)
 8002ae4:	4002      	ands	r2, r0
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002aea:	6822      	ldr	r2, [r4, #0]
 8002aec:	6853      	ldr	r3, [r2, #4]
 8002aee:	495a      	ldr	r1, [pc, #360]	; (8002c58 <UART_SetConfig+0x18c>)
 8002af0:	400b      	ands	r3, r1
 8002af2:	68e1      	ldr	r1, [r4, #12]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6053      	str	r3, [r2, #4]
    tmpreg |= huart->Init.OneBitSampling;
 8002af8:	6a22      	ldr	r2, [r4, #32]
 8002afa:	69a3      	ldr	r3, [r4, #24]
 8002afc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002afe:	6821      	ldr	r1, [r4, #0]
 8002b00:	688b      	ldr	r3, [r1, #8]
 8002b02:	4856      	ldr	r0, [pc, #344]	; (8002c5c <UART_SetConfig+0x190>)
 8002b04:	4003      	ands	r3, r0
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b0e:	210f      	movs	r1, #15
 8002b10:	438b      	bics	r3, r1
 8002b12:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002b14:	430b      	orrs	r3, r1
 8002b16:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b18:	6823      	ldr	r3, [r4, #0]
 8002b1a:	4a51      	ldr	r2, [pc, #324]	; (8002c60 <UART_SetConfig+0x194>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d02a      	beq.n	8002b76 <UART_SetConfig+0xaa>
 8002b20:	4a50      	ldr	r2, [pc, #320]	; (8002c64 <UART_SetConfig+0x198>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d038      	beq.n	8002b98 <UART_SetConfig+0xcc>
 8002b26:	2310      	movs	r3, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b28:	69e0      	ldr	r0, [r4, #28]
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	0212      	lsls	r2, r2, #8
 8002b2e:	4290      	cmp	r0, r2
 8002b30:	d03c      	beq.n	8002bac <UART_SetConfig+0xe0>
    switch (clocksource)
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d100      	bne.n	8002b38 <UART_SetConfig+0x6c>
 8002b36:	e085      	b.n	8002c44 <UART_SetConfig+0x178>
 8002b38:	d86e      	bhi.n	8002c18 <UART_SetConfig+0x14c>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d100      	bne.n	8002b40 <UART_SetConfig+0x74>
 8002b3e:	e07a      	b.n	8002c36 <UART_SetConfig+0x16a>
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d167      	bne.n	8002c14 <UART_SetConfig+0x148>
 8002b44:	4848      	ldr	r0, [pc, #288]	; (8002c68 <UART_SetConfig+0x19c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4a48      	ldr	r2, [pc, #288]	; (8002c6c <UART_SetConfig+0x1a0>)
 8002b4c:	5a99      	ldrh	r1, [r3, r2]
 8002b4e:	f7fd fae1 	bl	8000114 <__udivsi3>
 8002b52:	6863      	ldr	r3, [r4, #4]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	18c0      	adds	r0, r0, r3
 8002b58:	6861      	ldr	r1, [r4, #4]
 8002b5a:	f7fd fadb 	bl	8000114 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b5e:	0002      	movs	r2, r0
 8002b60:	3a10      	subs	r2, #16
 8002b62:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <UART_SetConfig+0x1a4>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d900      	bls.n	8002b6a <UART_SetConfig+0x9e>
 8002b68:	e071      	b.n	8002c4e <UART_SetConfig+0x182>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b6a:	6823      	ldr	r3, [r4, #0]
 8002b6c:	0400      	lsls	r0, r0, #16
 8002b6e:	0c00      	lsrs	r0, r0, #16
 8002b70:	60d8      	str	r0, [r3, #12]
 8002b72:	2000      	movs	r0, #0
 8002b74:	e056      	b.n	8002c24 <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b76:	4b3f      	ldr	r3, [pc, #252]	; (8002c74 <UART_SetConfig+0x1a8>)
 8002b78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d00c      	beq.n	8002b9c <UART_SetConfig+0xd0>
 8002b82:	d805      	bhi.n	8002b90 <UART_SetConfig+0xc4>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00b      	beq.n	8002ba0 <UART_SetConfig+0xd4>
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d10b      	bne.n	8002ba4 <UART_SetConfig+0xd8>
 8002b8c:	3303      	adds	r3, #3
 8002b8e:	e7cb      	b.n	8002b28 <UART_SetConfig+0x5c>
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d109      	bne.n	8002ba8 <UART_SetConfig+0xdc>
 8002b94:	3305      	adds	r3, #5
 8002b96:	e7c7      	b.n	8002b28 <UART_SetConfig+0x5c>
 8002b98:	2300      	movs	r3, #0
 8002b9a:	e7c5      	b.n	8002b28 <UART_SetConfig+0x5c>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e7c3      	b.n	8002b28 <UART_SetConfig+0x5c>
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e7c1      	b.n	8002b28 <UART_SetConfig+0x5c>
 8002ba4:	2310      	movs	r3, #16
 8002ba6:	e7bf      	b.n	8002b28 <UART_SetConfig+0x5c>
 8002ba8:	2310      	movs	r3, #16
 8002baa:	e7bd      	b.n	8002b28 <UART_SetConfig+0x5c>
    switch (clocksource)
 8002bac:	2b04      	cmp	r3, #4
 8002bae:	d02e      	beq.n	8002c0e <UART_SetConfig+0x142>
 8002bb0:	d823      	bhi.n	8002bfa <UART_SetConfig+0x12e>
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d025      	beq.n	8002c02 <UART_SetConfig+0x136>
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d11d      	bne.n	8002bf6 <UART_SetConfig+0x12a>
        pclk = (uint32_t) HSI_VALUE;
 8002bba:	482b      	ldr	r0, [pc, #172]	; (8002c68 <UART_SetConfig+0x19c>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	; (8002c6c <UART_SetConfig+0x1a0>)
 8002bc2:	5a99      	ldrh	r1, [r3, r2]
 8002bc4:	f7fd faa6 	bl	8000114 <__udivsi3>
 8002bc8:	0040      	lsls	r0, r0, #1
 8002bca:	6863      	ldr	r3, [r4, #4]
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	18c0      	adds	r0, r0, r3
 8002bd0:	6861      	ldr	r1, [r4, #4]
 8002bd2:	f7fd fa9f 	bl	8000114 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	3a10      	subs	r2, #16
 8002bda:	4b25      	ldr	r3, [pc, #148]	; (8002c70 <UART_SetConfig+0x1a4>)
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d834      	bhi.n	8002c4a <UART_SetConfig+0x17e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002be0:	b282      	uxth	r2, r0
 8002be2:	230f      	movs	r3, #15
 8002be4:	439a      	bics	r2, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002be6:	0840      	lsrs	r0, r0, #1
 8002be8:	3b08      	subs	r3, #8
 8002bea:	4018      	ands	r0, r3
 8002bec:	4310      	orrs	r0, r2
        huart->Instance->BRR = brrtemp;
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	60d8      	str	r0, [r3, #12]
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	e016      	b.n	8002c24 <UART_SetConfig+0x158>
    switch (clocksource)
 8002bf6:	2001      	movs	r0, #1
 8002bf8:	e014      	b.n	8002c24 <UART_SetConfig+0x158>
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d0de      	beq.n	8002bbc <UART_SetConfig+0xf0>
 8002bfe:	2001      	movs	r0, #1
 8002c00:	e010      	b.n	8002c24 <UART_SetConfig+0x158>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c02:	f7ff faa9 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d1d8      	bne.n	8002bbc <UART_SetConfig+0xf0>
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	e00a      	b.n	8002c24 <UART_SetConfig+0x158>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c0e:	f7ff f97b 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
        break;
 8002c12:	e7f8      	b.n	8002c06 <UART_SetConfig+0x13a>
    switch (clocksource)
 8002c14:	2001      	movs	r0, #1
 8002c16:	e005      	b.n	8002c24 <UART_SetConfig+0x158>
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d102      	bne.n	8002c22 <UART_SetConfig+0x156>
        pclk = (uint32_t) LSE_VALUE;
 8002c1c:	2080      	movs	r0, #128	; 0x80
 8002c1e:	0200      	lsls	r0, r0, #8
 8002c20:	e791      	b.n	8002b46 <UART_SetConfig+0x7a>
    switch (clocksource)
 8002c22:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	226a      	movs	r2, #106	; 0x6a
 8002c28:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8002c2a:	3a02      	subs	r2, #2
 8002c2c:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8002c32:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8002c34:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c36:	f7ff fa8f 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002c3a:	2800      	cmp	r0, #0
 8002c3c:	d000      	beq.n	8002c40 <UART_SetConfig+0x174>
 8002c3e:	e782      	b.n	8002b46 <UART_SetConfig+0x7a>
 8002c40:	2000      	movs	r0, #0
 8002c42:	e7ef      	b.n	8002c24 <UART_SetConfig+0x158>
        pclk = HAL_RCC_GetSysClockFreq();
 8002c44:	f7ff f960 	bl	8001f08 <HAL_RCC_GetSysClockFreq>
        break;
 8002c48:	e7f7      	b.n	8002c3a <UART_SetConfig+0x16e>
        ret = HAL_ERROR;
 8002c4a:	2001      	movs	r0, #1
 8002c4c:	e7ea      	b.n	8002c24 <UART_SetConfig+0x158>
        ret = HAL_ERROR;
 8002c4e:	2001      	movs	r0, #1
 8002c50:	e7e8      	b.n	8002c24 <UART_SetConfig+0x158>
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	cfff69f3 	.word	0xcfff69f3
 8002c58:	ffffcfff 	.word	0xffffcfff
 8002c5c:	11fff4ff 	.word	0x11fff4ff
 8002c60:	40013800 	.word	0x40013800
 8002c64:	40004400 	.word	0x40004400
 8002c68:	00f42400 	.word	0x00f42400
 8002c6c:	08003ccc 	.word	0x08003ccc
 8002c70:	0000ffef 	.word	0x0000ffef
 8002c74:	40021000 	.word	0x40021000

08002c78 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c7a:	07db      	lsls	r3, r3, #31
 8002c7c:	d506      	bpl.n	8002c8c <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c7e:	6802      	ldr	r2, [r0, #0]
 8002c80:	6853      	ldr	r3, [r2, #4]
 8002c82:	492c      	ldr	r1, [pc, #176]	; (8002d34 <UART_AdvFeatureConfig+0xbc>)
 8002c84:	400b      	ands	r3, r1
 8002c86:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c8c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002c8e:	079b      	lsls	r3, r3, #30
 8002c90:	d506      	bpl.n	8002ca0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c92:	6802      	ldr	r2, [r0, #0]
 8002c94:	6853      	ldr	r3, [r2, #4]
 8002c96:	4928      	ldr	r1, [pc, #160]	; (8002d38 <UART_AdvFeatureConfig+0xc0>)
 8002c98:	400b      	ands	r3, r1
 8002c9a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8002c9c:	430b      	orrs	r3, r1
 8002c9e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ca0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002ca2:	075b      	lsls	r3, r3, #29
 8002ca4:	d506      	bpl.n	8002cb4 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ca6:	6802      	ldr	r2, [r0, #0]
 8002ca8:	6853      	ldr	r3, [r2, #4]
 8002caa:	4924      	ldr	r1, [pc, #144]	; (8002d3c <UART_AdvFeatureConfig+0xc4>)
 8002cac:	400b      	ands	r3, r1
 8002cae:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cb4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cb6:	071b      	lsls	r3, r3, #28
 8002cb8:	d506      	bpl.n	8002cc8 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cba:	6802      	ldr	r2, [r0, #0]
 8002cbc:	6853      	ldr	r3, [r2, #4]
 8002cbe:	4920      	ldr	r1, [pc, #128]	; (8002d40 <UART_AdvFeatureConfig+0xc8>)
 8002cc0:	400b      	ands	r3, r1
 8002cc2:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8002cc4:	430b      	orrs	r3, r1
 8002cc6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cc8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cca:	06db      	lsls	r3, r3, #27
 8002ccc:	d506      	bpl.n	8002cdc <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cce:	6802      	ldr	r2, [r0, #0]
 8002cd0:	6893      	ldr	r3, [r2, #8]
 8002cd2:	491c      	ldr	r1, [pc, #112]	; (8002d44 <UART_AdvFeatureConfig+0xcc>)
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cdc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cde:	069b      	lsls	r3, r3, #26
 8002ce0:	d506      	bpl.n	8002cf0 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ce2:	6802      	ldr	r2, [r0, #0]
 8002ce4:	6893      	ldr	r3, [r2, #8]
 8002ce6:	4918      	ldr	r1, [pc, #96]	; (8002d48 <UART_AdvFeatureConfig+0xd0>)
 8002ce8:	400b      	ands	r3, r1
 8002cea:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002cec:	430b      	orrs	r3, r1
 8002cee:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cf0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002cf2:	065b      	lsls	r3, r3, #25
 8002cf4:	d50b      	bpl.n	8002d0e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cf6:	6802      	ldr	r2, [r0, #0]
 8002cf8:	6853      	ldr	r3, [r2, #4]
 8002cfa:	4914      	ldr	r1, [pc, #80]	; (8002d4c <UART_AdvFeatureConfig+0xd4>)
 8002cfc:	400b      	ands	r3, r1
 8002cfe:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	035b      	lsls	r3, r3, #13
 8002d08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d00a      	beq.n	8002d24 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d0e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	d506      	bpl.n	8002d22 <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d14:	6802      	ldr	r2, [r0, #0]
 8002d16:	6853      	ldr	r3, [r2, #4]
 8002d18:	490d      	ldr	r1, [pc, #52]	; (8002d50 <UART_AdvFeatureConfig+0xd8>)
 8002d1a:	400b      	ands	r3, r1
 8002d1c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	6053      	str	r3, [r2, #4]
}
 8002d22:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d24:	6802      	ldr	r2, [r0, #0]
 8002d26:	6853      	ldr	r3, [r2, #4]
 8002d28:	490a      	ldr	r1, [pc, #40]	; (8002d54 <UART_AdvFeatureConfig+0xdc>)
 8002d2a:	400b      	ands	r3, r1
 8002d2c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d2e:	430b      	orrs	r3, r1
 8002d30:	6053      	str	r3, [r2, #4]
 8002d32:	e7ec      	b.n	8002d0e <UART_AdvFeatureConfig+0x96>
 8002d34:	fffdffff 	.word	0xfffdffff
 8002d38:	fffeffff 	.word	0xfffeffff
 8002d3c:	fffbffff 	.word	0xfffbffff
 8002d40:	ffff7fff 	.word	0xffff7fff
 8002d44:	ffffefff 	.word	0xffffefff
 8002d48:	ffffdfff 	.word	0xffffdfff
 8002d4c:	ffefffff 	.word	0xffefffff
 8002d50:	fff7ffff 	.word	0xfff7ffff
 8002d54:	ff9fffff 	.word	0xff9fffff

08002d58 <UART_WaitOnFlagUntilTimeout>:
{
 8002d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d5a:	46ce      	mov	lr, r9
 8002d5c:	4647      	mov	r7, r8
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	0006      	movs	r6, r0
 8002d62:	000d      	movs	r5, r1
 8002d64:	0017      	movs	r7, r2
 8002d66:	4699      	mov	r9, r3
 8002d68:	9b08      	ldr	r3, [sp, #32]
 8002d6a:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6c:	6833      	ldr	r3, [r6, #0]
 8002d6e:	69dc      	ldr	r4, [r3, #28]
 8002d70:	402c      	ands	r4, r5
 8002d72:	1b64      	subs	r4, r4, r5
 8002d74:	4263      	negs	r3, r4
 8002d76:	415c      	adcs	r4, r3
 8002d78:	42bc      	cmp	r4, r7
 8002d7a:	d157      	bne.n	8002e2c <UART_WaitOnFlagUntilTimeout+0xd4>
    if (Timeout != HAL_MAX_DELAY)
 8002d7c:	4643      	mov	r3, r8
 8002d7e:	3301      	adds	r3, #1
 8002d80:	d0f4      	beq.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x14>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7fe f82b 	bl	8000ddc <HAL_GetTick>
 8002d86:	464b      	mov	r3, r9
 8002d88:	1ac0      	subs	r0, r0, r3
 8002d8a:	4540      	cmp	r0, r8
 8002d8c:	d82e      	bhi.n	8002dec <UART_WaitOnFlagUntilTimeout+0x94>
 8002d8e:	4643      	mov	r3, r8
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d02b      	beq.n	8002dec <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d94:	6833      	ldr	r3, [r6, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	0752      	lsls	r2, r2, #29
 8002d9a:	d5e7      	bpl.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x14>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d9c:	69da      	ldr	r2, [r3, #28]
 8002d9e:	0512      	lsls	r2, r2, #20
 8002da0:	d5e4      	bpl.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x14>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	0112      	lsls	r2, r2, #4
 8002da6:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dac:	2201      	movs	r2, #1
 8002dae:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002db2:	6831      	ldr	r1, [r6, #0]
 8002db4:	680b      	ldr	r3, [r1, #0]
 8002db6:	4c20      	ldr	r4, [pc, #128]	; (8002e38 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8002db8:	4023      	ands	r3, r4
 8002dba:	600b      	str	r3, [r1, #0]
 8002dbc:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc0:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	f382 8810 	msr	PRIMASK, r2
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc8:	6831      	ldr	r1, [r6, #0]
 8002dca:	688b      	ldr	r3, [r1, #8]
 8002dcc:	4393      	bics	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]
 8002dd0:	f380 8810 	msr	PRIMASK, r0
          huart->gState = HAL_UART_STATE_READY;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	3287      	adds	r2, #135	; 0x87
 8002dd8:	50b3      	str	r3, [r6, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002dda:	3204      	adds	r2, #4
 8002ddc:	50b3      	str	r3, [r6, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dde:	3204      	adds	r2, #4
 8002de0:	50b3      	str	r3, [r6, r2]
          __HAL_UNLOCK(huart);
 8002de2:	3364      	adds	r3, #100	; 0x64
 8002de4:	2200      	movs	r2, #0
 8002de6:	54f2      	strb	r2, [r6, r3]
          return HAL_TIMEOUT;
 8002de8:	2003      	movs	r0, #3
 8002dea:	e020      	b.n	8002e2e <UART_WaitOnFlagUntilTimeout+0xd6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dec:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df0:	2201      	movs	r2, #1
 8002df2:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002df6:	6831      	ldr	r1, [r6, #0]
 8002df8:	680b      	ldr	r3, [r1, #0]
 8002dfa:	4c0f      	ldr	r4, [pc, #60]	; (8002e38 <UART_WaitOnFlagUntilTimeout+0xe0>)
 8002dfc:	4023      	ands	r3, r4
 8002dfe:	600b      	str	r3, [r1, #0]
 8002e00:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e04:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e08:	f382 8810 	msr	PRIMASK, r2
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0c:	6831      	ldr	r1, [r6, #0]
 8002e0e:	688b      	ldr	r3, [r1, #8]
 8002e10:	4393      	bics	r3, r2
 8002e12:	608b      	str	r3, [r1, #8]
 8002e14:	f380 8810 	msr	PRIMASK, r0
        huart->gState = HAL_UART_STATE_READY;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	3287      	adds	r2, #135	; 0x87
 8002e1c:	50b3      	str	r3, [r6, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002e1e:	3204      	adds	r2, #4
 8002e20:	50b3      	str	r3, [r6, r2]
        __HAL_UNLOCK(huart);
 8002e22:	3364      	adds	r3, #100	; 0x64
 8002e24:	2200      	movs	r2, #0
 8002e26:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8002e28:	2003      	movs	r0, #3
 8002e2a:	e000      	b.n	8002e2e <UART_WaitOnFlagUntilTimeout+0xd6>
  return HAL_OK;
 8002e2c:	2000      	movs	r0, #0
}
 8002e2e:	bcc0      	pop	{r6, r7}
 8002e30:	46b9      	mov	r9, r7
 8002e32:	46b0      	mov	r8, r6
 8002e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e36:	46c0      	nop			; (mov r8, r8)
 8002e38:	fffffe5f 	.word	0xfffffe5f

08002e3c <HAL_UART_Transmit>:
{
 8002e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3e:	46c6      	mov	lr, r8
 8002e40:	b500      	push	{lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	0004      	movs	r4, r0
 8002e46:	000d      	movs	r5, r1
 8002e48:	4690      	mov	r8, r2
 8002e4a:	001e      	movs	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002e4c:	2388      	movs	r3, #136	; 0x88
 8002e4e:	58c3      	ldr	r3, [r0, r3]
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d15c      	bne.n	8002f0e <HAL_UART_Transmit+0xd2>
    if ((pData == NULL) || (Size == 0U))
 8002e54:	2900      	cmp	r1, #0
 8002e56:	d05f      	beq.n	8002f18 <HAL_UART_Transmit+0xdc>
 8002e58:	2a00      	cmp	r2, #0
 8002e5a:	d05f      	beq.n	8002f1c <HAL_UART_Transmit+0xe0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	015b      	lsls	r3, r3, #5
 8002e60:	6882      	ldr	r2, [r0, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d104      	bne.n	8002e70 <HAL_UART_Transmit+0x34>
 8002e66:	6903      	ldr	r3, [r0, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Transmit+0x34>
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e6c:	07cb      	lsls	r3, r1, #31
 8002e6e:	d457      	bmi.n	8002f20 <HAL_UART_Transmit+0xe4>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e70:	2390      	movs	r3, #144	; 0x90
 8002e72:	2200      	movs	r2, #0
 8002e74:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e76:	3b08      	subs	r3, #8
 8002e78:	3221      	adds	r2, #33	; 0x21
 8002e7a:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8002e7c:	f7fd ffae 	bl	8000ddc <HAL_GetTick>
 8002e80:	0007      	movs	r7, r0
    huart->TxXferSize  = Size;
 8002e82:	2354      	movs	r3, #84	; 0x54
 8002e84:	4642      	mov	r2, r8
 8002e86:	52e2      	strh	r2, [r4, r3]
    huart->TxXferCount = Size;
 8002e88:	3302      	adds	r3, #2
 8002e8a:	52e2      	strh	r2, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e8c:	2380      	movs	r3, #128	; 0x80
 8002e8e:	015b      	lsls	r3, r3, #5
 8002e90:	68a2      	ldr	r2, [r4, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d002      	beq.n	8002e9c <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002e96:	2300      	movs	r3, #0
 8002e98:	4698      	mov	r8, r3
 8002e9a:	e013      	b.n	8002ec4 <HAL_UART_Transmit+0x88>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e9c:	6923      	ldr	r3, [r4, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d025      	beq.n	8002eee <HAL_UART_Transmit+0xb2>
      pdata16bits = NULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	4698      	mov	r8, r3
 8002ea6:	e00d      	b.n	8002ec4 <HAL_UART_Transmit+0x88>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea8:	4643      	mov	r3, r8
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	6822      	ldr	r2, [r4, #0]
 8002eae:	05db      	lsls	r3, r3, #23
 8002eb0:	0ddb      	lsrs	r3, r3, #23
 8002eb2:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	469c      	mov	ip, r3
 8002eb8:	44e0      	add	r8, ip
      huart->TxXferCount--;
 8002eba:	2356      	movs	r3, #86	; 0x56
 8002ebc:	5ae2      	ldrh	r2, [r4, r3]
 8002ebe:	3a01      	subs	r2, #1
 8002ec0:	b292      	uxth	r2, r2
 8002ec2:	52e2      	strh	r2, [r4, r3]
    while (huart->TxXferCount > 0U)
 8002ec4:	2356      	movs	r3, #86	; 0x56
 8002ec6:	5ae3      	ldrh	r3, [r4, r3]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <HAL_UART_Transmit+0xb8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	9600      	str	r6, [sp, #0]
 8002ed0:	003b      	movs	r3, r7
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0020      	movs	r0, r4
 8002ed8:	f7ff ff3e 	bl	8002d58 <UART_WaitOnFlagUntilTimeout>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d121      	bne.n	8002f24 <HAL_UART_Transmit+0xe8>
      if (pdata8bits == NULL)
 8002ee0:	2d00      	cmp	r5, #0
 8002ee2:	d0e1      	beq.n	8002ea8 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ee4:	782a      	ldrb	r2, [r5, #0]
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002eea:	3501      	adds	r5, #1
 8002eec:	e7e5      	b.n	8002eba <HAL_UART_Transmit+0x7e>
      pdata16bits = (const uint16_t *) pData;
 8002eee:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8002ef0:	2500      	movs	r5, #0
 8002ef2:	e7e7      	b.n	8002ec4 <HAL_UART_Transmit+0x88>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef4:	9600      	str	r6, [sp, #0]
 8002ef6:	003b      	movs	r3, r7
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2140      	movs	r1, #64	; 0x40
 8002efc:	0020      	movs	r0, r4
 8002efe:	f7ff ff2b 	bl	8002d58 <UART_WaitOnFlagUntilTimeout>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d110      	bne.n	8002f28 <HAL_UART_Transmit+0xec>
    huart->gState = HAL_UART_STATE_READY;
 8002f06:	2388      	movs	r3, #136	; 0x88
 8002f08:	2220      	movs	r2, #32
 8002f0a:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8002f0c:	e000      	b.n	8002f10 <HAL_UART_Transmit+0xd4>
    return HAL_BUSY;
 8002f0e:	2002      	movs	r0, #2
}
 8002f10:	b002      	add	sp, #8
 8002f12:	bc80      	pop	{r7}
 8002f14:	46b8      	mov	r8, r7
 8002f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8002f18:	2001      	movs	r0, #1
 8002f1a:	e7f9      	b.n	8002f10 <HAL_UART_Transmit+0xd4>
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	e7f7      	b.n	8002f10 <HAL_UART_Transmit+0xd4>
        return  HAL_ERROR;
 8002f20:	2001      	movs	r0, #1
 8002f22:	e7f5      	b.n	8002f10 <HAL_UART_Transmit+0xd4>
        return HAL_TIMEOUT;
 8002f24:	2003      	movs	r0, #3
 8002f26:	e7f3      	b.n	8002f10 <HAL_UART_Transmit+0xd4>
      return HAL_TIMEOUT;
 8002f28:	2003      	movs	r0, #3
 8002f2a:	e7f1      	b.n	8002f10 <HAL_UART_Transmit+0xd4>

08002f2c <UART_CheckIdleState>:
{
 8002f2c:	b530      	push	{r4, r5, lr}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f32:	2390      	movs	r3, #144	; 0x90
 8002f34:	2200      	movs	r2, #0
 8002f36:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002f38:	f7fd ff50 	bl	8000ddc <HAL_GetTick>
 8002f3c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f3e:	6822      	ldr	r2, [r4, #0]
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	0713      	lsls	r3, r2, #28
 8002f44:	d410      	bmi.n	8002f68 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	075b      	lsls	r3, r3, #29
 8002f4c:	d419      	bmi.n	8002f82 <UART_CheckIdleState+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	2288      	movs	r2, #136	; 0x88
 8002f52:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f54:	3204      	adds	r2, #4
 8002f56:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f5c:	6723      	str	r3, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8002f5e:	3a08      	subs	r2, #8
 8002f60:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 8002f62:	2000      	movs	r0, #0
}
 8002f64:	b003      	add	sp, #12
 8002f66:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <UART_CheckIdleState+0x70>)
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	0003      	movs	r3, r0
 8002f70:	2200      	movs	r2, #0
 8002f72:	0389      	lsls	r1, r1, #14
 8002f74:	0020      	movs	r0, r4
 8002f76:	f7ff feef 	bl	8002d58 <UART_WaitOnFlagUntilTimeout>
 8002f7a:	2800      	cmp	r0, #0
 8002f7c:	d0e3      	beq.n	8002f46 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002f7e:	2003      	movs	r0, #3
 8002f80:	e7f0      	b.n	8002f64 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <UART_CheckIdleState+0x70>)
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	002b      	movs	r3, r5
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	03c9      	lsls	r1, r1, #15
 8002f8e:	0020      	movs	r0, r4
 8002f90:	f7ff fee2 	bl	8002d58 <UART_WaitOnFlagUntilTimeout>
 8002f94:	2800      	cmp	r0, #0
 8002f96:	d0da      	beq.n	8002f4e <UART_CheckIdleState+0x22>
      return HAL_TIMEOUT;
 8002f98:	2003      	movs	r0, #3
 8002f9a:	e7e3      	b.n	8002f64 <UART_CheckIdleState+0x38>
 8002f9c:	01ffffff 	.word	0x01ffffff

08002fa0 <HAL_UART_Init>:
{
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8002fa4:	d030      	beq.n	8003008 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002fa6:	2388      	movs	r3, #136	; 0x88
 8002fa8:	58c3      	ldr	r3, [r0, r3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d022      	beq.n	8002ff4 <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8002fae:	2388      	movs	r3, #136	; 0x88
 8002fb0:	2224      	movs	r2, #36	; 0x24
 8002fb2:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8002fb4:	6822      	ldr	r2, [r4, #0]
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	2101      	movs	r1, #1
 8002fba:	438b      	bics	r3, r1
 8002fbc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fbe:	0020      	movs	r0, r4
 8002fc0:	f7ff fd84 	bl	8002acc <UART_SetConfig>
 8002fc4:	2801      	cmp	r0, #1
 8002fc6:	d014      	beq.n	8002ff2 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fc8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_UART_Init+0x60>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fce:	6822      	ldr	r2, [r4, #0]
 8002fd0:	6853      	ldr	r3, [r2, #4]
 8002fd2:	490e      	ldr	r1, [pc, #56]	; (800300c <HAL_UART_Init+0x6c>)
 8002fd4:	400b      	ands	r3, r1
 8002fd6:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fd8:	6822      	ldr	r2, [r4, #0]
 8002fda:	6893      	ldr	r3, [r2, #8]
 8002fdc:	212a      	movs	r1, #42	; 0x2a
 8002fde:	438b      	bics	r3, r1
 8002fe0:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	6813      	ldr	r3, [r2, #0]
 8002fe6:	3929      	subs	r1, #41	; 0x29
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002fec:	0020      	movs	r0, r4
 8002fee:	f7ff ff9d 	bl	8002f2c <UART_CheckIdleState>
}
 8002ff2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002ff4:	3384      	adds	r3, #132	; 0x84
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8002ffa:	f7fd fe19 	bl	8000c30 <HAL_UART_MspInit>
 8002ffe:	e7d6      	b.n	8002fae <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003000:	0020      	movs	r0, r4
 8003002:	f7ff fe39 	bl	8002c78 <UART_AdvFeatureConfig>
 8003006:	e7e2      	b.n	8002fce <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8003008:	2001      	movs	r0, #1
 800300a:	e7f2      	b.n	8002ff2 <HAL_UART_Init+0x52>
 800300c:	ffffb7ff 	.word	0xffffb7ff

08003010 <UART_Start_Receive_DMA>:
{
 8003010:	b510      	push	{r4, lr}
 8003012:	0004      	movs	r4, r0
 8003014:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8003016:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 8003018:	225c      	movs	r2, #92	; 0x5c
 800301a:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301c:	3234      	adds	r2, #52	; 0x34
 800301e:	2100      	movs	r1, #0
 8003020:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003022:	3a04      	subs	r2, #4
 8003024:	3122      	adds	r1, #34	; 0x22
 8003026:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8003028:	3a0c      	subs	r2, #12
 800302a:	5882      	ldr	r2, [r0, r2]
 800302c:	2a00      	cmp	r2, #0
 800302e:	d013      	beq.n	8003058 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003030:	4921      	ldr	r1, [pc, #132]	; (80030b8 <UART_Start_Receive_DMA+0xa8>)
 8003032:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003034:	2280      	movs	r2, #128	; 0x80
 8003036:	5881      	ldr	r1, [r0, r2]
 8003038:	4820      	ldr	r0, [pc, #128]	; (80030bc <UART_Start_Receive_DMA+0xac>)
 800303a:	6308      	str	r0, [r1, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800303c:	58a1      	ldr	r1, [r4, r2]
 800303e:	4820      	ldr	r0, [pc, #128]	; (80030c0 <UART_Start_Receive_DMA+0xb0>)
 8003040:	6348      	str	r0, [r1, #52]	; 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8003042:	58a1      	ldr	r1, [r4, r2]
 8003044:	2000      	movs	r0, #0
 8003046:	6388      	str	r0, [r1, #56]	; 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003048:	6821      	ldr	r1, [r4, #0]
 800304a:	3124      	adds	r1, #36	; 0x24
 800304c:	58a0      	ldr	r0, [r4, r2]
 800304e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003050:	f7fd fff0 	bl	8001034 <HAL_DMA_Start_IT>
 8003054:	2800      	cmp	r0, #0
 8003056:	d126      	bne.n	80030a6 <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003058:	6923      	ldr	r3, [r4, #16]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003062:	2301      	movs	r3, #1
 8003064:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003068:	6822      	ldr	r2, [r4, #0]
 800306a:	6810      	ldr	r0, [r2, #0]
 800306c:	33ff      	adds	r3, #255	; 0xff
 800306e:	4303      	orrs	r3, r0
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003076:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307a:	2301      	movs	r3, #1
 800307c:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003080:	6821      	ldr	r1, [r4, #0]
 8003082:	688a      	ldr	r2, [r1, #8]
 8003084:	431a      	orrs	r2, r3
 8003086:	608a      	str	r2, [r1, #8]
 8003088:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800308c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003090:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003094:	6822      	ldr	r2, [r4, #0]
 8003096:	6893      	ldr	r3, [r2, #8]
 8003098:	2040      	movs	r0, #64	; 0x40
 800309a:	4303      	orrs	r3, r0
 800309c:	6093      	str	r3, [r2, #8]
 800309e:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 80030a2:	2000      	movs	r0, #0
}
 80030a4:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80030a6:	2390      	movs	r3, #144	; 0x90
 80030a8:	2210      	movs	r2, #16
 80030aa:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 80030ac:	3b04      	subs	r3, #4
 80030ae:	3210      	adds	r2, #16
 80030b0:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 80030b2:	2001      	movs	r0, #1
 80030b4:	e7f6      	b.n	80030a4 <UART_Start_Receive_DMA+0x94>
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	08002a35 	.word	0x08002a35
 80030bc:	08002a15 	.word	0x08002a15
 80030c0:	0800268f 	.word	0x0800268f

080030c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80030c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c6:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80030c8:	6e43      	ldr	r3, [r0, #100]	; 0x64
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <UARTEx_SetNbDataToProcess+0x16>
  {
    huart->NbTxDataToProcess = 1U;
 80030ce:	3301      	adds	r3, #1
 80030d0:	226a      	movs	r2, #106	; 0x6a
 80030d2:	5283      	strh	r3, [r0, r2]
    huart->NbRxDataToProcess = 1U;
 80030d4:	3a02      	subs	r2, #2
 80030d6:	5283      	strh	r3, [r0, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80030d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80030da:	6802      	ldr	r2, [r0, #0]
 80030dc:	6895      	ldr	r5, [r2, #8]
 80030de:	0e6d      	lsrs	r5, r5, #25
 80030e0:	2307      	movs	r3, #7
 80030e2:	401d      	ands	r5, r3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80030e4:	6892      	ldr	r2, [r2, #8]
 80030e6:	0f52      	lsrs	r2, r2, #29
 80030e8:	4013      	ands	r3, r2
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030ea:	4f08      	ldr	r7, [pc, #32]	; (800310c <UARTEx_SetNbDataToProcess+0x48>)
 80030ec:	5cf8      	ldrb	r0, [r7, r3]
 80030ee:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 80030f0:	4e07      	ldr	r6, [pc, #28]	; (8003110 <UARTEx_SetNbDataToProcess+0x4c>)
 80030f2:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030f4:	f7fd f898 	bl	8000228 <__divsi3>
 80030f8:	236a      	movs	r3, #106	; 0x6a
 80030fa:	52e0      	strh	r0, [r4, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030fc:	5d78      	ldrb	r0, [r7, r5]
 80030fe:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003100:	5d71      	ldrb	r1, [r6, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003102:	f7fd f891 	bl	8000228 <__divsi3>
 8003106:	2368      	movs	r3, #104	; 0x68
 8003108:	52e0      	strh	r0, [r4, r3]
}
 800310a:	e7e5      	b.n	80030d8 <UARTEx_SetNbDataToProcess+0x14>
 800310c:	08003cec 	.word	0x08003cec
 8003110:	08003ce4 	.word	0x08003ce4

08003114 <HAL_UARTEx_WakeupCallback>:
}
 8003114:	4770      	bx	lr

08003116 <HAL_UARTEx_RxFifoFullCallback>:
}
 8003116:	4770      	bx	lr

08003118 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8003118:	4770      	bx	lr
	...

0800311c <HAL_UARTEx_DisableFifoMode>:
{
 800311c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800311e:	2384      	movs	r3, #132	; 0x84
 8003120:	5cc3      	ldrb	r3, [r0, r3]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d015      	beq.n	8003152 <HAL_UARTEx_DisableFifoMode+0x36>
 8003126:	2484      	movs	r4, #132	; 0x84
 8003128:	2601      	movs	r6, #1
 800312a:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 800312c:	2588      	movs	r5, #136	; 0x88
 800312e:	2324      	movs	r3, #36	; 0x24
 8003130:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003132:	6802      	ldr	r2, [r0, #0]
 8003134:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003136:	6811      	ldr	r1, [r2, #0]
 8003138:	43b1      	bics	r1, r6
 800313a:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800313c:	4a06      	ldr	r2, [pc, #24]	; (8003158 <HAL_UARTEx_DisableFifoMode+0x3c>)
 800313e:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003140:	2200      	movs	r2, #0
 8003142:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003144:	6801      	ldr	r1, [r0, #0]
 8003146:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003148:	2320      	movs	r3, #32
 800314a:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 800314c:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 800314e:	2000      	movs	r0, #0
}
 8003150:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003152:	2002      	movs	r0, #2
 8003154:	e7fc      	b.n	8003150 <HAL_UARTEx_DisableFifoMode+0x34>
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	dfffffff 	.word	0xdfffffff

0800315c <HAL_UARTEx_SetTxFifoThreshold>:
{
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	0004      	movs	r4, r0
 8003160:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003162:	2384      	movs	r3, #132	; 0x84
 8003164:	5cc3      	ldrb	r3, [r0, r3]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d01b      	beq.n	80031a2 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800316a:	2584      	movs	r5, #132	; 0x84
 800316c:	2001      	movs	r0, #1
 800316e:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003170:	2688      	movs	r6, #136	; 0x88
 8003172:	2324      	movs	r3, #36	; 0x24
 8003174:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800317a:	6819      	ldr	r1, [r3, #0]
 800317c:	4381      	bics	r1, r0
 800317e:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003180:	6820      	ldr	r0, [r4, #0]
 8003182:	6883      	ldr	r3, [r0, #8]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	08d9      	lsrs	r1, r3, #3
 8003188:	4311      	orrs	r1, r2
 800318a:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 800318c:	0020      	movs	r0, r4
 800318e:	f7ff ff99 	bl	80030c4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003192:	6823      	ldr	r3, [r4, #0]
 8003194:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003196:	2320      	movs	r3, #32
 8003198:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 800319a:	2300      	movs	r3, #0
 800319c:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 800319e:	2000      	movs	r0, #0
}
 80031a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80031a2:	2002      	movs	r0, #2
 80031a4:	e7fc      	b.n	80031a0 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

080031a8 <HAL_UARTEx_SetRxFifoThreshold>:
{
 80031a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031aa:	0004      	movs	r4, r0
 80031ac:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 80031ae:	2284      	movs	r2, #132	; 0x84
 80031b0:	5c82      	ldrb	r2, [r0, r2]
 80031b2:	2a01      	cmp	r2, #1
 80031b4:	d01b      	beq.n	80031ee <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80031b6:	2584      	movs	r5, #132	; 0x84
 80031b8:	2001      	movs	r0, #1
 80031ba:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 80031bc:	2688      	movs	r6, #136	; 0x88
 80031be:	2224      	movs	r2, #36	; 0x24
 80031c0:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80031c2:	6822      	ldr	r2, [r4, #0]
 80031c4:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80031c6:	6811      	ldr	r1, [r2, #0]
 80031c8:	4381      	bics	r1, r0
 80031ca:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80031cc:	6822      	ldr	r2, [r4, #0]
 80031ce:	6891      	ldr	r1, [r2, #8]
 80031d0:	4808      	ldr	r0, [pc, #32]	; (80031f4 <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 80031d2:	4001      	ands	r1, r0
 80031d4:	4319      	orrs	r1, r3
 80031d6:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 80031d8:	0020      	movs	r0, r4
 80031da:	f7ff ff73 	bl	80030c4 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80031de:	6823      	ldr	r3, [r4, #0]
 80031e0:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80031e2:	2320      	movs	r3, #32
 80031e4:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 80031e6:	2300      	movs	r3, #0
 80031e8:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 80031ea:	2000      	movs	r0, #0
}
 80031ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 80031ee:	2002      	movs	r0, #2
 80031f0:	e7fc      	b.n	80031ec <HAL_UARTEx_SetRxFifoThreshold+0x44>
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	f1ffffff 	.word	0xf1ffffff

080031f8 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 80031f8:	b510      	push	{r4, lr}
 80031fa:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 80031fc:	238c      	movs	r3, #140	; 0x8c
 80031fe:	58c3      	ldr	r3, [r0, r3]
 8003200:	2b20      	cmp	r3, #32
 8003202:	d12a      	bne.n	800325a <HAL_UARTEx_ReceiveToIdle_DMA+0x62>
    if ((pData == NULL) || (Size == 0U))
 8003204:	2900      	cmp	r1, #0
 8003206:	d02a      	beq.n	800325e <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8003208:	2a00      	cmp	r2, #0
 800320a:	d02a      	beq.n	8003262 <HAL_UARTEx_ReceiveToIdle_DMA+0x6a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	015b      	lsls	r3, r3, #5
 8003210:	6880      	ldr	r0, [r0, #8]
 8003212:	4298      	cmp	r0, r3
 8003214:	d104      	bne.n	8003220 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
 8003216:	6923      	ldr	r3, [r4, #16]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
      if ((((uint32_t)pData) & 1U) != 0U)
 800321c:	07cb      	lsls	r3, r1, #31
 800321e:	d422      	bmi.n	8003266 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003220:	2301      	movs	r3, #1
 8003222:	66e3      	str	r3, [r4, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003224:	2300      	movs	r3, #0
 8003226:	6723      	str	r3, [r4, #112]	; 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8003228:	0020      	movs	r0, r4
 800322a:	f7ff fef1 	bl	8003010 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800322e:	2800      	cmp	r0, #0
 8003230:	d114      	bne.n	800325c <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003232:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003234:	2b01      	cmp	r3, #1
 8003236:	d001      	beq.n	800323c <HAL_UARTEx_ReceiveToIdle_DMA+0x44>
        status = HAL_ERROR;
 8003238:	2001      	movs	r0, #1
    return status;
 800323a:	e00f      	b.n	800325c <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800323c:	6823      	ldr	r3, [r4, #0]
 800323e:	2110      	movs	r1, #16
 8003240:	6219      	str	r1, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003242:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003246:	2301      	movs	r3, #1
 8003248:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800324c:	6822      	ldr	r2, [r4, #0]
 800324e:	6813      	ldr	r3, [r2, #0]
 8003250:	430b      	orrs	r3, r1
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	f38c 8810 	msr	PRIMASK, ip
}
 8003258:	e000      	b.n	800325c <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
    return HAL_BUSY;
 800325a:	2002      	movs	r0, #2
}
 800325c:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 800325e:	2001      	movs	r0, #1
 8003260:	e7fc      	b.n	800325c <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
 8003262:	2001      	movs	r0, #1
 8003264:	e7fa      	b.n	800325c <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
        return  HAL_ERROR;
 8003266:	2001      	movs	r0, #1
 8003268:	e7f8      	b.n	800325c <HAL_UARTEx_ReceiveToIdle_DMA+0x64>
	...

0800326c <__errno>:
 800326c:	4b01      	ldr	r3, [pc, #4]	; (8003274 <__errno+0x8>)
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	4770      	bx	lr
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	2000005c 	.word	0x2000005c

08003278 <__libc_init_array>:
 8003278:	b570      	push	{r4, r5, r6, lr}
 800327a:	2600      	movs	r6, #0
 800327c:	4d0c      	ldr	r5, [pc, #48]	; (80032b0 <__libc_init_array+0x38>)
 800327e:	4c0d      	ldr	r4, [pc, #52]	; (80032b4 <__libc_init_array+0x3c>)
 8003280:	1b64      	subs	r4, r4, r5
 8003282:	10a4      	asrs	r4, r4, #2
 8003284:	42a6      	cmp	r6, r4
 8003286:	d109      	bne.n	800329c <__libc_init_array+0x24>
 8003288:	2600      	movs	r6, #0
 800328a:	f000 fc8b 	bl	8003ba4 <_init>
 800328e:	4d0a      	ldr	r5, [pc, #40]	; (80032b8 <__libc_init_array+0x40>)
 8003290:	4c0a      	ldr	r4, [pc, #40]	; (80032bc <__libc_init_array+0x44>)
 8003292:	1b64      	subs	r4, r4, r5
 8003294:	10a4      	asrs	r4, r4, #2
 8003296:	42a6      	cmp	r6, r4
 8003298:	d105      	bne.n	80032a6 <__libc_init_array+0x2e>
 800329a:	bd70      	pop	{r4, r5, r6, pc}
 800329c:	00b3      	lsls	r3, r6, #2
 800329e:	58eb      	ldr	r3, [r5, r3]
 80032a0:	4798      	blx	r3
 80032a2:	3601      	adds	r6, #1
 80032a4:	e7ee      	b.n	8003284 <__libc_init_array+0xc>
 80032a6:	00b3      	lsls	r3, r6, #2
 80032a8:	58eb      	ldr	r3, [r5, r3]
 80032aa:	4798      	blx	r3
 80032ac:	3601      	adds	r6, #1
 80032ae:	e7f2      	b.n	8003296 <__libc_init_array+0x1e>
 80032b0:	08003d28 	.word	0x08003d28
 80032b4:	08003d28 	.word	0x08003d28
 80032b8:	08003d28 	.word	0x08003d28
 80032bc:	08003d2c 	.word	0x08003d2c

080032c0 <memset>:
 80032c0:	0003      	movs	r3, r0
 80032c2:	1882      	adds	r2, r0, r2
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d100      	bne.n	80032ca <memset+0xa>
 80032c8:	4770      	bx	lr
 80032ca:	7019      	strb	r1, [r3, #0]
 80032cc:	3301      	adds	r3, #1
 80032ce:	e7f9      	b.n	80032c4 <memset+0x4>

080032d0 <siprintf>:
 80032d0:	b40e      	push	{r1, r2, r3}
 80032d2:	b500      	push	{lr}
 80032d4:	490b      	ldr	r1, [pc, #44]	; (8003304 <siprintf+0x34>)
 80032d6:	b09c      	sub	sp, #112	; 0x70
 80032d8:	ab1d      	add	r3, sp, #116	; 0x74
 80032da:	9002      	str	r0, [sp, #8]
 80032dc:	9006      	str	r0, [sp, #24]
 80032de:	9107      	str	r1, [sp, #28]
 80032e0:	9104      	str	r1, [sp, #16]
 80032e2:	4809      	ldr	r0, [pc, #36]	; (8003308 <siprintf+0x38>)
 80032e4:	4909      	ldr	r1, [pc, #36]	; (800330c <siprintf+0x3c>)
 80032e6:	cb04      	ldmia	r3!, {r2}
 80032e8:	9105      	str	r1, [sp, #20]
 80032ea:	6800      	ldr	r0, [r0, #0]
 80032ec:	a902      	add	r1, sp, #8
 80032ee:	9301      	str	r3, [sp, #4]
 80032f0:	f000 f870 	bl	80033d4 <_svfiprintf_r>
 80032f4:	2300      	movs	r3, #0
 80032f6:	9a02      	ldr	r2, [sp, #8]
 80032f8:	7013      	strb	r3, [r2, #0]
 80032fa:	b01c      	add	sp, #112	; 0x70
 80032fc:	bc08      	pop	{r3}
 80032fe:	b003      	add	sp, #12
 8003300:	4718      	bx	r3
 8003302:	46c0      	nop			; (mov r8, r8)
 8003304:	7fffffff 	.word	0x7fffffff
 8003308:	2000005c 	.word	0x2000005c
 800330c:	ffff0208 	.word	0xffff0208

08003310 <__ssputs_r>:
 8003310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003312:	688e      	ldr	r6, [r1, #8]
 8003314:	b085      	sub	sp, #20
 8003316:	0007      	movs	r7, r0
 8003318:	000c      	movs	r4, r1
 800331a:	9203      	str	r2, [sp, #12]
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	429e      	cmp	r6, r3
 8003320:	d83c      	bhi.n	800339c <__ssputs_r+0x8c>
 8003322:	2390      	movs	r3, #144	; 0x90
 8003324:	898a      	ldrh	r2, [r1, #12]
 8003326:	00db      	lsls	r3, r3, #3
 8003328:	421a      	tst	r2, r3
 800332a:	d034      	beq.n	8003396 <__ssputs_r+0x86>
 800332c:	6909      	ldr	r1, [r1, #16]
 800332e:	6823      	ldr	r3, [r4, #0]
 8003330:	6960      	ldr	r0, [r4, #20]
 8003332:	1a5b      	subs	r3, r3, r1
 8003334:	9302      	str	r3, [sp, #8]
 8003336:	2303      	movs	r3, #3
 8003338:	4343      	muls	r3, r0
 800333a:	0fdd      	lsrs	r5, r3, #31
 800333c:	18ed      	adds	r5, r5, r3
 800333e:	9b01      	ldr	r3, [sp, #4]
 8003340:	9802      	ldr	r0, [sp, #8]
 8003342:	3301      	adds	r3, #1
 8003344:	181b      	adds	r3, r3, r0
 8003346:	106d      	asrs	r5, r5, #1
 8003348:	42ab      	cmp	r3, r5
 800334a:	d900      	bls.n	800334e <__ssputs_r+0x3e>
 800334c:	001d      	movs	r5, r3
 800334e:	0553      	lsls	r3, r2, #21
 8003350:	d532      	bpl.n	80033b8 <__ssputs_r+0xa8>
 8003352:	0029      	movs	r1, r5
 8003354:	0038      	movs	r0, r7
 8003356:	f000 fb53 	bl	8003a00 <_malloc_r>
 800335a:	1e06      	subs	r6, r0, #0
 800335c:	d109      	bne.n	8003372 <__ssputs_r+0x62>
 800335e:	230c      	movs	r3, #12
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	2340      	movs	r3, #64	; 0x40
 8003364:	2001      	movs	r0, #1
 8003366:	89a2      	ldrh	r2, [r4, #12]
 8003368:	4240      	negs	r0, r0
 800336a:	4313      	orrs	r3, r2
 800336c:	81a3      	strh	r3, [r4, #12]
 800336e:	b005      	add	sp, #20
 8003370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003372:	9a02      	ldr	r2, [sp, #8]
 8003374:	6921      	ldr	r1, [r4, #16]
 8003376:	f000 faba 	bl	80038ee <memcpy>
 800337a:	89a3      	ldrh	r3, [r4, #12]
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <__ssputs_r+0xc0>)
 800337e:	401a      	ands	r2, r3
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	4313      	orrs	r3, r2
 8003384:	81a3      	strh	r3, [r4, #12]
 8003386:	9b02      	ldr	r3, [sp, #8]
 8003388:	6126      	str	r6, [r4, #16]
 800338a:	18f6      	adds	r6, r6, r3
 800338c:	6026      	str	r6, [r4, #0]
 800338e:	6165      	str	r5, [r4, #20]
 8003390:	9e01      	ldr	r6, [sp, #4]
 8003392:	1aed      	subs	r5, r5, r3
 8003394:	60a5      	str	r5, [r4, #8]
 8003396:	9b01      	ldr	r3, [sp, #4]
 8003398:	429e      	cmp	r6, r3
 800339a:	d900      	bls.n	800339e <__ssputs_r+0x8e>
 800339c:	9e01      	ldr	r6, [sp, #4]
 800339e:	0032      	movs	r2, r6
 80033a0:	9903      	ldr	r1, [sp, #12]
 80033a2:	6820      	ldr	r0, [r4, #0]
 80033a4:	f000 faac 	bl	8003900 <memmove>
 80033a8:	68a3      	ldr	r3, [r4, #8]
 80033aa:	2000      	movs	r0, #0
 80033ac:	1b9b      	subs	r3, r3, r6
 80033ae:	60a3      	str	r3, [r4, #8]
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	199e      	adds	r6, r3, r6
 80033b4:	6026      	str	r6, [r4, #0]
 80033b6:	e7da      	b.n	800336e <__ssputs_r+0x5e>
 80033b8:	002a      	movs	r2, r5
 80033ba:	0038      	movs	r0, r7
 80033bc:	f000 fb96 	bl	8003aec <_realloc_r>
 80033c0:	1e06      	subs	r6, r0, #0
 80033c2:	d1e0      	bne.n	8003386 <__ssputs_r+0x76>
 80033c4:	0038      	movs	r0, r7
 80033c6:	6921      	ldr	r1, [r4, #16]
 80033c8:	f000 faae 	bl	8003928 <_free_r>
 80033cc:	e7c7      	b.n	800335e <__ssputs_r+0x4e>
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	fffffb7f 	.word	0xfffffb7f

080033d4 <_svfiprintf_r>:
 80033d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033d6:	b0a1      	sub	sp, #132	; 0x84
 80033d8:	9003      	str	r0, [sp, #12]
 80033da:	001d      	movs	r5, r3
 80033dc:	898b      	ldrh	r3, [r1, #12]
 80033de:	000f      	movs	r7, r1
 80033e0:	0016      	movs	r6, r2
 80033e2:	061b      	lsls	r3, r3, #24
 80033e4:	d511      	bpl.n	800340a <_svfiprintf_r+0x36>
 80033e6:	690b      	ldr	r3, [r1, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10e      	bne.n	800340a <_svfiprintf_r+0x36>
 80033ec:	2140      	movs	r1, #64	; 0x40
 80033ee:	f000 fb07 	bl	8003a00 <_malloc_r>
 80033f2:	6038      	str	r0, [r7, #0]
 80033f4:	6138      	str	r0, [r7, #16]
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d105      	bne.n	8003406 <_svfiprintf_r+0x32>
 80033fa:	230c      	movs	r3, #12
 80033fc:	9a03      	ldr	r2, [sp, #12]
 80033fe:	3801      	subs	r0, #1
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	b021      	add	sp, #132	; 0x84
 8003404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003406:	2340      	movs	r3, #64	; 0x40
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	2300      	movs	r3, #0
 800340c:	ac08      	add	r4, sp, #32
 800340e:	6163      	str	r3, [r4, #20]
 8003410:	3320      	adds	r3, #32
 8003412:	7663      	strb	r3, [r4, #25]
 8003414:	3310      	adds	r3, #16
 8003416:	76a3      	strb	r3, [r4, #26]
 8003418:	9507      	str	r5, [sp, #28]
 800341a:	0035      	movs	r5, r6
 800341c:	782b      	ldrb	r3, [r5, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <_svfiprintf_r+0x52>
 8003422:	2b25      	cmp	r3, #37	; 0x25
 8003424:	d147      	bne.n	80034b6 <_svfiprintf_r+0xe2>
 8003426:	1bab      	subs	r3, r5, r6
 8003428:	9305      	str	r3, [sp, #20]
 800342a:	42b5      	cmp	r5, r6
 800342c:	d00c      	beq.n	8003448 <_svfiprintf_r+0x74>
 800342e:	0032      	movs	r2, r6
 8003430:	0039      	movs	r1, r7
 8003432:	9803      	ldr	r0, [sp, #12]
 8003434:	f7ff ff6c 	bl	8003310 <__ssputs_r>
 8003438:	1c43      	adds	r3, r0, #1
 800343a:	d100      	bne.n	800343e <_svfiprintf_r+0x6a>
 800343c:	e0ae      	b.n	800359c <_svfiprintf_r+0x1c8>
 800343e:	6962      	ldr	r2, [r4, #20]
 8003440:	9b05      	ldr	r3, [sp, #20]
 8003442:	4694      	mov	ip, r2
 8003444:	4463      	add	r3, ip
 8003446:	6163      	str	r3, [r4, #20]
 8003448:	782b      	ldrb	r3, [r5, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d100      	bne.n	8003450 <_svfiprintf_r+0x7c>
 800344e:	e0a5      	b.n	800359c <_svfiprintf_r+0x1c8>
 8003450:	2201      	movs	r2, #1
 8003452:	2300      	movs	r3, #0
 8003454:	4252      	negs	r2, r2
 8003456:	6062      	str	r2, [r4, #4]
 8003458:	a904      	add	r1, sp, #16
 800345a:	3254      	adds	r2, #84	; 0x54
 800345c:	1852      	adds	r2, r2, r1
 800345e:	1c6e      	adds	r6, r5, #1
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	60e3      	str	r3, [r4, #12]
 8003464:	60a3      	str	r3, [r4, #8]
 8003466:	7013      	strb	r3, [r2, #0]
 8003468:	65a3      	str	r3, [r4, #88]	; 0x58
 800346a:	2205      	movs	r2, #5
 800346c:	7831      	ldrb	r1, [r6, #0]
 800346e:	4854      	ldr	r0, [pc, #336]	; (80035c0 <_svfiprintf_r+0x1ec>)
 8003470:	f000 fa32 	bl	80038d8 <memchr>
 8003474:	1c75      	adds	r5, r6, #1
 8003476:	2800      	cmp	r0, #0
 8003478:	d11f      	bne.n	80034ba <_svfiprintf_r+0xe6>
 800347a:	6822      	ldr	r2, [r4, #0]
 800347c:	06d3      	lsls	r3, r2, #27
 800347e:	d504      	bpl.n	800348a <_svfiprintf_r+0xb6>
 8003480:	2353      	movs	r3, #83	; 0x53
 8003482:	a904      	add	r1, sp, #16
 8003484:	185b      	adds	r3, r3, r1
 8003486:	2120      	movs	r1, #32
 8003488:	7019      	strb	r1, [r3, #0]
 800348a:	0713      	lsls	r3, r2, #28
 800348c:	d504      	bpl.n	8003498 <_svfiprintf_r+0xc4>
 800348e:	2353      	movs	r3, #83	; 0x53
 8003490:	a904      	add	r1, sp, #16
 8003492:	185b      	adds	r3, r3, r1
 8003494:	212b      	movs	r1, #43	; 0x2b
 8003496:	7019      	strb	r1, [r3, #0]
 8003498:	7833      	ldrb	r3, [r6, #0]
 800349a:	2b2a      	cmp	r3, #42	; 0x2a
 800349c:	d016      	beq.n	80034cc <_svfiprintf_r+0xf8>
 800349e:	0035      	movs	r5, r6
 80034a0:	2100      	movs	r1, #0
 80034a2:	200a      	movs	r0, #10
 80034a4:	68e3      	ldr	r3, [r4, #12]
 80034a6:	782a      	ldrb	r2, [r5, #0]
 80034a8:	1c6e      	adds	r6, r5, #1
 80034aa:	3a30      	subs	r2, #48	; 0x30
 80034ac:	2a09      	cmp	r2, #9
 80034ae:	d94e      	bls.n	800354e <_svfiprintf_r+0x17a>
 80034b0:	2900      	cmp	r1, #0
 80034b2:	d111      	bne.n	80034d8 <_svfiprintf_r+0x104>
 80034b4:	e017      	b.n	80034e6 <_svfiprintf_r+0x112>
 80034b6:	3501      	adds	r5, #1
 80034b8:	e7b0      	b.n	800341c <_svfiprintf_r+0x48>
 80034ba:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <_svfiprintf_r+0x1ec>)
 80034bc:	6822      	ldr	r2, [r4, #0]
 80034be:	1ac0      	subs	r0, r0, r3
 80034c0:	2301      	movs	r3, #1
 80034c2:	4083      	lsls	r3, r0
 80034c4:	4313      	orrs	r3, r2
 80034c6:	002e      	movs	r6, r5
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	e7ce      	b.n	800346a <_svfiprintf_r+0x96>
 80034cc:	9b07      	ldr	r3, [sp, #28]
 80034ce:	1d19      	adds	r1, r3, #4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	9107      	str	r1, [sp, #28]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	db01      	blt.n	80034dc <_svfiprintf_r+0x108>
 80034d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80034da:	e004      	b.n	80034e6 <_svfiprintf_r+0x112>
 80034dc:	425b      	negs	r3, r3
 80034de:	60e3      	str	r3, [r4, #12]
 80034e0:	2302      	movs	r3, #2
 80034e2:	4313      	orrs	r3, r2
 80034e4:	6023      	str	r3, [r4, #0]
 80034e6:	782b      	ldrb	r3, [r5, #0]
 80034e8:	2b2e      	cmp	r3, #46	; 0x2e
 80034ea:	d10a      	bne.n	8003502 <_svfiprintf_r+0x12e>
 80034ec:	786b      	ldrb	r3, [r5, #1]
 80034ee:	2b2a      	cmp	r3, #42	; 0x2a
 80034f0:	d135      	bne.n	800355e <_svfiprintf_r+0x18a>
 80034f2:	9b07      	ldr	r3, [sp, #28]
 80034f4:	3502      	adds	r5, #2
 80034f6:	1d1a      	adds	r2, r3, #4
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	9207      	str	r2, [sp, #28]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	db2b      	blt.n	8003558 <_svfiprintf_r+0x184>
 8003500:	9309      	str	r3, [sp, #36]	; 0x24
 8003502:	4e30      	ldr	r6, [pc, #192]	; (80035c4 <_svfiprintf_r+0x1f0>)
 8003504:	2203      	movs	r2, #3
 8003506:	0030      	movs	r0, r6
 8003508:	7829      	ldrb	r1, [r5, #0]
 800350a:	f000 f9e5 	bl	80038d8 <memchr>
 800350e:	2800      	cmp	r0, #0
 8003510:	d006      	beq.n	8003520 <_svfiprintf_r+0x14c>
 8003512:	2340      	movs	r3, #64	; 0x40
 8003514:	1b80      	subs	r0, r0, r6
 8003516:	4083      	lsls	r3, r0
 8003518:	6822      	ldr	r2, [r4, #0]
 800351a:	3501      	adds	r5, #1
 800351c:	4313      	orrs	r3, r2
 800351e:	6023      	str	r3, [r4, #0]
 8003520:	7829      	ldrb	r1, [r5, #0]
 8003522:	2206      	movs	r2, #6
 8003524:	4828      	ldr	r0, [pc, #160]	; (80035c8 <_svfiprintf_r+0x1f4>)
 8003526:	1c6e      	adds	r6, r5, #1
 8003528:	7621      	strb	r1, [r4, #24]
 800352a:	f000 f9d5 	bl	80038d8 <memchr>
 800352e:	2800      	cmp	r0, #0
 8003530:	d03c      	beq.n	80035ac <_svfiprintf_r+0x1d8>
 8003532:	4b26      	ldr	r3, [pc, #152]	; (80035cc <_svfiprintf_r+0x1f8>)
 8003534:	2b00      	cmp	r3, #0
 8003536:	d125      	bne.n	8003584 <_svfiprintf_r+0x1b0>
 8003538:	2207      	movs	r2, #7
 800353a:	9b07      	ldr	r3, [sp, #28]
 800353c:	3307      	adds	r3, #7
 800353e:	4393      	bics	r3, r2
 8003540:	3308      	adds	r3, #8
 8003542:	9307      	str	r3, [sp, #28]
 8003544:	6963      	ldr	r3, [r4, #20]
 8003546:	9a04      	ldr	r2, [sp, #16]
 8003548:	189b      	adds	r3, r3, r2
 800354a:	6163      	str	r3, [r4, #20]
 800354c:	e765      	b.n	800341a <_svfiprintf_r+0x46>
 800354e:	4343      	muls	r3, r0
 8003550:	0035      	movs	r5, r6
 8003552:	2101      	movs	r1, #1
 8003554:	189b      	adds	r3, r3, r2
 8003556:	e7a6      	b.n	80034a6 <_svfiprintf_r+0xd2>
 8003558:	2301      	movs	r3, #1
 800355a:	425b      	negs	r3, r3
 800355c:	e7d0      	b.n	8003500 <_svfiprintf_r+0x12c>
 800355e:	2300      	movs	r3, #0
 8003560:	200a      	movs	r0, #10
 8003562:	001a      	movs	r2, r3
 8003564:	3501      	adds	r5, #1
 8003566:	6063      	str	r3, [r4, #4]
 8003568:	7829      	ldrb	r1, [r5, #0]
 800356a:	1c6e      	adds	r6, r5, #1
 800356c:	3930      	subs	r1, #48	; 0x30
 800356e:	2909      	cmp	r1, #9
 8003570:	d903      	bls.n	800357a <_svfiprintf_r+0x1a6>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0c5      	beq.n	8003502 <_svfiprintf_r+0x12e>
 8003576:	9209      	str	r2, [sp, #36]	; 0x24
 8003578:	e7c3      	b.n	8003502 <_svfiprintf_r+0x12e>
 800357a:	4342      	muls	r2, r0
 800357c:	0035      	movs	r5, r6
 800357e:	2301      	movs	r3, #1
 8003580:	1852      	adds	r2, r2, r1
 8003582:	e7f1      	b.n	8003568 <_svfiprintf_r+0x194>
 8003584:	ab07      	add	r3, sp, #28
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	003a      	movs	r2, r7
 800358a:	0021      	movs	r1, r4
 800358c:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <_svfiprintf_r+0x1fc>)
 800358e:	9803      	ldr	r0, [sp, #12]
 8003590:	e000      	b.n	8003594 <_svfiprintf_r+0x1c0>
 8003592:	bf00      	nop
 8003594:	9004      	str	r0, [sp, #16]
 8003596:	9b04      	ldr	r3, [sp, #16]
 8003598:	3301      	adds	r3, #1
 800359a:	d1d3      	bne.n	8003544 <_svfiprintf_r+0x170>
 800359c:	89bb      	ldrh	r3, [r7, #12]
 800359e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80035a0:	065b      	lsls	r3, r3, #25
 80035a2:	d400      	bmi.n	80035a6 <_svfiprintf_r+0x1d2>
 80035a4:	e72d      	b.n	8003402 <_svfiprintf_r+0x2e>
 80035a6:	2001      	movs	r0, #1
 80035a8:	4240      	negs	r0, r0
 80035aa:	e72a      	b.n	8003402 <_svfiprintf_r+0x2e>
 80035ac:	ab07      	add	r3, sp, #28
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	003a      	movs	r2, r7
 80035b2:	0021      	movs	r1, r4
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <_svfiprintf_r+0x1fc>)
 80035b6:	9803      	ldr	r0, [sp, #12]
 80035b8:	f000 f87c 	bl	80036b4 <_printf_i>
 80035bc:	e7ea      	b.n	8003594 <_svfiprintf_r+0x1c0>
 80035be:	46c0      	nop			; (mov r8, r8)
 80035c0:	08003cf4 	.word	0x08003cf4
 80035c4:	08003cfa 	.word	0x08003cfa
 80035c8:	08003cfe 	.word	0x08003cfe
 80035cc:	00000000 	.word	0x00000000
 80035d0:	08003311 	.word	0x08003311

080035d4 <_printf_common>:
 80035d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035d6:	0015      	movs	r5, r2
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	688a      	ldr	r2, [r1, #8]
 80035dc:	690b      	ldr	r3, [r1, #16]
 80035de:	000c      	movs	r4, r1
 80035e0:	9000      	str	r0, [sp, #0]
 80035e2:	4293      	cmp	r3, r2
 80035e4:	da00      	bge.n	80035e8 <_printf_common+0x14>
 80035e6:	0013      	movs	r3, r2
 80035e8:	0022      	movs	r2, r4
 80035ea:	602b      	str	r3, [r5, #0]
 80035ec:	3243      	adds	r2, #67	; 0x43
 80035ee:	7812      	ldrb	r2, [r2, #0]
 80035f0:	2a00      	cmp	r2, #0
 80035f2:	d001      	beq.n	80035f8 <_printf_common+0x24>
 80035f4:	3301      	adds	r3, #1
 80035f6:	602b      	str	r3, [r5, #0]
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	069b      	lsls	r3, r3, #26
 80035fc:	d502      	bpl.n	8003604 <_printf_common+0x30>
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	3302      	adds	r3, #2
 8003602:	602b      	str	r3, [r5, #0]
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	2306      	movs	r3, #6
 8003608:	0017      	movs	r7, r2
 800360a:	401f      	ands	r7, r3
 800360c:	421a      	tst	r2, r3
 800360e:	d027      	beq.n	8003660 <_printf_common+0x8c>
 8003610:	0023      	movs	r3, r4
 8003612:	3343      	adds	r3, #67	; 0x43
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	4193      	sbcs	r3, r2
 800361a:	6822      	ldr	r2, [r4, #0]
 800361c:	0692      	lsls	r2, r2, #26
 800361e:	d430      	bmi.n	8003682 <_printf_common+0xae>
 8003620:	0022      	movs	r2, r4
 8003622:	9901      	ldr	r1, [sp, #4]
 8003624:	9800      	ldr	r0, [sp, #0]
 8003626:	9e08      	ldr	r6, [sp, #32]
 8003628:	3243      	adds	r2, #67	; 0x43
 800362a:	47b0      	blx	r6
 800362c:	1c43      	adds	r3, r0, #1
 800362e:	d025      	beq.n	800367c <_printf_common+0xa8>
 8003630:	2306      	movs	r3, #6
 8003632:	6820      	ldr	r0, [r4, #0]
 8003634:	682a      	ldr	r2, [r5, #0]
 8003636:	68e1      	ldr	r1, [r4, #12]
 8003638:	2500      	movs	r5, #0
 800363a:	4003      	ands	r3, r0
 800363c:	2b04      	cmp	r3, #4
 800363e:	d103      	bne.n	8003648 <_printf_common+0x74>
 8003640:	1a8d      	subs	r5, r1, r2
 8003642:	43eb      	mvns	r3, r5
 8003644:	17db      	asrs	r3, r3, #31
 8003646:	401d      	ands	r5, r3
 8003648:	68a3      	ldr	r3, [r4, #8]
 800364a:	6922      	ldr	r2, [r4, #16]
 800364c:	4293      	cmp	r3, r2
 800364e:	dd01      	ble.n	8003654 <_printf_common+0x80>
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	18ed      	adds	r5, r5, r3
 8003654:	2700      	movs	r7, #0
 8003656:	42bd      	cmp	r5, r7
 8003658:	d120      	bne.n	800369c <_printf_common+0xc8>
 800365a:	2000      	movs	r0, #0
 800365c:	e010      	b.n	8003680 <_printf_common+0xac>
 800365e:	3701      	adds	r7, #1
 8003660:	68e3      	ldr	r3, [r4, #12]
 8003662:	682a      	ldr	r2, [r5, #0]
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	42bb      	cmp	r3, r7
 8003668:	ddd2      	ble.n	8003610 <_printf_common+0x3c>
 800366a:	0022      	movs	r2, r4
 800366c:	2301      	movs	r3, #1
 800366e:	9901      	ldr	r1, [sp, #4]
 8003670:	9800      	ldr	r0, [sp, #0]
 8003672:	9e08      	ldr	r6, [sp, #32]
 8003674:	3219      	adds	r2, #25
 8003676:	47b0      	blx	r6
 8003678:	1c43      	adds	r3, r0, #1
 800367a:	d1f0      	bne.n	800365e <_printf_common+0x8a>
 800367c:	2001      	movs	r0, #1
 800367e:	4240      	negs	r0, r0
 8003680:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003682:	2030      	movs	r0, #48	; 0x30
 8003684:	18e1      	adds	r1, r4, r3
 8003686:	3143      	adds	r1, #67	; 0x43
 8003688:	7008      	strb	r0, [r1, #0]
 800368a:	0021      	movs	r1, r4
 800368c:	1c5a      	adds	r2, r3, #1
 800368e:	3145      	adds	r1, #69	; 0x45
 8003690:	7809      	ldrb	r1, [r1, #0]
 8003692:	18a2      	adds	r2, r4, r2
 8003694:	3243      	adds	r2, #67	; 0x43
 8003696:	3302      	adds	r3, #2
 8003698:	7011      	strb	r1, [r2, #0]
 800369a:	e7c1      	b.n	8003620 <_printf_common+0x4c>
 800369c:	0022      	movs	r2, r4
 800369e:	2301      	movs	r3, #1
 80036a0:	9901      	ldr	r1, [sp, #4]
 80036a2:	9800      	ldr	r0, [sp, #0]
 80036a4:	9e08      	ldr	r6, [sp, #32]
 80036a6:	321a      	adds	r2, #26
 80036a8:	47b0      	blx	r6
 80036aa:	1c43      	adds	r3, r0, #1
 80036ac:	d0e6      	beq.n	800367c <_printf_common+0xa8>
 80036ae:	3701      	adds	r7, #1
 80036b0:	e7d1      	b.n	8003656 <_printf_common+0x82>
	...

080036b4 <_printf_i>:
 80036b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b6:	b08b      	sub	sp, #44	; 0x2c
 80036b8:	9206      	str	r2, [sp, #24]
 80036ba:	000a      	movs	r2, r1
 80036bc:	3243      	adds	r2, #67	; 0x43
 80036be:	9307      	str	r3, [sp, #28]
 80036c0:	9005      	str	r0, [sp, #20]
 80036c2:	9204      	str	r2, [sp, #16]
 80036c4:	7e0a      	ldrb	r2, [r1, #24]
 80036c6:	000c      	movs	r4, r1
 80036c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80036ca:	2a78      	cmp	r2, #120	; 0x78
 80036cc:	d807      	bhi.n	80036de <_printf_i+0x2a>
 80036ce:	2a62      	cmp	r2, #98	; 0x62
 80036d0:	d809      	bhi.n	80036e6 <_printf_i+0x32>
 80036d2:	2a00      	cmp	r2, #0
 80036d4:	d100      	bne.n	80036d8 <_printf_i+0x24>
 80036d6:	e0c1      	b.n	800385c <_printf_i+0x1a8>
 80036d8:	2a58      	cmp	r2, #88	; 0x58
 80036da:	d100      	bne.n	80036de <_printf_i+0x2a>
 80036dc:	e08c      	b.n	80037f8 <_printf_i+0x144>
 80036de:	0026      	movs	r6, r4
 80036e0:	3642      	adds	r6, #66	; 0x42
 80036e2:	7032      	strb	r2, [r6, #0]
 80036e4:	e022      	b.n	800372c <_printf_i+0x78>
 80036e6:	0010      	movs	r0, r2
 80036e8:	3863      	subs	r0, #99	; 0x63
 80036ea:	2815      	cmp	r0, #21
 80036ec:	d8f7      	bhi.n	80036de <_printf_i+0x2a>
 80036ee:	f7fc fd07 	bl	8000100 <__gnu_thumb1_case_shi>
 80036f2:	0016      	.short	0x0016
 80036f4:	fff6001f 	.word	0xfff6001f
 80036f8:	fff6fff6 	.word	0xfff6fff6
 80036fc:	001ffff6 	.word	0x001ffff6
 8003700:	fff6fff6 	.word	0xfff6fff6
 8003704:	fff6fff6 	.word	0xfff6fff6
 8003708:	003600a8 	.word	0x003600a8
 800370c:	fff6009a 	.word	0xfff6009a
 8003710:	00b9fff6 	.word	0x00b9fff6
 8003714:	0036fff6 	.word	0x0036fff6
 8003718:	fff6fff6 	.word	0xfff6fff6
 800371c:	009e      	.short	0x009e
 800371e:	0026      	movs	r6, r4
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	3642      	adds	r6, #66	; 0x42
 8003724:	1d11      	adds	r1, r2, #4
 8003726:	6019      	str	r1, [r3, #0]
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	7033      	strb	r3, [r6, #0]
 800372c:	2301      	movs	r3, #1
 800372e:	e0a7      	b.n	8003880 <_printf_i+0x1cc>
 8003730:	6808      	ldr	r0, [r1, #0]
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	1d0a      	adds	r2, r1, #4
 8003736:	0605      	lsls	r5, r0, #24
 8003738:	d50b      	bpl.n	8003752 <_printf_i+0x9e>
 800373a:	680d      	ldr	r5, [r1, #0]
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	2d00      	cmp	r5, #0
 8003740:	da03      	bge.n	800374a <_printf_i+0x96>
 8003742:	232d      	movs	r3, #45	; 0x2d
 8003744:	9a04      	ldr	r2, [sp, #16]
 8003746:	426d      	negs	r5, r5
 8003748:	7013      	strb	r3, [r2, #0]
 800374a:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <_printf_i+0x21c>)
 800374c:	270a      	movs	r7, #10
 800374e:	9303      	str	r3, [sp, #12]
 8003750:	e01b      	b.n	800378a <_printf_i+0xd6>
 8003752:	680d      	ldr	r5, [r1, #0]
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	0641      	lsls	r1, r0, #25
 8003758:	d5f1      	bpl.n	800373e <_printf_i+0x8a>
 800375a:	b22d      	sxth	r5, r5
 800375c:	e7ef      	b.n	800373e <_printf_i+0x8a>
 800375e:	680d      	ldr	r5, [r1, #0]
 8003760:	6819      	ldr	r1, [r3, #0]
 8003762:	1d08      	adds	r0, r1, #4
 8003764:	6018      	str	r0, [r3, #0]
 8003766:	062e      	lsls	r6, r5, #24
 8003768:	d501      	bpl.n	800376e <_printf_i+0xba>
 800376a:	680d      	ldr	r5, [r1, #0]
 800376c:	e003      	b.n	8003776 <_printf_i+0xc2>
 800376e:	066d      	lsls	r5, r5, #25
 8003770:	d5fb      	bpl.n	800376a <_printf_i+0xb6>
 8003772:	680d      	ldr	r5, [r1, #0]
 8003774:	b2ad      	uxth	r5, r5
 8003776:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <_printf_i+0x21c>)
 8003778:	2708      	movs	r7, #8
 800377a:	9303      	str	r3, [sp, #12]
 800377c:	2a6f      	cmp	r2, #111	; 0x6f
 800377e:	d000      	beq.n	8003782 <_printf_i+0xce>
 8003780:	3702      	adds	r7, #2
 8003782:	0023      	movs	r3, r4
 8003784:	2200      	movs	r2, #0
 8003786:	3343      	adds	r3, #67	; 0x43
 8003788:	701a      	strb	r2, [r3, #0]
 800378a:	6863      	ldr	r3, [r4, #4]
 800378c:	60a3      	str	r3, [r4, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	db03      	blt.n	800379a <_printf_i+0xe6>
 8003792:	2204      	movs	r2, #4
 8003794:	6821      	ldr	r1, [r4, #0]
 8003796:	4391      	bics	r1, r2
 8003798:	6021      	str	r1, [r4, #0]
 800379a:	2d00      	cmp	r5, #0
 800379c:	d102      	bne.n	80037a4 <_printf_i+0xf0>
 800379e:	9e04      	ldr	r6, [sp, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00c      	beq.n	80037be <_printf_i+0x10a>
 80037a4:	9e04      	ldr	r6, [sp, #16]
 80037a6:	0028      	movs	r0, r5
 80037a8:	0039      	movs	r1, r7
 80037aa:	f7fc fd39 	bl	8000220 <__aeabi_uidivmod>
 80037ae:	9b03      	ldr	r3, [sp, #12]
 80037b0:	3e01      	subs	r6, #1
 80037b2:	5c5b      	ldrb	r3, [r3, r1]
 80037b4:	7033      	strb	r3, [r6, #0]
 80037b6:	002b      	movs	r3, r5
 80037b8:	0005      	movs	r5, r0
 80037ba:	429f      	cmp	r7, r3
 80037bc:	d9f3      	bls.n	80037a6 <_printf_i+0xf2>
 80037be:	2f08      	cmp	r7, #8
 80037c0:	d109      	bne.n	80037d6 <_printf_i+0x122>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	07db      	lsls	r3, r3, #31
 80037c6:	d506      	bpl.n	80037d6 <_printf_i+0x122>
 80037c8:	6863      	ldr	r3, [r4, #4]
 80037ca:	6922      	ldr	r2, [r4, #16]
 80037cc:	4293      	cmp	r3, r2
 80037ce:	dc02      	bgt.n	80037d6 <_printf_i+0x122>
 80037d0:	2330      	movs	r3, #48	; 0x30
 80037d2:	3e01      	subs	r6, #1
 80037d4:	7033      	strb	r3, [r6, #0]
 80037d6:	9b04      	ldr	r3, [sp, #16]
 80037d8:	1b9b      	subs	r3, r3, r6
 80037da:	6123      	str	r3, [r4, #16]
 80037dc:	9b07      	ldr	r3, [sp, #28]
 80037de:	0021      	movs	r1, r4
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	9805      	ldr	r0, [sp, #20]
 80037e4:	9b06      	ldr	r3, [sp, #24]
 80037e6:	aa09      	add	r2, sp, #36	; 0x24
 80037e8:	f7ff fef4 	bl	80035d4 <_printf_common>
 80037ec:	1c43      	adds	r3, r0, #1
 80037ee:	d14c      	bne.n	800388a <_printf_i+0x1d6>
 80037f0:	2001      	movs	r0, #1
 80037f2:	4240      	negs	r0, r0
 80037f4:	b00b      	add	sp, #44	; 0x2c
 80037f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037f8:	3145      	adds	r1, #69	; 0x45
 80037fa:	700a      	strb	r2, [r1, #0]
 80037fc:	4a34      	ldr	r2, [pc, #208]	; (80038d0 <_printf_i+0x21c>)
 80037fe:	9203      	str	r2, [sp, #12]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	6821      	ldr	r1, [r4, #0]
 8003804:	ca20      	ldmia	r2!, {r5}
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	0608      	lsls	r0, r1, #24
 800380a:	d516      	bpl.n	800383a <_printf_i+0x186>
 800380c:	07cb      	lsls	r3, r1, #31
 800380e:	d502      	bpl.n	8003816 <_printf_i+0x162>
 8003810:	2320      	movs	r3, #32
 8003812:	4319      	orrs	r1, r3
 8003814:	6021      	str	r1, [r4, #0]
 8003816:	2710      	movs	r7, #16
 8003818:	2d00      	cmp	r5, #0
 800381a:	d1b2      	bne.n	8003782 <_printf_i+0xce>
 800381c:	2320      	movs	r3, #32
 800381e:	6822      	ldr	r2, [r4, #0]
 8003820:	439a      	bics	r2, r3
 8003822:	6022      	str	r2, [r4, #0]
 8003824:	e7ad      	b.n	8003782 <_printf_i+0xce>
 8003826:	2220      	movs	r2, #32
 8003828:	6809      	ldr	r1, [r1, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	6022      	str	r2, [r4, #0]
 800382e:	0022      	movs	r2, r4
 8003830:	2178      	movs	r1, #120	; 0x78
 8003832:	3245      	adds	r2, #69	; 0x45
 8003834:	7011      	strb	r1, [r2, #0]
 8003836:	4a27      	ldr	r2, [pc, #156]	; (80038d4 <_printf_i+0x220>)
 8003838:	e7e1      	b.n	80037fe <_printf_i+0x14a>
 800383a:	0648      	lsls	r0, r1, #25
 800383c:	d5e6      	bpl.n	800380c <_printf_i+0x158>
 800383e:	b2ad      	uxth	r5, r5
 8003840:	e7e4      	b.n	800380c <_printf_i+0x158>
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	680d      	ldr	r5, [r1, #0]
 8003846:	1d10      	adds	r0, r2, #4
 8003848:	6949      	ldr	r1, [r1, #20]
 800384a:	6018      	str	r0, [r3, #0]
 800384c:	6813      	ldr	r3, [r2, #0]
 800384e:	062e      	lsls	r6, r5, #24
 8003850:	d501      	bpl.n	8003856 <_printf_i+0x1a2>
 8003852:	6019      	str	r1, [r3, #0]
 8003854:	e002      	b.n	800385c <_printf_i+0x1a8>
 8003856:	066d      	lsls	r5, r5, #25
 8003858:	d5fb      	bpl.n	8003852 <_printf_i+0x19e>
 800385a:	8019      	strh	r1, [r3, #0]
 800385c:	2300      	movs	r3, #0
 800385e:	9e04      	ldr	r6, [sp, #16]
 8003860:	6123      	str	r3, [r4, #16]
 8003862:	e7bb      	b.n	80037dc <_printf_i+0x128>
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	1d11      	adds	r1, r2, #4
 8003868:	6019      	str	r1, [r3, #0]
 800386a:	6816      	ldr	r6, [r2, #0]
 800386c:	2100      	movs	r1, #0
 800386e:	0030      	movs	r0, r6
 8003870:	6862      	ldr	r2, [r4, #4]
 8003872:	f000 f831 	bl	80038d8 <memchr>
 8003876:	2800      	cmp	r0, #0
 8003878:	d001      	beq.n	800387e <_printf_i+0x1ca>
 800387a:	1b80      	subs	r0, r0, r6
 800387c:	6060      	str	r0, [r4, #4]
 800387e:	6863      	ldr	r3, [r4, #4]
 8003880:	6123      	str	r3, [r4, #16]
 8003882:	2300      	movs	r3, #0
 8003884:	9a04      	ldr	r2, [sp, #16]
 8003886:	7013      	strb	r3, [r2, #0]
 8003888:	e7a8      	b.n	80037dc <_printf_i+0x128>
 800388a:	6923      	ldr	r3, [r4, #16]
 800388c:	0032      	movs	r2, r6
 800388e:	9906      	ldr	r1, [sp, #24]
 8003890:	9805      	ldr	r0, [sp, #20]
 8003892:	9d07      	ldr	r5, [sp, #28]
 8003894:	47a8      	blx	r5
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	d0aa      	beq.n	80037f0 <_printf_i+0x13c>
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	079b      	lsls	r3, r3, #30
 800389e:	d415      	bmi.n	80038cc <_printf_i+0x218>
 80038a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038a2:	68e0      	ldr	r0, [r4, #12]
 80038a4:	4298      	cmp	r0, r3
 80038a6:	daa5      	bge.n	80037f4 <_printf_i+0x140>
 80038a8:	0018      	movs	r0, r3
 80038aa:	e7a3      	b.n	80037f4 <_printf_i+0x140>
 80038ac:	0022      	movs	r2, r4
 80038ae:	2301      	movs	r3, #1
 80038b0:	9906      	ldr	r1, [sp, #24]
 80038b2:	9805      	ldr	r0, [sp, #20]
 80038b4:	9e07      	ldr	r6, [sp, #28]
 80038b6:	3219      	adds	r2, #25
 80038b8:	47b0      	blx	r6
 80038ba:	1c43      	adds	r3, r0, #1
 80038bc:	d098      	beq.n	80037f0 <_printf_i+0x13c>
 80038be:	3501      	adds	r5, #1
 80038c0:	68e3      	ldr	r3, [r4, #12]
 80038c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	42ab      	cmp	r3, r5
 80038c8:	dcf0      	bgt.n	80038ac <_printf_i+0x1f8>
 80038ca:	e7e9      	b.n	80038a0 <_printf_i+0x1ec>
 80038cc:	2500      	movs	r5, #0
 80038ce:	e7f7      	b.n	80038c0 <_printf_i+0x20c>
 80038d0:	08003d05 	.word	0x08003d05
 80038d4:	08003d16 	.word	0x08003d16

080038d8 <memchr>:
 80038d8:	b2c9      	uxtb	r1, r1
 80038da:	1882      	adds	r2, r0, r2
 80038dc:	4290      	cmp	r0, r2
 80038de:	d101      	bne.n	80038e4 <memchr+0xc>
 80038e0:	2000      	movs	r0, #0
 80038e2:	4770      	bx	lr
 80038e4:	7803      	ldrb	r3, [r0, #0]
 80038e6:	428b      	cmp	r3, r1
 80038e8:	d0fb      	beq.n	80038e2 <memchr+0xa>
 80038ea:	3001      	adds	r0, #1
 80038ec:	e7f6      	b.n	80038dc <memchr+0x4>

080038ee <memcpy>:
 80038ee:	2300      	movs	r3, #0
 80038f0:	b510      	push	{r4, lr}
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d100      	bne.n	80038f8 <memcpy+0xa>
 80038f6:	bd10      	pop	{r4, pc}
 80038f8:	5ccc      	ldrb	r4, [r1, r3]
 80038fa:	54c4      	strb	r4, [r0, r3]
 80038fc:	3301      	adds	r3, #1
 80038fe:	e7f8      	b.n	80038f2 <memcpy+0x4>

08003900 <memmove>:
 8003900:	b510      	push	{r4, lr}
 8003902:	4288      	cmp	r0, r1
 8003904:	d902      	bls.n	800390c <memmove+0xc>
 8003906:	188b      	adds	r3, r1, r2
 8003908:	4298      	cmp	r0, r3
 800390a:	d303      	bcc.n	8003914 <memmove+0x14>
 800390c:	2300      	movs	r3, #0
 800390e:	e007      	b.n	8003920 <memmove+0x20>
 8003910:	5c8b      	ldrb	r3, [r1, r2]
 8003912:	5483      	strb	r3, [r0, r2]
 8003914:	3a01      	subs	r2, #1
 8003916:	d2fb      	bcs.n	8003910 <memmove+0x10>
 8003918:	bd10      	pop	{r4, pc}
 800391a:	5ccc      	ldrb	r4, [r1, r3]
 800391c:	54c4      	strb	r4, [r0, r3]
 800391e:	3301      	adds	r3, #1
 8003920:	429a      	cmp	r2, r3
 8003922:	d1fa      	bne.n	800391a <memmove+0x1a>
 8003924:	e7f8      	b.n	8003918 <memmove+0x18>
	...

08003928 <_free_r>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	0005      	movs	r5, r0
 800392c:	2900      	cmp	r1, #0
 800392e:	d010      	beq.n	8003952 <_free_r+0x2a>
 8003930:	1f0c      	subs	r4, r1, #4
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	da00      	bge.n	800393a <_free_r+0x12>
 8003938:	18e4      	adds	r4, r4, r3
 800393a:	0028      	movs	r0, r5
 800393c:	f000 f918 	bl	8003b70 <__malloc_lock>
 8003940:	4a1d      	ldr	r2, [pc, #116]	; (80039b8 <_free_r+0x90>)
 8003942:	6813      	ldr	r3, [r2, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d105      	bne.n	8003954 <_free_r+0x2c>
 8003948:	6063      	str	r3, [r4, #4]
 800394a:	6014      	str	r4, [r2, #0]
 800394c:	0028      	movs	r0, r5
 800394e:	f000 f917 	bl	8003b80 <__malloc_unlock>
 8003952:	bd70      	pop	{r4, r5, r6, pc}
 8003954:	42a3      	cmp	r3, r4
 8003956:	d908      	bls.n	800396a <_free_r+0x42>
 8003958:	6821      	ldr	r1, [r4, #0]
 800395a:	1860      	adds	r0, r4, r1
 800395c:	4283      	cmp	r3, r0
 800395e:	d1f3      	bne.n	8003948 <_free_r+0x20>
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	1841      	adds	r1, r0, r1
 8003966:	6021      	str	r1, [r4, #0]
 8003968:	e7ee      	b.n	8003948 <_free_r+0x20>
 800396a:	001a      	movs	r2, r3
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <_free_r+0x4e>
 8003972:	42a3      	cmp	r3, r4
 8003974:	d9f9      	bls.n	800396a <_free_r+0x42>
 8003976:	6811      	ldr	r1, [r2, #0]
 8003978:	1850      	adds	r0, r2, r1
 800397a:	42a0      	cmp	r0, r4
 800397c:	d10b      	bne.n	8003996 <_free_r+0x6e>
 800397e:	6820      	ldr	r0, [r4, #0]
 8003980:	1809      	adds	r1, r1, r0
 8003982:	1850      	adds	r0, r2, r1
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	4283      	cmp	r3, r0
 8003988:	d1e0      	bne.n	800394c <_free_r+0x24>
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	1841      	adds	r1, r0, r1
 8003990:	6011      	str	r1, [r2, #0]
 8003992:	6053      	str	r3, [r2, #4]
 8003994:	e7da      	b.n	800394c <_free_r+0x24>
 8003996:	42a0      	cmp	r0, r4
 8003998:	d902      	bls.n	80039a0 <_free_r+0x78>
 800399a:	230c      	movs	r3, #12
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	e7d5      	b.n	800394c <_free_r+0x24>
 80039a0:	6821      	ldr	r1, [r4, #0]
 80039a2:	1860      	adds	r0, r4, r1
 80039a4:	4283      	cmp	r3, r0
 80039a6:	d103      	bne.n	80039b0 <_free_r+0x88>
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	1841      	adds	r1, r0, r1
 80039ae:	6021      	str	r1, [r4, #0]
 80039b0:	6063      	str	r3, [r4, #4]
 80039b2:	6054      	str	r4, [r2, #4]
 80039b4:	e7ca      	b.n	800394c <_free_r+0x24>
 80039b6:	46c0      	nop			; (mov r8, r8)
 80039b8:	20000318 	.word	0x20000318

080039bc <sbrk_aligned>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4e0f      	ldr	r6, [pc, #60]	; (80039fc <sbrk_aligned+0x40>)
 80039c0:	000d      	movs	r5, r1
 80039c2:	6831      	ldr	r1, [r6, #0]
 80039c4:	0004      	movs	r4, r0
 80039c6:	2900      	cmp	r1, #0
 80039c8:	d102      	bne.n	80039d0 <sbrk_aligned+0x14>
 80039ca:	f000 f8bf 	bl	8003b4c <_sbrk_r>
 80039ce:	6030      	str	r0, [r6, #0]
 80039d0:	0029      	movs	r1, r5
 80039d2:	0020      	movs	r0, r4
 80039d4:	f000 f8ba 	bl	8003b4c <_sbrk_r>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d00a      	beq.n	80039f2 <sbrk_aligned+0x36>
 80039dc:	2303      	movs	r3, #3
 80039de:	1cc5      	adds	r5, r0, #3
 80039e0:	439d      	bics	r5, r3
 80039e2:	42a8      	cmp	r0, r5
 80039e4:	d007      	beq.n	80039f6 <sbrk_aligned+0x3a>
 80039e6:	1a29      	subs	r1, r5, r0
 80039e8:	0020      	movs	r0, r4
 80039ea:	f000 f8af 	bl	8003b4c <_sbrk_r>
 80039ee:	1c43      	adds	r3, r0, #1
 80039f0:	d101      	bne.n	80039f6 <sbrk_aligned+0x3a>
 80039f2:	2501      	movs	r5, #1
 80039f4:	426d      	negs	r5, r5
 80039f6:	0028      	movs	r0, r5
 80039f8:	bd70      	pop	{r4, r5, r6, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	2000031c 	.word	0x2000031c

08003a00 <_malloc_r>:
 8003a00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a02:	2203      	movs	r2, #3
 8003a04:	1ccb      	adds	r3, r1, #3
 8003a06:	4393      	bics	r3, r2
 8003a08:	3308      	adds	r3, #8
 8003a0a:	0006      	movs	r6, r0
 8003a0c:	001f      	movs	r7, r3
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d232      	bcs.n	8003a78 <_malloc_r+0x78>
 8003a12:	270c      	movs	r7, #12
 8003a14:	42b9      	cmp	r1, r7
 8003a16:	d831      	bhi.n	8003a7c <_malloc_r+0x7c>
 8003a18:	0030      	movs	r0, r6
 8003a1a:	f000 f8a9 	bl	8003b70 <__malloc_lock>
 8003a1e:	4d32      	ldr	r5, [pc, #200]	; (8003ae8 <_malloc_r+0xe8>)
 8003a20:	682b      	ldr	r3, [r5, #0]
 8003a22:	001c      	movs	r4, r3
 8003a24:	2c00      	cmp	r4, #0
 8003a26:	d12e      	bne.n	8003a86 <_malloc_r+0x86>
 8003a28:	0039      	movs	r1, r7
 8003a2a:	0030      	movs	r0, r6
 8003a2c:	f7ff ffc6 	bl	80039bc <sbrk_aligned>
 8003a30:	0004      	movs	r4, r0
 8003a32:	1c43      	adds	r3, r0, #1
 8003a34:	d11e      	bne.n	8003a74 <_malloc_r+0x74>
 8003a36:	682c      	ldr	r4, [r5, #0]
 8003a38:	0025      	movs	r5, r4
 8003a3a:	2d00      	cmp	r5, #0
 8003a3c:	d14a      	bne.n	8003ad4 <_malloc_r+0xd4>
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	0029      	movs	r1, r5
 8003a42:	18e3      	adds	r3, r4, r3
 8003a44:	0030      	movs	r0, r6
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	f000 f880 	bl	8003b4c <_sbrk_r>
 8003a4c:	9b01      	ldr	r3, [sp, #4]
 8003a4e:	4283      	cmp	r3, r0
 8003a50:	d143      	bne.n	8003ada <_malloc_r+0xda>
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	3703      	adds	r7, #3
 8003a56:	1aff      	subs	r7, r7, r3
 8003a58:	2303      	movs	r3, #3
 8003a5a:	439f      	bics	r7, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	2f0c      	cmp	r7, #12
 8003a60:	d200      	bcs.n	8003a64 <_malloc_r+0x64>
 8003a62:	270c      	movs	r7, #12
 8003a64:	0039      	movs	r1, r7
 8003a66:	0030      	movs	r0, r6
 8003a68:	f7ff ffa8 	bl	80039bc <sbrk_aligned>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d034      	beq.n	8003ada <_malloc_r+0xda>
 8003a70:	6823      	ldr	r3, [r4, #0]
 8003a72:	19df      	adds	r7, r3, r7
 8003a74:	6027      	str	r7, [r4, #0]
 8003a76:	e013      	b.n	8003aa0 <_malloc_r+0xa0>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	dacb      	bge.n	8003a14 <_malloc_r+0x14>
 8003a7c:	230c      	movs	r3, #12
 8003a7e:	2500      	movs	r5, #0
 8003a80:	6033      	str	r3, [r6, #0]
 8003a82:	0028      	movs	r0, r5
 8003a84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a86:	6822      	ldr	r2, [r4, #0]
 8003a88:	1bd1      	subs	r1, r2, r7
 8003a8a:	d420      	bmi.n	8003ace <_malloc_r+0xce>
 8003a8c:	290b      	cmp	r1, #11
 8003a8e:	d917      	bls.n	8003ac0 <_malloc_r+0xc0>
 8003a90:	19e2      	adds	r2, r4, r7
 8003a92:	6027      	str	r7, [r4, #0]
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	d111      	bne.n	8003abc <_malloc_r+0xbc>
 8003a98:	602a      	str	r2, [r5, #0]
 8003a9a:	6863      	ldr	r3, [r4, #4]
 8003a9c:	6011      	str	r1, [r2, #0]
 8003a9e:	6053      	str	r3, [r2, #4]
 8003aa0:	0030      	movs	r0, r6
 8003aa2:	0025      	movs	r5, r4
 8003aa4:	f000 f86c 	bl	8003b80 <__malloc_unlock>
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	350b      	adds	r5, #11
 8003aac:	1d23      	adds	r3, r4, #4
 8003aae:	4395      	bics	r5, r2
 8003ab0:	1aea      	subs	r2, r5, r3
 8003ab2:	429d      	cmp	r5, r3
 8003ab4:	d0e5      	beq.n	8003a82 <_malloc_r+0x82>
 8003ab6:	1b5b      	subs	r3, r3, r5
 8003ab8:	50a3      	str	r3, [r4, r2]
 8003aba:	e7e2      	b.n	8003a82 <_malloc_r+0x82>
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	e7ec      	b.n	8003a9a <_malloc_r+0x9a>
 8003ac0:	6862      	ldr	r2, [r4, #4]
 8003ac2:	42a3      	cmp	r3, r4
 8003ac4:	d101      	bne.n	8003aca <_malloc_r+0xca>
 8003ac6:	602a      	str	r2, [r5, #0]
 8003ac8:	e7ea      	b.n	8003aa0 <_malloc_r+0xa0>
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	e7e8      	b.n	8003aa0 <_malloc_r+0xa0>
 8003ace:	0023      	movs	r3, r4
 8003ad0:	6864      	ldr	r4, [r4, #4]
 8003ad2:	e7a7      	b.n	8003a24 <_malloc_r+0x24>
 8003ad4:	002c      	movs	r4, r5
 8003ad6:	686d      	ldr	r5, [r5, #4]
 8003ad8:	e7af      	b.n	8003a3a <_malloc_r+0x3a>
 8003ada:	230c      	movs	r3, #12
 8003adc:	0030      	movs	r0, r6
 8003ade:	6033      	str	r3, [r6, #0]
 8003ae0:	f000 f84e 	bl	8003b80 <__malloc_unlock>
 8003ae4:	e7cd      	b.n	8003a82 <_malloc_r+0x82>
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	20000318 	.word	0x20000318

08003aec <_realloc_r>:
 8003aec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003aee:	0007      	movs	r7, r0
 8003af0:	000e      	movs	r6, r1
 8003af2:	0014      	movs	r4, r2
 8003af4:	2900      	cmp	r1, #0
 8003af6:	d105      	bne.n	8003b04 <_realloc_r+0x18>
 8003af8:	0011      	movs	r1, r2
 8003afa:	f7ff ff81 	bl	8003a00 <_malloc_r>
 8003afe:	0005      	movs	r5, r0
 8003b00:	0028      	movs	r0, r5
 8003b02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b04:	2a00      	cmp	r2, #0
 8003b06:	d103      	bne.n	8003b10 <_realloc_r+0x24>
 8003b08:	f7ff ff0e 	bl	8003928 <_free_r>
 8003b0c:	0025      	movs	r5, r4
 8003b0e:	e7f7      	b.n	8003b00 <_realloc_r+0x14>
 8003b10:	f000 f83e 	bl	8003b90 <_malloc_usable_size_r>
 8003b14:	9001      	str	r0, [sp, #4]
 8003b16:	4284      	cmp	r4, r0
 8003b18:	d803      	bhi.n	8003b22 <_realloc_r+0x36>
 8003b1a:	0035      	movs	r5, r6
 8003b1c:	0843      	lsrs	r3, r0, #1
 8003b1e:	42a3      	cmp	r3, r4
 8003b20:	d3ee      	bcc.n	8003b00 <_realloc_r+0x14>
 8003b22:	0021      	movs	r1, r4
 8003b24:	0038      	movs	r0, r7
 8003b26:	f7ff ff6b 	bl	8003a00 <_malloc_r>
 8003b2a:	1e05      	subs	r5, r0, #0
 8003b2c:	d0e8      	beq.n	8003b00 <_realloc_r+0x14>
 8003b2e:	9b01      	ldr	r3, [sp, #4]
 8003b30:	0022      	movs	r2, r4
 8003b32:	429c      	cmp	r4, r3
 8003b34:	d900      	bls.n	8003b38 <_realloc_r+0x4c>
 8003b36:	001a      	movs	r2, r3
 8003b38:	0031      	movs	r1, r6
 8003b3a:	0028      	movs	r0, r5
 8003b3c:	f7ff fed7 	bl	80038ee <memcpy>
 8003b40:	0031      	movs	r1, r6
 8003b42:	0038      	movs	r0, r7
 8003b44:	f7ff fef0 	bl	8003928 <_free_r>
 8003b48:	e7da      	b.n	8003b00 <_realloc_r+0x14>
	...

08003b4c <_sbrk_r>:
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	b570      	push	{r4, r5, r6, lr}
 8003b50:	4d06      	ldr	r5, [pc, #24]	; (8003b6c <_sbrk_r+0x20>)
 8003b52:	0004      	movs	r4, r0
 8003b54:	0008      	movs	r0, r1
 8003b56:	602b      	str	r3, [r5, #0]
 8003b58:	f7fc ffda 	bl	8000b10 <_sbrk>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d103      	bne.n	8003b68 <_sbrk_r+0x1c>
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d000      	beq.n	8003b68 <_sbrk_r+0x1c>
 8003b66:	6023      	str	r3, [r4, #0]
 8003b68:	bd70      	pop	{r4, r5, r6, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	20000320 	.word	0x20000320

08003b70 <__malloc_lock>:
 8003b70:	b510      	push	{r4, lr}
 8003b72:	4802      	ldr	r0, [pc, #8]	; (8003b7c <__malloc_lock+0xc>)
 8003b74:	f000 f814 	bl	8003ba0 <__retarget_lock_acquire_recursive>
 8003b78:	bd10      	pop	{r4, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	20000324 	.word	0x20000324

08003b80 <__malloc_unlock>:
 8003b80:	b510      	push	{r4, lr}
 8003b82:	4802      	ldr	r0, [pc, #8]	; (8003b8c <__malloc_unlock+0xc>)
 8003b84:	f000 f80d 	bl	8003ba2 <__retarget_lock_release_recursive>
 8003b88:	bd10      	pop	{r4, pc}
 8003b8a:	46c0      	nop			; (mov r8, r8)
 8003b8c:	20000324 	.word	0x20000324

08003b90 <_malloc_usable_size_r>:
 8003b90:	1f0b      	subs	r3, r1, #4
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	1f18      	subs	r0, r3, #4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	da01      	bge.n	8003b9e <_malloc_usable_size_r+0xe>
 8003b9a:	580b      	ldr	r3, [r1, r0]
 8003b9c:	18c0      	adds	r0, r0, r3
 8003b9e:	4770      	bx	lr

08003ba0 <__retarget_lock_acquire_recursive>:
 8003ba0:	4770      	bx	lr

08003ba2 <__retarget_lock_release_recursive>:
 8003ba2:	4770      	bx	lr

08003ba4 <_init>:
 8003ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba6:	46c0      	nop			; (mov r8, r8)
 8003ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003baa:	bc08      	pop	{r3}
 8003bac:	469e      	mov	lr, r3
 8003bae:	4770      	bx	lr

08003bb0 <_fini>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr
