
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d4c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08002e04  08002e04  00012e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e8c  08002e8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e8c  08002e8c  00012e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e90  08002e90  00012e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08002ea0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08002ea0  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010107  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028b7  00000000  00000000  0003013b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cb8  00000000  00000000  000329f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  000336b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c3a  00000000  00000000  00034240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128dd  00000000  00000000  00036e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848ee  00000000  00000000  00049757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce045  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bc4  00000000  00000000  000ce098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002dec 	.word	0x08002dec

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002dec 	.word	0x08002dec

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003f2:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_DMA_Init+0x38>)
 80003f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_DMA_Init+0x38>)
 80003f8:	2101      	movs	r1, #1
 80003fa:	430a      	orrs	r2, r1
 80003fc:	639a      	str	r2, [r3, #56]	; 0x38
 80003fe:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_DMA_Init+0x38>)
 8000400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000402:	2201      	movs	r2, #1
 8000404:	4013      	ands	r3, r2
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2100      	movs	r1, #0
 800040e:	2009      	movs	r0, #9
 8000410:	f000 fc32 	bl	8000c78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000414:	2009      	movs	r0, #9
 8000416:	f000 fc44 	bl	8000ca2 <HAL_NVIC_EnableIRQ>

}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	46bd      	mov	sp, r7
 800041e:	b002      	add	sp, #8
 8000420:	bd80      	pop	{r7, pc}
 8000422:	46c0      	nop			; (mov r8, r8)
 8000424:	40021000 	.word	0x40021000

08000428 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000428:	b590      	push	{r4, r7, lr}
 800042a:	b089      	sub	sp, #36	; 0x24
 800042c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042e:	240c      	movs	r4, #12
 8000430:	193b      	adds	r3, r7, r4
 8000432:	0018      	movs	r0, r3
 8000434:	2314      	movs	r3, #20
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f002 fccf 	bl	8002ddc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_GPIO_Init+0x88>)
 8000440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000442:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_GPIO_Init+0x88>)
 8000444:	2102      	movs	r1, #2
 8000446:	430a      	orrs	r2, r1
 8000448:	635a      	str	r2, [r3, #52]	; 0x34
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_GPIO_Init+0x88>)
 800044c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800044e:	2202      	movs	r2, #2
 8000450:	4013      	ands	r3, r2
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000456:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_GPIO_Init+0x88>)
 8000458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800045a:	4b15      	ldr	r3, [pc, #84]	; (80004b0 <MX_GPIO_Init+0x88>)
 800045c:	2101      	movs	r1, #1
 800045e:	430a      	orrs	r2, r1
 8000460:	635a      	str	r2, [r3, #52]	; 0x34
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <MX_GPIO_Init+0x88>)
 8000464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000466:	2201      	movs	r2, #1
 8000468:	4013      	ands	r3, r2
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_Selektor_GPIO_Port, MAX485_Selektor_Pin, GPIO_PIN_RESET);
 800046e:	2380      	movs	r3, #128	; 0x80
 8000470:	0199      	lsls	r1, r3, #6
 8000472:	23a0      	movs	r3, #160	; 0xa0
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2200      	movs	r2, #0
 8000478:	0018      	movs	r0, r3
 800047a:	f000 ff1f 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_Selektor_Pin;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2280      	movs	r2, #128	; 0x80
 8000482:	0192      	lsls	r2, r2, #6
 8000484:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2201      	movs	r2, #1
 800048a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	193b      	adds	r3, r7, r4
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MAX485_Selektor_GPIO_Port, &GPIO_InitStruct);
 8000498:	193a      	adds	r2, r7, r4
 800049a:	23a0      	movs	r3, #160	; 0xa0
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	0011      	movs	r1, r2
 80004a0:	0018      	movs	r0, r3
 80004a2:	f000 fda7 	bl	8000ff4 <HAL_GPIO_Init>

}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b009      	add	sp, #36	; 0x24
 80004ac:	bd90      	pop	{r4, r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	40021000 	.word	0x40021000

080004b4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <MX_I2C2_Init+0x74>)
 80004ba:	4a1c      	ldr	r2, [pc, #112]	; (800052c <MX_I2C2_Init+0x78>)
 80004bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80004be:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <MX_I2C2_Init+0x74>)
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <MX_I2C2_Init+0x7c>)
 80004c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80004c4:	4b18      	ldr	r3, [pc, #96]	; (8000528 <MX_I2C2_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004ca:	4b17      	ldr	r3, [pc, #92]	; (8000528 <MX_I2C2_Init+0x74>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004d0:	4b15      	ldr	r3, [pc, #84]	; (8000528 <MX_I2C2_Init+0x74>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80004d6:	4b14      	ldr	r3, [pc, #80]	; (8000528 <MX_I2C2_Init+0x74>)
 80004d8:	2200      	movs	r2, #0
 80004da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <MX_I2C2_Init+0x74>)
 80004de:	2200      	movs	r2, #0
 80004e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <MX_I2C2_Init+0x74>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <MX_I2C2_Init+0x74>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <MX_I2C2_Init+0x74>)
 80004f0:	0018      	movs	r0, r3
 80004f2:	f000 ff01 	bl	80012f8 <HAL_I2C_Init>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80004fa:	f000 f8c4 	bl	8000686 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <MX_I2C2_Init+0x74>)
 8000500:	2100      	movs	r1, #0
 8000502:	0018      	movs	r0, r3
 8000504:	f000 ff8e 	bl	8001424 <HAL_I2CEx_ConfigAnalogFilter>
 8000508:	1e03      	subs	r3, r0, #0
 800050a:	d001      	beq.n	8000510 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800050c:	f000 f8bb 	bl	8000686 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <MX_I2C2_Init+0x74>)
 8000512:	2100      	movs	r1, #0
 8000514:	0018      	movs	r0, r3
 8000516:	f000 ffd1 	bl	80014bc <HAL_I2CEx_ConfigDigitalFilter>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800051e:	f000 f8b2 	bl	8000686 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000028 	.word	0x20000028
 800052c:	40005800 	.word	0x40005800
 8000530:	00303d5b 	.word	0x00303d5b

08000534 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b08b      	sub	sp, #44	; 0x2c
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053c:	2414      	movs	r4, #20
 800053e:	193b      	adds	r3, r7, r4
 8000540:	0018      	movs	r0, r3
 8000542:	2314      	movs	r3, #20
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f002 fc48 	bl	8002ddc <memset>
  if(i2cHandle->Instance==I2C2)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a1c      	ldr	r2, [pc, #112]	; (80005c4 <HAL_I2C_MspInit+0x90>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d131      	bne.n	80005ba <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b1c      	ldr	r3, [pc, #112]	; (80005c8 <HAL_I2C_MspInit+0x94>)
 8000558:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800055a:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <HAL_I2C_MspInit+0x94>)
 800055c:	2101      	movs	r1, #1
 800055e:	430a      	orrs	r2, r1
 8000560:	635a      	str	r2, [r3, #52]	; 0x34
 8000562:	4b19      	ldr	r3, [pc, #100]	; (80005c8 <HAL_I2C_MspInit+0x94>)
 8000564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000566:	2201      	movs	r2, #1
 8000568:	4013      	ands	r3, r2
 800056a:	613b      	str	r3, [r7, #16]
 800056c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	22c0      	movs	r2, #192	; 0xc0
 8000572:	0152      	lsls	r2, r2, #5
 8000574:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000576:	0021      	movs	r1, r4
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2212      	movs	r2, #18
 800057c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2206      	movs	r2, #6
 800058e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000590:	187a      	adds	r2, r7, r1
 8000592:	23a0      	movs	r3, #160	; 0xa0
 8000594:	05db      	lsls	r3, r3, #23
 8000596:	0011      	movs	r1, r2
 8000598:	0018      	movs	r0, r3
 800059a:	f000 fd2b 	bl	8000ff4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800059e:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <HAL_I2C_MspInit+0x94>)
 80005a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005a2:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <HAL_I2C_MspInit+0x94>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	03c9      	lsls	r1, r1, #15
 80005a8:	430a      	orrs	r2, r1
 80005aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_I2C_MspInit+0x94>)
 80005ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	03db      	lsls	r3, r3, #15
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b00b      	add	sp, #44	; 0x2c
 80005c0:	bd90      	pop	{r4, r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	40005800 	.word	0x40005800
 80005c8:	40021000 	.word	0x40021000

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 fa20 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 f80b 	bl	80005ee <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f7ff ff26 	bl	8000428 <MX_GPIO_Init>
  MX_DMA_Init();
 80005dc:	f7ff ff06 	bl	80003ec <MX_DMA_Init>
  MX_I2C2_Init();
 80005e0:	f7ff ff68 	bl	80004b4 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 f90e 	bl	8000804 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80005e8:	f000 f852 	bl	8000690 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x20>

080005ee <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ee:	b590      	push	{r4, r7, lr}
 80005f0:	b093      	sub	sp, #76	; 0x4c
 80005f2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f4:	2414      	movs	r4, #20
 80005f6:	193b      	adds	r3, r7, r4
 80005f8:	0018      	movs	r0, r3
 80005fa:	2334      	movs	r3, #52	; 0x34
 80005fc:	001a      	movs	r2, r3
 80005fe:	2100      	movs	r1, #0
 8000600:	f002 fbec 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	0018      	movs	r0, r3
 8000608:	2310      	movs	r3, #16
 800060a:	001a      	movs	r2, r3
 800060c:	2100      	movs	r1, #0
 800060e:	f002 fbe5 	bl	8002ddc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	0018      	movs	r0, r3
 8000618:	f000 ff9c 	bl	8001554 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800061c:	193b      	adds	r3, r7, r4
 800061e:	220a      	movs	r2, #10
 8000620:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	193b      	adds	r3, r7, r4
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	0052      	lsls	r2, r2, #1
 8000628:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800062a:	0021      	movs	r1, r4
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2240      	movs	r2, #64	; 0x40
 8000636:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	187b      	adds	r3, r7, r1
 8000646:	0018      	movs	r0, r3
 8000648:	f000 ffd0 	bl	80015ec <HAL_RCC_OscConfig>
 800064c:	1e03      	subs	r3, r0, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000650:	f000 f819 	bl	8000686 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2207      	movs	r2, #7
 8000658:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2200      	movs	r2, #0
 800065e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2100      	movs	r1, #0
 8000670:	0018      	movs	r0, r3
 8000672:	f001 facb 	bl	8001c0c <HAL_RCC_ClockConfig>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x90>
  {
    Error_Handler();
 800067a:	f000 f804 	bl	8000686 <Error_Handler>
  }
}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	b013      	add	sp, #76	; 0x4c
 8000684:	bd90      	pop	{r4, r7, pc}

08000686 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068a:	b672      	cpsid	i
}
 800068c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800068e:	e7fe      	b.n	800068e <Error_Handler+0x8>

08000690 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_RTC_Init+0x54>)
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <MX_RTC_Init+0x58>)
 8000698:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_RTC_Init+0x54>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_RTC_Init+0x54>)
 80006a2:	227f      	movs	r2, #127	; 0x7f
 80006a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_RTC_Init+0x54>)
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	; (80006e4 <MX_RTC_Init+0x54>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <MX_RTC_Init+0x54>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	; (80006e4 <MX_RTC_Init+0x54>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <MX_RTC_Init+0x54>)
 80006c0:	2280      	movs	r2, #128	; 0x80
 80006c2:	05d2      	lsls	r2, r2, #23
 80006c4:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <MX_RTC_Init+0x54>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006cc:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <MX_RTC_Init+0x54>)
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 fd6c 	bl	80021ac <HAL_RTC_Init>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d001      	beq.n	80006dc <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80006d8:	f7ff ffd5 	bl	8000686 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	2000007c 	.word	0x2000007c
 80006e8:	40002800 	.word	0x40002800

080006ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b08b      	sub	sp, #44	; 0x2c
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f4:	2410      	movs	r4, #16
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	0018      	movs	r0, r3
 80006fa:	2318      	movs	r3, #24
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f002 fb6c 	bl	8002ddc <memset>
  if(rtcHandle->Instance==RTC)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a15      	ldr	r2, [pc, #84]	; (8000760 <HAL_RTC_MspInit+0x74>)
 800070a:	4293      	cmp	r3, r2
 800070c:	d124      	bne.n	8000758 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800070e:	193b      	adds	r3, r7, r4
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	0292      	lsls	r2, r2, #10
 8000714:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000716:	193b      	adds	r3, r7, r4
 8000718:	2280      	movs	r2, #128	; 0x80
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071e:	193b      	adds	r3, r7, r4
 8000720:	0018      	movs	r0, r3
 8000722:	f001 fc1d 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 8000726:	1e03      	subs	r3, r0, #0
 8000728:	d001      	beq.n	800072e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800072a:	f7ff ffac 	bl	8000686 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <HAL_RTC_MspInit+0x78>)
 8000730:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000732:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <HAL_RTC_MspInit+0x78>)
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	0209      	lsls	r1, r1, #8
 8000738:	430a      	orrs	r2, r1
 800073a:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800073c:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_RTC_MspInit+0x78>)
 800073e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_RTC_MspInit+0x78>)
 8000742:	2180      	movs	r1, #128	; 0x80
 8000744:	00c9      	lsls	r1, r1, #3
 8000746:	430a      	orrs	r2, r1
 8000748:	63da      	str	r2, [r3, #60]	; 0x3c
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_RTC_MspInit+0x78>)
 800074c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	00db      	lsls	r3, r3, #3
 8000752:	4013      	ands	r3, r2
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000758:	46c0      	nop			; (mov r8, r8)
 800075a:	46bd      	mov	sp, r7
 800075c:	b00b      	add	sp, #44	; 0x2c
 800075e:	bd90      	pop	{r4, r7, pc}
 8000760:	40002800 	.word	0x40002800
 8000764:	40021000 	.word	0x40021000

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <HAL_MspInit+0x44>)
 8000770:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <HAL_MspInit+0x44>)
 8000774:	2101      	movs	r1, #1
 8000776:	430a      	orrs	r2, r1
 8000778:	641a      	str	r2, [r3, #64]	; 0x40
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <HAL_MspInit+0x44>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077e:	2201      	movs	r2, #1
 8000780:	4013      	ands	r3, r2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	4b09      	ldr	r3, [pc, #36]	; (80007ac <HAL_MspInit+0x44>)
 8000788:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_MspInit+0x44>)
 800078c:	2180      	movs	r1, #128	; 0x80
 800078e:	0549      	lsls	r1, r1, #21
 8000790:	430a      	orrs	r2, r1
 8000792:	63da      	str	r2, [r3, #60]	; 0x3c
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <HAL_MspInit+0x44>)
 8000796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000798:	2380      	movs	r3, #128	; 0x80
 800079a:	055b      	lsls	r3, r3, #21
 800079c:	4013      	ands	r3, r2
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b002      	add	sp, #8
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40021000 	.word	0x40021000

080007b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <NMI_Handler+0x4>

080007b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <HardFault_Handler+0x4>

080007bc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007c0:	46c0      	nop			; (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d4:	f000 f988 	bl	8000ae8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d8:	46c0      	nop			; (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80007e4:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <DMA1_Channel1_IRQHandler+0x14>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f000 fb02 	bl	8000df0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	2000013c 	.word	0x2000013c

080007f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_USART1_UART_Init+0x94>)
 800080a:	4a24      	ldr	r2, [pc, #144]	; (800089c <MX_USART1_UART_Init+0x98>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080e:	4b22      	ldr	r3, [pc, #136]	; (8000898 <MX_USART1_UART_Init+0x94>)
 8000810:	22e1      	movs	r2, #225	; 0xe1
 8000812:	0252      	lsls	r2, r2, #9
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_USART1_UART_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_USART1_UART_Init+0x94>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_USART1_UART_Init+0x94>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_USART1_UART_Init+0x94>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_USART1_UART_Init+0x94>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_USART1_UART_Init+0x94>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_USART1_UART_Init+0x94>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_USART1_UART_Init+0x94>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_USART1_UART_Init+0x94>)
 8000848:	2200      	movs	r2, #0
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_USART1_UART_Init+0x94>)
 800084e:	0018      	movs	r0, r3
 8000850:	f001 fdfc 	bl	800244c <HAL_UART_Init>
 8000854:	1e03      	subs	r3, r0, #0
 8000856:	d001      	beq.n	800085c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000858:	f7ff ff15 	bl	8000686 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_USART1_UART_Init+0x94>)
 800085e:	2100      	movs	r1, #0
 8000860:	0018      	movs	r0, r3
 8000862:	f002 f9b7 	bl	8002bd4 <HAL_UARTEx_SetTxFifoThreshold>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800086a:	f7ff ff0c 	bl	8000686 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_USART1_UART_Init+0x94>)
 8000870:	2100      	movs	r1, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f002 f9ee 	bl	8002c54 <HAL_UARTEx_SetRxFifoThreshold>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800087c:	f7ff ff03 	bl	8000686 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_USART1_UART_Init+0x94>)
 8000882:	0018      	movs	r0, r3
 8000884:	f002 f96c 	bl	8002b60 <HAL_UARTEx_DisableFifoMode>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800088c:	f7ff fefb 	bl	8000686 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000890:	46c0      	nop			; (mov r8, r8)
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	200000a8 	.word	0x200000a8
 800089c:	40013800 	.word	0x40013800

080008a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008a0:	b590      	push	{r4, r7, lr}
 80008a2:	b091      	sub	sp, #68	; 0x44
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	232c      	movs	r3, #44	; 0x2c
 80008aa:	18fb      	adds	r3, r7, r3
 80008ac:	0018      	movs	r0, r3
 80008ae:	2314      	movs	r3, #20
 80008b0:	001a      	movs	r2, r3
 80008b2:	2100      	movs	r1, #0
 80008b4:	f002 fa92 	bl	8002ddc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	2414      	movs	r4, #20
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	0018      	movs	r0, r3
 80008be:	2318      	movs	r3, #24
 80008c0:	001a      	movs	r2, r3
 80008c2:	2100      	movs	r1, #0
 80008c4:	f002 fa8a 	bl	8002ddc <memset>
  if(uartHandle->Instance==USART1)
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a37      	ldr	r2, [pc, #220]	; (80009ac <HAL_UART_MspInit+0x10c>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d167      	bne.n	80009a2 <HAL_UART_MspInit+0x102>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	f001 fb3d 	bl	8001f60 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	1e03      	subs	r3, r0, #0
 80008e8:	d001      	beq.n	80008ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008ea:	f7ff fecc 	bl	8000686 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <HAL_UART_MspInit+0x110>)
 80008f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008f2:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <HAL_UART_MspInit+0x110>)
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	01c9      	lsls	r1, r1, #7
 80008f8:	430a      	orrs	r2, r1
 80008fa:	641a      	str	r2, [r3, #64]	; 0x40
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <HAL_UART_MspInit+0x110>)
 80008fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000900:	2380      	movs	r3, #128	; 0x80
 8000902:	01db      	lsls	r3, r3, #7
 8000904:	4013      	ands	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
 8000908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <HAL_UART_MspInit+0x110>)
 800090c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <HAL_UART_MspInit+0x110>)
 8000910:	2102      	movs	r1, #2
 8000912:	430a      	orrs	r2, r1
 8000914:	635a      	str	r2, [r3, #52]	; 0x34
 8000916:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <HAL_UART_MspInit+0x110>)
 8000918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800091a:	2202      	movs	r2, #2
 800091c:	4013      	ands	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000922:	212c      	movs	r1, #44	; 0x2c
 8000924:	187b      	adds	r3, r7, r1
 8000926:	22c0      	movs	r2, #192	; 0xc0
 8000928:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2202      	movs	r2, #2
 800092e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	187b      	adds	r3, r7, r1
 8000944:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <HAL_UART_MspInit+0x114>)
 8000946:	0019      	movs	r1, r3
 8000948:	0010      	movs	r0, r2
 800094a:	f000 fb53 	bl	8000ff4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel1;
 800094e:	4b1a      	ldr	r3, [pc, #104]	; (80009b8 <HAL_UART_MspInit+0x118>)
 8000950:	4a1a      	ldr	r2, [pc, #104]	; (80009bc <HAL_UART_MspInit+0x11c>)
 8000952:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <HAL_UART_MspInit+0x118>)
 8000956:	2232      	movs	r2, #50	; 0x32
 8000958:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_UART_MspInit+0x118>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <HAL_UART_MspInit+0x118>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_UART_MspInit+0x118>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <HAL_UART_MspInit+0x118>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_UART_MspInit+0x118>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <HAL_UART_MspInit+0x118>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_UART_MspInit+0x118>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <HAL_UART_MspInit+0x118>)
 8000986:	0018      	movs	r0, r3
 8000988:	f000 f9a8 	bl	8000cdc <HAL_DMA_Init>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0xf4>
    {
      Error_Handler();
 8000990:	f7ff fe79 	bl	8000686 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <HAL_UART_MspInit+0x118>)
 800099a:	505a      	str	r2, [r3, r1]
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_UART_MspInit+0x118>)
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b011      	add	sp, #68	; 0x44
 80009a8:	bd90      	pop	{r4, r7, pc}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	40013800 	.word	0x40013800
 80009b0:	40021000 	.word	0x40021000
 80009b4:	50000400 	.word	0x50000400
 80009b8:	2000013c 	.word	0x2000013c
 80009bc:	40020008 	.word	0x40020008

080009c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80009c4:	f7ff ff18 	bl	80007f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <LoopForever+0x6>)
  ldr r1, =_edata
 80009ca:	490d      	ldr	r1, [pc, #52]	; (8000a00 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009cc:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <LoopForever+0xe>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009e0:	4c0a      	ldr	r4, [pc, #40]	; (8000a0c <LoopForever+0x16>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ee:	f002 f9d1 	bl	8002d94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80009f2:	f7ff fdeb 	bl	80005cc <main>

080009f6 <LoopForever>:

LoopForever:
  b LoopForever
 80009f6:	e7fe      	b.n	80009f6 <LoopForever>
  ldr   r0, =_estack
 80009f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a04:	08002e94 	.word	0x08002e94
  ldr r2, =_sbss
 8000a08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a0c:	2000019c 	.word	0x2000019c

08000a10 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1a:	1dfb      	adds	r3, r7, #7
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x3c>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <HAL_Init+0x3c>)
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	0049      	lsls	r1, r1, #1
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a2e:	2003      	movs	r0, #3
 8000a30:	f000 f810 	bl	8000a54 <HAL_InitTick>
 8000a34:	1e03      	subs	r3, r0, #0
 8000a36:	d003      	beq.n	8000a40 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	701a      	strb	r2, [r3, #0]
 8000a3e:	e001      	b.n	8000a44 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a40:	f7ff fe92 	bl	8000768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	781b      	ldrb	r3, [r3, #0]
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40022000 	.word	0x40022000

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	18fb      	adds	r3, r7, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a64:	4b1d      	ldr	r3, [pc, #116]	; (8000adc <HAL_InitTick+0x88>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d02b      	beq.n	8000ac4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <HAL_InitTick+0x8c>)
 8000a6e:	681c      	ldr	r4, [r3, #0]
 8000a70:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_InitTick+0x88>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	0019      	movs	r1, r3
 8000a76:	23fa      	movs	r3, #250	; 0xfa
 8000a78:	0098      	lsls	r0, r3, #2
 8000a7a:	f7ff fb41 	bl	8000100 <__udivsi3>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	0019      	movs	r1, r3
 8000a82:	0020      	movs	r0, r4
 8000a84:	f7ff fb3c 	bl	8000100 <__udivsi3>
 8000a88:	0003      	movs	r3, r0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 f919 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d112      	bne.n	8000aba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d80a      	bhi.n	8000ab0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	425b      	negs	r3, r3
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 f8e8 	bl	8000c78 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_InitTick+0x90>)
 8000aaa:	687a      	ldr	r2, [r7, #4]
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	e00d      	b.n	8000acc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ab0:	230f      	movs	r3, #15
 8000ab2:	18fb      	adds	r3, r7, r3
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	e008      	b.n	8000acc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000aba:	230f      	movs	r3, #15
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	2201      	movs	r2, #1
 8000ac0:	701a      	strb	r2, [r3, #0]
 8000ac2:	e003      	b.n	8000acc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000acc:	230f      	movs	r3, #15
 8000ace:	18fb      	adds	r3, r7, r3
 8000ad0:	781b      	ldrb	r3, [r3, #0]
}
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b005      	add	sp, #20
 8000ad8:	bd90      	pop	{r4, r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	20000008 	.word	0x20000008
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aec:	4b05      	ldr	r3, [pc, #20]	; (8000b04 <HAL_IncTick+0x1c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	001a      	movs	r2, r3
 8000af2:	4b05      	ldr	r3, [pc, #20]	; (8000b08 <HAL_IncTick+0x20>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	18d2      	adds	r2, r2, r3
 8000af8:	4b03      	ldr	r3, [pc, #12]	; (8000b08 <HAL_IncTick+0x20>)
 8000afa:	601a      	str	r2, [r3, #0]
}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	20000008 	.word	0x20000008
 8000b08:	20000198 	.word	0x20000198

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <HAL_GetTick+0x10>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	0018      	movs	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			; (mov r8, r8)
 8000b1c:	20000198 	.word	0x20000198

08000b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	0002      	movs	r2, r0
 8000b28:	1dfb      	adds	r3, r7, #7
 8000b2a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b7f      	cmp	r3, #127	; 0x7f
 8000b32:	d809      	bhi.n	8000b48 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b34:	1dfb      	adds	r3, r7, #7
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	001a      	movs	r2, r3
 8000b3a:	231f      	movs	r3, #31
 8000b3c:	401a      	ands	r2, r3
 8000b3e:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_EnableIRQ+0x30>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	4091      	lsls	r1, r2
 8000b44:	000a      	movs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	e000e100 	.word	0xe000e100

08000b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	6039      	str	r1, [r7, #0]
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2b7f      	cmp	r3, #127	; 0x7f
 8000b68:	d828      	bhi.n	8000bbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b6a:	4a2f      	ldr	r2, [pc, #188]	; (8000c28 <__NVIC_SetPriority+0xd4>)
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	33c0      	adds	r3, #192	; 0xc0
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	589b      	ldr	r3, [r3, r2]
 8000b7a:	1dfa      	adds	r2, r7, #7
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	0011      	movs	r1, r2
 8000b80:	2203      	movs	r2, #3
 8000b82:	400a      	ands	r2, r1
 8000b84:	00d2      	lsls	r2, r2, #3
 8000b86:	21ff      	movs	r1, #255	; 0xff
 8000b88:	4091      	lsls	r1, r2
 8000b8a:	000a      	movs	r2, r1
 8000b8c:	43d2      	mvns	r2, r2
 8000b8e:	401a      	ands	r2, r3
 8000b90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	019b      	lsls	r3, r3, #6
 8000b96:	22ff      	movs	r2, #255	; 0xff
 8000b98:	401a      	ands	r2, r3
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	4003      	ands	r3, r0
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba8:	481f      	ldr	r0, [pc, #124]	; (8000c28 <__NVIC_SetPriority+0xd4>)
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	b25b      	sxtb	r3, r3
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	33c0      	adds	r3, #192	; 0xc0
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bba:	e031      	b.n	8000c20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <__NVIC_SetPriority+0xd8>)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	0019      	movs	r1, r3
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	400b      	ands	r3, r1
 8000bc8:	3b08      	subs	r3, #8
 8000bca:	089b      	lsrs	r3, r3, #2
 8000bcc:	3306      	adds	r3, #6
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	18d3      	adds	r3, r2, r3
 8000bd2:	3304      	adds	r3, #4
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	1dfa      	adds	r2, r7, #7
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	0011      	movs	r1, r2
 8000bdc:	2203      	movs	r2, #3
 8000bde:	400a      	ands	r2, r1
 8000be0:	00d2      	lsls	r2, r2, #3
 8000be2:	21ff      	movs	r1, #255	; 0xff
 8000be4:	4091      	lsls	r1, r2
 8000be6:	000a      	movs	r2, r1
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	401a      	ands	r2, r3
 8000bec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	019b      	lsls	r3, r3, #6
 8000bf2:	22ff      	movs	r2, #255	; 0xff
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	4003      	ands	r3, r0
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <__NVIC_SetPriority+0xd8>)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	001c      	movs	r4, r3
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	4023      	ands	r3, r4
 8000c10:	3b08      	subs	r3, #8
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	430a      	orrs	r2, r1
 8000c16:	3306      	adds	r3, #6
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	18c3      	adds	r3, r0, r3
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	601a      	str	r2, [r3, #0]
}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b003      	add	sp, #12
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	1e5a      	subs	r2, r3, #1
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	045b      	lsls	r3, r3, #17
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d301      	bcc.n	8000c48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c44:	2301      	movs	r3, #1
 8000c46:	e010      	b.n	8000c6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <SysTick_Config+0x44>)
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	3a01      	subs	r2, #1
 8000c4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c50:	2301      	movs	r3, #1
 8000c52:	425b      	negs	r3, r3
 8000c54:	2103      	movs	r1, #3
 8000c56:	0018      	movs	r0, r3
 8000c58:	f7ff ff7c 	bl	8000b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <SysTick_Config+0x44>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <SysTick_Config+0x44>)
 8000c64:	2207      	movs	r2, #7
 8000c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	e000e010 	.word	0xe000e010

08000c78 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	210f      	movs	r1, #15
 8000c84:	187b      	adds	r3, r7, r1
 8000c86:	1c02      	adds	r2, r0, #0
 8000c88:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	0011      	movs	r1, r2
 8000c94:	0018      	movs	r0, r3
 8000c96:	f7ff ff5d 	bl	8000b54 <__NVIC_SetPriority>
}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	b004      	add	sp, #16
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b082      	sub	sp, #8
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	0002      	movs	r2, r0
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b25b      	sxtb	r3, r3
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff ff33 	bl	8000b20 <__NVIC_EnableIRQ>
}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	b002      	add	sp, #8
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ffaf 	bl	8000c30 <SysTick_Config>
 8000cd2:	0003      	movs	r3, r0
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b002      	add	sp, #8
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d101      	bne.n	8000cee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e077      	b.n	8000dde <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a3d      	ldr	r2, [pc, #244]	; (8000de8 <HAL_DMA_Init+0x10c>)
 8000cf4:	4694      	mov	ip, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	2114      	movs	r1, #20
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fa00 	bl	8000100 <__udivsi3>
 8000d00:	0003      	movs	r3, r0
 8000d02:	009a      	lsls	r2, r3, #2
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2225      	movs	r2, #37	; 0x25
 8000d0c:	2102      	movs	r1, #2
 8000d0e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4934      	ldr	r1, [pc, #208]	; (8000dec <HAL_DMA_Init+0x110>)
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6819      	ldr	r1, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	689a      	ldr	r2, [r3, #8]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	68db      	ldr	r3, [r3, #12]
 8000d2e:	431a      	orrs	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	431a      	orrs	r2, r3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	695b      	ldr	r3, [r3, #20]
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	431a      	orrs	r2, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a1b      	ldr	r3, [r3, #32]
 8000d4c:	431a      	orrs	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	430a      	orrs	r2, r1
 8000d54:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f000 f8fb 	bl	8000f54 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	01db      	lsls	r3, r3, #7
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d102      	bne.n	8000d70 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685a      	ldr	r2, [r3, #4]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	213f      	movs	r1, #63	; 0x3f
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d82:	687a      	ldr	r2, [r7, #4]
 8000d84:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8000d86:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d011      	beq.n	8000db4 <HAL_DMA_Init+0xd8>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d80d      	bhi.n	8000db4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f000 f906 	bl	8000fac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	e008      	b.n	8000dc6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2225      	movs	r2, #37	; 0x25
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2224      	movs	r2, #36	; 0x24
 8000dd8:	2100      	movs	r1, #0
 8000dda:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
}
 8000dde:	0018      	movs	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	b002      	add	sp, #8
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	bffdfff8 	.word	0xbffdfff8
 8000dec:	ffff800f 	.word	0xffff800f

08000df0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b084      	sub	sp, #16
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000df8:	4b55      	ldr	r3, [pc, #340]	; (8000f50 <HAL_DMA_IRQHandler+0x160>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0a:	221c      	movs	r2, #28
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2204      	movs	r2, #4
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	68fa      	ldr	r2, [r7, #12]
 8000e16:	4013      	ands	r3, r2
 8000e18:	d027      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x7a>
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	4013      	ands	r3, r2
 8000e20:	d023      	beq.n	8000e6a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2220      	movs	r2, #32
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	d107      	bne.n	8000e3e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2104      	movs	r1, #4
 8000e3a:	438a      	bics	r2, r1
 8000e3c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000e3e:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <HAL_DMA_IRQHandler+0x160>)
 8000e40:	6859      	ldr	r1, [r3, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e46:	221c      	movs	r2, #28
 8000e48:	4013      	ands	r3, r2
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	4b40      	ldr	r3, [pc, #256]	; (8000f50 <HAL_DMA_IRQHandler+0x160>)
 8000e50:	430a      	orrs	r2, r1
 8000e52:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d100      	bne.n	8000e5e <HAL_DMA_IRQHandler+0x6e>
 8000e5c:	e073      	b.n	8000f46 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	0010      	movs	r0, r2
 8000e66:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000e68:	e06d      	b.n	8000f46 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	221c      	movs	r2, #28
 8000e70:	4013      	ands	r3, r2
 8000e72:	2202      	movs	r2, #2
 8000e74:	409a      	lsls	r2, r3
 8000e76:	0013      	movs	r3, r2
 8000e78:	68fa      	ldr	r2, [r7, #12]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d02e      	beq.n	8000edc <HAL_DMA_IRQHandler+0xec>
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	2202      	movs	r2, #2
 8000e82:	4013      	ands	r3, r2
 8000e84:	d02a      	beq.n	8000edc <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	4013      	ands	r3, r2
 8000e90:	d10b      	bne.n	8000eaa <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	210a      	movs	r1, #10
 8000e9e:	438a      	bics	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2225      	movs	r2, #37	; 0x25
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000eaa:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_DMA_IRQHandler+0x160>)
 8000eac:	6859      	ldr	r1, [r3, #4]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	221c      	movs	r2, #28
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	409a      	lsls	r2, r3
 8000eba:	4b25      	ldr	r3, [pc, #148]	; (8000f50 <HAL_DMA_IRQHandler+0x160>)
 8000ebc:	430a      	orrs	r2, r1
 8000ebe:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2224      	movs	r2, #36	; 0x24
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d03a      	beq.n	8000f46 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	0010      	movs	r0, r2
 8000ed8:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000eda:	e034      	b.n	8000f46 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	221c      	movs	r2, #28
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	68fa      	ldr	r2, [r7, #12]
 8000eec:	4013      	ands	r3, r2
 8000eee:	d02b      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x158>
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2208      	movs	r2, #8
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	d027      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	210e      	movs	r1, #14
 8000f04:	438a      	bics	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_DMA_IRQHandler+0x160>)
 8000f0a:	6859      	ldr	r1, [r3, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	221c      	movs	r2, #28
 8000f12:	4013      	ands	r3, r2
 8000f14:	2201      	movs	r2, #1
 8000f16:	409a      	lsls	r2, r3
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <HAL_DMA_IRQHandler+0x160>)
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2201      	movs	r2, #1
 8000f22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2225      	movs	r2, #37	; 0x25
 8000f28:	2101      	movs	r1, #1
 8000f2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2224      	movs	r2, #36	; 0x24
 8000f30:	2100      	movs	r1, #0
 8000f32:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d005      	beq.n	8000f48 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	0010      	movs	r0, r2
 8000f44:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46c0      	nop			; (mov r8, r8)
}
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	b004      	add	sp, #16
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40020000 	.word	0x40020000

08000f54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000f64:	4694      	mov	ip, r2
 8000f66:	4463      	add	r3, ip
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	001a      	movs	r2, r3
 8000f76:	23ff      	movs	r3, #255	; 0xff
 8000f78:	4013      	ands	r3, r2
 8000f7a:	3b08      	subs	r3, #8
 8000f7c:	2114      	movs	r1, #20
 8000f7e:	0018      	movs	r0, r3
 8000f80:	f7ff f8be 	bl	8000100 <__udivsi3>
 8000f84:	0003      	movs	r3, r0
 8000f86:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a07      	ldr	r2, [pc, #28]	; (8000fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000f8c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	221f      	movs	r2, #31
 8000f92:	4013      	ands	r3, r2
 8000f94:	2201      	movs	r2, #1
 8000f96:	409a      	lsls	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000f9c:	46c0      	nop			; (mov r8, r8)
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b004      	add	sp, #16
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	10008200 	.word	0x10008200
 8000fa8:	40020880 	.word	0x40020880

08000fac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	223f      	movs	r2, #63	; 0x3f
 8000fba:	4013      	ands	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000fc2:	4694      	mov	ip, r2
 8000fc4:	4463      	add	r3, ip
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	001a      	movs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a07      	ldr	r2, [pc, #28]	; (8000ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000fd2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	2203      	movs	r2, #3
 8000fda:	4013      	ands	r3, r2
 8000fdc:	2201      	movs	r2, #1
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000fe4:	46c0      	nop			; (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b004      	add	sp, #16
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	1000823f 	.word	0x1000823f
 8000ff0:	40020940 	.word	0x40020940

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e147      	b.n	8001294 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d100      	bne.n	800101c <HAL_GPIO_Init+0x28>
 800101a:	e138      	b.n	800128e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
 8001024:	2b01      	cmp	r3, #1
 8001026:	d005      	beq.n	8001034 <HAL_GPIO_Init+0x40>
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	4013      	ands	r3, r2
 8001030:	2b02      	cmp	r3, #2
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	2201      	movs	r2, #1
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2203      	movs	r2, #3
 800109c:	4013      	ands	r3, r2
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d017      	beq.n	80010d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	4013      	ands	r3, r2
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d123      	bne.n	8001126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	58d3      	ldr	r3, [r2, r3]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2207      	movs	r2, #7
 80010f0:	4013      	ands	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2107      	movs	r1, #7
 800110a:	400b      	ands	r3, r1
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2203      	movs	r2, #3
 8001144:	401a      	ands	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	029b      	lsls	r3, r3, #10
 8001162:	4013      	ands	r3, r2
 8001164:	d100      	bne.n	8001168 <HAL_GPIO_Init+0x174>
 8001166:	e092      	b.n	800128e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001168:	4a50      	ldr	r2, [pc, #320]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	3318      	adds	r3, #24
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	589b      	ldr	r3, [r3, r2]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	2203      	movs	r2, #3
 800117a:	4013      	ands	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	220f      	movs	r2, #15
 8001180:	409a      	lsls	r2, r3
 8001182:	0013      	movs	r3, r2
 8001184:	43da      	mvns	r2, r3
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	23a0      	movs	r3, #160	; 0xa0
 8001190:	05db      	lsls	r3, r3, #23
 8001192:	429a      	cmp	r2, r3
 8001194:	d013      	beq.n	80011be <HAL_GPIO_Init+0x1ca>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a45      	ldr	r2, [pc, #276]	; (80012b0 <HAL_GPIO_Init+0x2bc>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d00d      	beq.n	80011ba <HAL_GPIO_Init+0x1c6>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a44      	ldr	r2, [pc, #272]	; (80012b4 <HAL_GPIO_Init+0x2c0>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x1c2>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a43      	ldr	r2, [pc, #268]	; (80012b8 <HAL_GPIO_Init+0x2c4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d101      	bne.n	80011b2 <HAL_GPIO_Init+0x1be>
 80011ae:	2303      	movs	r3, #3
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x1cc>
 80011b2:	2305      	movs	r3, #5
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x1cc>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x1cc>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x1cc>
 80011be:	2300      	movs	r3, #0
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	2103      	movs	r1, #3
 80011c4:	400a      	ands	r2, r1
 80011c6:	00d2      	lsls	r2, r2, #3
 80011c8:	4093      	lsls	r3, r2
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011d0:	4936      	ldr	r1, [pc, #216]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3318      	adds	r3, #24
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011de:	4b33      	ldr	r3, [pc, #204]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43da      	mvns	r2, r3
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	2380      	movs	r3, #128	; 0x80
 80011f4:	035b      	lsls	r3, r3, #13
 80011f6:	4013      	ands	r3, r2
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43da      	mvns	r2, r3
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	2380      	movs	r3, #128	; 0x80
 800121e:	039b      	lsls	r3, r3, #14
 8001220:	4013      	ands	r3, r2
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001234:	2384      	movs	r3, #132	; 0x84
 8001236:	58d3      	ldr	r3, [r2, r3]
 8001238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	43da      	mvns	r2, r3
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	4013      	ands	r3, r2
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001258:	4914      	ldr	r1, [pc, #80]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 800125a:	2284      	movs	r2, #132	; 0x84
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001260:	4a12      	ldr	r2, [pc, #72]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	58d3      	ldr	r3, [r2, r3]
 8001266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	43da      	mvns	r2, r3
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	2380      	movs	r3, #128	; 0x80
 8001278:	025b      	lsls	r3, r3, #9
 800127a:	4013      	ands	r3, r2
 800127c:	d003      	beq.n	8001286 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001286:	4909      	ldr	r1, [pc, #36]	; (80012ac <HAL_GPIO_Init+0x2b8>)
 8001288:	2280      	movs	r2, #128	; 0x80
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	3301      	adds	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	40da      	lsrs	r2, r3
 800129c:	1e13      	subs	r3, r2, #0
 800129e:	d000      	beq.n	80012a2 <HAL_GPIO_Init+0x2ae>
 80012a0:	e6b0      	b.n	8001004 <HAL_GPIO_Init+0x10>
  }
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46c0      	nop			; (mov r8, r8)
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b006      	add	sp, #24
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40021800 	.word	0x40021800
 80012b0:	50000400 	.word	0x50000400
 80012b4:	50000800 	.word	0x50000800
 80012b8:	50000c00 	.word	0x50000c00

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	0008      	movs	r0, r1
 80012c6:	0011      	movs	r1, r2
 80012c8:	1cbb      	adds	r3, r7, #2
 80012ca:	1c02      	adds	r2, r0, #0
 80012cc:	801a      	strh	r2, [r3, #0]
 80012ce:	1c7b      	adds	r3, r7, #1
 80012d0:	1c0a      	adds	r2, r1, #0
 80012d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d4:	1c7b      	adds	r3, r7, #1
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d004      	beq.n	80012e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012dc:	1cbb      	adds	r3, r7, #2
 80012de:	881a      	ldrh	r2, [r3, #0]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e4:	e003      	b.n	80012ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012e6:	1cbb      	adds	r3, r7, #2
 80012e8:	881a      	ldrh	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e082      	b.n	8001410 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2241      	movs	r2, #65	; 0x41
 800130e:	5c9b      	ldrb	r3, [r3, r2]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b00      	cmp	r3, #0
 8001314:	d107      	bne.n	8001326 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2240      	movs	r2, #64	; 0x40
 800131a:	2100      	movs	r1, #0
 800131c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff f907 	bl	8000534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2241      	movs	r2, #65	; 0x41
 800132a:	2124      	movs	r1, #36	; 0x24
 800132c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2101      	movs	r1, #1
 800133a:	438a      	bics	r2, r1
 800133c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685a      	ldr	r2, [r3, #4]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4934      	ldr	r1, [pc, #208]	; (8001418 <HAL_I2C_Init+0x120>)
 8001348:	400a      	ands	r2, r1
 800134a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4931      	ldr	r1, [pc, #196]	; (800141c <HAL_I2C_Init+0x124>)
 8001358:	400a      	ands	r2, r1
 800135a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d108      	bne.n	8001376 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	0209      	lsls	r1, r1, #8
 8001370:	430a      	orrs	r2, r1
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	e007      	b.n	8001386 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2184      	movs	r1, #132	; 0x84
 8001380:	0209      	lsls	r1, r1, #8
 8001382:	430a      	orrs	r2, r1
 8001384:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b02      	cmp	r3, #2
 800138c:	d104      	bne.n	8001398 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2280      	movs	r2, #128	; 0x80
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	491f      	ldr	r1, [pc, #124]	; (8001420 <HAL_I2C_Init+0x128>)
 80013a4:	430a      	orrs	r2, r1
 80013a6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	491a      	ldr	r1, [pc, #104]	; (800141c <HAL_I2C_Init+0x124>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691a      	ldr	r2, [r3, #16]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	431a      	orrs	r2, r3
 80013c2:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	430a      	orrs	r2, r1
 80013d0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69d9      	ldr	r1, [r3, #28]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1a      	ldr	r2, [r3, #32]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	430a      	orrs	r2, r1
 80013e0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2101      	movs	r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2241      	movs	r2, #65	; 0x41
 80013fc:	2120      	movs	r1, #32
 80013fe:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2242      	movs	r2, #66	; 0x42
 800140a:	2100      	movs	r1, #0
 800140c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	0018      	movs	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}
 8001418:	f0ffffff 	.word	0xf0ffffff
 800141c:	ffff7fff 	.word	0xffff7fff
 8001420:	02008000 	.word	0x02008000

08001424 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2241      	movs	r2, #65	; 0x41
 8001432:	5c9b      	ldrb	r3, [r3, r2]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	2b20      	cmp	r3, #32
 8001438:	d138      	bne.n	80014ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2240      	movs	r2, #64	; 0x40
 800143e:	5c9b      	ldrb	r3, [r3, r2]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d101      	bne.n	8001448 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001444:	2302      	movs	r3, #2
 8001446:	e032      	b.n	80014ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2240      	movs	r2, #64	; 0x40
 800144c:	2101      	movs	r1, #1
 800144e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2241      	movs	r2, #65	; 0x41
 8001454:	2124      	movs	r1, #36	; 0x24
 8001456:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2101      	movs	r1, #1
 8001464:	438a      	bics	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4911      	ldr	r1, [pc, #68]	; (80014b8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001474:	400a      	ands	r2, r1
 8001476:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6819      	ldr	r1, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2101      	movs	r1, #1
 8001494:	430a      	orrs	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2241      	movs	r2, #65	; 0x41
 800149c:	2120      	movs	r1, #32
 800149e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2240      	movs	r2, #64	; 0x40
 80014a4:	2100      	movs	r1, #0
 80014a6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e000      	b.n	80014ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80014ac:	2302      	movs	r3, #2
  }
}
 80014ae:	0018      	movs	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b002      	add	sp, #8
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	ffffefff 	.word	0xffffefff

080014bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2241      	movs	r2, #65	; 0x41
 80014ca:	5c9b      	ldrb	r3, [r3, r2]
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d139      	bne.n	8001546 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2240      	movs	r2, #64	; 0x40
 80014d6:	5c9b      	ldrb	r3, [r3, r2]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d101      	bne.n	80014e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80014dc:	2302      	movs	r3, #2
 80014de:	e033      	b.n	8001548 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2240      	movs	r2, #64	; 0x40
 80014e4:	2101      	movs	r1, #1
 80014e6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2241      	movs	r2, #65	; 0x41
 80014ec:	2124      	movs	r1, #36	; 0x24
 80014ee:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2101      	movs	r1, #1
 80014fc:	438a      	bics	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800150c:	4013      	ands	r3, r2
 800150e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	021b      	lsls	r3, r3, #8
 8001514:	68fa      	ldr	r2, [r7, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	68fa      	ldr	r2, [r7, #12]
 8001520:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2101      	movs	r1, #1
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2241      	movs	r2, #65	; 0x41
 8001536:	2120      	movs	r1, #32
 8001538:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2240      	movs	r2, #64	; 0x40
 800153e:	2100      	movs	r1, #0
 8001540:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e000      	b.n	8001548 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001546:	2302      	movs	r3, #2
  }
}
 8001548:	0018      	movs	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}
 8001550:	fffff0ff 	.word	0xfffff0ff

08001554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800155c:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a19      	ldr	r2, [pc, #100]	; (80015c8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001562:	4013      	ands	r3, r2
 8001564:	0019      	movs	r1, r3
 8001566:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	430a      	orrs	r2, r1
 800156c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	2380      	movs	r3, #128	; 0x80
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	429a      	cmp	r2, r3
 8001576:	d11f      	bne.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	0013      	movs	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	189b      	adds	r3, r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4912      	ldr	r1, [pc, #72]	; (80015d0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001586:	0018      	movs	r0, r3
 8001588:	f7fe fdba 	bl	8000100 <__udivsi3>
 800158c:	0003      	movs	r3, r0
 800158e:	3301      	adds	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001592:	e008      	b.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d003      	beq.n	80015a2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b01      	subs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e001      	b.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e009      	b.n	80015ba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80015a8:	695a      	ldr	r2, [r3, #20]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	401a      	ands	r2, r3
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d0ed      	beq.n	8001594 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	0018      	movs	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	b004      	add	sp, #16
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			; (mov r8, r8)
 80015c4:	40007000 	.word	0x40007000
 80015c8:	fffff9ff 	.word	0xfffff9ff
 80015cc:	20000000 	.word	0x20000000
 80015d0:	000f4240 	.word	0x000f4240

080015d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80015d8:	4b03      	ldr	r3, [pc, #12]	; (80015e8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	23e0      	movs	r3, #224	; 0xe0
 80015de:	01db      	lsls	r3, r3, #7
 80015e0:	4013      	ands	r3, r2
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40021000 	.word	0x40021000

080015ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e2f3      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2201      	movs	r2, #1
 8001604:	4013      	ands	r3, r2
 8001606:	d100      	bne.n	800160a <HAL_RCC_OscConfig+0x1e>
 8001608:	e07c      	b.n	8001704 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800160a:	4bc3      	ldr	r3, [pc, #780]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2238      	movs	r2, #56	; 0x38
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001614:	4bc0      	ldr	r3, [pc, #768]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2203      	movs	r2, #3
 800161a:	4013      	ands	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	2b10      	cmp	r3, #16
 8001622:	d102      	bne.n	800162a <HAL_RCC_OscConfig+0x3e>
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d002      	beq.n	8001630 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	2b08      	cmp	r3, #8
 800162e:	d10b      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	4bb9      	ldr	r3, [pc, #740]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	029b      	lsls	r3, r3, #10
 8001638:	4013      	ands	r3, r2
 800163a:	d062      	beq.n	8001702 <HAL_RCC_OscConfig+0x116>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d15e      	bne.n	8001702 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e2ce      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685a      	ldr	r2, [r3, #4]
 800164c:	2380      	movs	r3, #128	; 0x80
 800164e:	025b      	lsls	r3, r3, #9
 8001650:	429a      	cmp	r2, r3
 8001652:	d107      	bne.n	8001664 <HAL_RCC_OscConfig+0x78>
 8001654:	4bb0      	ldr	r3, [pc, #704]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4baf      	ldr	r3, [pc, #700]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800165a:	2180      	movs	r1, #128	; 0x80
 800165c:	0249      	lsls	r1, r1, #9
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	e020      	b.n	80016a6 <HAL_RCC_OscConfig+0xba>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	23a0      	movs	r3, #160	; 0xa0
 800166a:	02db      	lsls	r3, r3, #11
 800166c:	429a      	cmp	r2, r3
 800166e:	d10e      	bne.n	800168e <HAL_RCC_OscConfig+0xa2>
 8001670:	4ba9      	ldr	r3, [pc, #676]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4ba8      	ldr	r3, [pc, #672]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001676:	2180      	movs	r1, #128	; 0x80
 8001678:	02c9      	lsls	r1, r1, #11
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	4ba6      	ldr	r3, [pc, #664]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4ba5      	ldr	r3, [pc, #660]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001684:	2180      	movs	r1, #128	; 0x80
 8001686:	0249      	lsls	r1, r1, #9
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e00b      	b.n	80016a6 <HAL_RCC_OscConfig+0xba>
 800168e:	4ba2      	ldr	r3, [pc, #648]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	4ba1      	ldr	r3, [pc, #644]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001694:	49a1      	ldr	r1, [pc, #644]	; (800191c <HAL_RCC_OscConfig+0x330>)
 8001696:	400a      	ands	r2, r1
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	4b9f      	ldr	r3, [pc, #636]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b9e      	ldr	r3, [pc, #632]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	499f      	ldr	r1, [pc, #636]	; (8001920 <HAL_RCC_OscConfig+0x334>)
 80016a2:	400a      	ands	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d014      	beq.n	80016d8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ae:	f7ff fa2d 	bl	8000b0c <HAL_GetTick>
 80016b2:	0003      	movs	r3, r0
 80016b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fa28 	bl	8000b0c <HAL_GetTick>
 80016bc:	0002      	movs	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	; 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e28d      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016ca:	4b93      	ldr	r3, [pc, #588]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	2380      	movs	r3, #128	; 0x80
 80016d0:	029b      	lsls	r3, r3, #10
 80016d2:	4013      	ands	r3, r2
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0xcc>
 80016d6:	e015      	b.n	8001704 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d8:	f7ff fa18 	bl	8000b0c <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e2:	f7ff fa13 	bl	8000b0c <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e278      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016f4:	4b88      	ldr	r3, [pc, #544]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	029b      	lsls	r3, r3, #10
 80016fc:	4013      	ands	r3, r2
 80016fe:	d1f0      	bne.n	80016e2 <HAL_RCC_OscConfig+0xf6>
 8001700:	e000      	b.n	8001704 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001702:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2202      	movs	r2, #2
 800170a:	4013      	ands	r3, r2
 800170c:	d100      	bne.n	8001710 <HAL_RCC_OscConfig+0x124>
 800170e:	e099      	b.n	8001844 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001710:	4b81      	ldr	r3, [pc, #516]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2238      	movs	r2, #56	; 0x38
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800171a:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2203      	movs	r2, #3
 8001720:	4013      	ands	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001724:	69bb      	ldr	r3, [r7, #24]
 8001726:	2b10      	cmp	r3, #16
 8001728:	d102      	bne.n	8001730 <HAL_RCC_OscConfig+0x144>
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	2b02      	cmp	r3, #2
 800172e:	d002      	beq.n	8001736 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d135      	bne.n	80017a2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001736:	4b78      	ldr	r3, [pc, #480]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	2380      	movs	r3, #128	; 0x80
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	4013      	ands	r3, r2
 8001740:	d005      	beq.n	800174e <HAL_RCC_OscConfig+0x162>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e24b      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174e:	4b72      	ldr	r3, [pc, #456]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4a74      	ldr	r2, [pc, #464]	; (8001924 <HAL_RCC_OscConfig+0x338>)
 8001754:	4013      	ands	r3, r2
 8001756:	0019      	movs	r1, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	695b      	ldr	r3, [r3, #20]
 800175c:	021a      	lsls	r2, r3, #8
 800175e:	4b6e      	ldr	r3, [pc, #440]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001760:	430a      	orrs	r2, r1
 8001762:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d112      	bne.n	8001790 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800176a:	4b6b      	ldr	r3, [pc, #428]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a6e      	ldr	r2, [pc, #440]	; (8001928 <HAL_RCC_OscConfig+0x33c>)
 8001770:	4013      	ands	r3, r2
 8001772:	0019      	movs	r1, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	4b67      	ldr	r3, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800177a:	430a      	orrs	r2, r1
 800177c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800177e:	4b66      	ldr	r3, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	0adb      	lsrs	r3, r3, #11
 8001784:	2207      	movs	r2, #7
 8001786:	4013      	ands	r3, r2
 8001788:	4a68      	ldr	r2, [pc, #416]	; (800192c <HAL_RCC_OscConfig+0x340>)
 800178a:	40da      	lsrs	r2, r3
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x344>)
 800178e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001790:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_OscConfig+0x348>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	0018      	movs	r0, r3
 8001796:	f7ff f95d 	bl	8000a54 <HAL_InitTick>
 800179a:	1e03      	subs	r3, r0, #0
 800179c:	d051      	beq.n	8001842 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e221      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	68db      	ldr	r3, [r3, #12]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d030      	beq.n	800180c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a5e      	ldr	r2, [pc, #376]	; (8001928 <HAL_RCC_OscConfig+0x33c>)
 80017b0:	4013      	ands	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	4b57      	ldr	r3, [pc, #348]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80017be:	4b56      	ldr	r3, [pc, #344]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4b55      	ldr	r3, [pc, #340]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	0049      	lsls	r1, r1, #1
 80017c8:	430a      	orrs	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff f99e 	bl	8000b0c <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017d6:	f7ff f999 	bl	8000b0c <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e1fe      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017e8:	4b4b      	ldr	r3, [pc, #300]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4013      	ands	r3, r2
 80017f2:	d0f0      	beq.n	80017d6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f4:	4b48      	ldr	r3, [pc, #288]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a4a      	ldr	r2, [pc, #296]	; (8001924 <HAL_RCC_OscConfig+0x338>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	0019      	movs	r1, r3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	021a      	lsls	r2, r3, #8
 8001804:	4b44      	ldr	r3, [pc, #272]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001806:	430a      	orrs	r2, r1
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	e01b      	b.n	8001844 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800180c:	4b42      	ldr	r3, [pc, #264]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b41      	ldr	r3, [pc, #260]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001812:	4949      	ldr	r1, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x34c>)
 8001814:	400a      	ands	r2, r1
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f978 	bl	8000b0c <HAL_GetTick>
 800181c:	0003      	movs	r3, r0
 800181e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001822:	f7ff f973 	bl	8000b0c <HAL_GetTick>
 8001826:	0002      	movs	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1d8      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4013      	ands	r3, r2
 800183e:	d1f0      	bne.n	8001822 <HAL_RCC_OscConfig+0x236>
 8001840:	e000      	b.n	8001844 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001842:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2208      	movs	r2, #8
 800184a:	4013      	ands	r3, r2
 800184c:	d047      	beq.n	80018de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800184e:	4b32      	ldr	r3, [pc, #200]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2238      	movs	r2, #56	; 0x38
 8001854:	4013      	ands	r3, r2
 8001856:	2b18      	cmp	r3, #24
 8001858:	d10a      	bne.n	8001870 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800185a:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800185c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185e:	2202      	movs	r2, #2
 8001860:	4013      	ands	r3, r2
 8001862:	d03c      	beq.n	80018de <HAL_RCC_OscConfig+0x2f2>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d138      	bne.n	80018de <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e1ba      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d019      	beq.n	80018ac <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001878:	4b27      	ldr	r3, [pc, #156]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800187a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 800187e:	2101      	movs	r1, #1
 8001880:	430a      	orrs	r2, r1
 8001882:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001884:	f7ff f942 	bl	8000b0c <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff f93d 	bl	8000b0c <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e1a2      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a4:	2202      	movs	r2, #2
 80018a6:	4013      	ands	r3, r2
 80018a8:	d0f1      	beq.n	800188e <HAL_RCC_OscConfig+0x2a2>
 80018aa:	e018      	b.n	80018de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80018ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80018b2:	2101      	movs	r1, #1
 80018b4:	438a      	bics	r2, r1
 80018b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b8:	f7ff f928 	bl	8000b0c <HAL_GetTick>
 80018bc:	0003      	movs	r3, r0
 80018be:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018c2:	f7ff f923 	bl	8000b0c <HAL_GetTick>
 80018c6:	0002      	movs	r2, r0
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e188      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80018d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d8:	2202      	movs	r2, #2
 80018da:	4013      	ands	r3, r2
 80018dc:	d1f1      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2204      	movs	r2, #4
 80018e4:	4013      	ands	r3, r2
 80018e6:	d100      	bne.n	80018ea <HAL_RCC_OscConfig+0x2fe>
 80018e8:	e0c6      	b.n	8001a78 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ea:	231f      	movs	r3, #31
 80018ec:	18fb      	adds	r3, r7, r3
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018f2:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2238      	movs	r2, #56	; 0x38
 80018f8:	4013      	ands	r3, r2
 80018fa:	2b20      	cmp	r3, #32
 80018fc:	d11e      	bne.n	800193c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80018fe:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_RCC_OscConfig+0x32c>)
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2202      	movs	r2, #2
 8001904:	4013      	ands	r3, r2
 8001906:	d100      	bne.n	800190a <HAL_RCC_OscConfig+0x31e>
 8001908:	e0b6      	b.n	8001a78 <HAL_RCC_OscConfig+0x48c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d000      	beq.n	8001914 <HAL_RCC_OscConfig+0x328>
 8001912:	e0b1      	b.n	8001a78 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e166      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
 8001918:	40021000 	.word	0x40021000
 800191c:	fffeffff 	.word	0xfffeffff
 8001920:	fffbffff 	.word	0xfffbffff
 8001924:	ffff80ff 	.word	0xffff80ff
 8001928:	ffffc7ff 	.word	0xffffc7ff
 800192c:	00f42400 	.word	0x00f42400
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004
 8001938:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800193c:	4bac      	ldr	r3, [pc, #688]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 800193e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	055b      	lsls	r3, r3, #21
 8001944:	4013      	ands	r3, r2
 8001946:	d101      	bne.n	800194c <HAL_RCC_OscConfig+0x360>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x362>
 800194c:	2300      	movs	r3, #0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d011      	beq.n	8001976 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001952:	4ba7      	ldr	r3, [pc, #668]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001956:	4ba6      	ldr	r3, [pc, #664]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001958:	2180      	movs	r1, #128	; 0x80
 800195a:	0549      	lsls	r1, r1, #21
 800195c:	430a      	orrs	r2, r1
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001960:	4ba3      	ldr	r3, [pc, #652]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	055b      	lsls	r3, r3, #21
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800196e:	231f      	movs	r3, #31
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	2201      	movs	r2, #1
 8001974:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001976:	4b9f      	ldr	r3, [pc, #636]	; (8001bf4 <HAL_RCC_OscConfig+0x608>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4013      	ands	r3, r2
 8001980:	d11a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001982:	4b9c      	ldr	r3, [pc, #624]	; (8001bf4 <HAL_RCC_OscConfig+0x608>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	4b9b      	ldr	r3, [pc, #620]	; (8001bf4 <HAL_RCC_OscConfig+0x608>)
 8001988:	2180      	movs	r1, #128	; 0x80
 800198a:	0049      	lsls	r1, r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001990:	f7ff f8bc 	bl	8000b0c <HAL_GetTick>
 8001994:	0003      	movs	r3, r0
 8001996:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800199a:	f7ff f8b7 	bl	8000b0c <HAL_GetTick>
 800199e:	0002      	movs	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e11c      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ac:	4b91      	ldr	r3, [pc, #580]	; (8001bf4 <HAL_RCC_OscConfig+0x608>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	2380      	movs	r3, #128	; 0x80
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d106      	bne.n	80019ce <HAL_RCC_OscConfig+0x3e2>
 80019c0:	4b8b      	ldr	r3, [pc, #556]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 80019c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019c4:	4b8a      	ldr	r3, [pc, #552]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 80019c6:	2101      	movs	r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80019cc:	e01c      	b.n	8001a08 <HAL_RCC_OscConfig+0x41c>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d10c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x404>
 80019d6:	4b86      	ldr	r3, [pc, #536]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 80019d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019da:	4b85      	ldr	r3, [pc, #532]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 80019dc:	2104      	movs	r1, #4
 80019de:	430a      	orrs	r2, r1
 80019e0:	65da      	str	r2, [r3, #92]	; 0x5c
 80019e2:	4b83      	ldr	r3, [pc, #524]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 80019e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019e6:	4b82      	ldr	r3, [pc, #520]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 80019e8:	2101      	movs	r1, #1
 80019ea:	430a      	orrs	r2, r1
 80019ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80019ee:	e00b      	b.n	8001a08 <HAL_RCC_OscConfig+0x41c>
 80019f0:	4b7f      	ldr	r3, [pc, #508]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 80019f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80019f4:	4b7e      	ldr	r3, [pc, #504]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	438a      	bics	r2, r1
 80019fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80019fc:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 80019fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001a00:	4b7b      	ldr	r3, [pc, #492]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001a02:	2104      	movs	r1, #4
 8001a04:	438a      	bics	r2, r1
 8001a06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d014      	beq.n	8001a3a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f87c 	bl	8000b0c <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff f877 	bl	8000b0c <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	4a74      	ldr	r2, [pc, #464]	; (8001bf8 <HAL_RCC_OscConfig+0x60c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e0db      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a2e:	4b70      	ldr	r3, [pc, #448]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	2202      	movs	r2, #2
 8001a34:	4013      	ands	r3, r2
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x42e>
 8001a38:	e013      	b.n	8001a62 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f867 	bl	8000b0c <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a42:	e009      	b.n	8001a58 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a44:	f7ff f862 	bl	8000b0c <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <HAL_RCC_OscConfig+0x60c>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e0c6      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001a62:	231f      	movs	r3, #31
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d105      	bne.n	8001a78 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001a6c:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001a6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a70:	4b5f      	ldr	r3, [pc, #380]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001a72:	4962      	ldr	r1, [pc, #392]	; (8001bfc <HAL_RCC_OscConfig+0x610>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d100      	bne.n	8001a82 <HAL_RCC_OscConfig+0x496>
 8001a80:	e0b0      	b.n	8001be4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a82:	4b5b      	ldr	r3, [pc, #364]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2238      	movs	r2, #56	; 0x38
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d100      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4a4>
 8001a8e:	e078      	b.n	8001b82 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d153      	bne.n	8001b40 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a98:	4b55      	ldr	r3, [pc, #340]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b54      	ldr	r3, [pc, #336]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001a9e:	4958      	ldr	r1, [pc, #352]	; (8001c00 <HAL_RCC_OscConfig+0x614>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa4:	f7ff f832 	bl	8000b0c <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f82d 	bl	8000b0c <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e092      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ac0:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	049b      	lsls	r3, r3, #18
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d1f0      	bne.n	8001aae <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	4a4c      	ldr	r2, [pc, #304]	; (8001c04 <HAL_RCC_OscConfig+0x618>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	0019      	movs	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	431a      	orrs	r2, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	021b      	lsls	r3, r3, #8
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	431a      	orrs	r2, r3
 8001af4:	4b3e      	ldr	r3, [pc, #248]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001af6:	430a      	orrs	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b3c      	ldr	r3, [pc, #240]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b00:	2180      	movs	r1, #128	; 0x80
 8001b02:	0449      	lsls	r1, r1, #17
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001b08:	4b39      	ldr	r3, [pc, #228]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b0e:	2180      	movs	r1, #128	; 0x80
 8001b10:	0549      	lsls	r1, r1, #21
 8001b12:	430a      	orrs	r2, r1
 8001b14:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b16:	f7fe fff9 	bl	8000b0c <HAL_GetTick>
 8001b1a:	0003      	movs	r3, r0
 8001b1c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7fe fff4 	bl	8000b0c <HAL_GetTick>
 8001b24:	0002      	movs	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e059      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	049b      	lsls	r3, r3, #18
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x534>
 8001b3e:	e051      	b.n	8001be4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b46:	492e      	ldr	r1, [pc, #184]	; (8001c00 <HAL_RCC_OscConfig+0x614>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7fe ffde 	bl	8000b0c <HAL_GetTick>
 8001b50:	0003      	movs	r3, r0
 8001b52:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7fe ffd9 	bl	8000b0c <HAL_GetTick>
 8001b5a:	0002      	movs	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e03e      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b68:	4b21      	ldr	r3, [pc, #132]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	2380      	movs	r3, #128	; 0x80
 8001b6e:	049b      	lsls	r3, r3, #18
 8001b70:	4013      	ands	r3, r2
 8001b72:	d1f0      	bne.n	8001b56 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b76:	68da      	ldr	r2, [r3, #12]
 8001b78:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b7a:	4923      	ldr	r1, [pc, #140]	; (8001c08 <HAL_RCC_OscConfig+0x61c>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	e030      	b.n	8001be4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e02b      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_RCC_OscConfig+0x604>)
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2203      	movs	r2, #3
 8001b98:	401a      	ands	r2, r3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11e      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2270      	movs	r2, #112	; 0x70
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d117      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	23fe      	movs	r3, #254	; 0xfe
 8001bb4:	01db      	lsls	r3, r3, #7
 8001bb6:	401a      	ands	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d10e      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	23f8      	movs	r3, #248	; 0xf8
 8001bc6:	039b      	lsls	r3, r3, #14
 8001bc8:	401a      	ands	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	0f5b      	lsrs	r3, r3, #29
 8001bd6:	075a      	lsls	r2, r3, #29
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	0018      	movs	r0, r3
 8001be8:	46bd      	mov	sp, r7
 8001bea:	b008      	add	sp, #32
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	46c0      	nop			; (mov r8, r8)
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	00001388 	.word	0x00001388
 8001bfc:	efffffff 	.word	0xefffffff
 8001c00:	feffffff 	.word	0xfeffffff
 8001c04:	1fc1808c 	.word	0x1fc1808c
 8001c08:	effefffc 	.word	0xeffefffc

08001c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e0e9      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c20:	4b76      	ldr	r3, [pc, #472]	; (8001dfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2207      	movs	r2, #7
 8001c26:	4013      	ands	r3, r2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d91e      	bls.n	8001c6c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2e:	4b73      	ldr	r3, [pc, #460]	; (8001dfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2207      	movs	r2, #7
 8001c34:	4393      	bics	r3, r2
 8001c36:	0019      	movs	r1, r3
 8001c38:	4b70      	ldr	r3, [pc, #448]	; (8001dfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c40:	f7fe ff64 	bl	8000b0c <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c48:	e009      	b.n	8001c5e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4a:	f7fe ff5f 	bl	8000b0c <HAL_GetTick>
 8001c4e:	0002      	movs	r2, r0
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	4a6a      	ldr	r2, [pc, #424]	; (8001e00 <HAL_RCC_ClockConfig+0x1f4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e0ca      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_ClockConfig+0x1f0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2207      	movs	r2, #7
 8001c64:	4013      	ands	r3, r2
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d1ee      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2202      	movs	r2, #2
 8001c72:	4013      	ands	r3, r2
 8001c74:	d015      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d006      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c80:	4b60      	ldr	r3, [pc, #384]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001c86:	21e0      	movs	r1, #224	; 0xe0
 8001c88:	01c9      	lsls	r1, r1, #7
 8001c8a:	430a      	orrs	r2, r1
 8001c8c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	4a5d      	ldr	r2, [pc, #372]	; (8001e08 <HAL_RCC_ClockConfig+0x1fc>)
 8001c94:	4013      	ands	r3, r2
 8001c96:	0019      	movs	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	4b59      	ldr	r3, [pc, #356]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d057      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	029b      	lsls	r3, r3, #10
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d12b      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e097      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ccc:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	2380      	movs	r3, #128	; 0x80
 8001cd2:	049b      	lsls	r3, r3, #18
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d11f      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e08b      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d107      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4013      	ands	r3, r2
 8001cee:	d113      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e07f      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cfc:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d00:	2202      	movs	r2, #2
 8001d02:	4013      	ands	r3, r2
 8001d04:	d108      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e074      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0a:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	2202      	movs	r2, #2
 8001d10:	4013      	ands	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e06d      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d18:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	4393      	bics	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d2c:	f7fe feee 	bl	8000b0c <HAL_GetTick>
 8001d30:	0003      	movs	r3, r0
 8001d32:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d34:	e009      	b.n	8001d4a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d36:	f7fe fee9 	bl	8000b0c <HAL_GetTick>
 8001d3a:	0002      	movs	r2, r0
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	4a2f      	ldr	r2, [pc, #188]	; (8001e00 <HAL_RCC_ClockConfig+0x1f4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e054      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2238      	movs	r2, #56	; 0x38
 8001d50:	401a      	ands	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1ec      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2207      	movs	r2, #7
 8001d62:	4013      	ands	r3, r2
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d21e      	bcs.n	8001da8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2207      	movs	r2, #7
 8001d70:	4393      	bics	r3, r2
 8001d72:	0019      	movs	r1, r3
 8001d74:	4b21      	ldr	r3, [pc, #132]	; (8001dfc <HAL_RCC_ClockConfig+0x1f0>)
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d7c:	f7fe fec6 	bl	8000b0c <HAL_GetTick>
 8001d80:	0003      	movs	r3, r0
 8001d82:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d84:	e009      	b.n	8001d9a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d86:	f7fe fec1 	bl	8000b0c <HAL_GetTick>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	4a1b      	ldr	r2, [pc, #108]	; (8001e00 <HAL_RCC_ClockConfig+0x1f4>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e02c      	b.n	8001df4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2207      	movs	r2, #7
 8001da0:	4013      	ands	r3, r2
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d1ee      	bne.n	8001d86 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2204      	movs	r2, #4
 8001dae:	4013      	ands	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	4a15      	ldr	r2, [pc, #84]	; (8001e0c <HAL_RCC_ClockConfig+0x200>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001dc6:	f000 f829 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dca:	0001      	movs	r1, r0
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_ClockConfig+0x1f8>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	0a1b      	lsrs	r3, r3, #8
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	401a      	ands	r2, r3
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_RCC_ClockConfig+0x204>)
 8001dd8:	0092      	lsls	r2, r2, #2
 8001dda:	58d3      	ldr	r3, [r2, r3]
 8001ddc:	221f      	movs	r2, #31
 8001dde:	4013      	ands	r3, r2
 8001de0:	000a      	movs	r2, r1
 8001de2:	40da      	lsrs	r2, r3
 8001de4:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <HAL_RCC_ClockConfig+0x208>)
 8001de6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <HAL_RCC_ClockConfig+0x20c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f7fe fe31 	bl	8000a54 <HAL_InitTick>
 8001df2:	0003      	movs	r3, r0
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b004      	add	sp, #16
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	00001388 	.word	0x00001388
 8001e04:	40021000 	.word	0x40021000
 8001e08:	fffff0ff 	.word	0xfffff0ff
 8001e0c:	ffff8fff 	.word	0xffff8fff
 8001e10:	08002e04 	.word	0x08002e04
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e22:	4b3c      	ldr	r3, [pc, #240]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2238      	movs	r2, #56	; 0x38
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d10f      	bne.n	8001e4c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	0adb      	lsrs	r3, r3, #11
 8001e32:	2207      	movs	r2, #7
 8001e34:	4013      	ands	r3, r2
 8001e36:	2201      	movs	r2, #1
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	0013      	movs	r3, r2
 8001e3c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001e3e:	6839      	ldr	r1, [r7, #0]
 8001e40:	4835      	ldr	r0, [pc, #212]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e42:	f7fe f95d 	bl	8000100 <__udivsi3>
 8001e46:	0003      	movs	r3, r0
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	e05d      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2238      	movs	r2, #56	; 0x38
 8001e52:	4013      	ands	r3, r2
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e58:	4b30      	ldr	r3, [pc, #192]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e054      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	2238      	movs	r2, #56	; 0x38
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b10      	cmp	r3, #16
 8001e68:	d138      	bne.n	8001edc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2203      	movs	r2, #3
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	d10d      	bne.n	8001ea4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001e88:	68b9      	ldr	r1, [r7, #8]
 8001e8a:	4824      	ldr	r0, [pc, #144]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x100>)
 8001e8c:	f7fe f938 	bl	8000100 <__udivsi3>
 8001e90:	0003      	movs	r3, r0
 8001e92:	0019      	movs	r1, r3
 8001e94:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	0a1b      	lsrs	r3, r3, #8
 8001e9a:	227f      	movs	r2, #127	; 0x7f
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	434b      	muls	r3, r1
 8001ea0:	617b      	str	r3, [r7, #20]
        break;
 8001ea2:	e00d      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	481c      	ldr	r0, [pc, #112]	; (8001f18 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ea8:	f7fe f92a 	bl	8000100 <__udivsi3>
 8001eac:	0003      	movs	r3, r0
 8001eae:	0019      	movs	r1, r3
 8001eb0:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	0a1b      	lsrs	r3, r3, #8
 8001eb6:	227f      	movs	r2, #127	; 0x7f
 8001eb8:	4013      	ands	r3, r2
 8001eba:	434b      	muls	r3, r1
 8001ebc:	617b      	str	r3, [r7, #20]
        break;
 8001ebe:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ec0:	4b14      	ldr	r3, [pc, #80]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	0f5b      	lsrs	r3, r3, #29
 8001ec6:	2207      	movs	r2, #7
 8001ec8:	4013      	ands	r3, r2
 8001eca:	3301      	adds	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	6978      	ldr	r0, [r7, #20]
 8001ed2:	f7fe f915 	bl	8000100 <__udivsi3>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	e015      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001edc:	4b0d      	ldr	r3, [pc, #52]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2238      	movs	r2, #56	; 0x38
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b20      	cmp	r3, #32
 8001ee6:	d103      	bne.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	021b      	lsls	r3, r3, #8
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	e00b      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2238      	movs	r2, #56	; 0x38
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	2b18      	cmp	r3, #24
 8001efa:	d103      	bne.n	8001f04 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001efc:	23fa      	movs	r3, #250	; 0xfa
 8001efe:	01db      	lsls	r3, r3, #7
 8001f00:	613b      	str	r3, [r7, #16]
 8001f02:	e001      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001f08:	693b      	ldr	r3, [r7, #16]
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b006      	add	sp, #24
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			; (mov r8, r8)
 8001f14:	40021000 	.word	0x40021000
 8001f18:	00f42400 	.word	0x00f42400
 8001f1c:	007a1200 	.word	0x007a1200

08001f20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f24:	4b02      	ldr	r3, [pc, #8]	; (8001f30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	20000000 	.word	0x20000000

08001f34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f34:	b5b0      	push	{r4, r5, r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f38:	f7ff fff2 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f3c:	0004      	movs	r4, r0
 8001f3e:	f7ff fb49 	bl	80015d4 <LL_RCC_GetAPB1Prescaler>
 8001f42:	0003      	movs	r3, r0
 8001f44:	0b1a      	lsrs	r2, r3, #12
 8001f46:	4b05      	ldr	r3, [pc, #20]	; (8001f5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	58d3      	ldr	r3, [r2, r3]
 8001f4c:	221f      	movs	r2, #31
 8001f4e:	4013      	ands	r3, r2
 8001f50:	40dc      	lsrs	r4, r3
 8001f52:	0023      	movs	r3, r4
}
 8001f54:	0018      	movs	r0, r3
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bdb0      	pop	{r4, r5, r7, pc}
 8001f5a:	46c0      	nop			; (mov r8, r8)
 8001f5c:	08002e44 	.word	0x08002e44

08001f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f68:	2313      	movs	r3, #19
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f70:	2312      	movs	r3, #18
 8001f72:	18fb      	adds	r3, r7, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	2380      	movs	r3, #128	; 0x80
 8001f7e:	029b      	lsls	r3, r3, #10
 8001f80:	4013      	ands	r3, r2
 8001f82:	d100      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001f84:	e0a3      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2011      	movs	r0, #17
 8001f88:	183b      	adds	r3, r7, r0
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f8e:	4b7f      	ldr	r3, [pc, #508]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	055b      	lsls	r3, r3, #21
 8001f96:	4013      	ands	r3, r2
 8001f98:	d110      	bne.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b7c      	ldr	r3, [pc, #496]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f9e:	4b7b      	ldr	r3, [pc, #492]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	0549      	lsls	r1, r1, #21
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fa8:	4b78      	ldr	r3, [pc, #480]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	055b      	lsls	r3, r3, #21
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb6:	183b      	adds	r3, r7, r0
 8001fb8:	2201      	movs	r2, #1
 8001fba:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fbc:	4b74      	ldr	r3, [pc, #464]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b73      	ldr	r3, [pc, #460]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fc2:	2180      	movs	r1, #128	; 0x80
 8001fc4:	0049      	lsls	r1, r1, #1
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fca:	f7fe fd9f 	bl	8000b0c <HAL_GetTick>
 8001fce:	0003      	movs	r3, r0
 8001fd0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fd2:	e00b      	b.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd4:	f7fe fd9a 	bl	8000b0c <HAL_GetTick>
 8001fd8:	0002      	movs	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d904      	bls.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001fe2:	2313      	movs	r3, #19
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	701a      	strb	r2, [r3, #0]
        break;
 8001fea:	e005      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fec:	4b68      	ldr	r3, [pc, #416]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0ed      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001ff8:	2313      	movs	r3, #19
 8001ffa:	18fb      	adds	r3, r7, r3
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d154      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002002:	4b62      	ldr	r3, [pc, #392]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002004:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002006:	23c0      	movs	r3, #192	; 0xc0
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4013      	ands	r3, r2
 800200c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d019      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	429a      	cmp	r2, r3
 800201c:	d014      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800201e:	4b5b      	ldr	r3, [pc, #364]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002022:	4a5c      	ldr	r2, [pc, #368]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8002024:	4013      	ands	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002028:	4b58      	ldr	r3, [pc, #352]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800202a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800202c:	4b57      	ldr	r3, [pc, #348]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800202e:	2180      	movs	r1, #128	; 0x80
 8002030:	0249      	lsls	r1, r1, #9
 8002032:	430a      	orrs	r2, r1
 8002034:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002036:	4b55      	ldr	r3, [pc, #340]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002038:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800203a:	4b54      	ldr	r3, [pc, #336]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800203c:	4956      	ldr	r1, [pc, #344]	; (8002198 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 800203e:	400a      	ands	r2, r1
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002042:	4b52      	ldr	r3, [pc, #328]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002044:	697a      	ldr	r2, [r7, #20]
 8002046:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	2201      	movs	r2, #1
 800204c:	4013      	ands	r3, r2
 800204e:	d016      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fd5c 	bl	8000b0c <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002058:	e00c      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe fd57 	bl	8000b0c <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4a4d      	ldr	r2, [pc, #308]	; (800219c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d904      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800206a:	2313      	movs	r3, #19
 800206c:	18fb      	adds	r3, r7, r3
 800206e:	2203      	movs	r2, #3
 8002070:	701a      	strb	r2, [r3, #0]
            break;
 8002072:	e004      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002074:	4b45      	ldr	r3, [pc, #276]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002078:	2202      	movs	r2, #2
 800207a:	4013      	ands	r3, r2
 800207c:	d0ed      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800207e:	2313      	movs	r3, #19
 8002080:	18fb      	adds	r3, r7, r3
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10a      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002088:	4b40      	ldr	r3, [pc, #256]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800208a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800208c:	4a41      	ldr	r2, [pc, #260]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800208e:	4013      	ands	r3, r2
 8002090:	0019      	movs	r1, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	4b3d      	ldr	r3, [pc, #244]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002098:	430a      	orrs	r2, r1
 800209a:	65da      	str	r2, [r3, #92]	; 0x5c
 800209c:	e00c      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800209e:	2312      	movs	r3, #18
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2213      	movs	r2, #19
 80020a4:	18ba      	adds	r2, r7, r2
 80020a6:	7812      	ldrb	r2, [r2, #0]
 80020a8:	701a      	strb	r2, [r3, #0]
 80020aa:	e005      	b.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ac:	2312      	movs	r3, #18
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2213      	movs	r2, #19
 80020b2:	18ba      	adds	r2, r7, r2
 80020b4:	7812      	ldrb	r2, [r2, #0]
 80020b6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020b8:	2311      	movs	r3, #17
 80020ba:	18fb      	adds	r3, r7, r3
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d105      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020c2:	4b32      	ldr	r3, [pc, #200]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c6:	4b31      	ldr	r3, [pc, #196]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020c8:	4935      	ldr	r1, [pc, #212]	; (80021a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2201      	movs	r2, #1
 80020d4:	4013      	ands	r3, r2
 80020d6:	d009      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020d8:	4b2c      	ldr	r3, [pc, #176]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020dc:	2203      	movs	r2, #3
 80020de:	4393      	bics	r3, r2
 80020e0:	0019      	movs	r1, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020e8:	430a      	orrs	r2, r1
 80020ea:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2220      	movs	r2, #32
 80020f2:	4013      	ands	r3, r2
 80020f4:	d009      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f6:	4b25      	ldr	r3, [pc, #148]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	4a2a      	ldr	r2, [pc, #168]	; (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020fc:	4013      	ands	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002106:	430a      	orrs	r2, r1
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	01db      	lsls	r3, r3, #7
 8002112:	4013      	ands	r3, r2
 8002114:	d015      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	0899      	lsrs	r1, r3, #2
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002124:	430a      	orrs	r2, r1
 8002126:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691a      	ldr	r2, [r3, #16]
 800212c:	2380      	movs	r3, #128	; 0x80
 800212e:	05db      	lsls	r3, r3, #23
 8002130:	429a      	cmp	r2, r3
 8002132:	d106      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800213a:	2180      	movs	r1, #128	; 0x80
 800213c:	0249      	lsls	r1, r1, #9
 800213e:	430a      	orrs	r2, r1
 8002140:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	2380      	movs	r3, #128	; 0x80
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	4013      	ands	r3, r2
 800214c:	d016      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002154:	4013      	ands	r3, r2
 8002156:	0019      	movs	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800215e:	430a      	orrs	r2, r1
 8002160:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	01db      	lsls	r3, r3, #7
 800216a:	429a      	cmp	r2, r3
 800216c:	d106      	bne.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002174:	2180      	movs	r1, #128	; 0x80
 8002176:	0249      	lsls	r1, r1, #9
 8002178:	430a      	orrs	r2, r1
 800217a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800217c:	2312      	movs	r3, #18
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	781b      	ldrb	r3, [r3, #0]
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b006      	add	sp, #24
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40021000 	.word	0x40021000
 8002190:	40007000 	.word	0x40007000
 8002194:	fffffcff 	.word	0xfffffcff
 8002198:	fffeffff 	.word	0xfffeffff
 800219c:	00001388 	.word	0x00001388
 80021a0:	efffffff 	.word	0xefffffff
 80021a4:	ffffcfff 	.word	0xffffcfff
 80021a8:	ffff3fff 	.word	0xffff3fff

080021ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021ac:	b5b0      	push	{r4, r5, r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021b4:	230f      	movs	r3, #15
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2201      	movs	r2, #1
 80021ba:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d100      	bne.n	80021c4 <HAL_RTC_Init+0x18>
 80021c2:	e08c      	b.n	80022de <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2229      	movs	r2, #41	; 0x29
 80021c8:	5c9b      	ldrb	r3, [r3, r2]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2228      	movs	r2, #40	; 0x28
 80021d4:	2100      	movs	r1, #0
 80021d6:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2288      	movs	r2, #136	; 0x88
 80021dc:	0212      	lsls	r2, r2, #8
 80021de:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	0018      	movs	r0, r3
 80021e4:	f7fe fa82 	bl	80006ec <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2229      	movs	r2, #41	; 0x29
 80021ec:	2102      	movs	r1, #2
 80021ee:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2210      	movs	r2, #16
 80021f8:	4013      	ands	r3, r2
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d062      	beq.n	80022c4 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	22ca      	movs	r2, #202	; 0xca
 8002204:	625a      	str	r2, [r3, #36]	; 0x24
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2253      	movs	r2, #83	; 0x53
 800220c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800220e:	250f      	movs	r5, #15
 8002210:	197c      	adds	r4, r7, r5
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	0018      	movs	r0, r3
 8002216:	f000 f892 	bl	800233e <RTC_EnterInitMode>
 800221a:	0003      	movs	r3, r0
 800221c:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 800221e:	0028      	movs	r0, r5
 8002220:	183b      	adds	r3, r7, r0
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d12c      	bne.n	8002282 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699a      	ldr	r2, [r3, #24]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	492e      	ldr	r1, [pc, #184]	; (80022ec <HAL_RTC_Init+0x140>)
 8002234:	400a      	ands	r2, r1
 8002236:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6999      	ldr	r1, [r3, #24]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6912      	ldr	r2, [r2, #16]
 800225e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6919      	ldr	r1, [r3, #16]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	041a      	lsls	r2, r3, #16
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002274:	183c      	adds	r4, r7, r0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	0018      	movs	r0, r3
 800227a:	f000 f8a3 	bl	80023c4 <RTC_ExitInitMode>
 800227e:	0003      	movs	r3, r0
 8002280:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002282:	230f      	movs	r3, #15
 8002284:	18fb      	adds	r3, r7, r3
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d116      	bne.n	80022ba <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699a      	ldr	r2, [r3, #24]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	00d2      	lsls	r2, r2, #3
 8002298:	08d2      	lsrs	r2, r2, #3
 800229a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6999      	ldr	r1, [r3, #24]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	431a      	orrs	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	22ff      	movs	r2, #255	; 0xff
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
 80022c2:	e003      	b.n	80022cc <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80022c4:	230f      	movs	r3, #15
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	2200      	movs	r2, #0
 80022ca:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80022cc:	230f      	movs	r3, #15
 80022ce:	18fb      	adds	r3, r7, r3
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d103      	bne.n	80022de <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2229      	movs	r2, #41	; 0x29
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80022de:	230f      	movs	r3, #15
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	781b      	ldrb	r3, [r3, #0]
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b004      	add	sp, #16
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	fb8fffbf 	.word	0xfb8fffbf

080022f0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	21a0      	movs	r1, #160	; 0xa0
 8002304:	438a      	bics	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002308:	f7fe fc00 	bl	8000b0c <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002310:	e00a      	b.n	8002328 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002312:	f7fe fbfb 	bl	8000b0c <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	1ad2      	subs	r2, r2, r3
 800231c:	23fa      	movs	r3, #250	; 0xfa
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d901      	bls.n	8002328 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2220      	movs	r2, #32
 8002330:	4013      	ands	r3, r2
 8002332:	d0ee      	beq.n	8002312 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b004      	add	sp, #16
 800233c:	bd80      	pop	{r7, pc}

0800233e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b084      	sub	sp, #16
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002346:	230f      	movs	r3, #15
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2240      	movs	r2, #64	; 0x40
 8002356:	4013      	ands	r3, r2
 8002358:	d12c      	bne.n	80023b4 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2180      	movs	r1, #128	; 0x80
 8002366:	430a      	orrs	r2, r1
 8002368:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800236a:	f7fe fbcf 	bl	8000b0c <HAL_GetTick>
 800236e:	0003      	movs	r3, r0
 8002370:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002372:	e014      	b.n	800239e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002374:	f7fe fbca 	bl	8000b0c <HAL_GetTick>
 8002378:	0002      	movs	r2, r0
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1ad2      	subs	r2, r2, r3
 800237e:	200f      	movs	r0, #15
 8002380:	183b      	adds	r3, r7, r0
 8002382:	1839      	adds	r1, r7, r0
 8002384:	7809      	ldrb	r1, [r1, #0]
 8002386:	7019      	strb	r1, [r3, #0]
 8002388:	23fa      	movs	r3, #250	; 0xfa
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	429a      	cmp	r2, r3
 800238e:	d906      	bls.n	800239e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8002390:	183b      	adds	r3, r7, r0
 8002392:	2203      	movs	r2, #3
 8002394:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2229      	movs	r2, #41	; 0x29
 800239a:	2103      	movs	r1, #3
 800239c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2240      	movs	r2, #64	; 0x40
 80023a6:	4013      	ands	r3, r2
 80023a8:	d104      	bne.n	80023b4 <RTC_EnterInitMode+0x76>
 80023aa:	230f      	movs	r3, #15
 80023ac:	18fb      	adds	r3, r7, r3
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d1df      	bne.n	8002374 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80023b4:	230f      	movs	r3, #15
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	781b      	ldrb	r3, [r3, #0]
}
 80023ba:	0018      	movs	r0, r3
 80023bc:	46bd      	mov	sp, r7
 80023be:	b004      	add	sp, #16
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	240f      	movs	r4, #15
 80023ce:	193b      	adds	r3, r7, r4
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <RTC_ExitInitMode+0x84>)
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <RTC_ExitInitMode+0x84>)
 80023da:	2180      	movs	r1, #128	; 0x80
 80023dc:	438a      	bics	r2, r1
 80023de:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80023e0:	4b19      	ldr	r3, [pc, #100]	; (8002448 <RTC_ExitInitMode+0x84>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	2220      	movs	r2, #32
 80023e6:	4013      	ands	r3, r2
 80023e8:	d10d      	bne.n	8002406 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f7ff ff7f 	bl	80022f0 <HAL_RTC_WaitForSynchro>
 80023f2:	1e03      	subs	r3, r0, #0
 80023f4:	d021      	beq.n	800243a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2229      	movs	r2, #41	; 0x29
 80023fa:	2103      	movs	r1, #3
 80023fc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80023fe:	193b      	adds	r3, r7, r4
 8002400:	2203      	movs	r2, #3
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	e019      	b.n	800243a <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002406:	4b10      	ldr	r3, [pc, #64]	; (8002448 <RTC_ExitInitMode+0x84>)
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <RTC_ExitInitMode+0x84>)
 800240c:	2120      	movs	r1, #32
 800240e:	438a      	bics	r2, r1
 8002410:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	0018      	movs	r0, r3
 8002416:	f7ff ff6b 	bl	80022f0 <HAL_RTC_WaitForSynchro>
 800241a:	1e03      	subs	r3, r0, #0
 800241c:	d007      	beq.n	800242e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2229      	movs	r2, #41	; 0x29
 8002422:	2103      	movs	r1, #3
 8002424:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002426:	230f      	movs	r3, #15
 8002428:	18fb      	adds	r3, r7, r3
 800242a:	2203      	movs	r2, #3
 800242c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800242e:	4b06      	ldr	r3, [pc, #24]	; (8002448 <RTC_ExitInitMode+0x84>)
 8002430:	699a      	ldr	r2, [r3, #24]
 8002432:	4b05      	ldr	r3, [pc, #20]	; (8002448 <RTC_ExitInitMode+0x84>)
 8002434:	2120      	movs	r1, #32
 8002436:	430a      	orrs	r2, r1
 8002438:	619a      	str	r2, [r3, #24]
  }

  return status;
 800243a:	230f      	movs	r3, #15
 800243c:	18fb      	adds	r3, r7, r3
 800243e:	781b      	ldrb	r3, [r3, #0]
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b005      	add	sp, #20
 8002446:	bd90      	pop	{r4, r7, pc}
 8002448:	40002800 	.word	0x40002800

0800244c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e046      	b.n	80024ec <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2288      	movs	r2, #136	; 0x88
 8002462:	589b      	ldr	r3, [r3, r2]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d107      	bne.n	8002478 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2284      	movs	r2, #132	; 0x84
 800246c:	2100      	movs	r1, #0
 800246e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	0018      	movs	r0, r3
 8002474:	f7fe fa14 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2288      	movs	r2, #136	; 0x88
 800247c:	2124      	movs	r1, #36	; 0x24
 800247e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2101      	movs	r1, #1
 800248c:	438a      	bics	r2, r1
 800248e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 f830 	bl	80024f8 <UART_SetConfig>
 8002498:	0003      	movs	r3, r0
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e024      	b.n	80024ec <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	0018      	movs	r0, r3
 80024ae:	f000 f98d 	bl	80027cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	490d      	ldr	r1, [pc, #52]	; (80024f4 <HAL_UART_Init+0xa8>)
 80024be:	400a      	ands	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689a      	ldr	r2, [r3, #8]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	212a      	movs	r1, #42	; 0x2a
 80024ce:	438a      	bics	r2, r1
 80024d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	2101      	movs	r1, #1
 80024de:	430a      	orrs	r2, r1
 80024e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f000 fa25 	bl	8002934 <UART_CheckIdleState>
 80024ea:	0003      	movs	r3, r0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b002      	add	sp, #8
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	ffffb7ff 	.word	0xffffb7ff

080024f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002500:	231a      	movs	r3, #26
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	4313      	orrs	r3, r2
 800251e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4aa1      	ldr	r2, [pc, #644]	; (80027ac <UART_SetConfig+0x2b4>)
 8002528:	4013      	ands	r3, r2
 800252a:	0019      	movs	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a9c      	ldr	r2, [pc, #624]	; (80027b0 <UART_SetConfig+0x2b8>)
 800253e:	4013      	ands	r3, r2
 8002540:	0019      	movs	r1, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	4313      	orrs	r3, r2
 800255c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4a93      	ldr	r2, [pc, #588]	; (80027b4 <UART_SetConfig+0x2bc>)
 8002566:	4013      	ands	r3, r2
 8002568:	0019      	movs	r1, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	220f      	movs	r2, #15
 800257c:	4393      	bics	r3, r2
 800257e:	0019      	movs	r1, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a89      	ldr	r2, [pc, #548]	; (80027b8 <UART_SetConfig+0x2c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d127      	bne.n	80025e6 <UART_SetConfig+0xee>
 8002596:	4b89      	ldr	r3, [pc, #548]	; (80027bc <UART_SetConfig+0x2c4>)
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	2203      	movs	r2, #3
 800259c:	4013      	ands	r3, r2
 800259e:	2b03      	cmp	r3, #3
 80025a0:	d017      	beq.n	80025d2 <UART_SetConfig+0xda>
 80025a2:	d81b      	bhi.n	80025dc <UART_SetConfig+0xe4>
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d00a      	beq.n	80025be <UART_SetConfig+0xc6>
 80025a8:	d818      	bhi.n	80025dc <UART_SetConfig+0xe4>
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <UART_SetConfig+0xbc>
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d00a      	beq.n	80025c8 <UART_SetConfig+0xd0>
 80025b2:	e013      	b.n	80025dc <UART_SetConfig+0xe4>
 80025b4:	231b      	movs	r3, #27
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	e021      	b.n	8002602 <UART_SetConfig+0x10a>
 80025be:	231b      	movs	r3, #27
 80025c0:	18fb      	adds	r3, r7, r3
 80025c2:	2202      	movs	r2, #2
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e01c      	b.n	8002602 <UART_SetConfig+0x10a>
 80025c8:	231b      	movs	r3, #27
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	2204      	movs	r2, #4
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e017      	b.n	8002602 <UART_SetConfig+0x10a>
 80025d2:	231b      	movs	r3, #27
 80025d4:	18fb      	adds	r3, r7, r3
 80025d6:	2208      	movs	r2, #8
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e012      	b.n	8002602 <UART_SetConfig+0x10a>
 80025dc:	231b      	movs	r3, #27
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	2210      	movs	r2, #16
 80025e2:	701a      	strb	r2, [r3, #0]
 80025e4:	e00d      	b.n	8002602 <UART_SetConfig+0x10a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a75      	ldr	r2, [pc, #468]	; (80027c0 <UART_SetConfig+0x2c8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d104      	bne.n	80025fa <UART_SetConfig+0x102>
 80025f0:	231b      	movs	r3, #27
 80025f2:	18fb      	adds	r3, r7, r3
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
 80025f8:	e003      	b.n	8002602 <UART_SetConfig+0x10a>
 80025fa:	231b      	movs	r3, #27
 80025fc:	18fb      	adds	r3, r7, r3
 80025fe:	2210      	movs	r2, #16
 8002600:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69da      	ldr	r2, [r3, #28]
 8002606:	2380      	movs	r3, #128	; 0x80
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	429a      	cmp	r2, r3
 800260c:	d000      	beq.n	8002610 <UART_SetConfig+0x118>
 800260e:	e065      	b.n	80026dc <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002610:	231b      	movs	r3, #27
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b08      	cmp	r3, #8
 8002618:	d015      	beq.n	8002646 <UART_SetConfig+0x14e>
 800261a:	dc18      	bgt.n	800264e <UART_SetConfig+0x156>
 800261c:	2b04      	cmp	r3, #4
 800261e:	d00d      	beq.n	800263c <UART_SetConfig+0x144>
 8002620:	dc15      	bgt.n	800264e <UART_SetConfig+0x156>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <UART_SetConfig+0x134>
 8002626:	2b02      	cmp	r3, #2
 8002628:	d005      	beq.n	8002636 <UART_SetConfig+0x13e>
 800262a:	e010      	b.n	800264e <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800262c:	f7ff fc82 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 8002630:	0003      	movs	r3, r0
 8002632:	617b      	str	r3, [r7, #20]
        break;
 8002634:	e012      	b.n	800265c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <UART_SetConfig+0x2cc>)
 8002638:	617b      	str	r3, [r7, #20]
        break;
 800263a:	e00f      	b.n	800265c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800263c:	f7ff fbee 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8002640:	0003      	movs	r3, r0
 8002642:	617b      	str	r3, [r7, #20]
        break;
 8002644:	e00a      	b.n	800265c <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002646:	2380      	movs	r3, #128	; 0x80
 8002648:	021b      	lsls	r3, r3, #8
 800264a:	617b      	str	r3, [r7, #20]
        break;
 800264c:	e006      	b.n	800265c <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002652:	231a      	movs	r3, #26
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	2201      	movs	r2, #1
 8002658:	701a      	strb	r2, [r3, #0]
        break;
 800265a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d100      	bne.n	8002664 <UART_SetConfig+0x16c>
 8002662:	e08d      	b.n	8002780 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002668:	4b57      	ldr	r3, [pc, #348]	; (80027c8 <UART_SetConfig+0x2d0>)
 800266a:	0052      	lsls	r2, r2, #1
 800266c:	5ad3      	ldrh	r3, [r2, r3]
 800266e:	0019      	movs	r1, r3
 8002670:	6978      	ldr	r0, [r7, #20]
 8002672:	f7fd fd45 	bl	8000100 <__udivsi3>
 8002676:	0003      	movs	r3, r0
 8002678:	005a      	lsls	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	18d2      	adds	r2, r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	0019      	movs	r1, r3
 8002688:	0010      	movs	r0, r2
 800268a:	f7fd fd39 	bl	8000100 <__udivsi3>
 800268e:	0003      	movs	r3, r0
 8002690:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	2b0f      	cmp	r3, #15
 8002696:	d91c      	bls.n	80026d2 <UART_SetConfig+0x1da>
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	025b      	lsls	r3, r3, #9
 800269e:	429a      	cmp	r2, r3
 80026a0:	d217      	bcs.n	80026d2 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	b29a      	uxth	r2, r3
 80026a6:	200e      	movs	r0, #14
 80026a8:	183b      	adds	r3, r7, r0
 80026aa:	210f      	movs	r1, #15
 80026ac:	438a      	bics	r2, r1
 80026ae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	085b      	lsrs	r3, r3, #1
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2207      	movs	r2, #7
 80026b8:	4013      	ands	r3, r2
 80026ba:	b299      	uxth	r1, r3
 80026bc:	183b      	adds	r3, r7, r0
 80026be:	183a      	adds	r2, r7, r0
 80026c0:	8812      	ldrh	r2, [r2, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	183a      	adds	r2, r7, r0
 80026cc:	8812      	ldrh	r2, [r2, #0]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	e056      	b.n	8002780 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80026d2:	231a      	movs	r3, #26
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
 80026da:	e051      	b.n	8002780 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 80026dc:	231b      	movs	r3, #27
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d015      	beq.n	8002712 <UART_SetConfig+0x21a>
 80026e6:	dc18      	bgt.n	800271a <UART_SetConfig+0x222>
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d00d      	beq.n	8002708 <UART_SetConfig+0x210>
 80026ec:	dc15      	bgt.n	800271a <UART_SetConfig+0x222>
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d002      	beq.n	80026f8 <UART_SetConfig+0x200>
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d005      	beq.n	8002702 <UART_SetConfig+0x20a>
 80026f6:	e010      	b.n	800271a <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026f8:	f7ff fc1c 	bl	8001f34 <HAL_RCC_GetPCLK1Freq>
 80026fc:	0003      	movs	r3, r0
 80026fe:	617b      	str	r3, [r7, #20]
        break;
 8002700:	e012      	b.n	8002728 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <UART_SetConfig+0x2cc>)
 8002704:	617b      	str	r3, [r7, #20]
        break;
 8002706:	e00f      	b.n	8002728 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002708:	f7ff fb88 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 800270c:	0003      	movs	r3, r0
 800270e:	617b      	str	r3, [r7, #20]
        break;
 8002710:	e00a      	b.n	8002728 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	021b      	lsls	r3, r3, #8
 8002716:	617b      	str	r3, [r7, #20]
        break;
 8002718:	e006      	b.n	8002728 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800271e:	231a      	movs	r3, #26
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
        break;
 8002726:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d028      	beq.n	8002780 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <UART_SetConfig+0x2d0>)
 8002734:	0052      	lsls	r2, r2, #1
 8002736:	5ad3      	ldrh	r3, [r2, r3]
 8002738:	0019      	movs	r1, r3
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7fd fce0 	bl	8000100 <__udivsi3>
 8002740:	0003      	movs	r3, r0
 8002742:	001a      	movs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	085b      	lsrs	r3, r3, #1
 800274a:	18d2      	adds	r2, r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	0019      	movs	r1, r3
 8002752:	0010      	movs	r0, r2
 8002754:	f7fd fcd4 	bl	8000100 <__udivsi3>
 8002758:	0003      	movs	r3, r0
 800275a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b0f      	cmp	r3, #15
 8002760:	d90a      	bls.n	8002778 <UART_SetConfig+0x280>
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	025b      	lsls	r3, r3, #9
 8002768:	429a      	cmp	r2, r3
 800276a:	d205      	bcs.n	8002778 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	b29a      	uxth	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	e003      	b.n	8002780 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002778:	231a      	movs	r3, #26
 800277a:	18fb      	adds	r3, r7, r3
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	226a      	movs	r2, #106	; 0x6a
 8002784:	2101      	movs	r1, #1
 8002786:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2268      	movs	r2, #104	; 0x68
 800278c:	2101      	movs	r1, #1
 800278e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800279c:	231a      	movs	r3, #26
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	781b      	ldrb	r3, [r3, #0]
}
 80027a2:	0018      	movs	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	b008      	add	sp, #32
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	46c0      	nop			; (mov r8, r8)
 80027ac:	cfff69f3 	.word	0xcfff69f3
 80027b0:	ffffcfff 	.word	0xffffcfff
 80027b4:	11fff4ff 	.word	0x11fff4ff
 80027b8:	40013800 	.word	0x40013800
 80027bc:	40021000 	.word	0x40021000
 80027c0:	40004400 	.word	0x40004400
 80027c4:	00f42400 	.word	0x00f42400
 80027c8:	08002e64 	.word	0x08002e64

080027cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d8:	2201      	movs	r2, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	d00b      	beq.n	80027f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a4a      	ldr	r2, [pc, #296]	; (8002910 <UART_AdvFeatureConfig+0x144>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	2202      	movs	r2, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	d00b      	beq.n	8002818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	4a43      	ldr	r2, [pc, #268]	; (8002914 <UART_AdvFeatureConfig+0x148>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281c:	2204      	movs	r2, #4
 800281e:	4013      	ands	r3, r2
 8002820:	d00b      	beq.n	800283a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a3b      	ldr	r2, [pc, #236]	; (8002918 <UART_AdvFeatureConfig+0x14c>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283e:	2208      	movs	r2, #8
 8002840:	4013      	ands	r3, r2
 8002842:	d00b      	beq.n	800285c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	4a34      	ldr	r2, [pc, #208]	; (800291c <UART_AdvFeatureConfig+0x150>)
 800284c:	4013      	ands	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	2210      	movs	r2, #16
 8002862:	4013      	ands	r3, r2
 8002864:	d00b      	beq.n	800287e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	4a2c      	ldr	r2, [pc, #176]	; (8002920 <UART_AdvFeatureConfig+0x154>)
 800286e:	4013      	ands	r3, r2
 8002870:	0019      	movs	r1, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	2220      	movs	r2, #32
 8002884:	4013      	ands	r3, r2
 8002886:	d00b      	beq.n	80028a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4a25      	ldr	r2, [pc, #148]	; (8002924 <UART_AdvFeatureConfig+0x158>)
 8002890:	4013      	ands	r3, r2
 8002892:	0019      	movs	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	4013      	ands	r3, r2
 80028a8:	d01d      	beq.n	80028e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <UART_AdvFeatureConfig+0x15c>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	035b      	lsls	r3, r3, #13
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d10b      	bne.n	80028e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <UART_AdvFeatureConfig+0x160>)
 80028d6:	4013      	ands	r3, r2
 80028d8:	0019      	movs	r1, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	4013      	ands	r3, r2
 80028ee:	d00b      	beq.n	8002908 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <UART_AdvFeatureConfig+0x164>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	605a      	str	r2, [r3, #4]
  }
}
 8002908:	46c0      	nop			; (mov r8, r8)
 800290a:	46bd      	mov	sp, r7
 800290c:	b002      	add	sp, #8
 800290e:	bd80      	pop	{r7, pc}
 8002910:	fffdffff 	.word	0xfffdffff
 8002914:	fffeffff 	.word	0xfffeffff
 8002918:	fffbffff 	.word	0xfffbffff
 800291c:	ffff7fff 	.word	0xffff7fff
 8002920:	ffffefff 	.word	0xffffefff
 8002924:	ffffdfff 	.word	0xffffdfff
 8002928:	ffefffff 	.word	0xffefffff
 800292c:	ff9fffff 	.word	0xff9fffff
 8002930:	fff7ffff 	.word	0xfff7ffff

08002934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af02      	add	r7, sp, #8
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2290      	movs	r2, #144	; 0x90
 8002940:	2100      	movs	r1, #0
 8002942:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002944:	f7fe f8e2 	bl	8000b0c <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2208      	movs	r2, #8
 8002954:	4013      	ands	r3, r2
 8002956:	2b08      	cmp	r3, #8
 8002958:	d10c      	bne.n	8002974 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	0391      	lsls	r1, r2, #14
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4a1a      	ldr	r2, [pc, #104]	; (80029cc <UART_CheckIdleState+0x98>)
 8002964:	9200      	str	r2, [sp, #0]
 8002966:	2200      	movs	r2, #0
 8002968:	f000 f832 	bl	80029d0 <UART_WaitOnFlagUntilTimeout>
 800296c:	1e03      	subs	r3, r0, #0
 800296e:	d001      	beq.n	8002974 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e026      	b.n	80029c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2204      	movs	r2, #4
 800297c:	4013      	ands	r3, r2
 800297e:	2b04      	cmp	r3, #4
 8002980:	d10c      	bne.n	800299c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2280      	movs	r2, #128	; 0x80
 8002986:	03d1      	lsls	r1, r2, #15
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4a10      	ldr	r2, [pc, #64]	; (80029cc <UART_CheckIdleState+0x98>)
 800298c:	9200      	str	r2, [sp, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	f000 f81e 	bl	80029d0 <UART_WaitOnFlagUntilTimeout>
 8002994:	1e03      	subs	r3, r0, #0
 8002996:	d001      	beq.n	800299c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e012      	b.n	80029c2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2288      	movs	r2, #136	; 0x88
 80029a0:	2120      	movs	r1, #32
 80029a2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	228c      	movs	r2, #140	; 0x8c
 80029a8:	2120      	movs	r1, #32
 80029aa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2284      	movs	r2, #132	; 0x84
 80029bc:	2100      	movs	r1, #0
 80029be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b004      	add	sp, #16
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	01ffffff 	.word	0x01ffffff

080029d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b094      	sub	sp, #80	; 0x50
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	603b      	str	r3, [r7, #0]
 80029dc:	1dfb      	adds	r3, r7, #7
 80029de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029e0:	e0a7      	b.n	8002b32 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e4:	3301      	adds	r3, #1
 80029e6:	d100      	bne.n	80029ea <UART_WaitOnFlagUntilTimeout+0x1a>
 80029e8:	e0a3      	b.n	8002b32 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	f7fe f88f 	bl	8000b0c <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d302      	bcc.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x30>
 80029fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d13f      	bne.n	8002a80 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a00:	f3ef 8310 	mrs	r3, PRIMASK
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002a08:	647b      	str	r3, [r7, #68]	; 0x44
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	f383 8810 	msr	PRIMASK, r3
}
 8002a14:	46c0      	nop			; (mov r8, r8)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	494e      	ldr	r1, [pc, #312]	; (8002b5c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002a22:	400a      	ands	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a28:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2c:	f383 8810 	msr	PRIMASK, r3
}
 8002a30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a32:	f3ef 8310 	mrs	r3, PRIMASK
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a42:	f383 8810 	msr	PRIMASK, r3
}
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2101      	movs	r1, #1
 8002a54:	438a      	bics	r2, r1
 8002a56:	609a      	str	r2, [r3, #8]
 8002a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5e:	f383 8810 	msr	PRIMASK, r3
}
 8002a62:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2288      	movs	r2, #136	; 0x88
 8002a68:	2120      	movs	r1, #32
 8002a6a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	228c      	movs	r2, #140	; 0x8c
 8002a70:	2120      	movs	r1, #32
 8002a72:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2284      	movs	r2, #132	; 0x84
 8002a78:	2100      	movs	r1, #0
 8002a7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e069      	b.n	8002b54 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2204      	movs	r2, #4
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d052      	beq.n	8002b32 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	401a      	ands	r2, r3
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d148      	bne.n	8002b32 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aaa:	f3ef 8310 	mrs	r3, PRIMASK
 8002aae:	613b      	str	r3, [r7, #16]
  return(result);
 8002ab0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002ab2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f383 8810 	msr	PRIMASK, r3
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4924      	ldr	r1, [pc, #144]	; (8002b5c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
 8002ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ad2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f383 8810 	msr	PRIMASK, r3
}
 8002ada:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002adc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ae0:	61fb      	str	r3, [r7, #28]
  return(result);
 8002ae2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ae4:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	f383 8810 	msr	PRIMASK, r3
}
 8002af0:	46c0      	nop			; (mov r8, r8)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2101      	movs	r1, #1
 8002afe:	438a      	bics	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	f383 8810 	msr	PRIMASK, r3
}
 8002b0c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2288      	movs	r2, #136	; 0x88
 8002b12:	2120      	movs	r1, #32
 8002b14:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	228c      	movs	r2, #140	; 0x8c
 8002b1a:	2120      	movs	r1, #32
 8002b1c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2290      	movs	r2, #144	; 0x90
 8002b22:	2120      	movs	r1, #32
 8002b24:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2284      	movs	r2, #132	; 0x84
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e010      	b.n	8002b54 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	69db      	ldr	r3, [r3, #28]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	425a      	negs	r2, r3
 8002b42:	4153      	adcs	r3, r2
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	001a      	movs	r2, r3
 8002b48:	1dfb      	adds	r3, r7, #7
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d100      	bne.n	8002b52 <UART_WaitOnFlagUntilTimeout+0x182>
 8002b50:	e747      	b.n	80029e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	0018      	movs	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	b014      	add	sp, #80	; 0x50
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	fffffe5f 	.word	0xfffffe5f

08002b60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2284      	movs	r2, #132	; 0x84
 8002b6c:	5c9b      	ldrb	r3, [r3, r2]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d101      	bne.n	8002b76 <HAL_UARTEx_DisableFifoMode+0x16>
 8002b72:	2302      	movs	r3, #2
 8002b74:	e027      	b.n	8002bc6 <HAL_UARTEx_DisableFifoMode+0x66>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2284      	movs	r2, #132	; 0x84
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2288      	movs	r2, #136	; 0x88
 8002b82:	2124      	movs	r1, #36	; 0x24
 8002b84:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2101      	movs	r1, #1
 8002b9a:	438a      	bics	r2, r1
 8002b9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4a0b      	ldr	r2, [pc, #44]	; (8002bd0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2288      	movs	r2, #136	; 0x88
 8002bb8:	2120      	movs	r1, #32
 8002bba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2284      	movs	r2, #132	; 0x84
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b004      	add	sp, #16
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	dfffffff 	.word	0xdfffffff

08002bd4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2284      	movs	r2, #132	; 0x84
 8002be2:	5c9b      	ldrb	r3, [r3, r2]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e02e      	b.n	8002c4a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2284      	movs	r2, #132	; 0x84
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2288      	movs	r2, #136	; 0x88
 8002bf8:	2124      	movs	r1, #36	; 0x24
 8002bfa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	438a      	bics	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	08d9      	lsrs	r1, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 f854 	bl	8002cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2288      	movs	r2, #136	; 0x88
 8002c3c:	2120      	movs	r1, #32
 8002c3e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2284      	movs	r2, #132	; 0x84
 8002c44:	2100      	movs	r1, #0
 8002c46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	0018      	movs	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b004      	add	sp, #16
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2284      	movs	r2, #132	; 0x84
 8002c62:	5c9b      	ldrb	r3, [r3, r2]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e02f      	b.n	8002ccc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2284      	movs	r2, #132	; 0x84
 8002c70:	2101      	movs	r1, #1
 8002c72:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2288      	movs	r2, #136	; 0x88
 8002c78:	2124      	movs	r1, #36	; 0x24
 8002c7a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	438a      	bics	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4a0e      	ldr	r2, [pc, #56]	; (8002cd4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f000 f813 	bl	8002cd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2288      	movs	r2, #136	; 0x88
 8002cbe:	2120      	movs	r1, #32
 8002cc0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2284      	movs	r2, #132	; 0x84
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	0018      	movs	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b004      	add	sp, #16
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	f1ffffff 	.word	0xf1ffffff

08002cd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d108      	bne.n	8002cfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	226a      	movs	r2, #106	; 0x6a
 8002cec:	2101      	movs	r1, #1
 8002cee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2268      	movs	r2, #104	; 0x68
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002cf8:	e043      	b.n	8002d82 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002cfa:	260f      	movs	r6, #15
 8002cfc:	19bb      	adds	r3, r7, r6
 8002cfe:	2208      	movs	r2, #8
 8002d00:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d02:	200e      	movs	r0, #14
 8002d04:	183b      	adds	r3, r7, r0
 8002d06:	2208      	movs	r2, #8
 8002d08:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	0e5b      	lsrs	r3, r3, #25
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	240d      	movs	r4, #13
 8002d16:	193b      	adds	r3, r7, r4
 8002d18:	2107      	movs	r1, #7
 8002d1a:	400a      	ands	r2, r1
 8002d1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	0f5b      	lsrs	r3, r3, #29
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	250c      	movs	r5, #12
 8002d2a:	197b      	adds	r3, r7, r5
 8002d2c:	2107      	movs	r1, #7
 8002d2e:	400a      	ands	r2, r1
 8002d30:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d32:	183b      	adds	r3, r7, r0
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	197a      	adds	r2, r7, r5
 8002d38:	7812      	ldrb	r2, [r2, #0]
 8002d3a:	4914      	ldr	r1, [pc, #80]	; (8002d8c <UARTEx_SetNbDataToProcess+0xb4>)
 8002d3c:	5c8a      	ldrb	r2, [r1, r2]
 8002d3e:	435a      	muls	r2, r3
 8002d40:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d42:	197b      	adds	r3, r7, r5
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <UARTEx_SetNbDataToProcess+0xb8>)
 8002d48:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	f7fd fa62 	bl	8000214 <__divsi3>
 8002d50:	0003      	movs	r3, r0
 8002d52:	b299      	uxth	r1, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	226a      	movs	r2, #106	; 0x6a
 8002d58:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d5a:	19bb      	adds	r3, r7, r6
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	193a      	adds	r2, r7, r4
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	490a      	ldr	r1, [pc, #40]	; (8002d8c <UARTEx_SetNbDataToProcess+0xb4>)
 8002d64:	5c8a      	ldrb	r2, [r1, r2]
 8002d66:	435a      	muls	r2, r3
 8002d68:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d6a:	193b      	adds	r3, r7, r4
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <UARTEx_SetNbDataToProcess+0xb8>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d72:	0019      	movs	r1, r3
 8002d74:	f7fd fa4e 	bl	8000214 <__divsi3>
 8002d78:	0003      	movs	r3, r0
 8002d7a:	b299      	uxth	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2268      	movs	r2, #104	; 0x68
 8002d80:	5299      	strh	r1, [r3, r2]
}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b005      	add	sp, #20
 8002d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	08002e7c 	.word	0x08002e7c
 8002d90:	08002e84 	.word	0x08002e84

08002d94 <__libc_init_array>:
 8002d94:	b570      	push	{r4, r5, r6, lr}
 8002d96:	2600      	movs	r6, #0
 8002d98:	4d0c      	ldr	r5, [pc, #48]	; (8002dcc <__libc_init_array+0x38>)
 8002d9a:	4c0d      	ldr	r4, [pc, #52]	; (8002dd0 <__libc_init_array+0x3c>)
 8002d9c:	1b64      	subs	r4, r4, r5
 8002d9e:	10a4      	asrs	r4, r4, #2
 8002da0:	42a6      	cmp	r6, r4
 8002da2:	d109      	bne.n	8002db8 <__libc_init_array+0x24>
 8002da4:	2600      	movs	r6, #0
 8002da6:	f000 f821 	bl	8002dec <_init>
 8002daa:	4d0a      	ldr	r5, [pc, #40]	; (8002dd4 <__libc_init_array+0x40>)
 8002dac:	4c0a      	ldr	r4, [pc, #40]	; (8002dd8 <__libc_init_array+0x44>)
 8002dae:	1b64      	subs	r4, r4, r5
 8002db0:	10a4      	asrs	r4, r4, #2
 8002db2:	42a6      	cmp	r6, r4
 8002db4:	d105      	bne.n	8002dc2 <__libc_init_array+0x2e>
 8002db6:	bd70      	pop	{r4, r5, r6, pc}
 8002db8:	00b3      	lsls	r3, r6, #2
 8002dba:	58eb      	ldr	r3, [r5, r3]
 8002dbc:	4798      	blx	r3
 8002dbe:	3601      	adds	r6, #1
 8002dc0:	e7ee      	b.n	8002da0 <__libc_init_array+0xc>
 8002dc2:	00b3      	lsls	r3, r6, #2
 8002dc4:	58eb      	ldr	r3, [r5, r3]
 8002dc6:	4798      	blx	r3
 8002dc8:	3601      	adds	r6, #1
 8002dca:	e7f2      	b.n	8002db2 <__libc_init_array+0x1e>
 8002dcc:	08002e8c 	.word	0x08002e8c
 8002dd0:	08002e8c 	.word	0x08002e8c
 8002dd4:	08002e8c 	.word	0x08002e8c
 8002dd8:	08002e90 	.word	0x08002e90

08002ddc <memset>:
 8002ddc:	0003      	movs	r3, r0
 8002dde:	1882      	adds	r2, r0, r2
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <_init>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	46c0      	nop			; (mov r8, r8)
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr

08002df8 <_fini>:
 8002df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfe:	bc08      	pop	{r3}
 8002e00:	469e      	mov	lr, r3
 8002e02:	4770      	bx	lr
