
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004440  08004440  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08004440  08004440  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004440  08004440  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004440  08004440  00014440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004444  08004444  00014444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000024  0800446c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  0800446c  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015662  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312f  00000000  00000000  000356ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  000387e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00039918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e26  00000000  00000000  0003a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001816d  00000000  00000000  0005270e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092a16  00000000  00000000  0006a87b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fd291  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c78  00000000  00000000  000fd2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000024 	.word	0x20000024
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004388 	.word	0x08004388

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000028 	.word	0x20000028
 80000fc:	08004388 	.word	0x08004388

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <SM_MainFunction>:
Sm_TypeDef SmPtr                            = { 0 };
bh1750_t Bh                                 = { 0 };
uint8_t data[100];

void SM_MainFunction()
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
   if(TIM_GetTick() - SmPtr.LastTick > 10)
 80003f0:	f000 faf4 	bl	80009dc <TIM_GetTick>
 80003f4:	0003      	movs	r3, r0
 80003f6:	001a      	movs	r2, r3
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <SM_MainFunction+0x4c>)
 80003fa:	881b      	ldrh	r3, [r3, #0]
 80003fc:	1ad3      	subs	r3, r2, r3
 80003fe:	2b0a      	cmp	r3, #10
 8000400:	dd16      	ble.n	8000430 <SM_MainFunction+0x44>
   {
      SM_ChangeState();
 8000402:	f000 f81d 	bl	8000440 <SM_ChangeState>
      SmPtr.LastTick = TIM_GetTick();
 8000406:	f000 fae9 	bl	80009dc <TIM_GetTick>
 800040a:	0003      	movs	r3, r0
 800040c:	001a      	movs	r2, r3
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <SM_MainFunction+0x4c>)
 8000410:	801a      	strh	r2, [r3, #0]
      if(Function[SmPtr.State].SmFunction != NULL)
 8000412:	4b09      	ldr	r3, [pc, #36]	; (8000438 <SM_MainFunction+0x4c>)
 8000414:	789b      	ldrb	r3, [r3, #2]
 8000416:	001a      	movs	r2, r3
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <SM_MainFunction+0x50>)
 800041a:	0092      	lsls	r2, r2, #2
 800041c:	58d3      	ldr	r3, [r2, r3]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d006      	beq.n	8000430 <SM_MainFunction+0x44>
      {
         Function[SmPtr.State].SmFunction();
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SM_MainFunction+0x4c>)
 8000424:	789b      	ldrb	r3, [r3, #2]
 8000426:	001a      	movs	r2, r3
 8000428:	4b04      	ldr	r3, [pc, #16]	; (800043c <SM_MainFunction+0x50>)
 800042a:	0092      	lsls	r2, r2, #2
 800042c:	58d3      	ldr	r3, [r2, r3]
 800042e:	4798      	blx	r3
      }
   }
}
 8000430:	46c0      	nop			; (mov r8, r8)
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	46c0      	nop			; (mov r8, r8)
 8000438:	20000040 	.word	0x20000040
 800043c:	20000010 	.word	0x20000010

08000440 <SM_ChangeState>:
static void SM_ChangeState()
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
 800044a:	e026      	b.n	800049a <SM_ChangeState+0x5a>
   {
      if(SmPtr.State == TransitionTable[i].Source && SmPtr.NewEvent == TransitionTable[i].Event)
 800044c:	4b16      	ldr	r3, [pc, #88]	; (80004a8 <SM_ChangeState+0x68>)
 800044e:	7899      	ldrb	r1, [r3, #2]
 8000450:	4816      	ldr	r0, [pc, #88]	; (80004ac <SM_ChangeState+0x6c>)
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	0013      	movs	r3, r2
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	189b      	adds	r3, r3, r2
 800045a:	5c1b      	ldrb	r3, [r3, r0]
 800045c:	4299      	cmp	r1, r3
 800045e:	d119      	bne.n	8000494 <SM_ChangeState+0x54>
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <SM_ChangeState+0x68>)
 8000462:	78d9      	ldrb	r1, [r3, #3]
 8000464:	4811      	ldr	r0, [pc, #68]	; (80004ac <SM_ChangeState+0x6c>)
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	0013      	movs	r3, r2
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	189b      	adds	r3, r3, r2
 800046e:	18c3      	adds	r3, r0, r3
 8000470:	3302      	adds	r3, #2
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4299      	cmp	r1, r3
 8000476:	d10d      	bne.n	8000494 <SM_ChangeState+0x54>
      {
         SmPtr.State    = TransitionTable[i].Destination;
 8000478:	490c      	ldr	r1, [pc, #48]	; (80004ac <SM_ChangeState+0x6c>)
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	0013      	movs	r3, r2
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	189b      	adds	r3, r3, r2
 8000482:	18cb      	adds	r3, r1, r3
 8000484:	3301      	adds	r3, #1
 8000486:	781a      	ldrb	r2, [r3, #0]
 8000488:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <SM_ChangeState+0x68>)
 800048a:	709a      	strb	r2, [r3, #2]
         SmPtr.NewEvent = SM_EVENT_NOTHING;
 800048c:	4b06      	ldr	r3, [pc, #24]	; (80004a8 <SM_ChangeState+0x68>)
 800048e:	2200      	movs	r2, #0
 8000490:	70da      	strb	r2, [r3, #3]
         return;
 8000492:	e005      	b.n	80004a0 <SM_ChangeState+0x60>
   for(int i = 0; i < TRANSITION_TABLE_SIZE; i++)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	3301      	adds	r3, #1
 8000498:	607b      	str	r3, [r7, #4]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b04      	cmp	r3, #4
 800049e:	d9d5      	bls.n	800044c <SM_ChangeState+0xc>
      }
   }
}
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	20000040 	.word	0x20000040
 80004ac:	20000000 	.word	0x20000000

080004b0 <SM_InitializeFunction>:
static void SM_InitializeFunction()
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
   //   bh1750_Init(&Bh, &hi2c2, 35, One_Time_H_Resolution_Mode);
   SmPtr.NewEvent = SM_EVENT_INITIALIZE_OK;
 80004b4:	4b15      	ldr	r3, [pc, #84]	; (800050c <SM_InitializeFunction+0x5c>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	70da      	strb	r2, [r3, #3]
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 80004ba:	2380      	movs	r3, #128	; 0x80
 80004bc:	0199      	lsls	r1, r3, #6
 80004be:	23a0      	movs	r3, #160	; 0xa0
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	2200      	movs	r2, #0
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 f9cf 	bl	8001868 <HAL_GPIO_WritePin>
   HAL_UARTEx_ReceiveToIdle_DMA(&huart1, data, 100);
 80004ca:	4911      	ldr	r1, [pc, #68]	; (8000510 <SM_InitializeFunction+0x60>)
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <SM_InitializeFunction+0x64>)
 80004ce:	2264      	movs	r2, #100	; 0x64
 80004d0:	0018      	movs	r0, r3
 80004d2:	f003 fe67 	bl	80041a4 <HAL_UARTEx_ReceiveToIdle_DMA>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	0199      	lsls	r1, r3, #6
 80004da:	23a0      	movs	r3, #160	; 0xa0
 80004dc:	05db      	lsls	r3, r3, #23
 80004de:	2201      	movs	r2, #1
 80004e0:	0018      	movs	r0, r3
 80004e2:	f001 f9c1 	bl	8001868 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(&huart1, (uint8_t *)INITIALIZED_COMPLETE, sizeof(INITIALIZED_COMPLETE) - 1, 1000);
 80004e6:	23fa      	movs	r3, #250	; 0xfa
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	490b      	ldr	r1, [pc, #44]	; (8000518 <SM_InitializeFunction+0x68>)
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <SM_InitializeFunction+0x64>)
 80004ee:	2216      	movs	r2, #22
 80004f0:	f002 fbe2 	bl	8002cb8 <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 80004f4:	2380      	movs	r3, #128	; 0x80
 80004f6:	0199      	lsls	r1, r3, #6
 80004f8:	23a0      	movs	r3, #160	; 0xa0
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2200      	movs	r2, #0
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 f9b2 	bl	8001868 <HAL_GPIO_WritePin>
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	20000040 	.word	0x20000040
 8000510:	20000044 	.word	0x20000044
 8000514:	20000174 	.word	0x20000174
 8000518:	080043a0 	.word	0x080043a0

0800051c <SM_RunningFunction>:
static void SM_RunningFunction()
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
}
 8000520:	46c0      	nop			; (mov r8, r8)
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	000a      	movs	r2, r1
 8000532:	1cbb      	adds	r3, r7, #2
 8000534:	801a      	strh	r2, [r3, #0]
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_TRANSMIT);
 8000536:	2380      	movs	r3, #128	; 0x80
 8000538:	0199      	lsls	r1, r3, #6
 800053a:	23a0      	movs	r3, #160	; 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	2201      	movs	r2, #1
 8000540:	0018      	movs	r0, r3
 8000542:	f001 f991 	bl	8001868 <HAL_GPIO_WritePin>
   HAL_UART_Transmit(huart, data, Size, 1000);
 8000546:	23fa      	movs	r3, #250	; 0xfa
 8000548:	009c      	lsls	r4, r3, #2
 800054a:	1cbb      	adds	r3, r7, #2
 800054c:	881a      	ldrh	r2, [r3, #0]
 800054e:	490c      	ldr	r1, [pc, #48]	; (8000580 <HAL_UARTEx_RxEventCallback+0x58>)
 8000550:	6878      	ldr	r0, [r7, #4]
 8000552:	0023      	movs	r3, r4
 8000554:	f002 fbb0 	bl	8002cb8 <HAL_UART_Transmit>
   HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, LS_LISTENING);
 8000558:	2380      	movs	r3, #128	; 0x80
 800055a:	0199      	lsls	r1, r3, #6
 800055c:	23a0      	movs	r3, #160	; 0xa0
 800055e:	05db      	lsls	r3, r3, #23
 8000560:	2200      	movs	r2, #0
 8000562:	0018      	movs	r0, r3
 8000564:	f001 f980 	bl	8001868 <HAL_GPIO_WritePin>
   HAL_UARTEx_ReceiveToIdle_DMA(huart, data, 1000);
 8000568:	23fa      	movs	r3, #250	; 0xfa
 800056a:	009a      	lsls	r2, r3, #2
 800056c:	4904      	ldr	r1, [pc, #16]	; (8000580 <HAL_UARTEx_RxEventCallback+0x58>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	0018      	movs	r0, r3
 8000572:	f003 fe17 	bl	80041a4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	46bd      	mov	sp, r7
 800057a:	b003      	add	sp, #12
 800057c:	bd90      	pop	{r4, r7, pc}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	20000044 	.word	0x20000044

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800058a:	4b08      	ldr	r3, [pc, #32]	; (80005ac <MX_DMA_Init+0x28>)
 800058c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <MX_DMA_Init+0x28>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	639a      	str	r2, [r3, #56]	; 0x38
 8000596:	4b05      	ldr	r3, [pc, #20]	; (80005ac <MX_DMA_Init+0x28>)
 8000598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800059a:	2201      	movs	r2, #1
 800059c:	4013      	ands	r3, r2
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]

}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b002      	add	sp, #8
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	40021000 	.word	0x40021000

080005b0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b089      	sub	sp, #36	; 0x24
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	240c      	movs	r4, #12
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2314      	movs	r3, #20
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f003 fed9 	bl	8004378 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005c6:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <MX_GPIO_Init+0x88>)
 80005c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ca:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <MX_GPIO_Init+0x88>)
 80005cc:	2102      	movs	r1, #2
 80005ce:	430a      	orrs	r2, r1
 80005d0:	635a      	str	r2, [r3, #52]	; 0x34
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <MX_GPIO_Init+0x88>)
 80005d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005d6:	2202      	movs	r2, #2
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_GPIO_Init+0x88>)
 80005e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005e2:	4b15      	ldr	r3, [pc, #84]	; (8000638 <MX_GPIO_Init+0x88>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	430a      	orrs	r2, r1
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_GPIO_Init+0x88>)
 80005ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ee:	2201      	movs	r2, #1
 80005f0:	4013      	ands	r3, r2
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX485_Selector_GPIO_Port, MAX485_Selector_Pin, GPIO_PIN_RESET);
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	0199      	lsls	r1, r3, #6
 80005fa:	23a0      	movs	r3, #160	; 0xa0
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	2200      	movs	r2, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f001 f931 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MAX485_Selector_Pin;
 8000606:	193b      	adds	r3, r7, r4
 8000608:	2280      	movs	r2, #128	; 0x80
 800060a:	0192      	lsls	r2, r2, #6
 800060c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2201      	movs	r2, #1
 8000612:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2203      	movs	r2, #3
 800061e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MAX485_Selector_GPIO_Port, &GPIO_InitStruct);
 8000620:	193a      	adds	r2, r7, r4
 8000622:	23a0      	movs	r3, #160	; 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 ffb9 	bl	80015a0 <HAL_GPIO_Init>

}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	b009      	add	sp, #36	; 0x24
 8000634:	bd90      	pop	{r4, r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	40021000 	.word	0x40021000

0800063c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <MX_I2C2_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <MX_I2C2_Init+0x7c>)
 800064a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_I2C2_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000654:	2201      	movs	r2, #1
 8000656:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_I2C2_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_I2C2_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000676:	4b0e      	ldr	r3, [pc, #56]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000678:	0018      	movs	r0, r3
 800067a:	f001 f913 	bl	80018a4 <HAL_I2C_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000682:	f000 f8e6 	bl	8000852 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_I2C2_Init+0x74>)
 8000688:	2100      	movs	r1, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f001 f9a0 	bl	80019d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000694:	f000 f8dd 	bl	8000852 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <MX_I2C2_Init+0x74>)
 800069a:	2100      	movs	r1, #0
 800069c:	0018      	movs	r0, r3
 800069e:	f001 f9e3 	bl	8001a68 <HAL_I2CEx_ConfigDigitalFilter>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006a6:	f000 f8d4 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006aa:	46c0      	nop			; (mov r8, r8)
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200000a8 	.word	0x200000a8
 80006b4:	40005800 	.word	0x40005800
 80006b8:	00303d5b 	.word	0x00303d5b

080006bc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b08b      	sub	sp, #44	; 0x2c
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c4:	2414      	movs	r4, #20
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	0018      	movs	r0, r3
 80006ca:	2314      	movs	r3, #20
 80006cc:	001a      	movs	r2, r3
 80006ce:	2100      	movs	r1, #0
 80006d0:	f003 fe52 	bl	8004378 <memset>
  if(i2cHandle->Instance==I2C2)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a1c      	ldr	r2, [pc, #112]	; (800074c <HAL_I2C_MspInit+0x90>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d131      	bne.n	8000742 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006de:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <HAL_I2C_MspInit+0x94>)
 80006e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e2:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <HAL_I2C_MspInit+0x94>)
 80006e4:	2101      	movs	r1, #1
 80006e6:	430a      	orrs	r2, r1
 80006e8:	635a      	str	r2, [r3, #52]	; 0x34
 80006ea:	4b19      	ldr	r3, [pc, #100]	; (8000750 <HAL_I2C_MspInit+0x94>)
 80006ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ee:	2201      	movs	r2, #1
 80006f0:	4013      	ands	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	22c0      	movs	r2, #192	; 0xc0
 80006fa:	0152      	lsls	r2, r2, #5
 80006fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fe:	0021      	movs	r1, r4
 8000700:	187b      	adds	r3, r7, r1
 8000702:	2212      	movs	r2, #18
 8000704:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2206      	movs	r2, #6
 8000716:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000718:	187a      	adds	r2, r7, r1
 800071a:	23a0      	movs	r3, #160	; 0xa0
 800071c:	05db      	lsls	r3, r3, #23
 800071e:	0011      	movs	r1, r2
 8000720:	0018      	movs	r0, r3
 8000722:	f000 ff3d 	bl	80015a0 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_I2C_MspInit+0x94>)
 8000728:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_I2C_MspInit+0x94>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	03c9      	lsls	r1, r1, #15
 8000730:	430a      	orrs	r2, r1
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_I2C_MspInit+0x94>)
 8000736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	03db      	lsls	r3, r3, #15
 800073c:	4013      	ands	r3, r2
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000742:	46c0      	nop			; (mov r8, r8)
 8000744:	46bd      	mov	sp, r7
 8000746:	b00b      	add	sp, #44	; 0x2c
 8000748:	bd90      	pop	{r4, r7, pc}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	40005800 	.word	0x40005800
 8000750:	40021000 	.word	0x40021000

08000754 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
   /* USER CODE END 1 */

   /* MCU Configuration--------------------------------------------------------*/

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000758:	f000 faa0 	bl	8000c9c <HAL_Init>
   /* USER CODE BEGIN Init */

   /* USER CODE END Init */

   /* Configure the system clock */
   SystemClock_Config();
 800075c:	f000 f818 	bl	8000790 <SystemClock_Config>
   /* USER CODE BEGIN SysInit */

   /* USER CODE END SysInit */

   /* Initialize all configured peripherals */
   MX_GPIO_Init();
 8000760:	f7ff ff26 	bl	80005b0 <MX_GPIO_Init>
   MX_DMA_Init();
 8000764:	f7ff ff0e 	bl	8000584 <MX_DMA_Init>
   MX_I2C2_Init();
 8000768:	f7ff ff68 	bl	800063c <MX_I2C2_Init>
   MX_RTC_Init();
 800076c:	f000 f876 	bl	800085c <MX_RTC_Init>
   MX_USART1_UART_Init();
 8000770:	f000 f98c 	bl	8000a8c <MX_USART1_UART_Init>
   MX_TIM17_Init();
 8000774:	f000 f942 	bl	80009fc <MX_TIM17_Init>

   /* Initialize interrupts */
   MX_NVIC_Init();
 8000778:	f000 f856 	bl	8000828 <MX_NVIC_Init>
   /* USER CODE BEGIN 2 */
   HAL_TIM_Base_Start(&htim17);
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <main+0x38>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 f992 	bl	8002aa8 <HAL_TIM_Base_Start>

   /* Infinite loop */
   /* USER CODE BEGIN WHILE */
   while(1)
   {
      SM_MainFunction();
 8000784:	f7ff fe32 	bl	80003ec <SM_MainFunction>
 8000788:	e7fc      	b.n	8000784 <main+0x30>
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000128 	.word	0x20000128

08000790 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b093      	sub	sp, #76	; 0x4c
 8000794:	af00      	add	r7, sp, #0
   RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000796:	2414      	movs	r4, #20
 8000798:	193b      	adds	r3, r7, r4
 800079a:	0018      	movs	r0, r3
 800079c:	2334      	movs	r3, #52	; 0x34
 800079e:	001a      	movs	r2, r3
 80007a0:	2100      	movs	r1, #0
 80007a2:	f003 fde9 	bl	8004378 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	0018      	movs	r0, r3
 80007aa:	2310      	movs	r3, #16
 80007ac:	001a      	movs	r2, r3
 80007ae:	2100      	movs	r1, #0
 80007b0:	f003 fde2 	bl	8004378 <memset>

   /** Configure the main internal regulator output voltage
    */
   HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b4:	2380      	movs	r3, #128	; 0x80
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	0018      	movs	r0, r3
 80007ba:	f001 f9a1 	bl	8001b00 <HAL_PWREx_ControlVoltageScaling>

   /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
   RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSI;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	220a      	movs	r2, #10
 80007c2:	601a      	str	r2, [r3, #0]
   RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2280      	movs	r2, #128	; 0x80
 80007c8:	0052      	lsls	r2, r2, #1
 80007ca:	60da      	str	r2, [r3, #12]
   RCC_OscInitStruct.HSIDiv              = RCC_HSI_DIV1;
 80007cc:	0021      	movs	r1, r4
 80007ce:	187b      	adds	r3, r7, r1
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
   RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2240      	movs	r2, #64	; 0x40
 80007d8:	615a      	str	r2, [r3, #20]
   RCC_OscInitStruct.LSIState            = RCC_LSI_ON;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2201      	movs	r2, #1
 80007de:	619a      	str	r2, [r3, #24]
   RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
   if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	0018      	movs	r0, r3
 80007ea:	f001 f9d5 	bl	8001b98 <HAL_RCC_OscConfig>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0x66>
   {
      Error_Handler();
 80007f2:	f000 f82e 	bl	8000852 <Error_Handler>
   }

   /** Initializes the CPU, AHB and APB buses clocks
    */
   RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2207      	movs	r2, #7
 80007fa:	601a      	str	r2, [r3, #0]
   RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
   RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	1d3b      	adds	r3, r7, #4
 800080a:	2200      	movs	r2, #0
 800080c:	60da      	str	r2, [r3, #12]

   if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	2100      	movs	r1, #0
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fcd0 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x90>
   {
      Error_Handler();
 800081c:	f000 f819 	bl	8000852 <Error_Handler>
   }
}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	b013      	add	sp, #76	; 0x4c
 8000826:	bd90      	pop	{r4, r7, pc}

08000828 <MX_NVIC_Init>:
/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
   /* DMA1_Channel1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	2009      	movs	r0, #9
 8000832:	f000 fb65 	bl	8000f00 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000836:	2009      	movs	r0, #9
 8000838:	f000 fb77 	bl	8000f2a <HAL_NVIC_EnableIRQ>
   /* USART1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	201b      	movs	r0, #27
 8000842:	f000 fb5d 	bl	8000f00 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000846:	201b      	movs	r0, #27
 8000848:	f000 fb6f 	bl	8000f2a <HAL_NVIC_EnableIRQ>
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000856:	b672      	cpsid	i
}
 8000858:	46c0      	nop			; (mov r8, r8)
   /* USER CODE BEGIN Error_Handler_Debug */
   /* User can add his own implementation to report the HAL error return state */
   __disable_irq();
   while(1)
 800085a:	e7fe      	b.n	800085a <Error_Handler+0x8>

0800085c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_RTC_Init+0x54>)
 8000862:	4a14      	ldr	r2, [pc, #80]	; (80008b4 <MX_RTC_Init+0x58>)
 8000864:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000866:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_RTC_Init+0x54>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_RTC_Init+0x54>)
 800086e:	227f      	movs	r2, #127	; 0x7f
 8000870:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_RTC_Init+0x54>)
 8000874:	22ff      	movs	r2, #255	; 0xff
 8000876:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_RTC_Init+0x54>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_RTC_Init+0x54>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_RTC_Init+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_RTC_Init+0x54>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	05d2      	lsls	r2, r2, #23
 8000890:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_RTC_Init+0x54>)
 8000894:	2200      	movs	r2, #0
 8000896:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <MX_RTC_Init+0x54>)
 800089a:	0018      	movs	r0, r3
 800089c:	f001 ff5c 	bl	8002758 <HAL_RTC_Init>
 80008a0:	1e03      	subs	r3, r0, #0
 80008a2:	d001      	beq.n	80008a8 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 80008a4:	f7ff ffd5 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	200000fc 	.word	0x200000fc
 80008b4:	40002800 	.word	0x40002800

080008b8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b08b      	sub	sp, #44	; 0x2c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008c0:	2410      	movs	r4, #16
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	0018      	movs	r0, r3
 80008c6:	2318      	movs	r3, #24
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f003 fd54 	bl	8004378 <memset>
  if(rtcHandle->Instance==RTC)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a15      	ldr	r2, [pc, #84]	; (800092c <HAL_RTC_MspInit+0x74>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d124      	bne.n	8000924 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	0292      	lsls	r2, r2, #10
 80008e0:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008e2:	193b      	adds	r3, r7, r4
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	0018      	movs	r0, r3
 80008ee:	f001 fe0d 	bl	800250c <HAL_RCCEx_PeriphCLKConfig>
 80008f2:	1e03      	subs	r3, r0, #0
 80008f4:	d001      	beq.n	80008fa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80008f6:	f7ff ffac 	bl	8000852 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <HAL_RTC_MspInit+0x78>)
 80008fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <HAL_RTC_MspInit+0x78>)
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	0209      	lsls	r1, r1, #8
 8000904:	430a      	orrs	r2, r1
 8000906:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <HAL_RTC_MspInit+0x78>)
 800090a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <HAL_RTC_MspInit+0x78>)
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	00c9      	lsls	r1, r1, #3
 8000912:	430a      	orrs	r2, r1
 8000914:	63da      	str	r2, [r3, #60]	; 0x3c
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <HAL_RTC_MspInit+0x78>)
 8000918:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800091a:	2380      	movs	r3, #128	; 0x80
 800091c:	00db      	lsls	r3, r3, #3
 800091e:	4013      	ands	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
 8000922:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000924:	46c0      	nop			; (mov r8, r8)
 8000926:	46bd      	mov	sp, r7
 8000928:	b00b      	add	sp, #44	; 0x2c
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	40002800 	.word	0x40002800
 8000930:	40021000 	.word	0x40021000

08000934 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x44>)
 800093c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093e:	4b0e      	ldr	r3, [pc, #56]	; (8000978 <HAL_MspInit+0x44>)
 8000940:	2101      	movs	r1, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	641a      	str	r2, [r3, #64]	; 0x40
 8000946:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_MspInit+0x44>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	2201      	movs	r2, #1
 800094c:	4013      	ands	r3, r2
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	4b09      	ldr	r3, [pc, #36]	; (8000978 <HAL_MspInit+0x44>)
 8000954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x44>)
 8000958:	2180      	movs	r1, #128	; 0x80
 800095a:	0549      	lsls	r1, r1, #21
 800095c:	430a      	orrs	r2, r1
 800095e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <HAL_MspInit+0x44>)
 8000962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	055b      	lsls	r3, r3, #21
 8000968:	4013      	ands	r3, r2
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40021000 	.word	0x40021000

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009a0:	f000 f9e6 	bl	8000d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a4:	46c0      	nop			; (mov r8, r8)
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <DMA1_Channel1_IRQHandler+0x14>)
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fcb2 	bl	800131c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009b8:	46c0      	nop			; (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	20000208 	.word	0x20000208

080009c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <USART1_IRQHandler+0x14>)
 80009ca:	0018      	movs	r0, r3
 80009cc:	f002 fa10 	bl	8002df0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	20000174 	.word	0x20000174

080009dc <TIM_GetTick>:
 *      Author: Marcin
 */
#include "main.h"
#include "supp.h"
uint16_t TIM_GetTick()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	return TIM17->CNT;
 80009e0:	4b02      	ldr	r3, [pc, #8]	; (80009ec <TIM_GetTick+0x10>)
 80009e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e4:	b29b      	uxth	r3, r3
}
 80009e6:	0018      	movs	r0, r3
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40014800 	.word	0x40014800

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
	...

080009fc <MX_TIM17_Init>:

TIM_HandleTypeDef htim17;

/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	; (8000a40 <MX_TIM17_Init+0x44>)
 8000a02:	4a10      	ldr	r2, [pc, #64]	; (8000a44 <MX_TIM17_Init+0x48>)
 8000a04:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 15;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_TIM17_Init+0x44>)
 8000a08:	220f      	movs	r2, #15
 8000a0a:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_TIM17_Init+0x44>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_TIM17_Init+0x44>)
 8000a14:	4a0c      	ldr	r2, [pc, #48]	; (8000a48 <MX_TIM17_Init+0x4c>)
 8000a16:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_TIM17_Init+0x44>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_TIM17_Init+0x44>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_TIM17_Init+0x44>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a2a:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <MX_TIM17_Init+0x44>)
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 ffe3 	bl	80029f8 <HAL_TIM_Base_Init>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000a36:	f7ff ff0c 	bl	8000852 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000128 	.word	0x20000128
 8000a44:	40014800 	.word	0x40014800
 8000a48:	0000ffff 	.word	0x0000ffff

08000a4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_TIM_Base_MspInit+0x38>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d10d      	bne.n	8000a7a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000a5e:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_TIM_Base_MspInit+0x3c>)
 8000a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <HAL_TIM_Base_MspInit+0x3c>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	02c9      	lsls	r1, r1, #11
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_TIM_Base_MspInit+0x3c>)
 8000a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	02db      	lsls	r3, r3, #11
 8000a74:	4013      	ands	r3, r2
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b004      	add	sp, #16
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	40014800 	.word	0x40014800
 8000a88:	40021000 	.word	0x40021000

08000a8c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
   /* USER CODE END USART1_Init 0 */

   /* USER CODE BEGIN USART1_Init 1 */

   /* USER CODE END USART1_Init 1 */
   huart1.Instance                    = USART1;
 8000a90:	4b23      	ldr	r3, [pc, #140]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000a92:	4a24      	ldr	r2, [pc, #144]	; (8000b24 <MX_USART1_UART_Init+0x98>)
 8000a94:	601a      	str	r2, [r3, #0]
   huart1.Init.BaudRate               = 115200;
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000a98:	22e1      	movs	r2, #225	; 0xe1
 8000a9a:	0252      	lsls	r2, r2, #9
 8000a9c:	605a      	str	r2, [r3, #4]
   huart1.Init.WordLength             = UART_WORDLENGTH_8B;
 8000a9e:	4b20      	ldr	r3, [pc, #128]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
   huart1.Init.StopBits               = UART_STOPBITS_1;
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
   huart1.Init.Parity                 = UART_PARITY_NONE;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
   huart1.Init.Mode                   = UART_MODE_TX_RX;
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
   huart1.Init.HwFlowCtl              = UART_HWCONTROL_NONE;
 8000ab6:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
   huart1.Init.OverSampling           = UART_OVERSAMPLING_16;
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
   huart1.Init.OneBitSampling         = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
   huart1.Init.ClockPrescaler         = UART_PRESCALER_DIV1;
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ace:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
   if(HAL_UART_Init(&huart1) != HAL_OK)
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f002 f898 	bl	8002c0c <HAL_UART_Init>
 8000adc:	1e03      	subs	r3, r0, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART1_UART_Init+0x58>
   {
      Error_Handler();
 8000ae0:	f7ff feb7 	bl	8000852 <Error_Handler>
   }
   if(HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f003 fad9 	bl	80040a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART1_UART_Init+0x6a>
   {
      Error_Handler();
 8000af2:	f7ff feae 	bl	8000852 <Error_Handler>
   }
   if(HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000af8:	2100      	movs	r1, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f003 fb10 	bl	8004120 <HAL_UARTEx_SetRxFifoThreshold>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART1_UART_Init+0x7c>
   {
      Error_Handler();
 8000b04:	f7ff fea5 	bl	8000852 <Error_Handler>
   }
   if(HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <MX_USART1_UART_Init+0x94>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f003 fa8e 	bl	800402c <HAL_UARTEx_DisableFifoMode>
 8000b10:	1e03      	subs	r3, r0, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART1_UART_Init+0x8c>
   {
      Error_Handler();
 8000b14:	f7ff fe9d 	bl	8000852 <Error_Handler>
   }
   /* USER CODE BEGIN USART1_Init 2 */

   /* USER CODE END USART1_Init 2 */
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	20000174 	.word	0x20000174
 8000b24:	40013800 	.word	0x40013800

08000b28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b091      	sub	sp, #68	; 0x44
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

   GPIO_InitTypeDef GPIO_InitStruct       = { 0 };
 8000b30:	232c      	movs	r3, #44	; 0x2c
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	0018      	movs	r0, r3
 8000b36:	2314      	movs	r3, #20
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f003 fc1c 	bl	8004378 <memset>
   RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b40:	2414      	movs	r4, #20
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	0018      	movs	r0, r3
 8000b46:	2318      	movs	r3, #24
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f003 fc14 	bl	8004378 <memset>
   if(uartHandle->Instance == USART1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a37      	ldr	r2, [pc, #220]	; (8000c34 <HAL_UART_MspInit+0x10c>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d167      	bne.n	8000c2a <HAL_UART_MspInit+0x102>

      /* USER CODE END USART1_MspInit 0 */

      /** Initializes the peripherals clocks
       */
      PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	601a      	str	r2, [r3, #0]
      PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
      if(HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 fccf 	bl	800250c <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x4e>
      {
         Error_Handler();
 8000b72:	f7ff fe6e 	bl	8000852 <Error_Handler>
      }

      /* USART1 clock enable */
      __HAL_RCC_USART1_CLK_ENABLE();
 8000b76:	4b30      	ldr	r3, [pc, #192]	; (8000c38 <HAL_UART_MspInit+0x110>)
 8000b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <HAL_UART_MspInit+0x110>)
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	01c9      	lsls	r1, r1, #7
 8000b80:	430a      	orrs	r2, r1
 8000b82:	641a      	str	r2, [r3, #64]	; 0x40
 8000b84:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <HAL_UART_MspInit+0x110>)
 8000b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b88:	2380      	movs	r3, #128	; 0x80
 8000b8a:	01db      	lsls	r3, r3, #7
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]

      __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <HAL_UART_MspInit+0x110>)
 8000b94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <HAL_UART_MspInit+0x110>)
 8000b98:	2102      	movs	r1, #2
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <HAL_UART_MspInit+0x110>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
      /**USART1 GPIO Configuration
      PB7     ------> USART1_RX
      PB6     ------> USART1_TX
      */
      GPIO_InitStruct.Pin       = GPIO_PIN_7 | GPIO_PIN_6;
 8000baa:	212c      	movs	r1, #44	; 0x2c
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	22c0      	movs	r2, #192	; 0xc0
 8000bb0:	601a      	str	r2, [r3, #0]
      GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	605a      	str	r2, [r3, #4]
      GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
      GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_LOW;
 8000bbe:	187b      	adds	r3, r7, r1
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	60da      	str	r2, [r3, #12]
      GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
      HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <HAL_UART_MspInit+0x114>)
 8000bce:	0019      	movs	r1, r3
 8000bd0:	0010      	movs	r0, r2
 8000bd2:	f000 fce5 	bl	80015a0 <HAL_GPIO_Init>

      /* USART1 DMA Init */
      /* USART1_RX Init */
      hdma_usart1_rx.Instance                 = DMA1_Channel1;
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000bd8:	4a1a      	ldr	r2, [pc, #104]	; (8000c44 <HAL_UART_MspInit+0x11c>)
 8000bda:	601a      	str	r2, [r3, #0]
      hdma_usart1_rx.Init.Request             = DMA_REQUEST_USART1_RX;
 8000bdc:	4b18      	ldr	r3, [pc, #96]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000bde:	2232      	movs	r2, #50	; 0x32
 8000be0:	605a      	str	r2, [r3, #4]
      hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
      hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000be8:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
      hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	611a      	str	r2, [r3, #16]
      hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	615a      	str	r2, [r3, #20]
      hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
      hdma_usart1_rx.Init.Mode                = DMA_NORMAL;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
      hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_LOW;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
      if(HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f000 f9a8 	bl	8000f64 <HAL_DMA_Init>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_UART_MspInit+0xf4>
      {
         Error_Handler();
 8000c18:	f7ff fe1b 	bl	8000852 <Error_Handler>
      }

      __HAL_LINKDMA(uartHandle, hdmarx, hdma_usart1_rx);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2180      	movs	r1, #128	; 0x80
 8000c20:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000c22:	505a      	str	r2, [r3, r1]
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_UART_MspInit+0x118>)
 8000c26:	687a      	ldr	r2, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28

      /* USER CODE BEGIN USART1_MspInit 1 */

      /* USER CODE END USART1_MspInit 1 */
   }
}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	b011      	add	sp, #68	; 0x44
 8000c30:	bd90      	pop	{r4, r7, pc}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	40013800 	.word	0x40013800
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	50000400 	.word	0x50000400
 8000c40:	20000208 	.word	0x20000208
 8000c44:	40020008 	.word	0x40020008

08000c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c48:	480d      	ldr	r0, [pc, #52]	; (8000c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c4c:	f7ff fed0 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c50:	480c      	ldr	r0, [pc, #48]	; (8000c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c52:	490d      	ldr	r1, [pc, #52]	; (8000c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c54:	4a0d      	ldr	r2, [pc, #52]	; (8000c8c <LoopForever+0xe>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c58:	e002      	b.n	8000c60 <LoopCopyDataInit>

08000c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5e:	3304      	adds	r3, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c64:	d3f9      	bcc.n	8000c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c66:	4a0a      	ldr	r2, [pc, #40]	; (8000c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c68:	4c0a      	ldr	r4, [pc, #40]	; (8000c94 <LoopForever+0x16>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c6c:	e001      	b.n	8000c72 <LoopFillZerobss>

08000c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c70:	3204      	adds	r2, #4

08000c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c74:	d3fb      	bcc.n	8000c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c76:	f003 fb5b 	bl	8004330 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000c7a:	f7ff fd6b 	bl	8000754 <main>

08000c7e <LoopForever>:

LoopForever:
  b LoopForever
 8000c7e:	e7fe      	b.n	8000c7e <LoopForever>
  ldr   r0, =_estack
 8000c80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c88:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000c8c:	08004448 	.word	0x08004448
  ldr r2, =_sbss
 8000c90:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000c94:	20000268 	.word	0x20000268

08000c98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c98:	e7fe      	b.n	8000c98 <ADC1_IRQHandler>
	...

08000c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x3c>)
 8000caa:	681a      	ldr	r2, [r3, #0]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Init+0x3c>)
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	0049      	lsls	r1, r1, #1
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb6:	2003      	movs	r0, #3
 8000cb8:	f000 f810 	bl	8000cdc <HAL_InitTick>
 8000cbc:	1e03      	subs	r3, r0, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e001      	b.n	8000ccc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000cc8:	f7ff fe34 	bl	8000934 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
}
 8000cd0:	0018      	movs	r0, r3
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40022000 	.word	0x40022000

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <HAL_InitTick+0x88>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d02b      	beq.n	8000d4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_InitTick+0x8c>)
 8000cf6:	681c      	ldr	r4, [r3, #0]
 8000cf8:	4b1a      	ldr	r3, [pc, #104]	; (8000d64 <HAL_InitTick+0x88>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	23fa      	movs	r3, #250	; 0xfa
 8000d00:	0098      	lsls	r0, r3, #2
 8000d02:	f7ff f9fd 	bl	8000100 <__udivsi3>
 8000d06:	0003      	movs	r3, r0
 8000d08:	0019      	movs	r1, r3
 8000d0a:	0020      	movs	r0, r4
 8000d0c:	f7ff f9f8 	bl	8000100 <__udivsi3>
 8000d10:	0003      	movs	r3, r0
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 f919 	bl	8000f4a <HAL_SYSTICK_Config>
 8000d18:	1e03      	subs	r3, r0, #0
 8000d1a:	d112      	bne.n	8000d42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b03      	cmp	r3, #3
 8000d20:	d80a      	bhi.n	8000d38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d22:	6879      	ldr	r1, [r7, #4]
 8000d24:	2301      	movs	r3, #1
 8000d26:	425b      	negs	r3, r3
 8000d28:	2200      	movs	r2, #0
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 f8e8 	bl	8000f00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <HAL_InitTick+0x90>)
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	e00d      	b.n	8000d54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d38:	230f      	movs	r3, #15
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	701a      	strb	r2, [r3, #0]
 8000d40:	e008      	b.n	8000d54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	230f      	movs	r3, #15
 8000d44:	18fb      	adds	r3, r7, r3
 8000d46:	2201      	movs	r2, #1
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	e003      	b.n	8000d54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d54:	230f      	movs	r3, #15
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	781b      	ldrb	r3, [r3, #0]
}
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b005      	add	sp, #20
 8000d60:	bd90      	pop	{r4, r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000020 	.word	0x20000020
 8000d68:	20000018 	.word	0x20000018
 8000d6c:	2000001c 	.word	0x2000001c

08000d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x1c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	001a      	movs	r2, r3
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_IncTick+0x20>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	18d2      	adds	r2, r2, r3
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_IncTick+0x20>)
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			; (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	20000020 	.word	0x20000020
 8000d90:	20000264 	.word	0x20000264

08000d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  return uwTick;
 8000d98:	4b02      	ldr	r3, [pc, #8]	; (8000da4 <HAL_GetTick+0x10>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	20000264 	.word	0x20000264

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	1dfb      	adds	r3, r7, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b7f      	cmp	r3, #127	; 0x7f
 8000dba:	d809      	bhi.n	8000dd0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dbc:	1dfb      	adds	r3, r7, #7
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	001a      	movs	r2, r3
 8000dc2:	231f      	movs	r3, #31
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <__NVIC_EnableIRQ+0x30>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	4091      	lsls	r1, r2
 8000dcc:	000a      	movs	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000dd0:	46c0      	nop			; (mov r8, r8)
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	b002      	add	sp, #8
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	0002      	movs	r2, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	1dfb      	adds	r3, r7, #7
 8000de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dea:	1dfb      	adds	r3, r7, #7
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	2b7f      	cmp	r3, #127	; 0x7f
 8000df0:	d828      	bhi.n	8000e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000df2:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	089b      	lsrs	r3, r3, #2
 8000dfc:	33c0      	adds	r3, #192	; 0xc0
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	589b      	ldr	r3, [r3, r2]
 8000e02:	1dfa      	adds	r2, r7, #7
 8000e04:	7812      	ldrb	r2, [r2, #0]
 8000e06:	0011      	movs	r1, r2
 8000e08:	2203      	movs	r2, #3
 8000e0a:	400a      	ands	r2, r1
 8000e0c:	00d2      	lsls	r2, r2, #3
 8000e0e:	21ff      	movs	r1, #255	; 0xff
 8000e10:	4091      	lsls	r1, r2
 8000e12:	000a      	movs	r2, r1
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	019b      	lsls	r3, r3, #6
 8000e1e:	22ff      	movs	r2, #255	; 0xff
 8000e20:	401a      	ands	r2, r3
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	0018      	movs	r0, r3
 8000e28:	2303      	movs	r3, #3
 8000e2a:	4003      	ands	r3, r0
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e30:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <__NVIC_SetPriority+0xd4>)
 8000e32:	1dfb      	adds	r3, r7, #7
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	b25b      	sxtb	r3, r3
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	33c0      	adds	r3, #192	; 0xc0
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e42:	e031      	b.n	8000ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	0019      	movs	r1, r3
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	400b      	ands	r3, r1
 8000e50:	3b08      	subs	r3, #8
 8000e52:	089b      	lsrs	r3, r3, #2
 8000e54:	3306      	adds	r3, #6
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	18d3      	adds	r3, r2, r3
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	1dfa      	adds	r2, r7, #7
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	0011      	movs	r1, r2
 8000e64:	2203      	movs	r2, #3
 8000e66:	400a      	ands	r2, r1
 8000e68:	00d2      	lsls	r2, r2, #3
 8000e6a:	21ff      	movs	r1, #255	; 0xff
 8000e6c:	4091      	lsls	r1, r2
 8000e6e:	000a      	movs	r2, r1
 8000e70:	43d2      	mvns	r2, r2
 8000e72:	401a      	ands	r2, r3
 8000e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	019b      	lsls	r3, r3, #6
 8000e7a:	22ff      	movs	r2, #255	; 0xff
 8000e7c:	401a      	ands	r2, r3
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0018      	movs	r0, r3
 8000e84:	2303      	movs	r3, #3
 8000e86:	4003      	ands	r3, r0
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <__NVIC_SetPriority+0xd8>)
 8000e8e:	1dfb      	adds	r3, r7, #7
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	001c      	movs	r4, r3
 8000e94:	230f      	movs	r3, #15
 8000e96:	4023      	ands	r3, r4
 8000e98:	3b08      	subs	r3, #8
 8000e9a:	089b      	lsrs	r3, r3, #2
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	3306      	adds	r3, #6
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	18c3      	adds	r3, r0, r3
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b003      	add	sp, #12
 8000eae:	bd90      	pop	{r4, r7, pc}
 8000eb0:	e000e100 	.word	0xe000e100
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	1e5a      	subs	r2, r3, #1
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	045b      	lsls	r3, r3, #17
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d301      	bcc.n	8000ed0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e010      	b.n	8000ef2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed0:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <SysTick_Config+0x44>)
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	3a01      	subs	r2, #1
 8000ed6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2103      	movs	r1, #3
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f7ff ff7c 	bl	8000ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ee4:	4b05      	ldr	r3, [pc, #20]	; (8000efc <SysTick_Config+0x44>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eea:	4b04      	ldr	r3, [pc, #16]	; (8000efc <SysTick_Config+0x44>)
 8000eec:	2207      	movs	r2, #7
 8000eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	b002      	add	sp, #8
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			; (mov r8, r8)
 8000efc:	e000e010 	.word	0xe000e010

08000f00 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	1c02      	adds	r2, r0, #0
 8000f10:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	b25b      	sxtb	r3, r3
 8000f1a:	0011      	movs	r1, r2
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f7ff ff5d 	bl	8000ddc <__NVIC_SetPriority>
}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	46bd      	mov	sp, r7
 8000f26:	b004      	add	sp, #16
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	0002      	movs	r2, r0
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ff33 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ffaf 	bl	8000eb8 <SysTick_Config>
 8000f5a:	0003      	movs	r3, r0
}
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	b002      	add	sp, #8
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e077      	b.n	8001066 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a3d      	ldr	r2, [pc, #244]	; (8001070 <HAL_DMA_Init+0x10c>)
 8000f7c:	4694      	mov	ip, r2
 8000f7e:	4463      	add	r3, ip
 8000f80:	2114      	movs	r1, #20
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff f8bc 	bl	8000100 <__udivsi3>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	009a      	lsls	r2, r3, #2
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2225      	movs	r2, #37	; 0x25
 8000f94:	2102      	movs	r1, #2
 8000f96:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4934      	ldr	r1, [pc, #208]	; (8001074 <HAL_DMA_Init+0x110>)
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6a1b      	ldr	r3, [r3, #32]
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 fa8d 	bl	8001500 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d102      	bne.n	8000ff8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001000:	213f      	movs	r1, #63	; 0x3f
 8001002:	400a      	ands	r2, r1
 8001004:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800100e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d011      	beq.n	800103c <HAL_DMA_Init+0xd8>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d80d      	bhi.n	800103c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	0018      	movs	r0, r3
 8001024:	f000 fa98 	bl	8001558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	e008      	b.n	800104e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2200      	movs	r2, #0
 8001046:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2225      	movs	r2, #37	; 0x25
 8001058:	2101      	movs	r1, #1
 800105a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2224      	movs	r2, #36	; 0x24
 8001060:	2100      	movs	r1, #0
 8001062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001064:	2300      	movs	r3, #0
}
 8001066:	0018      	movs	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	b002      	add	sp, #8
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	bffdfff8 	.word	0xbffdfff8
 8001074:	ffff800f 	.word	0xffff800f

08001078 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001086:	2317      	movs	r3, #23
 8001088:	18fb      	adds	r3, r7, r3
 800108a:	2200      	movs	r2, #0
 800108c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2224      	movs	r2, #36	; 0x24
 8001092:	5c9b      	ldrb	r3, [r3, r2]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d101      	bne.n	800109c <HAL_DMA_Start_IT+0x24>
 8001098:	2302      	movs	r3, #2
 800109a:	e06f      	b.n	800117c <HAL_DMA_Start_IT+0x104>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2224      	movs	r2, #36	; 0x24
 80010a0:	2101      	movs	r1, #1
 80010a2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2225      	movs	r2, #37	; 0x25
 80010a8:	5c9b      	ldrb	r3, [r3, r2]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d157      	bne.n	8001160 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2225      	movs	r2, #37	; 0x25
 80010b4:	2102      	movs	r1, #2
 80010b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	2200      	movs	r2, #0
 80010bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2101      	movs	r1, #1
 80010ca:	438a      	bics	r2, r1
 80010cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f9d3 	bl	8001480 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d008      	beq.n	80010f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	210e      	movs	r1, #14
 80010ee:	430a      	orrs	r2, r1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e00f      	b.n	8001114 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2104      	movs	r1, #4
 8001100:	438a      	bics	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	210a      	movs	r1, #10
 8001110:	430a      	orrs	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	2380      	movs	r3, #128	; 0x80
 800111c:	025b      	lsls	r3, r3, #9
 800111e:	4013      	ands	r3, r2
 8001120:	d008      	beq.n	8001134 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	2180      	movs	r1, #128	; 0x80
 800112e:	0049      	lsls	r1, r1, #1
 8001130:	430a      	orrs	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001138:	2b00      	cmp	r3, #0
 800113a:	d008      	beq.n	800114e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001146:	2180      	movs	r1, #128	; 0x80
 8001148:	0049      	lsls	r1, r1, #1
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2101      	movs	r1, #1
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e00a      	b.n	8001176 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2280      	movs	r2, #128	; 0x80
 8001164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	2224      	movs	r2, #36	; 0x24
 800116a:	2100      	movs	r1, #0
 800116c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800116e:	2317      	movs	r3, #23
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001176:	2317      	movs	r3, #23
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	781b      	ldrb	r3, [r3, #0]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b006      	add	sp, #24
 8001182:	bd80      	pop	{r7, pc}

08001184 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d101      	bne.n	8001196 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e050      	b.n	8001238 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2225      	movs	r2, #37	; 0x25
 800119a:	5c9b      	ldrb	r3, [r3, r2]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d008      	beq.n	80011b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2204      	movs	r2, #4
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2224      	movs	r2, #36	; 0x24
 80011ac:	2100      	movs	r1, #0
 80011ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e041      	b.n	8001238 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	210e      	movs	r1, #14
 80011c0:	438a      	bics	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	491c      	ldr	r1, [pc, #112]	; (8001240 <HAL_DMA_Abort+0xbc>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2101      	movs	r1, #1
 80011e0:	438a      	bics	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80011e4:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_DMA_Abort+0xc0>)
 80011e6:	6859      	ldr	r1, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	221c      	movs	r2, #28
 80011ee:	4013      	ands	r3, r2
 80011f0:	2201      	movs	r2, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <HAL_DMA_Abort+0xc0>)
 80011f6:	430a      	orrs	r2, r1
 80011f8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001202:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00c      	beq.n	8001226 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001216:	490a      	ldr	r1, [pc, #40]	; (8001240 <HAL_DMA_Abort+0xbc>)
 8001218:	400a      	ands	r2, r1
 800121a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001224:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2225      	movs	r2, #37	; 0x25
 800122a:	2101      	movs	r1, #1
 800122c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2224      	movs	r2, #36	; 0x24
 8001232:	2100      	movs	r1, #0
 8001234:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	0018      	movs	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}
 8001240:	fffffeff 	.word	0xfffffeff
 8001244:	40020000 	.word	0x40020000

08001248 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001250:	210f      	movs	r1, #15
 8001252:	187b      	adds	r3, r7, r1
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2225      	movs	r2, #37	; 0x25
 800125c:	5c9b      	ldrb	r3, [r3, r2]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	2b02      	cmp	r3, #2
 8001262:	d006      	beq.n	8001272 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2204      	movs	r2, #4
 8001268:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800126a:	187b      	adds	r3, r7, r1
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
 8001270:	e049      	b.n	8001306 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	210e      	movs	r1, #14
 800127e:	438a      	bics	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2101      	movs	r1, #1
 800128e:	438a      	bics	r2, r1
 8001290:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129c:	491d      	ldr	r1, [pc, #116]	; (8001314 <HAL_DMA_Abort_IT+0xcc>)
 800129e:	400a      	ands	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <HAL_DMA_Abort_IT+0xd0>)
 80012a4:	6859      	ldr	r1, [r3, #4]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	221c      	movs	r2, #28
 80012ac:	4013      	ands	r3, r2
 80012ae:	2201      	movs	r2, #1
 80012b0:	409a      	lsls	r2, r3
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_DMA_Abort_IT+0xd0>)
 80012b4:	430a      	orrs	r2, r1
 80012b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80012c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00c      	beq.n	80012e4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012d4:	490f      	ldr	r1, [pc, #60]	; (8001314 <HAL_DMA_Abort_IT+0xcc>)
 80012d6:	400a      	ands	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80012e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2225      	movs	r2, #37	; 0x25
 80012e8:	2101      	movs	r1, #1
 80012ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2224      	movs	r2, #36	; 0x24
 80012f0:	2100      	movs	r1, #0
 80012f2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d004      	beq.n	8001306 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	0010      	movs	r0, r2
 8001304:	4798      	blx	r3
    }
  }
  return status;
 8001306:	230f      	movs	r3, #15
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	781b      	ldrb	r3, [r3, #0]
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b004      	add	sp, #16
 8001312:	bd80      	pop	{r7, pc}
 8001314:	fffffeff 	.word	0xfffffeff
 8001318:	40020000 	.word	0x40020000

0800131c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8001324:	4b55      	ldr	r3, [pc, #340]	; (800147c <HAL_DMA_IRQHandler+0x160>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	221c      	movs	r2, #28
 8001338:	4013      	ands	r3, r2
 800133a:	2204      	movs	r2, #4
 800133c:	409a      	lsls	r2, r3
 800133e:	0013      	movs	r3, r2
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	4013      	ands	r3, r2
 8001344:	d027      	beq.n	8001396 <HAL_DMA_IRQHandler+0x7a>
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2204      	movs	r2, #4
 800134a:	4013      	ands	r3, r2
 800134c:	d023      	beq.n	8001396 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2220      	movs	r2, #32
 8001356:	4013      	ands	r3, r2
 8001358:	d107      	bne.n	800136a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2104      	movs	r1, #4
 8001366:	438a      	bics	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800136a:	4b44      	ldr	r3, [pc, #272]	; (800147c <HAL_DMA_IRQHandler+0x160>)
 800136c:	6859      	ldr	r1, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	221c      	movs	r2, #28
 8001374:	4013      	ands	r3, r2
 8001376:	2204      	movs	r2, #4
 8001378:	409a      	lsls	r2, r3
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <HAL_DMA_IRQHandler+0x160>)
 800137c:	430a      	orrs	r2, r1
 800137e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	2b00      	cmp	r3, #0
 8001386:	d100      	bne.n	800138a <HAL_DMA_IRQHandler+0x6e>
 8001388:	e073      	b.n	8001472 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	0010      	movs	r0, r2
 8001392:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001394:	e06d      	b.n	8001472 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	221c      	movs	r2, #28
 800139c:	4013      	ands	r3, r2
 800139e:	2202      	movs	r2, #2
 80013a0:	409a      	lsls	r2, r3
 80013a2:	0013      	movs	r3, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4013      	ands	r3, r2
 80013a8:	d02e      	beq.n	8001408 <HAL_DMA_IRQHandler+0xec>
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2202      	movs	r2, #2
 80013ae:	4013      	ands	r3, r2
 80013b0:	d02a      	beq.n	8001408 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2220      	movs	r2, #32
 80013ba:	4013      	ands	r3, r2
 80013bc:	d10b      	bne.n	80013d6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	210a      	movs	r1, #10
 80013ca:	438a      	bics	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2225      	movs	r2, #37	; 0x25
 80013d2:	2101      	movs	r1, #1
 80013d4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80013d6:	4b29      	ldr	r3, [pc, #164]	; (800147c <HAL_DMA_IRQHandler+0x160>)
 80013d8:	6859      	ldr	r1, [r3, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	221c      	movs	r2, #28
 80013e0:	4013      	ands	r3, r2
 80013e2:	2202      	movs	r2, #2
 80013e4:	409a      	lsls	r2, r3
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_DMA_IRQHandler+0x160>)
 80013e8:	430a      	orrs	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2224      	movs	r2, #36	; 0x24
 80013f0:	2100      	movs	r1, #0
 80013f2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d03a      	beq.n	8001472 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	0010      	movs	r0, r2
 8001404:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001406:	e034      	b.n	8001472 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	221c      	movs	r2, #28
 800140e:	4013      	ands	r3, r2
 8001410:	2208      	movs	r2, #8
 8001412:	409a      	lsls	r2, r3
 8001414:	0013      	movs	r3, r2
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4013      	ands	r3, r2
 800141a:	d02b      	beq.n	8001474 <HAL_DMA_IRQHandler+0x158>
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2208      	movs	r2, #8
 8001420:	4013      	ands	r3, r2
 8001422:	d027      	beq.n	8001474 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	210e      	movs	r1, #14
 8001430:	438a      	bics	r2, r1
 8001432:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_DMA_IRQHandler+0x160>)
 8001436:	6859      	ldr	r1, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	221c      	movs	r2, #28
 800143e:	4013      	ands	r3, r2
 8001440:	2201      	movs	r2, #1
 8001442:	409a      	lsls	r2, r3
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_DMA_IRQHandler+0x160>)
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2225      	movs	r2, #37	; 0x25
 8001454:	2101      	movs	r1, #1
 8001456:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2224      	movs	r2, #36	; 0x24
 800145c:	2100      	movs	r1, #0
 800145e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	2b00      	cmp	r3, #0
 8001466:	d005      	beq.n	8001474 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	0010      	movs	r0, r2
 8001470:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	46c0      	nop			; (mov r8, r8)
}
 8001476:	46bd      	mov	sp, r7
 8001478:	b004      	add	sp, #16
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40020000 	.word	0x40020000

08001480 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001496:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80014a8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <DMA_SetConfig+0x7c>)
 80014ac:	6859      	ldr	r1, [r3, #4]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	221c      	movs	r2, #28
 80014b4:	4013      	ands	r3, r2
 80014b6:	2201      	movs	r2, #1
 80014b8:	409a      	lsls	r2, r3
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <DMA_SetConfig+0x7c>)
 80014bc:	430a      	orrs	r2, r1
 80014be:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	2b10      	cmp	r3, #16
 80014ce:	d108      	bne.n	80014e2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014e0:	e007      	b.n	80014f2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	60da      	str	r2, [r3, #12]
}
 80014f2:	46c0      	nop			; (mov r8, r8)
 80014f4:	46bd      	mov	sp, r7
 80014f6:	b004      	add	sp, #16
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	40020000 	.word	0x40020000

08001500 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	089b      	lsrs	r3, r3, #2
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001510:	4694      	mov	ip, r2
 8001512:	4463      	add	r3, ip
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	001a      	movs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	001a      	movs	r2, r3
 8001522:	23ff      	movs	r3, #255	; 0xff
 8001524:	4013      	ands	r3, r2
 8001526:	3b08      	subs	r3, #8
 8001528:	2114      	movs	r1, #20
 800152a:	0018      	movs	r0, r3
 800152c:	f7fe fde8 	bl	8000100 <__udivsi3>
 8001530:	0003      	movs	r3, r0
 8001532:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001538:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	221f      	movs	r2, #31
 800153e:	4013      	ands	r3, r2
 8001540:	2201      	movs	r2, #1
 8001542:	409a      	lsls	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001548:	46c0      	nop			; (mov r8, r8)
 800154a:	46bd      	mov	sp, r7
 800154c:	b004      	add	sp, #16
 800154e:	bd80      	pop	{r7, pc}
 8001550:	10008200 	.word	0x10008200
 8001554:	40020880 	.word	0x40020880

08001558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	223f      	movs	r2, #63	; 0x3f
 8001566:	4013      	ands	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800156e:	4694      	mov	ip, r2
 8001570:	4463      	add	r3, ip
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	001a      	movs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800157e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	3b01      	subs	r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	4013      	ands	r3, r2
 8001588:	2201      	movs	r2, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001590:	46c0      	nop			; (mov r8, r8)
 8001592:	46bd      	mov	sp, r7
 8001594:	b004      	add	sp, #16
 8001596:	bd80      	pop	{r7, pc}
 8001598:	1000823f 	.word	0x1000823f
 800159c:	40020940 	.word	0x40020940

080015a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ae:	e147      	b.n	8001840 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2101      	movs	r1, #1
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	4091      	lsls	r1, r2
 80015ba:	000a      	movs	r2, r1
 80015bc:	4013      	ands	r3, r2
 80015be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d100      	bne.n	80015c8 <HAL_GPIO_Init+0x28>
 80015c6:	e138      	b.n	800183a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2203      	movs	r2, #3
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d005      	beq.n	80015e0 <HAL_GPIO_Init+0x40>
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2203      	movs	r2, #3
 80015da:	4013      	ands	r3, r2
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d130      	bne.n	8001642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	409a      	lsls	r2, r3
 80015ee:	0013      	movs	r3, r2
 80015f0:	43da      	mvns	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	409a      	lsls	r2, r3
 8001602:	0013      	movs	r3, r2
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001616:	2201      	movs	r2, #1
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	2201      	movs	r2, #1
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2203      	movs	r2, #3
 8001648:	4013      	ands	r3, r2
 800164a:	2b03      	cmp	r3, #3
 800164c:	d017      	beq.n	800167e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	2203      	movs	r2, #3
 800165a:	409a      	lsls	r2, r3
 800165c:	0013      	movs	r3, r2
 800165e:	43da      	mvns	r2, r3
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4013      	ands	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	409a      	lsls	r2, r3
 8001670:	0013      	movs	r3, r2
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4313      	orrs	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2203      	movs	r2, #3
 8001684:	4013      	ands	r3, r2
 8001686:	2b02      	cmp	r3, #2
 8001688:	d123      	bne.n	80016d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	08da      	lsrs	r2, r3, #3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3208      	adds	r2, #8
 8001692:	0092      	lsls	r2, r2, #2
 8001694:	58d3      	ldr	r3, [r2, r3]
 8001696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2207      	movs	r2, #7
 800169c:	4013      	ands	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	220f      	movs	r2, #15
 80016a2:	409a      	lsls	r2, r3
 80016a4:	0013      	movs	r3, r2
 80016a6:	43da      	mvns	r2, r3
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	691a      	ldr	r2, [r3, #16]
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2107      	movs	r1, #7
 80016b6:	400b      	ands	r3, r1
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	08da      	lsrs	r2, r3, #3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3208      	adds	r2, #8
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	6939      	ldr	r1, [r7, #16]
 80016d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	409a      	lsls	r2, r3
 80016e0:	0013      	movs	r3, r2
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2203      	movs	r2, #3
 80016f0:	401a      	ands	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	409a      	lsls	r2, r3
 80016f8:	0013      	movs	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	23c0      	movs	r3, #192	; 0xc0
 800170c:	029b      	lsls	r3, r3, #10
 800170e:	4013      	ands	r3, r2
 8001710:	d100      	bne.n	8001714 <HAL_GPIO_Init+0x174>
 8001712:	e092      	b.n	800183a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001714:	4a50      	ldr	r2, [pc, #320]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	3318      	adds	r3, #24
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	589b      	ldr	r3, [r3, r2]
 8001720:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2203      	movs	r2, #3
 8001726:	4013      	ands	r3, r2
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	220f      	movs	r2, #15
 800172c:	409a      	lsls	r2, r3
 800172e:	0013      	movs	r3, r2
 8001730:	43da      	mvns	r2, r3
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	23a0      	movs	r3, #160	; 0xa0
 800173c:	05db      	lsls	r3, r3, #23
 800173e:	429a      	cmp	r2, r3
 8001740:	d013      	beq.n	800176a <HAL_GPIO_Init+0x1ca>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a45      	ldr	r2, [pc, #276]	; (800185c <HAL_GPIO_Init+0x2bc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d00d      	beq.n	8001766 <HAL_GPIO_Init+0x1c6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a44      	ldr	r2, [pc, #272]	; (8001860 <HAL_GPIO_Init+0x2c0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d007      	beq.n	8001762 <HAL_GPIO_Init+0x1c2>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a43      	ldr	r2, [pc, #268]	; (8001864 <HAL_GPIO_Init+0x2c4>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d101      	bne.n	800175e <HAL_GPIO_Init+0x1be>
 800175a:	2303      	movs	r3, #3
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x1cc>
 800175e:	2305      	movs	r3, #5
 8001760:	e004      	b.n	800176c <HAL_GPIO_Init+0x1cc>
 8001762:	2302      	movs	r3, #2
 8001764:	e002      	b.n	800176c <HAL_GPIO_Init+0x1cc>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x1cc>
 800176a:	2300      	movs	r3, #0
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	2103      	movs	r1, #3
 8001770:	400a      	ands	r2, r1
 8001772:	00d2      	lsls	r2, r2, #3
 8001774:	4093      	lsls	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800177c:	4936      	ldr	r1, [pc, #216]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3318      	adds	r3, #24
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	035b      	lsls	r3, r3, #13
 80017a2:	4013      	ands	r3, r2
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	039b      	lsls	r3, r3, #14
 80017cc:	4013      	ands	r3, r2
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017de:	4a1e      	ldr	r2, [pc, #120]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 80017e0:	2384      	movs	r3, #132	; 0x84
 80017e2:	58d3      	ldr	r3, [r2, r3]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	43da      	mvns	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	4013      	ands	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685a      	ldr	r2, [r3, #4]
 80017f4:	2380      	movs	r3, #128	; 0x80
 80017f6:	029b      	lsls	r3, r3, #10
 80017f8:	4013      	ands	r3, r2
 80017fa:	d003      	beq.n	8001804 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001804:	4914      	ldr	r1, [pc, #80]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 8001806:	2284      	movs	r2, #132	; 0x84
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800180c:	4a12      	ldr	r2, [pc, #72]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	58d3      	ldr	r3, [r2, r3]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	43da      	mvns	r2, r3
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	4013      	ands	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	025b      	lsls	r3, r3, #9
 8001826:	4013      	ands	r3, r2
 8001828:	d003      	beq.n	8001832 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001832:	4909      	ldr	r1, [pc, #36]	; (8001858 <HAL_GPIO_Init+0x2b8>)
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	40da      	lsrs	r2, r3
 8001848:	1e13      	subs	r3, r2, #0
 800184a:	d000      	beq.n	800184e <HAL_GPIO_Init+0x2ae>
 800184c:	e6b0      	b.n	80015b0 <HAL_GPIO_Init+0x10>
  }
}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	b006      	add	sp, #24
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021800 	.word	0x40021800
 800185c:	50000400 	.word	0x50000400
 8001860:	50000800 	.word	0x50000800
 8001864:	50000c00 	.word	0x50000c00

08001868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	0008      	movs	r0, r1
 8001872:	0011      	movs	r1, r2
 8001874:	1cbb      	adds	r3, r7, #2
 8001876:	1c02      	adds	r2, r0, #0
 8001878:	801a      	strh	r2, [r3, #0]
 800187a:	1c7b      	adds	r3, r7, #1
 800187c:	1c0a      	adds	r2, r1, #0
 800187e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001880:	1c7b      	adds	r3, r7, #1
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001888:	1cbb      	adds	r3, r7, #2
 800188a:	881a      	ldrh	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001890:	e003      	b.n	800189a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001892:	1cbb      	adds	r3, r7, #2
 8001894:	881a      	ldrh	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b002      	add	sp, #8
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e082      	b.n	80019bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2241      	movs	r2, #65	; 0x41
 80018ba:	5c9b      	ldrb	r3, [r3, r2]
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d107      	bne.n	80018d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	2100      	movs	r1, #0
 80018c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7fe fef5 	bl	80006bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2241      	movs	r2, #65	; 0x41
 80018d6:	2124      	movs	r1, #36	; 0x24
 80018d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2101      	movs	r1, #1
 80018e6:	438a      	bics	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4934      	ldr	r1, [pc, #208]	; (80019c4 <HAL_I2C_Init+0x120>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	689a      	ldr	r2, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4931      	ldr	r1, [pc, #196]	; (80019c8 <HAL_I2C_Init+0x124>)
 8001904:	400a      	ands	r2, r1
 8001906:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	0209      	lsls	r1, r1, #8
 800191c:	430a      	orrs	r2, r1
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	e007      	b.n	8001932 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2184      	movs	r1, #132	; 0x84
 800192c:	0209      	lsls	r1, r1, #8
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	2b02      	cmp	r3, #2
 8001938:	d104      	bne.n	8001944 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	491f      	ldr	r1, [pc, #124]	; (80019cc <HAL_I2C_Init+0x128>)
 8001950:	430a      	orrs	r2, r1
 8001952:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68da      	ldr	r2, [r3, #12]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	491a      	ldr	r1, [pc, #104]	; (80019c8 <HAL_I2C_Init+0x124>)
 8001960:	400a      	ands	r2, r1
 8001962:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691a      	ldr	r2, [r3, #16]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	431a      	orrs	r2, r3
 800196e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69d9      	ldr	r1, [r3, #28]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	430a      	orrs	r2, r1
 800198c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2241      	movs	r2, #65	; 0x41
 80019a8:	2120      	movs	r1, #32
 80019aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2242      	movs	r2, #66	; 0x42
 80019b6:	2100      	movs	r1, #0
 80019b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	f0ffffff 	.word	0xf0ffffff
 80019c8:	ffff7fff 	.word	0xffff7fff
 80019cc:	02008000 	.word	0x02008000

080019d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2241      	movs	r2, #65	; 0x41
 80019de:	5c9b      	ldrb	r3, [r3, r2]
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	d138      	bne.n	8001a58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2240      	movs	r2, #64	; 0x40
 80019ea:	5c9b      	ldrb	r3, [r3, r2]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019f0:	2302      	movs	r3, #2
 80019f2:	e032      	b.n	8001a5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2240      	movs	r2, #64	; 0x40
 80019f8:	2101      	movs	r1, #1
 80019fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2241      	movs	r2, #65	; 0x41
 8001a00:	2124      	movs	r1, #36	; 0x24
 8001a02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2101      	movs	r1, #1
 8001a10:	438a      	bics	r2, r1
 8001a12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4911      	ldr	r1, [pc, #68]	; (8001a64 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001a20:	400a      	ands	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6819      	ldr	r1, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	683a      	ldr	r2, [r7, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2101      	movs	r1, #1
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2241      	movs	r2, #65	; 0x41
 8001a48:	2120      	movs	r1, #32
 8001a4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2240      	movs	r2, #64	; 0x40
 8001a50:	2100      	movs	r1, #0
 8001a52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e000      	b.n	8001a5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a58:	2302      	movs	r3, #2
  }
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b002      	add	sp, #8
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	46c0      	nop			; (mov r8, r8)
 8001a64:	ffffefff 	.word	0xffffefff

08001a68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2241      	movs	r2, #65	; 0x41
 8001a76:	5c9b      	ldrb	r3, [r3, r2]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b20      	cmp	r3, #32
 8001a7c:	d139      	bne.n	8001af2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2240      	movs	r2, #64	; 0x40
 8001a82:	5c9b      	ldrb	r3, [r3, r2]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e033      	b.n	8001af4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2240      	movs	r2, #64	; 0x40
 8001a90:	2101      	movs	r1, #1
 8001a92:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2241      	movs	r2, #65	; 0x41
 8001a98:	2124      	movs	r1, #36	; 0x24
 8001a9a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	438a      	bics	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2101      	movs	r1, #1
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2241      	movs	r2, #65	; 0x41
 8001ae2:	2120      	movs	r1, #32
 8001ae4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	2100      	movs	r1, #0
 8001aec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	e000      	b.n	8001af4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001af2:	2302      	movs	r3, #2
  }
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b004      	add	sp, #16
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	fffff0ff 	.word	0xfffff0ff

08001b00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a19      	ldr	r2, [pc, #100]	; (8001b74 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d11f      	bne.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001b24:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	0013      	movs	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	189b      	adds	r3, r3, r2
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	4912      	ldr	r1, [pc, #72]	; (8001b7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001b32:	0018      	movs	r0, r3
 8001b34:	f7fe fae4 	bl	8000100 <__udivsi3>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b3e:	e008      	b.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d003      	beq.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	e001      	b.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e009      	b.n	8001b66 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b52:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001b54:	695a      	ldr	r2, [r3, #20]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	401a      	ands	r2, r3
 8001b5c:	2380      	movs	r3, #128	; 0x80
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d0ed      	beq.n	8001b40 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	0018      	movs	r0, r3
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	b004      	add	sp, #16
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	46c0      	nop			; (mov r8, r8)
 8001b70:	40007000 	.word	0x40007000
 8001b74:	fffff9ff 	.word	0xfffff9ff
 8001b78:	20000018 	.word	0x20000018
 8001b7c:	000f4240 	.word	0x000f4240

08001b80 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b86:	689a      	ldr	r2, [r3, #8]
 8001b88:	23e0      	movs	r3, #224	; 0xe0
 8001b8a:	01db      	lsls	r3, r3, #7
 8001b8c:	4013      	ands	r3, r2
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e2f3      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d100      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x1e>
 8001bb4:	e07c      	b.n	8001cb0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	4bc3      	ldr	r3, [pc, #780]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2238      	movs	r2, #56	; 0x38
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc0:	4bc0      	ldr	r3, [pc, #768]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	2203      	movs	r2, #3
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b10      	cmp	r3, #16
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3e>
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d10b      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	4bb9      	ldr	r3, [pc, #740]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	029b      	lsls	r3, r3, #10
 8001be4:	4013      	ands	r3, r2
 8001be6:	d062      	beq.n	8001cae <HAL_RCC_OscConfig+0x116>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d15e      	bne.n	8001cae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e2ce      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	025b      	lsls	r3, r3, #9
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d107      	bne.n	8001c10 <HAL_RCC_OscConfig+0x78>
 8001c00:	4bb0      	ldr	r3, [pc, #704]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4baf      	ldr	r3, [pc, #700]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	0249      	lsls	r1, r1, #9
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	e020      	b.n	8001c52 <HAL_RCC_OscConfig+0xba>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	23a0      	movs	r3, #160	; 0xa0
 8001c16:	02db      	lsls	r3, r3, #11
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d10e      	bne.n	8001c3a <HAL_RCC_OscConfig+0xa2>
 8001c1c:	4ba9      	ldr	r3, [pc, #676]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4ba8      	ldr	r3, [pc, #672]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c22:	2180      	movs	r1, #128	; 0x80
 8001c24:	02c9      	lsls	r1, r1, #11
 8001c26:	430a      	orrs	r2, r1
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	4ba6      	ldr	r3, [pc, #664]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4ba5      	ldr	r3, [pc, #660]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c30:	2180      	movs	r1, #128	; 0x80
 8001c32:	0249      	lsls	r1, r1, #9
 8001c34:	430a      	orrs	r2, r1
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	e00b      	b.n	8001c52 <HAL_RCC_OscConfig+0xba>
 8001c3a:	4ba2      	ldr	r3, [pc, #648]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4ba1      	ldr	r3, [pc, #644]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c40:	49a1      	ldr	r1, [pc, #644]	; (8001ec8 <HAL_RCC_OscConfig+0x330>)
 8001c42:	400a      	ands	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	4b9f      	ldr	r3, [pc, #636]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b9e      	ldr	r3, [pc, #632]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c4c:	499f      	ldr	r1, [pc, #636]	; (8001ecc <HAL_RCC_OscConfig+0x334>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d014      	beq.n	8001c84 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f89b 	bl	8000d94 <HAL_GetTick>
 8001c5e:	0003      	movs	r3, r0
 8001c60:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c64:	f7ff f896 	bl	8000d94 <HAL_GetTick>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b64      	cmp	r3, #100	; 0x64
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e28d      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c76:	4b93      	ldr	r3, [pc, #588]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	029b      	lsls	r3, r3, #10
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d0f0      	beq.n	8001c64 <HAL_RCC_OscConfig+0xcc>
 8001c82:	e015      	b.n	8001cb0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7ff f886 	bl	8000d94 <HAL_GetTick>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8e:	f7ff f881 	bl	8000d94 <HAL_GetTick>
 8001c92:	0002      	movs	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e278      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ca0:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	029b      	lsls	r3, r3, #10
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0xf6>
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d100      	bne.n	8001cbc <HAL_RCC_OscConfig+0x124>
 8001cba:	e099      	b.n	8001df0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cbc:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2238      	movs	r2, #56	; 0x38
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cc6:	4b7f      	ldr	r3, [pc, #508]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	4013      	ands	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b10      	cmp	r3, #16
 8001cd4:	d102      	bne.n	8001cdc <HAL_RCC_OscConfig+0x144>
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d002      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d135      	bne.n	8001d4e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ce2:	4b78      	ldr	r3, [pc, #480]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	4013      	ands	r3, r2
 8001cec:	d005      	beq.n	8001cfa <HAL_RCC_OscConfig+0x162>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d101      	bne.n	8001cfa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e24b      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cfa:	4b72      	ldr	r3, [pc, #456]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4a74      	ldr	r2, [pc, #464]	; (8001ed0 <HAL_RCC_OscConfig+0x338>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	021a      	lsls	r2, r3, #8
 8001d0a:	4b6e      	ldr	r3, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d112      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d16:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a6e      	ldr	r2, [pc, #440]	; (8001ed4 <HAL_RCC_OscConfig+0x33c>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	4b67      	ldr	r3, [pc, #412]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d2a:	4b66      	ldr	r3, [pc, #408]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0adb      	lsrs	r3, r3, #11
 8001d30:	2207      	movs	r2, #7
 8001d32:	4013      	ands	r3, r2
 8001d34:	4a68      	ldr	r2, [pc, #416]	; (8001ed8 <HAL_RCC_OscConfig+0x340>)
 8001d36:	40da      	lsrs	r2, r3
 8001d38:	4b68      	ldr	r3, [pc, #416]	; (8001edc <HAL_RCC_OscConfig+0x344>)
 8001d3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d3c:	4b68      	ldr	r3, [pc, #416]	; (8001ee0 <HAL_RCC_OscConfig+0x348>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f7fe ffcb 	bl	8000cdc <HAL_InitTick>
 8001d46:	1e03      	subs	r3, r0, #0
 8001d48:	d051      	beq.n	8001dee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e221      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d030      	beq.n	8001db8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d56:	4b5b      	ldr	r3, [pc, #364]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a5e      	ldr	r2, [pc, #376]	; (8001ed4 <HAL_RCC_OscConfig+0x33c>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	0019      	movs	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001d6a:	4b56      	ldr	r3, [pc, #344]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b55      	ldr	r3, [pc, #340]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001d70:	2180      	movs	r1, #128	; 0x80
 8001d72:	0049      	lsls	r1, r1, #1
 8001d74:	430a      	orrs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d78:	f7ff f80c 	bl	8000d94 <HAL_GetTick>
 8001d7c:	0003      	movs	r3, r0
 8001d7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d82:	f7ff f807 	bl	8000d94 <HAL_GetTick>
 8001d86:	0002      	movs	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1fe      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d94:	4b4b      	ldr	r3, [pc, #300]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d0f0      	beq.n	8001d82 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a4a      	ldr	r2, [pc, #296]	; (8001ed0 <HAL_RCC_OscConfig+0x338>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	021a      	lsls	r2, r3, #8
 8001db0:	4b44      	ldr	r3, [pc, #272]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	e01b      	b.n	8001df0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001db8:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b41      	ldr	r3, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	4949      	ldr	r1, [pc, #292]	; (8001ee4 <HAL_RCC_OscConfig+0x34c>)
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7fe ffe6 	bl	8000d94 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7fe ffe1 	bl	8000d94 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e1d8      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4013      	ands	r3, r2
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x236>
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2208      	movs	r2, #8
 8001df6:	4013      	ands	r3, r2
 8001df8:	d047      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dfa:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2238      	movs	r2, #56	; 0x38
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b18      	cmp	r3, #24
 8001e04:	d10a      	bne.n	8001e1c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001e06:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e0a:	2202      	movs	r2, #2
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d03c      	beq.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d138      	bne.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e1ba      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d019      	beq.n	8001e58 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e24:	4b27      	ldr	r3, [pc, #156]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001e26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e28:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7fe ffb0 	bl	8000d94 <HAL_GetTick>
 8001e34:	0003      	movs	r3, r0
 8001e36:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3a:	f7fe ffab 	bl	8000d94 <HAL_GetTick>
 8001e3e:	0002      	movs	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e1a2      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e4c:	4b1d      	ldr	r3, [pc, #116]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e50:	2202      	movs	r2, #2
 8001e52:	4013      	ands	r3, r2
 8001e54:	d0f1      	beq.n	8001e3a <HAL_RCC_OscConfig+0x2a2>
 8001e56:	e018      	b.n	8001e8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e5c:	4b19      	ldr	r3, [pc, #100]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	438a      	bics	r2, r1
 8001e62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7fe ff96 	bl	8000d94 <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6e:	f7fe ff91 	bl	8000d94 <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e188      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e80:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e84:	2202      	movs	r2, #2
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f1      	bne.n	8001e6e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	4013      	ands	r3, r2
 8001e92:	d100      	bne.n	8001e96 <HAL_RCC_OscConfig+0x2fe>
 8001e94:	e0c6      	b.n	8002024 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e96:	231f      	movs	r3, #31
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e9e:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	2238      	movs	r2, #56	; 0x38
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b20      	cmp	r3, #32
 8001ea8:	d11e      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_OscConfig+0x32c>)
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2202      	movs	r2, #2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d100      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x31e>
 8001eb4:	e0b6      	b.n	8002024 <HAL_RCC_OscConfig+0x48c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d000      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x328>
 8001ebe:	e0b1      	b.n	8002024 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e166      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	fffeffff 	.word	0xfffeffff
 8001ecc:	fffbffff 	.word	0xfffbffff
 8001ed0:	ffff80ff 	.word	0xffff80ff
 8001ed4:	ffffc7ff 	.word	0xffffc7ff
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	20000018 	.word	0x20000018
 8001ee0:	2000001c 	.word	0x2000001c
 8001ee4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ee8:	4bac      	ldr	r3, [pc, #688]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001eea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eec:	2380      	movs	r3, #128	; 0x80
 8001eee:	055b      	lsls	r3, r3, #21
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x360>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x362>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d011      	beq.n	8001f22 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001efe:	4ba7      	ldr	r3, [pc, #668]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f02:	4ba6      	ldr	r3, [pc, #664]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	0549      	lsls	r1, r1, #21
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f0c:	4ba3      	ldr	r3, [pc, #652]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	055b      	lsls	r3, r3, #21
 8001f14:	4013      	ands	r3, r2
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001f1a:	231f      	movs	r3, #31
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f22:	4b9f      	ldr	r3, [pc, #636]	; (80021a0 <HAL_RCC_OscConfig+0x608>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d11a      	bne.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f2e:	4b9c      	ldr	r3, [pc, #624]	; (80021a0 <HAL_RCC_OscConfig+0x608>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b9b      	ldr	r3, [pc, #620]	; (80021a0 <HAL_RCC_OscConfig+0x608>)
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0049      	lsls	r1, r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001f3c:	f7fe ff2a 	bl	8000d94 <HAL_GetTick>
 8001f40:	0003      	movs	r3, r0
 8001f42:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f44:	e008      	b.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f46:	f7fe ff25 	bl	8000d94 <HAL_GetTick>
 8001f4a:	0002      	movs	r2, r0
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d901      	bls.n	8001f58 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001f54:	2303      	movs	r3, #3
 8001f56:	e11c      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f58:	4b91      	ldr	r3, [pc, #580]	; (80021a0 <HAL_RCC_OscConfig+0x608>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4013      	ands	r3, r2
 8001f62:	d0f0      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <HAL_RCC_OscConfig+0x3e2>
 8001f6c:	4b8b      	ldr	r3, [pc, #556]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f6e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f70:	4b8a      	ldr	r3, [pc, #552]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f72:	2101      	movs	r1, #1
 8001f74:	430a      	orrs	r2, r1
 8001f76:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f78:	e01c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x404>
 8001f82:	4b86      	ldr	r3, [pc, #536]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f86:	4b85      	ldr	r3, [pc, #532]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f88:	2104      	movs	r1, #4
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f8e:	4b83      	ldr	r3, [pc, #524]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f92:	4b82      	ldr	r3, [pc, #520]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f94:	2101      	movs	r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x41c>
 8001f9c:	4b7f      	ldr	r3, [pc, #508]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001f9e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fa0:	4b7e      	ldr	r3, [pc, #504]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	438a      	bics	r2, r1
 8001fa6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fa8:	4b7c      	ldr	r3, [pc, #496]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001faa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001fac:	4b7b      	ldr	r3, [pc, #492]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001fae:	2104      	movs	r1, #4
 8001fb0:	438a      	bics	r2, r1
 8001fb2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d014      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe feea 	bl	8000d94 <HAL_GetTick>
 8001fc0:	0003      	movs	r3, r0
 8001fc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc4:	e009      	b.n	8001fda <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fee5 	bl	8000d94 <HAL_GetTick>
 8001fca:	0002      	movs	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	4a74      	ldr	r2, [pc, #464]	; (80021a4 <HAL_RCC_OscConfig+0x60c>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e0db      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fda:	4b70      	ldr	r3, [pc, #448]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8001fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x42e>
 8001fe4:	e013      	b.n	800200e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fed5 	bl	8000d94 <HAL_GetTick>
 8001fea:	0003      	movs	r3, r0
 8001fec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fee:	e009      	b.n	8002004 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7fe fed0 	bl	8000d94 <HAL_GetTick>
 8001ff4:	0002      	movs	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	4a6a      	ldr	r2, [pc, #424]	; (80021a4 <HAL_RCC_OscConfig+0x60c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0c6      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002004:	4b65      	ldr	r3, [pc, #404]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8002006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002008:	2202      	movs	r2, #2
 800200a:	4013      	ands	r3, r2
 800200c:	d1f0      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800200e:	231f      	movs	r3, #31
 8002010:	18fb      	adds	r3, r7, r3
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002018:	4b60      	ldr	r3, [pc, #384]	; (800219c <HAL_RCC_OscConfig+0x604>)
 800201a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800201c:	4b5f      	ldr	r3, [pc, #380]	; (800219c <HAL_RCC_OscConfig+0x604>)
 800201e:	4962      	ldr	r1, [pc, #392]	; (80021a8 <HAL_RCC_OscConfig+0x610>)
 8002020:	400a      	ands	r2, r1
 8002022:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d100      	bne.n	800202e <HAL_RCC_OscConfig+0x496>
 800202c:	e0b0      	b.n	8002190 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202e:	4b5b      	ldr	r3, [pc, #364]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2238      	movs	r2, #56	; 0x38
 8002034:	4013      	ands	r3, r2
 8002036:	2b10      	cmp	r3, #16
 8002038:	d100      	bne.n	800203c <HAL_RCC_OscConfig+0x4a4>
 800203a:	e078      	b.n	800212e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d153      	bne.n	80020ec <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002044:	4b55      	ldr	r3, [pc, #340]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	4b54      	ldr	r3, [pc, #336]	; (800219c <HAL_RCC_OscConfig+0x604>)
 800204a:	4958      	ldr	r1, [pc, #352]	; (80021ac <HAL_RCC_OscConfig+0x614>)
 800204c:	400a      	ands	r2, r1
 800204e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fea0 	bl	8000d94 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7fe fe9b 	bl	8000d94 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e092      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800206c:	4b4b      	ldr	r3, [pc, #300]	; (800219c <HAL_RCC_OscConfig+0x604>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	049b      	lsls	r3, r3, #18
 8002074:	4013      	ands	r3, r2
 8002076:	d1f0      	bne.n	800205a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002078:	4b48      	ldr	r3, [pc, #288]	; (800219c <HAL_RCC_OscConfig+0x604>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	4a4c      	ldr	r2, [pc, #304]	; (80021b0 <HAL_RCC_OscConfig+0x618>)
 800207e:	4013      	ands	r3, r2
 8002080:	0019      	movs	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	431a      	orrs	r2, r3
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <HAL_RCC_OscConfig+0x604>)
 80020a2:	430a      	orrs	r2, r1
 80020a4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_OscConfig+0x604>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b3c      	ldr	r3, [pc, #240]	; (800219c <HAL_RCC_OscConfig+0x604>)
 80020ac:	2180      	movs	r1, #128	; 0x80
 80020ae:	0449      	lsls	r1, r1, #17
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80020b4:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_OscConfig+0x604>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	4b38      	ldr	r3, [pc, #224]	; (800219c <HAL_RCC_OscConfig+0x604>)
 80020ba:	2180      	movs	r1, #128	; 0x80
 80020bc:	0549      	lsls	r1, r1, #21
 80020be:	430a      	orrs	r2, r1
 80020c0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7fe fe67 	bl	8000d94 <HAL_GetTick>
 80020c6:	0003      	movs	r3, r0
 80020c8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7fe fe62 	bl	8000d94 <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e059      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b2f      	ldr	r3, [pc, #188]	; (800219c <HAL_RCC_OscConfig+0x604>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	049b      	lsls	r3, r3, #18
 80020e6:	4013      	ands	r3, r2
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x534>
 80020ea:	e051      	b.n	8002190 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <HAL_RCC_OscConfig+0x604>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4b2a      	ldr	r3, [pc, #168]	; (800219c <HAL_RCC_OscConfig+0x604>)
 80020f2:	492e      	ldr	r1, [pc, #184]	; (80021ac <HAL_RCC_OscConfig+0x614>)
 80020f4:	400a      	ands	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fe4c 	bl	8000d94 <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002102:	f7fe fe47 	bl	8000d94 <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e03e      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002114:	4b21      	ldr	r3, [pc, #132]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	2380      	movs	r3, #128	; 0x80
 800211a:	049b      	lsls	r3, r3, #18
 800211c:	4013      	ands	r3, r2
 800211e:	d1f0      	bne.n	8002102 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002120:	4b1e      	ldr	r3, [pc, #120]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8002122:	68da      	ldr	r2, [r3, #12]
 8002124:	4b1d      	ldr	r3, [pc, #116]	; (800219c <HAL_RCC_OscConfig+0x604>)
 8002126:	4923      	ldr	r1, [pc, #140]	; (80021b4 <HAL_RCC_OscConfig+0x61c>)
 8002128:	400a      	ands	r2, r1
 800212a:	60da      	str	r2, [r3, #12]
 800212c:	e030      	b.n	8002190 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e02b      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <HAL_RCC_OscConfig+0x604>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2203      	movs	r2, #3
 8002144:	401a      	ands	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	429a      	cmp	r2, r3
 800214c:	d11e      	bne.n	800218c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2270      	movs	r2, #112	; 0x70
 8002152:	401a      	ands	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d117      	bne.n	800218c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	23fe      	movs	r3, #254	; 0xfe
 8002160:	01db      	lsls	r3, r3, #7
 8002162:	401a      	ands	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d10e      	bne.n	800218c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	23f8      	movs	r3, #248	; 0xf8
 8002172:	039b      	lsls	r3, r3, #14
 8002174:	401a      	ands	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d106      	bne.n	800218c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	0f5b      	lsrs	r3, r3, #29
 8002182:	075a      	lsls	r2, r3, #29
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e000      	b.n	8002192 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b008      	add	sp, #32
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	40021000 	.word	0x40021000
 80021a0:	40007000 	.word	0x40007000
 80021a4:	00001388 	.word	0x00001388
 80021a8:	efffffff 	.word	0xefffffff
 80021ac:	feffffff 	.word	0xfeffffff
 80021b0:	1fc1808c 	.word	0x1fc1808c
 80021b4:	effefffc 	.word	0xeffefffc

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0e9      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2207      	movs	r2, #7
 80021d2:	4013      	ands	r3, r2
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d91e      	bls.n	8002218 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b73      	ldr	r3, [pc, #460]	; (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2207      	movs	r2, #7
 80021e0:	4393      	bics	r3, r2
 80021e2:	0019      	movs	r1, r3
 80021e4:	4b70      	ldr	r3, [pc, #448]	; (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021ec:	f7fe fdd2 	bl	8000d94 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021f4:	e009      	b.n	800220a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f6:	f7fe fdcd 	bl	8000d94 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	4a6a      	ldr	r2, [pc, #424]	; (80023ac <HAL_RCC_ClockConfig+0x1f4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e0ca      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800220a:	4b67      	ldr	r3, [pc, #412]	; (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2207      	movs	r2, #7
 8002210:	4013      	ands	r3, r2
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	429a      	cmp	r2, r3
 8002216:	d1ee      	bne.n	80021f6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d015      	beq.n	800224e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2204      	movs	r2, #4
 8002228:	4013      	ands	r3, r2
 800222a:	d006      	beq.n	800223a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800222c:	4b60      	ldr	r3, [pc, #384]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	4b5f      	ldr	r3, [pc, #380]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002232:	21e0      	movs	r1, #224	; 0xe0
 8002234:	01c9      	lsls	r1, r1, #7
 8002236:	430a      	orrs	r2, r1
 8002238:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223a:	4b5d      	ldr	r3, [pc, #372]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	4a5d      	ldr	r2, [pc, #372]	; (80023b4 <HAL_RCC_ClockConfig+0x1fc>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4b59      	ldr	r3, [pc, #356]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 800224a:	430a      	orrs	r2, r1
 800224c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2201      	movs	r2, #1
 8002254:	4013      	ands	r3, r2
 8002256:	d057      	beq.n	8002308 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	2380      	movs	r3, #128	; 0x80
 8002266:	029b      	lsls	r3, r3, #10
 8002268:	4013      	ands	r3, r2
 800226a:	d12b      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e097      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d107      	bne.n	8002288 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002278:	4b4d      	ldr	r3, [pc, #308]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	2380      	movs	r3, #128	; 0x80
 800227e:	049b      	lsls	r3, r3, #18
 8002280:	4013      	ands	r3, r2
 8002282:	d11f      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e08b      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002290:	4b47      	ldr	r3, [pc, #284]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4013      	ands	r3, r2
 800229a:	d113      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e07f      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d106      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022a8:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 80022aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ac:	2202      	movs	r2, #2
 80022ae:	4013      	ands	r3, r2
 80022b0:	d108      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e074      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022b6:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	2202      	movs	r2, #2
 80022bc:	4013      	ands	r3, r2
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e06d      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c4:	4b3a      	ldr	r3, [pc, #232]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2207      	movs	r2, #7
 80022ca:	4393      	bics	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d8:	f7fe fd5c 	bl	8000d94 <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e0:	e009      	b.n	80022f6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e2:	f7fe fd57 	bl	8000d94 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	4a2f      	ldr	r2, [pc, #188]	; (80023ac <HAL_RCC_ClockConfig+0x1f4>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e054      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	2238      	movs	r2, #56	; 0x38
 80022fc:	401a      	ands	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	429a      	cmp	r2, r3
 8002306:	d1ec      	bne.n	80022e2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2207      	movs	r2, #7
 800230e:	4013      	ands	r3, r2
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d21e      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2207      	movs	r2, #7
 800231c:	4393      	bics	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002328:	f7fe fd34 	bl	8000d94 <HAL_GetTick>
 800232c:	0003      	movs	r3, r0
 800232e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002330:	e009      	b.n	8002346 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002332:	f7fe fd2f 	bl	8000d94 <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	4a1b      	ldr	r2, [pc, #108]	; (80023ac <HAL_RCC_ClockConfig+0x1f4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e02c      	b.n	80023a0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002346:	4b18      	ldr	r3, [pc, #96]	; (80023a8 <HAL_RCC_ClockConfig+0x1f0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2207      	movs	r2, #7
 800234c:	4013      	ands	r3, r2
 800234e:	683a      	ldr	r2, [r7, #0]
 8002350:	429a      	cmp	r2, r3
 8002352:	d1ee      	bne.n	8002332 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2204      	movs	r2, #4
 800235a:	4013      	ands	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800235e:	4b14      	ldr	r3, [pc, #80]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4a15      	ldr	r2, [pc, #84]	; (80023b8 <HAL_RCC_ClockConfig+0x200>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002372:	f000 f829 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8002376:	0001      	movs	r1, r0
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <HAL_RCC_ClockConfig+0x1f8>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	220f      	movs	r2, #15
 8002380:	401a      	ands	r2, r3
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_RCC_ClockConfig+0x204>)
 8002384:	0092      	lsls	r2, r2, #2
 8002386:	58d3      	ldr	r3, [r2, r3]
 8002388:	221f      	movs	r2, #31
 800238a:	4013      	ands	r3, r2
 800238c:	000a      	movs	r2, r1
 800238e:	40da      	lsrs	r2, r3
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HAL_RCC_ClockConfig+0x208>)
 8002392:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <HAL_RCC_ClockConfig+0x20c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0018      	movs	r0, r3
 800239a:	f7fe fc9f 	bl	8000cdc <HAL_InitTick>
 800239e:	0003      	movs	r3, r0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b004      	add	sp, #16
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40022000 	.word	0x40022000
 80023ac:	00001388 	.word	0x00001388
 80023b0:	40021000 	.word	0x40021000
 80023b4:	fffff0ff 	.word	0xfffff0ff
 80023b8:	ffff8fff 	.word	0xffff8fff
 80023bc:	080043b8 	.word	0x080043b8
 80023c0:	20000018 	.word	0x20000018
 80023c4:	2000001c 	.word	0x2000001c

080023c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023ce:	4b3c      	ldr	r3, [pc, #240]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2238      	movs	r2, #56	; 0x38
 80023d4:	4013      	ands	r3, r2
 80023d6:	d10f      	bne.n	80023f8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0adb      	lsrs	r3, r3, #11
 80023de:	2207      	movs	r2, #7
 80023e0:	4013      	ands	r3, r2
 80023e2:	2201      	movs	r2, #1
 80023e4:	409a      	lsls	r2, r3
 80023e6:	0013      	movs	r3, r2
 80023e8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	4835      	ldr	r0, [pc, #212]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023ee:	f7fd fe87 	bl	8000100 <__udivsi3>
 80023f2:	0003      	movs	r3, r0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e05d      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f8:	4b31      	ldr	r3, [pc, #196]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2238      	movs	r2, #56	; 0x38
 80023fe:	4013      	ands	r3, r2
 8002400:	2b08      	cmp	r3, #8
 8002402:	d102      	bne.n	800240a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	e054      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	2238      	movs	r2, #56	; 0x38
 8002410:	4013      	ands	r3, r2
 8002412:	2b10      	cmp	r3, #16
 8002414:	d138      	bne.n	8002488 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002416:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2203      	movs	r2, #3
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	2207      	movs	r2, #7
 8002428:	4013      	ands	r3, r2
 800242a:	3301      	adds	r3, #1
 800242c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d10d      	bne.n	8002450 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	4824      	ldr	r0, [pc, #144]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002438:	f7fd fe62 	bl	8000100 <__udivsi3>
 800243c:	0003      	movs	r3, r0
 800243e:	0019      	movs	r1, r3
 8002440:	4b1f      	ldr	r3, [pc, #124]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	227f      	movs	r2, #127	; 0x7f
 8002448:	4013      	ands	r3, r2
 800244a:	434b      	muls	r3, r1
 800244c:	617b      	str	r3, [r7, #20]
        break;
 800244e:	e00d      	b.n	800246c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002450:	68b9      	ldr	r1, [r7, #8]
 8002452:	481c      	ldr	r0, [pc, #112]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002454:	f7fd fe54 	bl	8000100 <__udivsi3>
 8002458:	0003      	movs	r3, r0
 800245a:	0019      	movs	r1, r3
 800245c:	4b18      	ldr	r3, [pc, #96]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	227f      	movs	r2, #127	; 0x7f
 8002464:	4013      	ands	r3, r2
 8002466:	434b      	muls	r3, r1
 8002468:	617b      	str	r3, [r7, #20]
        break;
 800246a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800246c:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	0f5b      	lsrs	r3, r3, #29
 8002472:	2207      	movs	r2, #7
 8002474:	4013      	ands	r3, r2
 8002476:	3301      	adds	r3, #1
 8002478:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	6978      	ldr	r0, [r7, #20]
 800247e:	f7fd fe3f 	bl	8000100 <__udivsi3>
 8002482:	0003      	movs	r3, r0
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	e015      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2238      	movs	r2, #56	; 0x38
 800248e:	4013      	ands	r3, r2
 8002490:	2b20      	cmp	r3, #32
 8002492:	d103      	bne.n	800249c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	021b      	lsls	r3, r3, #8
 8002498:	613b      	str	r3, [r7, #16]
 800249a:	e00b      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2238      	movs	r2, #56	; 0x38
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b18      	cmp	r3, #24
 80024a6:	d103      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024a8:	23fa      	movs	r3, #250	; 0xfa
 80024aa:	01db      	lsls	r3, r3, #7
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	e001      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024b4:	693b      	ldr	r3, [r7, #16]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b006      	add	sp, #24
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	40021000 	.word	0x40021000
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	007a1200 	.word	0x007a1200

080024cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <HAL_RCC_GetHCLKFreq+0x10>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	20000018 	.word	0x20000018

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b5b0      	push	{r4, r5, r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80024e4:	f7ff fff2 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024e8:	0004      	movs	r4, r0
 80024ea:	f7ff fb49 	bl	8001b80 <LL_RCC_GetAPB1Prescaler>
 80024ee:	0003      	movs	r3, r0
 80024f0:	0b1a      	lsrs	r2, r3, #12
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024f4:	0092      	lsls	r2, r2, #2
 80024f6:	58d3      	ldr	r3, [r2, r3]
 80024f8:	221f      	movs	r2, #31
 80024fa:	4013      	ands	r3, r2
 80024fc:	40dc      	lsrs	r4, r3
 80024fe:	0023      	movs	r3, r4
}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	bdb0      	pop	{r4, r5, r7, pc}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	080043f8 	.word	0x080043f8

0800250c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002514:	2313      	movs	r3, #19
 8002516:	18fb      	adds	r3, r7, r3
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800251c:	2312      	movs	r3, #18
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	029b      	lsls	r3, r3, #10
 800252c:	4013      	ands	r3, r2
 800252e:	d100      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002530:	e0a3      	b.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002532:	2011      	movs	r0, #17
 8002534:	183b      	adds	r3, r7, r0
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800253a:	4b7f      	ldr	r3, [pc, #508]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800253c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	055b      	lsls	r3, r3, #21
 8002542:	4013      	ands	r3, r2
 8002544:	d110      	bne.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002546:	4b7c      	ldr	r3, [pc, #496]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800254a:	4b7b      	ldr	r3, [pc, #492]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0549      	lsls	r1, r1, #21
 8002550:	430a      	orrs	r2, r1
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
 8002554:	4b78      	ldr	r3, [pc, #480]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002558:	2380      	movs	r3, #128	; 0x80
 800255a:	055b      	lsls	r3, r3, #21
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
 8002560:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002562:	183b      	adds	r3, r7, r0
 8002564:	2201      	movs	r2, #1
 8002566:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002568:	4b74      	ldr	r3, [pc, #464]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4b73      	ldr	r3, [pc, #460]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0049      	lsls	r1, r1, #1
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002576:	f7fe fc0d 	bl	8000d94 <HAL_GetTick>
 800257a:	0003      	movs	r3, r0
 800257c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800257e:	e00b      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7fe fc08 	bl	8000d94 <HAL_GetTick>
 8002584:	0002      	movs	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d904      	bls.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800258e:	2313      	movs	r3, #19
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2203      	movs	r2, #3
 8002594:	701a      	strb	r2, [r3, #0]
        break;
 8002596:	e005      	b.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002598:	4b68      	ldr	r3, [pc, #416]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	4013      	ands	r3, r2
 80025a2:	d0ed      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80025a4:	2313      	movs	r3, #19
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d154      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80025ae:	4b62      	ldr	r3, [pc, #392]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025b2:	23c0      	movs	r3, #192	; 0xc0
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	4013      	ands	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d019      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	695b      	ldr	r3, [r3, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d014      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025ca:	4b5b      	ldr	r3, [pc, #364]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	4a5c      	ldr	r2, [pc, #368]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025d4:	4b58      	ldr	r3, [pc, #352]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025d8:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025da:	2180      	movs	r1, #128	; 0x80
 80025dc:	0249      	lsls	r1, r1, #9
 80025de:	430a      	orrs	r2, r1
 80025e0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025e2:	4b55      	ldr	r3, [pc, #340]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025e6:	4b54      	ldr	r3, [pc, #336]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025e8:	4956      	ldr	r1, [pc, #344]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80025ea:	400a      	ands	r2, r1
 80025ec:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025ee:	4b52      	ldr	r3, [pc, #328]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2201      	movs	r2, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	d016      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fbca 	bl	8000d94 <HAL_GetTick>
 8002600:	0003      	movs	r3, r0
 8002602:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002604:	e00c      	b.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002606:	f7fe fbc5 	bl	8000d94 <HAL_GetTick>
 800260a:	0002      	movs	r2, r0
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	4a4d      	ldr	r2, [pc, #308]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d904      	bls.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002616:	2313      	movs	r3, #19
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	2203      	movs	r2, #3
 800261c:	701a      	strb	r2, [r3, #0]
            break;
 800261e:	e004      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002620:	4b45      	ldr	r3, [pc, #276]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2202      	movs	r2, #2
 8002626:	4013      	ands	r3, r2
 8002628:	d0ed      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800262a:	2313      	movs	r3, #19
 800262c:	18fb      	adds	r3, r7, r3
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002634:	4b40      	ldr	r3, [pc, #256]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002638:	4a41      	ldr	r2, [pc, #260]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800263a:	4013      	ands	r3, r2
 800263c:	0019      	movs	r1, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	4b3d      	ldr	r3, [pc, #244]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002644:	430a      	orrs	r2, r1
 8002646:	65da      	str	r2, [r3, #92]	; 0x5c
 8002648:	e00c      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800264a:	2312      	movs	r3, #18
 800264c:	18fb      	adds	r3, r7, r3
 800264e:	2213      	movs	r2, #19
 8002650:	18ba      	adds	r2, r7, r2
 8002652:	7812      	ldrb	r2, [r2, #0]
 8002654:	701a      	strb	r2, [r3, #0]
 8002656:	e005      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002658:	2312      	movs	r3, #18
 800265a:	18fb      	adds	r3, r7, r3
 800265c:	2213      	movs	r2, #19
 800265e:	18ba      	adds	r2, r7, r2
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002664:	2311      	movs	r3, #17
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d105      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266e:	4b32      	ldr	r3, [pc, #200]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002670:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002672:	4b31      	ldr	r3, [pc, #196]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002674:	4935      	ldr	r1, [pc, #212]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002676:	400a      	ands	r2, r1
 8002678:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2201      	movs	r2, #1
 8002680:	4013      	ands	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002684:	4b2c      	ldr	r3, [pc, #176]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	2203      	movs	r2, #3
 800268a:	4393      	bics	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4b29      	ldr	r3, [pc, #164]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002694:	430a      	orrs	r2, r1
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2220      	movs	r2, #32
 800269e:	4013      	ands	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a2:	4b25      	ldr	r3, [pc, #148]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	4a2a      	ldr	r2, [pc, #168]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026b2:	430a      	orrs	r2, r1
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	01db      	lsls	r3, r3, #7
 80026be:	4013      	ands	r3, r2
 80026c0:	d015      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026c2:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	0899      	lsrs	r1, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026d0:	430a      	orrs	r2, r1
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691a      	ldr	r2, [r3, #16]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	05db      	lsls	r3, r3, #23
 80026dc:	429a      	cmp	r2, r3
 80026de:	d106      	bne.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4b14      	ldr	r3, [pc, #80]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	0249      	lsls	r1, r1, #9
 80026ea:	430a      	orrs	r2, r1
 80026ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	4013      	ands	r3, r2
 80026f8:	d016      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026fa:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	4b0b      	ldr	r3, [pc, #44]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800270a:	430a      	orrs	r2, r1
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	429a      	cmp	r2, r3
 8002718:	d106      	bne.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800271a:	4b07      	ldr	r3, [pc, #28]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	4b06      	ldr	r3, [pc, #24]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0249      	lsls	r1, r1, #9
 8002724:	430a      	orrs	r2, r1
 8002726:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002728:	2312      	movs	r3, #18
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	781b      	ldrb	r3, [r3, #0]
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b006      	add	sp, #24
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	40021000 	.word	0x40021000
 800273c:	40007000 	.word	0x40007000
 8002740:	fffffcff 	.word	0xfffffcff
 8002744:	fffeffff 	.word	0xfffeffff
 8002748:	00001388 	.word	0x00001388
 800274c:	efffffff 	.word	0xefffffff
 8002750:	ffffcfff 	.word	0xffffcfff
 8002754:	ffff3fff 	.word	0xffff3fff

08002758 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002758:	b5b0      	push	{r4, r5, r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002760:	230f      	movs	r3, #15
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d100      	bne.n	8002770 <HAL_RTC_Init+0x18>
 800276e:	e08c      	b.n	800288a <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2229      	movs	r2, #41	; 0x29
 8002774:	5c9b      	ldrb	r3, [r3, r2]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d10b      	bne.n	8002794 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2228      	movs	r2, #40	; 0x28
 8002780:	2100      	movs	r1, #0
 8002782:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2288      	movs	r2, #136	; 0x88
 8002788:	0212      	lsls	r2, r2, #8
 800278a:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	0018      	movs	r0, r3
 8002790:	f7fe f892 	bl	80008b8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2229      	movs	r2, #41	; 0x29
 8002798:	2102      	movs	r1, #2
 800279a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	2210      	movs	r2, #16
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b10      	cmp	r3, #16
 80027a8:	d062      	beq.n	8002870 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	22ca      	movs	r2, #202	; 0xca
 80027b0:	625a      	str	r2, [r3, #36]	; 0x24
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2253      	movs	r2, #83	; 0x53
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80027ba:	250f      	movs	r5, #15
 80027bc:	197c      	adds	r4, r7, r5
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	0018      	movs	r0, r3
 80027c2:	f000 f892 	bl	80028ea <RTC_EnterInitMode>
 80027c6:	0003      	movs	r3, r0
 80027c8:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80027ca:	0028      	movs	r0, r5
 80027cc:	183b      	adds	r3, r7, r0
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d12c      	bne.n	800282e <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	492e      	ldr	r1, [pc, #184]	; (8002898 <HAL_RTC_Init+0x140>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6999      	ldr	r1, [r3, #24]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6912      	ldr	r2, [r2, #16]
 800280a:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6919      	ldr	r1, [r3, #16]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	041a      	lsls	r2, r3, #16
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002820:	183c      	adds	r4, r7, r0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0018      	movs	r0, r3
 8002826:	f000 f8a3 	bl	8002970 <RTC_ExitInitMode>
 800282a:	0003      	movs	r3, r0
 800282c:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800282e:	230f      	movs	r3, #15
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d116      	bne.n	8002866 <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	00d2      	lsls	r2, r2, #3
 8002844:	08d2      	lsrs	r2, r2, #3
 8002846:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6999      	ldr	r1, [r3, #24]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	430a      	orrs	r2, r1
 8002864:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	22ff      	movs	r2, #255	; 0xff
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
 800286e:	e003      	b.n	8002878 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002870:	230f      	movs	r3, #15
 8002872:	18fb      	adds	r3, r7, r3
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002878:	230f      	movs	r3, #15
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d103      	bne.n	800288a <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2229      	movs	r2, #41	; 0x29
 8002886:	2101      	movs	r1, #1
 8002888:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800288a:	230f      	movs	r3, #15
 800288c:	18fb      	adds	r3, r7, r3
 800288e:	781b      	ldrb	r3, [r3, #0]
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bdb0      	pop	{r4, r5, r7, pc}
 8002898:	fb8fffbf 	.word	0xfb8fffbf

0800289c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	21a0      	movs	r1, #160	; 0xa0
 80028b0:	438a      	bics	r2, r1
 80028b2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80028b4:	f7fe fa6e 	bl	8000d94 <HAL_GetTick>
 80028b8:	0003      	movs	r3, r0
 80028ba:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80028bc:	e00a      	b.n	80028d4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80028be:	f7fe fa69 	bl	8000d94 <HAL_GetTick>
 80028c2:	0002      	movs	r2, r0
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1ad2      	subs	r2, r2, r3
 80028c8:	23fa      	movs	r3, #250	; 0xfa
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d901      	bls.n	80028d4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e006      	b.n	80028e2 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	4013      	ands	r3, r2
 80028de:	d0ee      	beq.n	80028be <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	0018      	movs	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b004      	add	sp, #16
 80028e8:	bd80      	pop	{r7, pc}

080028ea <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80028f2:	230f      	movs	r3, #15
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	2200      	movs	r2, #0
 80028f8:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	2240      	movs	r2, #64	; 0x40
 8002902:	4013      	ands	r3, r2
 8002904:	d12c      	bne.n	8002960 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2180      	movs	r1, #128	; 0x80
 8002912:	430a      	orrs	r2, r1
 8002914:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002916:	f7fe fa3d 	bl	8000d94 <HAL_GetTick>
 800291a:	0003      	movs	r3, r0
 800291c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800291e:	e014      	b.n	800294a <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002920:	f7fe fa38 	bl	8000d94 <HAL_GetTick>
 8002924:	0002      	movs	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad2      	subs	r2, r2, r3
 800292a:	200f      	movs	r0, #15
 800292c:	183b      	adds	r3, r7, r0
 800292e:	1839      	adds	r1, r7, r0
 8002930:	7809      	ldrb	r1, [r1, #0]
 8002932:	7019      	strb	r1, [r3, #0]
 8002934:	23fa      	movs	r3, #250	; 0xfa
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d906      	bls.n	800294a <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 800293c:	183b      	adds	r3, r7, r0
 800293e:	2203      	movs	r2, #3
 8002940:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2229      	movs	r2, #41	; 0x29
 8002946:	2103      	movs	r1, #3
 8002948:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	2240      	movs	r2, #64	; 0x40
 8002952:	4013      	ands	r3, r2
 8002954:	d104      	bne.n	8002960 <RTC_EnterInitMode+0x76>
 8002956:	230f      	movs	r3, #15
 8002958:	18fb      	adds	r3, r7, r3
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d1df      	bne.n	8002920 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002960:	230f      	movs	r3, #15
 8002962:	18fb      	adds	r3, r7, r3
 8002964:	781b      	ldrb	r3, [r3, #0]
}
 8002966:	0018      	movs	r0, r3
 8002968:	46bd      	mov	sp, r7
 800296a:	b004      	add	sp, #16
 800296c:	bd80      	pop	{r7, pc}
	...

08002970 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	240f      	movs	r4, #15
 800297a:	193b      	adds	r3, r7, r4
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002980:	4b1c      	ldr	r3, [pc, #112]	; (80029f4 <RTC_ExitInitMode+0x84>)
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	4b1b      	ldr	r3, [pc, #108]	; (80029f4 <RTC_ExitInitMode+0x84>)
 8002986:	2180      	movs	r1, #128	; 0x80
 8002988:	438a      	bics	r2, r1
 800298a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <RTC_ExitInitMode+0x84>)
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	2220      	movs	r2, #32
 8002992:	4013      	ands	r3, r2
 8002994:	d10d      	bne.n	80029b2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	0018      	movs	r0, r3
 800299a:	f7ff ff7f 	bl	800289c <HAL_RTC_WaitForSynchro>
 800299e:	1e03      	subs	r3, r0, #0
 80029a0:	d021      	beq.n	80029e6 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2229      	movs	r2, #41	; 0x29
 80029a6:	2103      	movs	r1, #3
 80029a8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80029aa:	193b      	adds	r3, r7, r4
 80029ac:	2203      	movs	r2, #3
 80029ae:	701a      	strb	r2, [r3, #0]
 80029b0:	e019      	b.n	80029e6 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <RTC_ExitInitMode+0x84>)
 80029b4:	699a      	ldr	r2, [r3, #24]
 80029b6:	4b0f      	ldr	r3, [pc, #60]	; (80029f4 <RTC_ExitInitMode+0x84>)
 80029b8:	2120      	movs	r1, #32
 80029ba:	438a      	bics	r2, r1
 80029bc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f7ff ff6b 	bl	800289c <HAL_RTC_WaitForSynchro>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d007      	beq.n	80029da <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2229      	movs	r2, #41	; 0x29
 80029ce:	2103      	movs	r1, #3
 80029d0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80029d2:	230f      	movs	r3, #15
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	2203      	movs	r2, #3
 80029d8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <RTC_ExitInitMode+0x84>)
 80029dc:	699a      	ldr	r2, [r3, #24]
 80029de:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <RTC_ExitInitMode+0x84>)
 80029e0:	2120      	movs	r1, #32
 80029e2:	430a      	orrs	r2, r1
 80029e4:	619a      	str	r2, [r3, #24]
  }

  return status;
 80029e6:	230f      	movs	r3, #15
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	781b      	ldrb	r3, [r3, #0]
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b005      	add	sp, #20
 80029f2:	bd90      	pop	{r4, r7, pc}
 80029f4:	40002800 	.word	0x40002800

080029f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e04a      	b.n	8002aa0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	223d      	movs	r2, #61	; 0x3d
 8002a0e:	5c9b      	ldrb	r3, [r3, r2]
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	223c      	movs	r2, #60	; 0x3c
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f7fe f813 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	223d      	movs	r2, #61	; 0x3d
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3304      	adds	r3, #4
 8002a36:	0019      	movs	r1, r3
 8002a38:	0010      	movs	r0, r2
 8002a3a:	f000 f87b 	bl	8002b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2248      	movs	r2, #72	; 0x48
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	223e      	movs	r2, #62	; 0x3e
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	223f      	movs	r2, #63	; 0x3f
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2240      	movs	r2, #64	; 0x40
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2241      	movs	r2, #65	; 0x41
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2242      	movs	r2, #66	; 0x42
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2243      	movs	r2, #67	; 0x43
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2244      	movs	r2, #68	; 0x44
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2245      	movs	r2, #69	; 0x45
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2246      	movs	r2, #70	; 0x46
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5499      	strb	r1, [r3, r2]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2247      	movs	r2, #71	; 0x47
 8002a92:	2101      	movs	r1, #1
 8002a94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223d      	movs	r2, #61	; 0x3d
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	b002      	add	sp, #8
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	223d      	movs	r2, #61	; 0x3d
 8002ab4:	5c9b      	ldrb	r3, [r3, r2]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d001      	beq.n	8002ac0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e02f      	b.n	8002b20 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	223d      	movs	r2, #61	; 0x3d
 8002ac4:	2102      	movs	r1, #2
 8002ac6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a16      	ldr	r2, [pc, #88]	; (8002b28 <HAL_TIM_Base_Start+0x80>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d004      	beq.n	8002adc <HAL_TIM_Base_Start+0x34>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a15      	ldr	r2, [pc, #84]	; (8002b2c <HAL_TIM_Base_Start+0x84>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d116      	bne.n	8002b0a <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	4a13      	ldr	r2, [pc, #76]	; (8002b30 <HAL_TIM_Base_Start+0x88>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d016      	beq.n	8002b1c <HAL_TIM_Base_Start+0x74>
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	025b      	lsls	r3, r3, #9
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d011      	beq.n	8002b1c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2101      	movs	r1, #1
 8002b04:	430a      	orrs	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b08:	e008      	b.n	8002b1c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	430a      	orrs	r2, r1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e000      	b.n	8002b1e <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b004      	add	sp, #16
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	00010007 	.word	0x00010007

08002b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <TIM_Base_SetConfig+0xc0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d003      	beq.n	8002b54 <TIM_Base_SetConfig+0x20>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <TIM_Base_SetConfig+0xc4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d108      	bne.n	8002b66 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2270      	movs	r2, #112	; 0x70
 8002b58:	4393      	bics	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a22      	ldr	r2, [pc, #136]	; (8002bf4 <TIM_Base_SetConfig+0xc0>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00f      	beq.n	8002b8e <TIM_Base_SetConfig+0x5a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a21      	ldr	r2, [pc, #132]	; (8002bf8 <TIM_Base_SetConfig+0xc4>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00b      	beq.n	8002b8e <TIM_Base_SetConfig+0x5a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <TIM_Base_SetConfig+0xc8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <TIM_Base_SetConfig+0x5a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1f      	ldr	r2, [pc, #124]	; (8002c00 <TIM_Base_SetConfig+0xcc>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <TIM_Base_SetConfig+0x5a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1e      	ldr	r2, [pc, #120]	; (8002c04 <TIM_Base_SetConfig+0xd0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d108      	bne.n	8002ba0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <TIM_Base_SetConfig+0xd4>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2280      	movs	r2, #128	; 0x80
 8002ba4:	4393      	bics	r3, r2
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a0a      	ldr	r2, [pc, #40]	; (8002bf4 <TIM_Base_SetConfig+0xc0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d007      	beq.n	8002bde <TIM_Base_SetConfig+0xaa>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <TIM_Base_SetConfig+0xcc>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d003      	beq.n	8002bde <TIM_Base_SetConfig+0xaa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a0a      	ldr	r2, [pc, #40]	; (8002c04 <TIM_Base_SetConfig+0xd0>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d103      	bne.n	8002be6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691a      	ldr	r2, [r3, #16]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	615a      	str	r2, [r3, #20]
}
 8002bec:	46c0      	nop			; (mov r8, r8)
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	b004      	add	sp, #16
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40012c00 	.word	0x40012c00
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40002000 	.word	0x40002000
 8002c00:	40014400 	.word	0x40014400
 8002c04:	40014800 	.word	0x40014800
 8002c08:	fffffcff 	.word	0xfffffcff

08002c0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e046      	b.n	8002cac <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2288      	movs	r2, #136	; 0x88
 8002c22:	589b      	ldr	r3, [r3, r2]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d107      	bne.n	8002c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2284      	movs	r2, #132	; 0x84
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	0018      	movs	r0, r3
 8002c34:	f7fd ff78 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2288      	movs	r2, #136	; 0x88
 8002c3c:	2124      	movs	r1, #36	; 0x24
 8002c3e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	438a      	bics	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 fc12 	bl	800347c <UART_SetConfig>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d101      	bne.n	8002c62 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e024      	b.n	8002cac <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 fd6f 	bl	8003750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	490d      	ldr	r1, [pc, #52]	; (8002cb4 <HAL_UART_Init+0xa8>)
 8002c7e:	400a      	ands	r2, r1
 8002c80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	212a      	movs	r1, #42	; 0x2a
 8002c8e:	438a      	bics	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f000 fe07 	bl	80038b8 <UART_CheckIdleState>
 8002caa:	0003      	movs	r3, r0
}
 8002cac:	0018      	movs	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	b002      	add	sp, #8
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	ffffb7ff 	.word	0xffffb7ff

08002cb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af02      	add	r7, sp, #8
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	603b      	str	r3, [r7, #0]
 8002cc4:	1dbb      	adds	r3, r7, #6
 8002cc6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2288      	movs	r2, #136	; 0x88
 8002ccc:	589b      	ldr	r3, [r3, r2]
 8002cce:	2b20      	cmp	r3, #32
 8002cd0:	d000      	beq.n	8002cd4 <HAL_UART_Transmit+0x1c>
 8002cd2:	e088      	b.n	8002de6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_UART_Transmit+0x2a>
 8002cda:	1dbb      	adds	r3, r7, #6
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e080      	b.n	8002de8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689a      	ldr	r2, [r3, #8]
 8002cea:	2380      	movs	r3, #128	; 0x80
 8002cec:	015b      	lsls	r3, r3, #5
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d109      	bne.n	8002d06 <HAL_UART_Transmit+0x4e>
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d001      	beq.n	8002d06 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e070      	b.n	8002de8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2290      	movs	r2, #144	; 0x90
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2288      	movs	r2, #136	; 0x88
 8002d12:	2121      	movs	r1, #33	; 0x21
 8002d14:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d16:	f7fe f83d 	bl	8000d94 <HAL_GetTick>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	1dba      	adds	r2, r7, #6
 8002d22:	2154      	movs	r1, #84	; 0x54
 8002d24:	8812      	ldrh	r2, [r2, #0]
 8002d26:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1dba      	adds	r2, r7, #6
 8002d2c:	2156      	movs	r1, #86	; 0x56
 8002d2e:	8812      	ldrh	r2, [r2, #0]
 8002d30:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	2380      	movs	r3, #128	; 0x80
 8002d38:	015b      	lsls	r3, r3, #5
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d108      	bne.n	8002d50 <HAL_UART_Transmit+0x98>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	61bb      	str	r3, [r7, #24]
 8002d4e:	e003      	b.n	8002d58 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d58:	e02c      	b.n	8002db4 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	0013      	movs	r3, r2
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	f000 fdf4 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8002d6c:	1e03      	subs	r3, r0, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e039      	b.n	8002de8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10b      	bne.n	8002d92 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	881b      	ldrh	r3, [r3, #0]
 8002d7e:	001a      	movs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	05d2      	lsls	r2, r2, #23
 8002d86:	0dd2      	lsrs	r2, r2, #23
 8002d88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	3302      	adds	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
 8002d90:	e007      	b.n	8002da2 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	781a      	ldrb	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2256      	movs	r2, #86	; 0x56
 8002da6:	5a9b      	ldrh	r3, [r3, r2]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	3b01      	subs	r3, #1
 8002dac:	b299      	uxth	r1, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2256      	movs	r2, #86	; 0x56
 8002db2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2256      	movs	r2, #86	; 0x56
 8002db8:	5a9b      	ldrh	r3, [r3, r2]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d1cc      	bne.n	8002d5a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	0013      	movs	r3, r2
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2140      	movs	r1, #64	; 0x40
 8002dce:	f000 fdc1 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8002dd2:	1e03      	subs	r3, r0, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e006      	b.n	8002de8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2288      	movs	r2, #136	; 0x88
 8002dde:	2120      	movs	r1, #32
 8002de0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e000      	b.n	8002de8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002de6:	2302      	movs	r3, #2
  }
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	b008      	add	sp, #32
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b0aa      	sub	sp, #168	; 0xa8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	69db      	ldr	r3, [r3, #28]
 8002dfe:	22a4      	movs	r2, #164	; 0xa4
 8002e00:	18b9      	adds	r1, r7, r2
 8002e02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	20a0      	movs	r0, #160	; 0xa0
 8002e0c:	1839      	adds	r1, r7, r0
 8002e0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	249c      	movs	r4, #156	; 0x9c
 8002e18:	1939      	adds	r1, r7, r4
 8002e1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e1c:	0011      	movs	r1, r2
 8002e1e:	18bb      	adds	r3, r7, r2
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4aa2      	ldr	r2, [pc, #648]	; (80030ac <HAL_UART_IRQHandler+0x2bc>)
 8002e24:	4013      	ands	r3, r2
 8002e26:	2298      	movs	r2, #152	; 0x98
 8002e28:	18bd      	adds	r5, r7, r2
 8002e2a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002e2c:	18bb      	adds	r3, r7, r2
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d11a      	bne.n	8002e6a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e34:	187b      	adds	r3, r7, r1
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d015      	beq.n	8002e6a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e3e:	183b      	adds	r3, r7, r0
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2220      	movs	r2, #32
 8002e44:	4013      	ands	r3, r2
 8002e46:	d105      	bne.n	8002e54 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e48:	193b      	adds	r3, r7, r4
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	055b      	lsls	r3, r3, #21
 8002e50:	4013      	ands	r3, r2
 8002e52:	d00a      	beq.n	8002e6a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d100      	bne.n	8002e5e <HAL_UART_IRQHandler+0x6e>
 8002e5c:	e2dc      	b.n	8003418 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	0010      	movs	r0, r2
 8002e66:	4798      	blx	r3
      }
      return;
 8002e68:	e2d6      	b.n	8003418 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e6a:	2398      	movs	r3, #152	; 0x98
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d100      	bne.n	8002e76 <HAL_UART_IRQHandler+0x86>
 8002e74:	e122      	b.n	80030bc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002e76:	239c      	movs	r3, #156	; 0x9c
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a8c      	ldr	r2, [pc, #560]	; (80030b0 <HAL_UART_IRQHandler+0x2c0>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d106      	bne.n	8002e90 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002e82:	23a0      	movs	r3, #160	; 0xa0
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a8a      	ldr	r2, [pc, #552]	; (80030b4 <HAL_UART_IRQHandler+0x2c4>)
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	d100      	bne.n	8002e90 <HAL_UART_IRQHandler+0xa0>
 8002e8e:	e115      	b.n	80030bc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e90:	23a4      	movs	r3, #164	; 0xa4
 8002e92:	18fb      	adds	r3, r7, r3
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2201      	movs	r2, #1
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d012      	beq.n	8002ec2 <HAL_UART_IRQHandler+0xd2>
 8002e9c:	23a0      	movs	r3, #160	; 0xa0
 8002e9e:	18fb      	adds	r3, r7, r3
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	2380      	movs	r3, #128	; 0x80
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2290      	movs	r2, #144	; 0x90
 8002eb6:	589b      	ldr	r3, [r3, r2]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2190      	movs	r1, #144	; 0x90
 8002ec0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ec2:	23a4      	movs	r3, #164	; 0xa4
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2202      	movs	r2, #2
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d011      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x102>
 8002ece:	239c      	movs	r3, #156	; 0x9c
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2290      	movs	r2, #144	; 0x90
 8002ee6:	589b      	ldr	r3, [r3, r2]
 8002ee8:	2204      	movs	r2, #4
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2190      	movs	r1, #144	; 0x90
 8002ef0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ef2:	23a4      	movs	r3, #164	; 0xa4
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2204      	movs	r2, #4
 8002efa:	4013      	ands	r3, r2
 8002efc:	d011      	beq.n	8002f22 <HAL_UART_IRQHandler+0x132>
 8002efe:	239c      	movs	r3, #156	; 0x9c
 8002f00:	18fb      	adds	r3, r7, r3
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2201      	movs	r2, #1
 8002f06:	4013      	ands	r3, r2
 8002f08:	d00b      	beq.n	8002f22 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2204      	movs	r2, #4
 8002f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2290      	movs	r2, #144	; 0x90
 8002f16:	589b      	ldr	r3, [r3, r2]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2190      	movs	r1, #144	; 0x90
 8002f20:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f22:	23a4      	movs	r3, #164	; 0xa4
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2208      	movs	r2, #8
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d017      	beq.n	8002f5e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f2e:	23a0      	movs	r3, #160	; 0xa0
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2220      	movs	r2, #32
 8002f36:	4013      	ands	r3, r2
 8002f38:	d105      	bne.n	8002f46 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f3a:	239c      	movs	r3, #156	; 0x9c
 8002f3c:	18fb      	adds	r3, r7, r3
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a5b      	ldr	r2, [pc, #364]	; (80030b0 <HAL_UART_IRQHandler+0x2c0>)
 8002f42:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f44:	d00b      	beq.n	8002f5e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2208      	movs	r2, #8
 8002f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2290      	movs	r2, #144	; 0x90
 8002f52:	589b      	ldr	r3, [r3, r2]
 8002f54:	2208      	movs	r2, #8
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2190      	movs	r1, #144	; 0x90
 8002f5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f5e:	23a4      	movs	r3, #164	; 0xa4
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d013      	beq.n	8002f94 <HAL_UART_IRQHandler+0x1a4>
 8002f6c:	23a0      	movs	r3, #160	; 0xa0
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	2380      	movs	r3, #128	; 0x80
 8002f74:	04db      	lsls	r3, r3, #19
 8002f76:	4013      	ands	r3, r2
 8002f78:	d00c      	beq.n	8002f94 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2280      	movs	r2, #128	; 0x80
 8002f80:	0112      	lsls	r2, r2, #4
 8002f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2290      	movs	r2, #144	; 0x90
 8002f88:	589b      	ldr	r3, [r3, r2]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2190      	movs	r1, #144	; 0x90
 8002f92:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2290      	movs	r2, #144	; 0x90
 8002f98:	589b      	ldr	r3, [r3, r2]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d100      	bne.n	8002fa0 <HAL_UART_IRQHandler+0x1b0>
 8002f9e:	e23d      	b.n	800341c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fa0:	23a4      	movs	r3, #164	; 0xa4
 8002fa2:	18fb      	adds	r3, r7, r3
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d015      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fac:	23a0      	movs	r3, #160	; 0xa0
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d106      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fb8:	239c      	movs	r3, #156	; 0x9c
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	055b      	lsls	r3, r3, #21
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d008      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d004      	beq.n	8002fd8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	0010      	movs	r0, r2
 8002fd6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2290      	movs	r2, #144	; 0x90
 8002fdc:	589b      	ldr	r3, [r3, r2]
 8002fde:	2194      	movs	r1, #148	; 0x94
 8002fe0:	187a      	adds	r2, r7, r1
 8002fe2:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d004      	beq.n	8002ffc <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002ff2:	187b      	adds	r3, r7, r1
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2228      	movs	r2, #40	; 0x28
 8002ff8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ffa:	d04c      	beq.n	8003096 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 fe56 	bl	8003cb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2240      	movs	r2, #64	; 0x40
 800300c:	4013      	ands	r3, r2
 800300e:	2b40      	cmp	r3, #64	; 0x40
 8003010:	d13c      	bne.n	800308c <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003012:	f3ef 8310 	mrs	r3, PRIMASK
 8003016:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800301a:	2090      	movs	r0, #144	; 0x90
 800301c:	183a      	adds	r2, r7, r0
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	2301      	movs	r3, #1
 8003022:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003026:	f383 8810 	msr	PRIMASK, r3
}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2140      	movs	r1, #64	; 0x40
 8003038:	438a      	bics	r2, r1
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	183b      	adds	r3, r7, r0
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003042:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003044:	f383 8810 	msr	PRIMASK, r3
}
 8003048:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2280      	movs	r2, #128	; 0x80
 800304e:	589b      	ldr	r3, [r3, r2]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d016      	beq.n	8003082 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2280      	movs	r2, #128	; 0x80
 8003058:	589b      	ldr	r3, [r3, r2]
 800305a:	4a17      	ldr	r2, [pc, #92]	; (80030b8 <HAL_UART_IRQHandler+0x2c8>)
 800305c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	589b      	ldr	r3, [r3, r2]
 8003064:	0018      	movs	r0, r3
 8003066:	f7fe f8ef 	bl	8001248 <HAL_DMA_Abort_IT>
 800306a:	1e03      	subs	r3, r0, #0
 800306c:	d01c      	beq.n	80030a8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2280      	movs	r2, #128	; 0x80
 8003072:	589b      	ldr	r3, [r3, r2]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	2180      	movs	r1, #128	; 0x80
 800307a:	5852      	ldr	r2, [r2, r1]
 800307c:	0010      	movs	r0, r2
 800307e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003080:	e012      	b.n	80030a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	0018      	movs	r0, r3
 8003086:	f000 f9f1 	bl	800346c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800308a:	e00d      	b.n	80030a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	0018      	movs	r0, r3
 8003090:	f000 f9ec 	bl	800346c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003094:	e008      	b.n	80030a8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	0018      	movs	r0, r3
 800309a:	f000 f9e7 	bl	800346c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2290      	movs	r2, #144	; 0x90
 80030a2:	2100      	movs	r1, #0
 80030a4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030a6:	e1b9      	b.n	800341c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a8:	46c0      	nop			; (mov r8, r8)
    return;
 80030aa:	e1b7      	b.n	800341c <HAL_UART_IRQHandler+0x62c>
 80030ac:	0000080f 	.word	0x0000080f
 80030b0:	10000001 	.word	0x10000001
 80030b4:	04000120 	.word	0x04000120
 80030b8:	08003f75 	.word	0x08003f75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d000      	beq.n	80030c6 <HAL_UART_IRQHandler+0x2d6>
 80030c4:	e13e      	b.n	8003344 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030c6:	23a4      	movs	r3, #164	; 0xa4
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2210      	movs	r2, #16
 80030ce:	4013      	ands	r3, r2
 80030d0:	d100      	bne.n	80030d4 <HAL_UART_IRQHandler+0x2e4>
 80030d2:	e137      	b.n	8003344 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030d4:	23a0      	movs	r3, #160	; 0xa0
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2210      	movs	r2, #16
 80030dc:	4013      	ands	r3, r2
 80030de:	d100      	bne.n	80030e2 <HAL_UART_IRQHandler+0x2f2>
 80030e0:	e130      	b.n	8003344 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2210      	movs	r2, #16
 80030e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	4013      	ands	r3, r2
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d000      	beq.n	80030fa <HAL_UART_IRQHandler+0x30a>
 80030f8:	e0a4      	b.n	8003244 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	589b      	ldr	r3, [r3, r2]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	217e      	movs	r1, #126	; 0x7e
 8003106:	187b      	adds	r3, r7, r1
 8003108:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800310a:	187b      	adds	r3, r7, r1
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d100      	bne.n	8003114 <HAL_UART_IRQHandler+0x324>
 8003112:	e185      	b.n	8003420 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	225c      	movs	r2, #92	; 0x5c
 8003118:	5a9b      	ldrh	r3, [r3, r2]
 800311a:	187a      	adds	r2, r7, r1
 800311c:	8812      	ldrh	r2, [r2, #0]
 800311e:	429a      	cmp	r2, r3
 8003120:	d300      	bcc.n	8003124 <HAL_UART_IRQHandler+0x334>
 8003122:	e17d      	b.n	8003420 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	187a      	adds	r2, r7, r1
 8003128:	215e      	movs	r1, #94	; 0x5e
 800312a:	8812      	ldrh	r2, [r2, #0]
 800312c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2280      	movs	r2, #128	; 0x80
 8003132:	589b      	ldr	r3, [r3, r2]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2220      	movs	r2, #32
 800313a:	4013      	ands	r3, r2
 800313c:	d170      	bne.n	8003220 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8310 	mrs	r3, PRIMASK
 8003142:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003146:	67bb      	str	r3, [r7, #120]	; 0x78
 8003148:	2301      	movs	r3, #1
 800314a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314e:	f383 8810 	msr	PRIMASK, r3
}
 8003152:	46c0      	nop			; (mov r8, r8)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	49b4      	ldr	r1, [pc, #720]	; (8003430 <HAL_UART_IRQHandler+0x640>)
 8003160:	400a      	ands	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003166:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800316a:	f383 8810 	msr	PRIMASK, r3
}
 800316e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003170:	f3ef 8310 	mrs	r3, PRIMASK
 8003174:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003176:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003178:	677b      	str	r3, [r7, #116]	; 0x74
 800317a:	2301      	movs	r3, #1
 800317c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003180:	f383 8810 	msr	PRIMASK, r3
}
 8003184:	46c0      	nop			; (mov r8, r8)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	438a      	bics	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003198:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800319c:	f383 8810 	msr	PRIMASK, r3
}
 80031a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a2:	f3ef 8310 	mrs	r3, PRIMASK
 80031a6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	673b      	str	r3, [r7, #112]	; 0x70
 80031ac:	2301      	movs	r3, #1
 80031ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2140      	movs	r1, #64	; 0x40
 80031c4:	438a      	bics	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ca:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ce:	f383 8810 	msr	PRIMASK, r3
}
 80031d2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	228c      	movs	r2, #140	; 0x8c
 80031d8:	2120      	movs	r1, #32
 80031da:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031e2:	f3ef 8310 	mrs	r3, PRIMASK
 80031e6:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80031e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031ec:	2301      	movs	r3, #1
 80031ee:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031f2:	f383 8810 	msr	PRIMASK, r3
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2110      	movs	r1, #16
 8003204:	438a      	bics	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800320a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800320e:	f383 8810 	msr	PRIMASK, r3
}
 8003212:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	589b      	ldr	r3, [r3, r2]
 800321a:	0018      	movs	r0, r3
 800321c:	f7fd ffb2 	bl	8001184 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	225c      	movs	r2, #92	; 0x5c
 800322a:	5a9a      	ldrh	r2, [r3, r2]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	215e      	movs	r1, #94	; 0x5e
 8003230:	5a5b      	ldrh	r3, [r3, r1]
 8003232:	b29b      	uxth	r3, r3
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	0011      	movs	r1, r2
 800323c:	0018      	movs	r0, r3
 800323e:	f7fd f973 	bl	8000528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003242:	e0ed      	b.n	8003420 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	225c      	movs	r2, #92	; 0x5c
 8003248:	5a99      	ldrh	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	225e      	movs	r2, #94	; 0x5e
 800324e:	5a9b      	ldrh	r3, [r3, r2]
 8003250:	b29a      	uxth	r2, r3
 8003252:	208e      	movs	r0, #142	; 0x8e
 8003254:	183b      	adds	r3, r7, r0
 8003256:	1a8a      	subs	r2, r1, r2
 8003258:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	225e      	movs	r2, #94	; 0x5e
 800325e:	5a9b      	ldrh	r3, [r3, r2]
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d100      	bne.n	8003268 <HAL_UART_IRQHandler+0x478>
 8003266:	e0dd      	b.n	8003424 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003268:	183b      	adds	r3, r7, r0
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d100      	bne.n	8003272 <HAL_UART_IRQHandler+0x482>
 8003270:	e0d8      	b.n	8003424 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003272:	f3ef 8310 	mrs	r3, PRIMASK
 8003276:	60fb      	str	r3, [r7, #12]
  return(result);
 8003278:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800327a:	2488      	movs	r4, #136	; 0x88
 800327c:	193a      	adds	r2, r7, r4
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	2301      	movs	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			; (mov r8, r8)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4967      	ldr	r1, [pc, #412]	; (8003434 <HAL_UART_IRQHandler+0x644>)
 8003298:	400a      	ands	r2, r1
 800329a:	601a      	str	r2, [r3, #0]
 800329c:	193b      	adds	r3, r7, r4
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f383 8810 	msr	PRIMASK, r3
}
 80032a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032aa:	f3ef 8310 	mrs	r3, PRIMASK
 80032ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80032b0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032b2:	2484      	movs	r4, #132	; 0x84
 80032b4:	193a      	adds	r2, r7, r4
 80032b6:	6013      	str	r3, [r2, #0]
 80032b8:	2301      	movs	r3, #1
 80032ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f383 8810 	msr	PRIMASK, r3
}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	495a      	ldr	r1, [pc, #360]	; (8003438 <HAL_UART_IRQHandler+0x648>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	193b      	adds	r3, r7, r4
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	f383 8810 	msr	PRIMASK, r3
}
 80032e0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	228c      	movs	r2, #140	; 0x8c
 80032e6:	2120      	movs	r1, #32
 80032e8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f6:	f3ef 8310 	mrs	r3, PRIMASK
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80032fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032fe:	2480      	movs	r4, #128	; 0x80
 8003300:	193a      	adds	r2, r7, r4
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	2301      	movs	r3, #1
 8003306:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800330a:	f383 8810 	msr	PRIMASK, r3
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2110      	movs	r1, #16
 800331c:	438a      	bics	r2, r1
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	193b      	adds	r3, r7, r4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	f383 8810 	msr	PRIMASK, r3
}
 800332c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003334:	183b      	adds	r3, r7, r0
 8003336:	881a      	ldrh	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	0011      	movs	r1, r2
 800333c:	0018      	movs	r0, r3
 800333e:	f7fd f8f3 	bl	8000528 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003342:	e06f      	b.n	8003424 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003344:	23a4      	movs	r3, #164	; 0xa4
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	2380      	movs	r3, #128	; 0x80
 800334c:	035b      	lsls	r3, r3, #13
 800334e:	4013      	ands	r3, r2
 8003350:	d010      	beq.n	8003374 <HAL_UART_IRQHandler+0x584>
 8003352:	239c      	movs	r3, #156	; 0x9c
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	03db      	lsls	r3, r3, #15
 800335c:	4013      	ands	r3, r2
 800335e:	d009      	beq.n	8003374 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	0352      	lsls	r2, r2, #13
 8003368:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0018      	movs	r0, r3
 800336e:	f000 fe44 	bl	8003ffa <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003372:	e05a      	b.n	800342a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003374:	23a4      	movs	r3, #164	; 0xa4
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	4013      	ands	r3, r2
 800337e:	d016      	beq.n	80033ae <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003380:	23a0      	movs	r3, #160	; 0xa0
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	4013      	ands	r3, r2
 800338a:	d106      	bne.n	800339a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800338c:	239c      	movs	r3, #156	; 0x9c
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	041b      	lsls	r3, r3, #16
 8003396:	4013      	ands	r3, r2
 8003398:	d009      	beq.n	80033ae <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d042      	beq.n	8003428 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	0010      	movs	r0, r2
 80033aa:	4798      	blx	r3
    }
    return;
 80033ac:	e03c      	b.n	8003428 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033ae:	23a4      	movs	r3, #164	; 0xa4
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	4013      	ands	r3, r2
 80033b8:	d00a      	beq.n	80033d0 <HAL_UART_IRQHandler+0x5e0>
 80033ba:	23a0      	movs	r3, #160	; 0xa0
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2240      	movs	r2, #64	; 0x40
 80033c2:	4013      	ands	r3, r2
 80033c4:	d004      	beq.n	80033d0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 fdea 	bl	8003fa2 <UART_EndTransmit_IT>
    return;
 80033ce:	e02c      	b.n	800342a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80033d0:	23a4      	movs	r3, #164	; 0xa4
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	4013      	ands	r3, r2
 80033dc:	d00b      	beq.n	80033f6 <HAL_UART_IRQHandler+0x606>
 80033de:	23a0      	movs	r3, #160	; 0xa0
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	2380      	movs	r3, #128	; 0x80
 80033e6:	05db      	lsls	r3, r3, #23
 80033e8:	4013      	ands	r3, r2
 80033ea:	d004      	beq.n	80033f6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 fe13 	bl	800401a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033f4:	e019      	b.n	800342a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80033f6:	23a4      	movs	r3, #164	; 0xa4
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2380      	movs	r3, #128	; 0x80
 80033fe:	045b      	lsls	r3, r3, #17
 8003400:	4013      	ands	r3, r2
 8003402:	d012      	beq.n	800342a <HAL_UART_IRQHandler+0x63a>
 8003404:	23a0      	movs	r3, #160	; 0xa0
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	da0d      	bge.n	800342a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f000 fdfa 	bl	800400a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003416:	e008      	b.n	800342a <HAL_UART_IRQHandler+0x63a>
      return;
 8003418:	46c0      	nop			; (mov r8, r8)
 800341a:	e006      	b.n	800342a <HAL_UART_IRQHandler+0x63a>
    return;
 800341c:	46c0      	nop			; (mov r8, r8)
 800341e:	e004      	b.n	800342a <HAL_UART_IRQHandler+0x63a>
      return;
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	e002      	b.n	800342a <HAL_UART_IRQHandler+0x63a>
      return;
 8003424:	46c0      	nop			; (mov r8, r8)
 8003426:	e000      	b.n	800342a <HAL_UART_IRQHandler+0x63a>
    return;
 8003428:	46c0      	nop			; (mov r8, r8)
  }
}
 800342a:	46bd      	mov	sp, r7
 800342c:	b02a      	add	sp, #168	; 0xa8
 800342e:	bdb0      	pop	{r4, r5, r7, pc}
 8003430:	fffffeff 	.word	0xfffffeff
 8003434:	fffffedf 	.word	0xfffffedf
 8003438:	effffffe 	.word	0xeffffffe

0800343c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003444:	46c0      	nop			; (mov r8, r8)
 8003446:	46bd      	mov	sp, r7
 8003448:	b002      	add	sp, #8
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	46bd      	mov	sp, r7
 8003478:	b002      	add	sp, #8
 800347a:	bd80      	pop	{r7, pc}

0800347c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003484:	231a      	movs	r3, #26
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	69db      	ldr	r3, [r3, #28]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4aa1      	ldr	r2, [pc, #644]	; (8003730 <UART_SetConfig+0x2b4>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	0019      	movs	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a9c      	ldr	r2, [pc, #624]	; (8003734 <UART_SetConfig+0x2b8>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	68da      	ldr	r2, [r3, #12]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	4a93      	ldr	r2, [pc, #588]	; (8003738 <UART_SetConfig+0x2bc>)
 80034ea:	4013      	ands	r3, r2
 80034ec:	0019      	movs	r1, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	220f      	movs	r2, #15
 8003500:	4393      	bics	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a89      	ldr	r2, [pc, #548]	; (800373c <UART_SetConfig+0x2c0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d127      	bne.n	800356a <UART_SetConfig+0xee>
 800351a:	4b89      	ldr	r3, [pc, #548]	; (8003740 <UART_SetConfig+0x2c4>)
 800351c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351e:	2203      	movs	r2, #3
 8003520:	4013      	ands	r3, r2
 8003522:	2b03      	cmp	r3, #3
 8003524:	d017      	beq.n	8003556 <UART_SetConfig+0xda>
 8003526:	d81b      	bhi.n	8003560 <UART_SetConfig+0xe4>
 8003528:	2b02      	cmp	r3, #2
 800352a:	d00a      	beq.n	8003542 <UART_SetConfig+0xc6>
 800352c:	d818      	bhi.n	8003560 <UART_SetConfig+0xe4>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d002      	beq.n	8003538 <UART_SetConfig+0xbc>
 8003532:	2b01      	cmp	r3, #1
 8003534:	d00a      	beq.n	800354c <UART_SetConfig+0xd0>
 8003536:	e013      	b.n	8003560 <UART_SetConfig+0xe4>
 8003538:	231b      	movs	r3, #27
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	2200      	movs	r2, #0
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e021      	b.n	8003586 <UART_SetConfig+0x10a>
 8003542:	231b      	movs	r3, #27
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	2202      	movs	r2, #2
 8003548:	701a      	strb	r2, [r3, #0]
 800354a:	e01c      	b.n	8003586 <UART_SetConfig+0x10a>
 800354c:	231b      	movs	r3, #27
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	2204      	movs	r2, #4
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e017      	b.n	8003586 <UART_SetConfig+0x10a>
 8003556:	231b      	movs	r3, #27
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	2208      	movs	r2, #8
 800355c:	701a      	strb	r2, [r3, #0]
 800355e:	e012      	b.n	8003586 <UART_SetConfig+0x10a>
 8003560:	231b      	movs	r3, #27
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2210      	movs	r2, #16
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e00d      	b.n	8003586 <UART_SetConfig+0x10a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a75      	ldr	r2, [pc, #468]	; (8003744 <UART_SetConfig+0x2c8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d104      	bne.n	800357e <UART_SetConfig+0x102>
 8003574:	231b      	movs	r3, #27
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e003      	b.n	8003586 <UART_SetConfig+0x10a>
 800357e:	231b      	movs	r3, #27
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	2210      	movs	r2, #16
 8003584:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69da      	ldr	r2, [r3, #28]
 800358a:	2380      	movs	r3, #128	; 0x80
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	429a      	cmp	r2, r3
 8003590:	d000      	beq.n	8003594 <UART_SetConfig+0x118>
 8003592:	e065      	b.n	8003660 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8003594:	231b      	movs	r3, #27
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b08      	cmp	r3, #8
 800359c:	d015      	beq.n	80035ca <UART_SetConfig+0x14e>
 800359e:	dc18      	bgt.n	80035d2 <UART_SetConfig+0x156>
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	d00d      	beq.n	80035c0 <UART_SetConfig+0x144>
 80035a4:	dc15      	bgt.n	80035d2 <UART_SetConfig+0x156>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <UART_SetConfig+0x134>
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d005      	beq.n	80035ba <UART_SetConfig+0x13e>
 80035ae:	e010      	b.n	80035d2 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe ff96 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 80035b4:	0003      	movs	r3, r0
 80035b6:	617b      	str	r3, [r7, #20]
        break;
 80035b8:	e012      	b.n	80035e0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ba:	4b63      	ldr	r3, [pc, #396]	; (8003748 <UART_SetConfig+0x2cc>)
 80035bc:	617b      	str	r3, [r7, #20]
        break;
 80035be:	e00f      	b.n	80035e0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035c0:	f7fe ff02 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 80035c4:	0003      	movs	r3, r0
 80035c6:	617b      	str	r3, [r7, #20]
        break;
 80035c8:	e00a      	b.n	80035e0 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ca:	2380      	movs	r3, #128	; 0x80
 80035cc:	021b      	lsls	r3, r3, #8
 80035ce:	617b      	str	r3, [r7, #20]
        break;
 80035d0:	e006      	b.n	80035e0 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80035d6:	231a      	movs	r3, #26
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2201      	movs	r2, #1
 80035dc:	701a      	strb	r2, [r3, #0]
        break;
 80035de:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d100      	bne.n	80035e8 <UART_SetConfig+0x16c>
 80035e6:	e08d      	b.n	8003704 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ec:	4b57      	ldr	r3, [pc, #348]	; (800374c <UART_SetConfig+0x2d0>)
 80035ee:	0052      	lsls	r2, r2, #1
 80035f0:	5ad3      	ldrh	r3, [r2, r3]
 80035f2:	0019      	movs	r1, r3
 80035f4:	6978      	ldr	r0, [r7, #20]
 80035f6:	f7fc fd83 	bl	8000100 <__udivsi3>
 80035fa:	0003      	movs	r3, r0
 80035fc:	005a      	lsls	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	18d2      	adds	r2, r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	0019      	movs	r1, r3
 800360c:	0010      	movs	r0, r2
 800360e:	f7fc fd77 	bl	8000100 <__udivsi3>
 8003612:	0003      	movs	r3, r0
 8003614:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d91c      	bls.n	8003656 <UART_SetConfig+0x1da>
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	025b      	lsls	r3, r3, #9
 8003622:	429a      	cmp	r2, r3
 8003624:	d217      	bcs.n	8003656 <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	b29a      	uxth	r2, r3
 800362a:	200e      	movs	r0, #14
 800362c:	183b      	adds	r3, r7, r0
 800362e:	210f      	movs	r1, #15
 8003630:	438a      	bics	r2, r1
 8003632:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	085b      	lsrs	r3, r3, #1
 8003638:	b29b      	uxth	r3, r3
 800363a:	2207      	movs	r2, #7
 800363c:	4013      	ands	r3, r2
 800363e:	b299      	uxth	r1, r3
 8003640:	183b      	adds	r3, r7, r0
 8003642:	183a      	adds	r2, r7, r0
 8003644:	8812      	ldrh	r2, [r2, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	183a      	adds	r2, r7, r0
 8003650:	8812      	ldrh	r2, [r2, #0]
 8003652:	60da      	str	r2, [r3, #12]
 8003654:	e056      	b.n	8003704 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8003656:	231a      	movs	r3, #26
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]
 800365e:	e051      	b.n	8003704 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003660:	231b      	movs	r3, #27
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b08      	cmp	r3, #8
 8003668:	d015      	beq.n	8003696 <UART_SetConfig+0x21a>
 800366a:	dc18      	bgt.n	800369e <UART_SetConfig+0x222>
 800366c:	2b04      	cmp	r3, #4
 800366e:	d00d      	beq.n	800368c <UART_SetConfig+0x210>
 8003670:	dc15      	bgt.n	800369e <UART_SetConfig+0x222>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <UART_SetConfig+0x200>
 8003676:	2b02      	cmp	r3, #2
 8003678:	d005      	beq.n	8003686 <UART_SetConfig+0x20a>
 800367a:	e010      	b.n	800369e <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800367c:	f7fe ff30 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003680:	0003      	movs	r3, r0
 8003682:	617b      	str	r3, [r7, #20]
        break;
 8003684:	e012      	b.n	80036ac <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <UART_SetConfig+0x2cc>)
 8003688:	617b      	str	r3, [r7, #20]
        break;
 800368a:	e00f      	b.n	80036ac <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800368c:	f7fe fe9c 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 8003690:	0003      	movs	r3, r0
 8003692:	617b      	str	r3, [r7, #20]
        break;
 8003694:	e00a      	b.n	80036ac <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	021b      	lsls	r3, r3, #8
 800369a:	617b      	str	r3, [r7, #20]
        break;
 800369c:	e006      	b.n	80036ac <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036a2:	231a      	movs	r3, #26
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
        break;
 80036aa:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d028      	beq.n	8003704 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b6:	4b25      	ldr	r3, [pc, #148]	; (800374c <UART_SetConfig+0x2d0>)
 80036b8:	0052      	lsls	r2, r2, #1
 80036ba:	5ad3      	ldrh	r3, [r2, r3]
 80036bc:	0019      	movs	r1, r3
 80036be:	6978      	ldr	r0, [r7, #20]
 80036c0:	f7fc fd1e 	bl	8000100 <__udivsi3>
 80036c4:	0003      	movs	r3, r0
 80036c6:	001a      	movs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	085b      	lsrs	r3, r3, #1
 80036ce:	18d2      	adds	r2, r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	0019      	movs	r1, r3
 80036d6:	0010      	movs	r0, r2
 80036d8:	f7fc fd12 	bl	8000100 <__udivsi3>
 80036dc:	0003      	movs	r3, r0
 80036de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	d90a      	bls.n	80036fc <UART_SetConfig+0x280>
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	2380      	movs	r3, #128	; 0x80
 80036ea:	025b      	lsls	r3, r3, #9
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d205      	bcs.n	80036fc <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60da      	str	r2, [r3, #12]
 80036fa:	e003      	b.n	8003704 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80036fc:	231a      	movs	r3, #26
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	226a      	movs	r2, #106	; 0x6a
 8003708:	2101      	movs	r1, #1
 800370a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2268      	movs	r2, #104	; 0x68
 8003710:	2101      	movs	r1, #1
 8003712:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003720:	231a      	movs	r3, #26
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	781b      	ldrb	r3, [r3, #0]
}
 8003726:	0018      	movs	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	b008      	add	sp, #32
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	cfff69f3 	.word	0xcfff69f3
 8003734:	ffffcfff 	.word	0xffffcfff
 8003738:	11fff4ff 	.word	0x11fff4ff
 800373c:	40013800 	.word	0x40013800
 8003740:	40021000 	.word	0x40021000
 8003744:	40004400 	.word	0x40004400
 8003748:	00f42400 	.word	0x00f42400
 800374c:	08004418 	.word	0x08004418

08003750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375c:	2201      	movs	r2, #1
 800375e:	4013      	ands	r3, r2
 8003760:	d00b      	beq.n	800377a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a4a      	ldr	r2, [pc, #296]	; (8003894 <UART_AdvFeatureConfig+0x144>)
 800376a:	4013      	ands	r3, r2
 800376c:	0019      	movs	r1, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	2202      	movs	r2, #2
 8003780:	4013      	ands	r3, r2
 8003782:	d00b      	beq.n	800379c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4a43      	ldr	r2, [pc, #268]	; (8003898 <UART_AdvFeatureConfig+0x148>)
 800378c:	4013      	ands	r3, r2
 800378e:	0019      	movs	r1, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	2204      	movs	r2, #4
 80037a2:	4013      	ands	r3, r2
 80037a4:	d00b      	beq.n	80037be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	4a3b      	ldr	r2, [pc, #236]	; (800389c <UART_AdvFeatureConfig+0x14c>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	0019      	movs	r1, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c2:	2208      	movs	r2, #8
 80037c4:	4013      	ands	r3, r2
 80037c6:	d00b      	beq.n	80037e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4a34      	ldr	r2, [pc, #208]	; (80038a0 <UART_AdvFeatureConfig+0x150>)
 80037d0:	4013      	ands	r3, r2
 80037d2:	0019      	movs	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	2210      	movs	r2, #16
 80037e6:	4013      	ands	r3, r2
 80037e8:	d00b      	beq.n	8003802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a2c      	ldr	r2, [pc, #176]	; (80038a4 <UART_AdvFeatureConfig+0x154>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003806:	2220      	movs	r2, #32
 8003808:	4013      	ands	r3, r2
 800380a:	d00b      	beq.n	8003824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	4a25      	ldr	r2, [pc, #148]	; (80038a8 <UART_AdvFeatureConfig+0x158>)
 8003814:	4013      	ands	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	4013      	ands	r3, r2
 800382c:	d01d      	beq.n	800386a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <UART_AdvFeatureConfig+0x15c>)
 8003836:	4013      	ands	r3, r2
 8003838:	0019      	movs	r1, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	035b      	lsls	r3, r3, #13
 800384e:	429a      	cmp	r2, r3
 8003850:	d10b      	bne.n	800386a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4a15      	ldr	r2, [pc, #84]	; (80038b0 <UART_AdvFeatureConfig+0x160>)
 800385a:	4013      	ands	r3, r2
 800385c:	0019      	movs	r1, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	2280      	movs	r2, #128	; 0x80
 8003870:	4013      	ands	r3, r2
 8003872:	d00b      	beq.n	800388c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a0e      	ldr	r2, [pc, #56]	; (80038b4 <UART_AdvFeatureConfig+0x164>)
 800387c:	4013      	ands	r3, r2
 800387e:	0019      	movs	r1, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	605a      	str	r2, [r3, #4]
  }
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}
 8003894:	fffdffff 	.word	0xfffdffff
 8003898:	fffeffff 	.word	0xfffeffff
 800389c:	fffbffff 	.word	0xfffbffff
 80038a0:	ffff7fff 	.word	0xffff7fff
 80038a4:	ffffefff 	.word	0xffffefff
 80038a8:	ffffdfff 	.word	0xffffdfff
 80038ac:	ffefffff 	.word	0xffefffff
 80038b0:	ff9fffff 	.word	0xff9fffff
 80038b4:	fff7ffff 	.word	0xfff7ffff

080038b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af02      	add	r7, sp, #8
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2290      	movs	r2, #144	; 0x90
 80038c4:	2100      	movs	r1, #0
 80038c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038c8:	f7fd fa64 	bl	8000d94 <HAL_GetTick>
 80038cc:	0003      	movs	r3, r0
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2208      	movs	r2, #8
 80038d8:	4013      	ands	r3, r2
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d10c      	bne.n	80038f8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2280      	movs	r2, #128	; 0x80
 80038e2:	0391      	lsls	r1, r2, #14
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4a1a      	ldr	r2, [pc, #104]	; (8003950 <UART_CheckIdleState+0x98>)
 80038e8:	9200      	str	r2, [sp, #0]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f000 f832 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 80038f0:	1e03      	subs	r3, r0, #0
 80038f2:	d001      	beq.n	80038f8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e026      	b.n	8003946 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2204      	movs	r2, #4
 8003900:	4013      	ands	r3, r2
 8003902:	2b04      	cmp	r3, #4
 8003904:	d10c      	bne.n	8003920 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	03d1      	lsls	r1, r2, #15
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4a10      	ldr	r2, [pc, #64]	; (8003950 <UART_CheckIdleState+0x98>)
 8003910:	9200      	str	r2, [sp, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	f000 f81e 	bl	8003954 <UART_WaitOnFlagUntilTimeout>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d001      	beq.n	8003920 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e012      	b.n	8003946 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2288      	movs	r2, #136	; 0x88
 8003924:	2120      	movs	r1, #32
 8003926:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	228c      	movs	r2, #140	; 0x8c
 800392c:	2120      	movs	r1, #32
 800392e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2284      	movs	r2, #132	; 0x84
 8003940:	2100      	movs	r1, #0
 8003942:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	0018      	movs	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	b004      	add	sp, #16
 800394c:	bd80      	pop	{r7, pc}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	01ffffff 	.word	0x01ffffff

08003954 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b094      	sub	sp, #80	; 0x50
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003964:	e0a7      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003966:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003968:	3301      	adds	r3, #1
 800396a:	d100      	bne.n	800396e <UART_WaitOnFlagUntilTimeout+0x1a>
 800396c:	e0a3      	b.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7fd fa11 	bl	8000d94 <HAL_GetTick>
 8003972:	0002      	movs	r2, r0
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <UART_WaitOnFlagUntilTimeout+0x30>
 800397e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003980:	2b00      	cmp	r3, #0
 8003982:	d13f      	bne.n	8003a04 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003984:	f3ef 8310 	mrs	r3, PRIMASK
 8003988:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800398c:	647b      	str	r3, [r7, #68]	; 0x44
 800398e:	2301      	movs	r3, #1
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	f383 8810 	msr	PRIMASK, r3
}
 8003998:	46c0      	nop			; (mov r8, r8)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	494e      	ldr	r1, [pc, #312]	; (8003ae0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80039a6:	400a      	ands	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b0:	f383 8810 	msr	PRIMASK, r3
}
 80039b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b6:	f3ef 8310 	mrs	r3, PRIMASK
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039be:	643b      	str	r3, [r7, #64]	; 0x40
 80039c0:	2301      	movs	r3, #1
 80039c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c6:	f383 8810 	msr	PRIMASK, r3
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	689a      	ldr	r2, [r3, #8]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2101      	movs	r1, #1
 80039d8:	438a      	bics	r2, r1
 80039da:	609a      	str	r2, [r3, #8]
 80039dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039de:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e2:	f383 8810 	msr	PRIMASK, r3
}
 80039e6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2288      	movs	r2, #136	; 0x88
 80039ec:	2120      	movs	r1, #32
 80039ee:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	228c      	movs	r2, #140	; 0x8c
 80039f4:	2120      	movs	r1, #32
 80039f6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2284      	movs	r2, #132	; 0x84
 80039fc:	2100      	movs	r1, #0
 80039fe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e069      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2204      	movs	r2, #4
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d052      	beq.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	2380      	movs	r3, #128	; 0x80
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	401a      	ands	r2, r3
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d148      	bne.n	8003ab6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2280      	movs	r2, #128	; 0x80
 8003a2a:	0112      	lsls	r2, r2, #4
 8003a2c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a32:	613b      	str	r3, [r7, #16]
  return(result);
 8003a34:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a38:	2301      	movs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f383 8810 	msr	PRIMASK, r3
}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4924      	ldr	r1, [pc, #144]	; (8003ae0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003a50:	400a      	ands	r2, r1
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a56:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a60:	f3ef 8310 	mrs	r3, PRIMASK
 8003a64:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a66:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6e:	6a3b      	ldr	r3, [r7, #32]
 8003a70:	f383 8810 	msr	PRIMASK, r3
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	438a      	bics	r2, r1
 8003a84:	609a      	str	r2, [r3, #8]
 8003a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8c:	f383 8810 	msr	PRIMASK, r3
}
 8003a90:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2288      	movs	r2, #136	; 0x88
 8003a96:	2120      	movs	r1, #32
 8003a98:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	228c      	movs	r2, #140	; 0x8c
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2290      	movs	r2, #144	; 0x90
 8003aa6:	2120      	movs	r1, #32
 8003aa8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2284      	movs	r2, #132	; 0x84
 8003aae:	2100      	movs	r1, #0
 8003ab0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e010      	b.n	8003ad8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69db      	ldr	r3, [r3, #28]
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	425a      	negs	r2, r3
 8003ac6:	4153      	adcs	r3, r2
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	001a      	movs	r2, r3
 8003acc:	1dfb      	adds	r3, r7, #7
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d100      	bne.n	8003ad6 <UART_WaitOnFlagUntilTimeout+0x182>
 8003ad4:	e747      	b.n	8003966 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	0018      	movs	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	b014      	add	sp, #80	; 0x50
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	fffffe5f 	.word	0xfffffe5f

08003ae4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b090      	sub	sp, #64	; 0x40
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	1dbb      	adds	r3, r7, #6
 8003af0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1dba      	adds	r2, r7, #6
 8003afc:	215c      	movs	r1, #92	; 0x5c
 8003afe:	8812      	ldrh	r2, [r2, #0]
 8003b00:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2290      	movs	r2, #144	; 0x90
 8003b06:	2100      	movs	r1, #0
 8003b08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	228c      	movs	r2, #140	; 0x8c
 8003b0e:	2122      	movs	r1, #34	; 0x22
 8003b10:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2280      	movs	r2, #128	; 0x80
 8003b16:	589b      	ldr	r3, [r3, r2]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d02d      	beq.n	8003b78 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2280      	movs	r2, #128	; 0x80
 8003b20:	589b      	ldr	r3, [r3, r2]
 8003b22:	4a40      	ldr	r2, [pc, #256]	; (8003c24 <UART_Start_Receive_DMA+0x140>)
 8003b24:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2280      	movs	r2, #128	; 0x80
 8003b2a:	589b      	ldr	r3, [r3, r2]
 8003b2c:	4a3e      	ldr	r2, [pc, #248]	; (8003c28 <UART_Start_Receive_DMA+0x144>)
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2280      	movs	r2, #128	; 0x80
 8003b34:	589b      	ldr	r3, [r3, r2]
 8003b36:	4a3d      	ldr	r2, [pc, #244]	; (8003c2c <UART_Start_Receive_DMA+0x148>)
 8003b38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2280      	movs	r2, #128	; 0x80
 8003b3e:	589b      	ldr	r3, [r3, r2]
 8003b40:	2200      	movs	r2, #0
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2280      	movs	r2, #128	; 0x80
 8003b48:	5898      	ldr	r0, [r3, r2]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	3324      	adds	r3, #36	; 0x24
 8003b50:	0019      	movs	r1, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b56:	001a      	movs	r2, r3
 8003b58:	1dbb      	adds	r3, r7, #6
 8003b5a:	881b      	ldrh	r3, [r3, #0]
 8003b5c:	f7fd fa8c 	bl	8001078 <HAL_DMA_Start_IT>
 8003b60:	1e03      	subs	r3, r0, #0
 8003b62:	d009      	beq.n	8003b78 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2290      	movs	r2, #144	; 0x90
 8003b68:	2110      	movs	r1, #16
 8003b6a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	228c      	movs	r2, #140	; 0x8c
 8003b70:	2120      	movs	r1, #32
 8003b72:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e050      	b.n	8003c1a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d019      	beq.n	8003bb4 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b80:	f3ef 8310 	mrs	r3, PRIMASK
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b90:	f383 8810 	msr	PRIMASK, r3
}
 8003b94:	46c0      	nop			; (mov r8, r8)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	2180      	movs	r1, #128	; 0x80
 8003ba2:	0049      	lsls	r1, r1, #1
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003baa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bae:	f383 8810 	msr	PRIMASK, r3
}
 8003bb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb8:	613b      	str	r3, [r7, #16]
  return(result);
 8003bba:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			; (mov r8, r8)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	609a      	str	r2, [r3, #8]
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bea:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bec:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bee:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	f383 8810 	msr	PRIMASK, r3
}
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c12:	f383 8810 	msr	PRIMASK, r3
}
 8003c16:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b010      	add	sp, #64	; 0x40
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	08003d7d 	.word	0x08003d7d
 8003c28:	08003ead 	.word	0x08003ead
 8003c2c:	08003eef 	.word	0x08003eef

08003c30 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b08a      	sub	sp, #40	; 0x28
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c38:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c3e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
 8003c42:	2301      	movs	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	21c0      	movs	r1, #192	; 0xc0
 8003c5a:	438a      	bics	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6e:	617b      	str	r3, [r7, #20]
  return(result);
 8003c70:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	2301      	movs	r3, #1
 8003c76:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4908      	ldr	r1, [pc, #32]	; (8003cac <UART_EndTxTransfer+0x7c>)
 8003c8c:	400a      	ands	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f383 8810 	msr	PRIMASK, r3
}
 8003c9a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2288      	movs	r2, #136	; 0x88
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	5099      	str	r1, [r3, r2]
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b00a      	add	sp, #40	; 0x28
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	ff7fffff 	.word	0xff7fffff

08003cb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08e      	sub	sp, #56	; 0x38
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	617b      	str	r3, [r7, #20]
  return(result);
 8003cbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4926      	ldr	r1, [pc, #152]	; (8003d74 <UART_EndRxTransfer+0xc4>)
 8003cda:	400a      	ands	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	f383 8810 	msr	PRIMASK, r3
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cea:	f3ef 8310 	mrs	r3, PRIMASK
 8003cee:	623b      	str	r3, [r7, #32]
  return(result);
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	f383 8810 	msr	PRIMASK, r3
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689a      	ldr	r2, [r3, #8]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	491b      	ldr	r1, [pc, #108]	; (8003d78 <UART_EndRxTransfer+0xc8>)
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	609a      	str	r2, [r3, #8]
 8003d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d16:	f383 8810 	msr	PRIMASK, r3
}
 8003d1a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d118      	bne.n	8003d56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d24:	f3ef 8310 	mrs	r3, PRIMASK
 8003d28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d2e:	2301      	movs	r3, #1
 8003d30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f383 8810 	msr	PRIMASK, r3
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2110      	movs	r1, #16
 8003d46:	438a      	bics	r2, r1
 8003d48:	601a      	str	r2, [r3, #0]
 8003d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f383 8810 	msr	PRIMASK, r3
}
 8003d54:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	228c      	movs	r2, #140	; 0x8c
 8003d5a:	2120      	movs	r1, #32
 8003d5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	b00e      	add	sp, #56	; 0x38
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	fffffedf 	.word	0xfffffedf
 8003d78:	effffffe 	.word	0xeffffffe

08003d7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b094      	sub	sp, #80	; 0x50
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d88:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2220      	movs	r2, #32
 8003d92:	4013      	ands	r3, r2
 8003d94:	d16f      	bne.n	8003e76 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d98:	225e      	movs	r2, #94	; 0x5e
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003da2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003da4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003da8:	2301      	movs	r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f383 8810 	msr	PRIMASK, r3
}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	493a      	ldr	r1, [pc, #232]	; (8003ea8 <UART_DMAReceiveCplt+0x12c>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	f383 8810 	msr	PRIMASK, r3
}
 8003dce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dda:	2301      	movs	r3, #1
 8003ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de0:	f383 8810 	msr	PRIMASK, r3
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689a      	ldr	r2, [r3, #8]
 8003dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2101      	movs	r1, #1
 8003df2:	438a      	bics	r2, r1
 8003df4:	609a      	str	r2, [r3, #8]
 8003df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e02:	f3ef 8310 	mrs	r3, PRIMASK
 8003e06:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e12:	f383 8810 	msr	PRIMASK, r3
}
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	438a      	bics	r2, r1
 8003e26:	609a      	str	r2, [r3, #8]
 8003e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e36:	228c      	movs	r2, #140	; 0x8c
 8003e38:	2120      	movs	r1, #32
 8003e3a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d118      	bne.n	8003e76 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e44:	f3ef 8310 	mrs	r3, PRIMASK
 8003e48:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e4e:	2301      	movs	r3, #1
 8003e50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f383 8810 	msr	PRIMASK, r3
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2110      	movs	r1, #16
 8003e66:	438a      	bics	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	f383 8810 	msr	PRIMASK, r3
}
 8003e74:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e78:	2200      	movs	r2, #0
 8003e7a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d108      	bne.n	8003e96 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e86:	225c      	movs	r2, #92	; 0x5c
 8003e88:	5a9a      	ldrh	r2, [r3, r2]
 8003e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e8c:	0011      	movs	r1, r2
 8003e8e:	0018      	movs	r0, r3
 8003e90:	f7fc fb4a 	bl	8000528 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e94:	e003      	b.n	8003e9e <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8003e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7ff fad7 	bl	800344c <HAL_UART_RxCpltCallback>
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b014      	add	sp, #80	; 0x50
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	fffffeff 	.word	0xfffffeff

08003eac <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d10a      	bne.n	8003ede <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	225c      	movs	r2, #92	; 0x5c
 8003ecc:	5a9b      	ldrh	r3, [r3, r2]
 8003ece:	085b      	lsrs	r3, r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0011      	movs	r1, r2
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7fc fb26 	bl	8000528 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003edc:	e003      	b.n	8003ee6 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	f7ff fabb 	bl	800345c <HAL_UART_RxHalfCpltCallback>
}
 8003ee6:	46c0      	nop			; (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b004      	add	sp, #16
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	2288      	movs	r2, #136	; 0x88
 8003f00:	589b      	ldr	r3, [r3, r2]
 8003f02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	228c      	movs	r2, #140	; 0x8c
 8003f08:	589b      	ldr	r3, [r3, r2]
 8003f0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2280      	movs	r2, #128	; 0x80
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b80      	cmp	r3, #128	; 0x80
 8003f18:	d10a      	bne.n	8003f30 <UART_DMAError+0x42>
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	2b21      	cmp	r3, #33	; 0x21
 8003f1e:	d107      	bne.n	8003f30 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2256      	movs	r2, #86	; 0x56
 8003f24:	2100      	movs	r1, #0
 8003f26:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f7ff fe80 	bl	8003c30 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2240      	movs	r2, #64	; 0x40
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d10a      	bne.n	8003f54 <UART_DMAError+0x66>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2b22      	cmp	r3, #34	; 0x22
 8003f42:	d107      	bne.n	8003f54 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	225e      	movs	r2, #94	; 0x5e
 8003f48:	2100      	movs	r1, #0
 8003f4a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f7ff feae 	bl	8003cb0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2290      	movs	r2, #144	; 0x90
 8003f58:	589b      	ldr	r3, [r3, r2]
 8003f5a:	2210      	movs	r2, #16
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2190      	movs	r1, #144	; 0x90
 8003f62:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff fa80 	bl	800346c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b006      	add	sp, #24
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	225e      	movs	r2, #94	; 0x5e
 8003f86:	2100      	movs	r1, #0
 8003f88:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2256      	movs	r2, #86	; 0x56
 8003f8e:	2100      	movs	r1, #0
 8003f90:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	0018      	movs	r0, r3
 8003f96:	f7ff fa69 	bl	800346c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b004      	add	sp, #16
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003faa:	f3ef 8310 	mrs	r3, PRIMASK
 8003fae:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fb2:	617b      	str	r3, [r7, #20]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f383 8810 	msr	PRIMASK, r3
}
 8003fbe:	46c0      	nop			; (mov r8, r8)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2140      	movs	r1, #64	; 0x40
 8003fcc:	438a      	bics	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	f383 8810 	msr	PRIMASK, r3
}
 8003fda:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2288      	movs	r2, #136	; 0x88
 8003fe0:	2120      	movs	r1, #32
 8003fe2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff fa25 	bl	800343c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ff2:	46c0      	nop			; (mov r8, r8)
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	b006      	add	sp, #24
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b082      	sub	sp, #8
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004002:	46c0      	nop			; (mov r8, r8)
 8004004:	46bd      	mov	sp, r7
 8004006:	b002      	add	sp, #8
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004012:	46c0      	nop			; (mov r8, r8)
 8004014:	46bd      	mov	sp, r7
 8004016:	b002      	add	sp, #8
 8004018:	bd80      	pop	{r7, pc}

0800401a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b002      	add	sp, #8
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2284      	movs	r2, #132	; 0x84
 8004038:	5c9b      	ldrb	r3, [r3, r2]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d101      	bne.n	8004042 <HAL_UARTEx_DisableFifoMode+0x16>
 800403e:	2302      	movs	r3, #2
 8004040:	e027      	b.n	8004092 <HAL_UARTEx_DisableFifoMode+0x66>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2284      	movs	r2, #132	; 0x84
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2288      	movs	r2, #136	; 0x88
 800404e:	2124      	movs	r1, #36	; 0x24
 8004050:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2101      	movs	r1, #1
 8004066:	438a      	bics	r2, r1
 8004068:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	4a0b      	ldr	r2, [pc, #44]	; (800409c <HAL_UARTEx_DisableFifoMode+0x70>)
 800406e:	4013      	ands	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2288      	movs	r2, #136	; 0x88
 8004084:	2120      	movs	r1, #32
 8004086:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2284      	movs	r2, #132	; 0x84
 800408c:	2100      	movs	r1, #0
 800408e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b004      	add	sp, #16
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	dfffffff 	.word	0xdfffffff

080040a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2284      	movs	r2, #132	; 0x84
 80040ae:	5c9b      	ldrb	r3, [r3, r2]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e02e      	b.n	8004116 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2284      	movs	r2, #132	; 0x84
 80040bc:	2101      	movs	r1, #1
 80040be:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2288      	movs	r2, #136	; 0x88
 80040c4:	2124      	movs	r1, #36	; 0x24
 80040c6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2101      	movs	r1, #1
 80040dc:	438a      	bics	r2, r1
 80040de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	08d9      	lsrs	r1, r3, #3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 f8bc 	bl	8004274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2288      	movs	r2, #136	; 0x88
 8004108:	2120      	movs	r1, #32
 800410a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2284      	movs	r2, #132	; 0x84
 8004110:	2100      	movs	r1, #0
 8004112:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	0018      	movs	r0, r3
 8004118:	46bd      	mov	sp, r7
 800411a:	b004      	add	sp, #16
 800411c:	bd80      	pop	{r7, pc}
	...

08004120 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2284      	movs	r2, #132	; 0x84
 800412e:	5c9b      	ldrb	r3, [r3, r2]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004134:	2302      	movs	r3, #2
 8004136:	e02f      	b.n	8004198 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2284      	movs	r2, #132	; 0x84
 800413c:	2101      	movs	r1, #1
 800413e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2288      	movs	r2, #136	; 0x88
 8004144:	2124      	movs	r1, #36	; 0x24
 8004146:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2101      	movs	r1, #1
 800415c:	438a      	bics	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004168:	4013      	ands	r3, r2
 800416a:	0019      	movs	r1, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	0018      	movs	r0, r3
 800417a:	f000 f87b 	bl	8004274 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2288      	movs	r2, #136	; 0x88
 800418a:	2120      	movs	r1, #32
 800418c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2284      	movs	r2, #132	; 0x84
 8004192:	2100      	movs	r1, #0
 8004194:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b004      	add	sp, #16
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	f1ffffff 	.word	0xf1ffffff

080041a4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041a4:	b5b0      	push	{r4, r5, r7, lr}
 80041a6:	b08a      	sub	sp, #40	; 0x28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	1dbb      	adds	r3, r7, #6
 80041b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	228c      	movs	r2, #140	; 0x8c
 80041b6:	589b      	ldr	r3, [r3, r2]
 80041b8:	2b20      	cmp	r3, #32
 80041ba:	d156      	bne.n	800426a <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80041c2:	1dbb      	adds	r3, r7, #6
 80041c4:	881b      	ldrh	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e04e      	b.n	800426c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	2380      	movs	r3, #128	; 0x80
 80041d4:	015b      	lsls	r3, r3, #5
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d109      	bne.n	80041ee <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d105      	bne.n	80041ee <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	2201      	movs	r2, #1
 80041e6:	4013      	ands	r3, r2
 80041e8:	d001      	beq.n	80041ee <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e03e      	b.n	800426c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	671a      	str	r2, [r3, #112]	; 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80041fa:	2527      	movs	r5, #39	; 0x27
 80041fc:	197c      	adds	r4, r7, r5
 80041fe:	1dbb      	adds	r3, r7, #6
 8004200:	881a      	ldrh	r2, [r3, #0]
 8004202:	68b9      	ldr	r1, [r7, #8]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	0018      	movs	r0, r3
 8004208:	f7ff fc6c 	bl	8003ae4 <UART_Start_Receive_DMA>
 800420c:	0003      	movs	r3, r0
 800420e:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004210:	197b      	adds	r3, r7, r5
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d124      	bne.n	8004262 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d11c      	bne.n	800425a <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2210      	movs	r2, #16
 8004226:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004228:	f3ef 8310 	mrs	r3, PRIMASK
 800422c:	617b      	str	r3, [r7, #20]
  return(result);
 800422e:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004230:	623b      	str	r3, [r7, #32]
 8004232:	2301      	movs	r3, #1
 8004234:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	f383 8810 	msr	PRIMASK, r3
}
 800423c:	46c0      	nop			; (mov r8, r8)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2110      	movs	r1, #16
 800424a:	430a      	orrs	r2, r1
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f383 8810 	msr	PRIMASK, r3
}
 8004258:	e003      	b.n	8004262 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800425a:	2327      	movs	r3, #39	; 0x27
 800425c:	18fb      	adds	r3, r7, r3
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 8004262:	2327      	movs	r3, #39	; 0x27
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	e000      	b.n	800426c <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
  }
}
 800426c:	0018      	movs	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	b00a      	add	sp, #40	; 0x28
 8004272:	bdb0      	pop	{r4, r5, r7, pc}

08004274 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004280:	2b00      	cmp	r3, #0
 8004282:	d108      	bne.n	8004296 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	226a      	movs	r2, #106	; 0x6a
 8004288:	2101      	movs	r1, #1
 800428a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2268      	movs	r2, #104	; 0x68
 8004290:	2101      	movs	r1, #1
 8004292:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004294:	e043      	b.n	800431e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004296:	260f      	movs	r6, #15
 8004298:	19bb      	adds	r3, r7, r6
 800429a:	2208      	movs	r2, #8
 800429c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800429e:	200e      	movs	r0, #14
 80042a0:	183b      	adds	r3, r7, r0
 80042a2:	2208      	movs	r2, #8
 80042a4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	0e5b      	lsrs	r3, r3, #25
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	240d      	movs	r4, #13
 80042b2:	193b      	adds	r3, r7, r4
 80042b4:	2107      	movs	r1, #7
 80042b6:	400a      	ands	r2, r1
 80042b8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	0f5b      	lsrs	r3, r3, #29
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	250c      	movs	r5, #12
 80042c6:	197b      	adds	r3, r7, r5
 80042c8:	2107      	movs	r1, #7
 80042ca:	400a      	ands	r2, r1
 80042cc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042ce:	183b      	adds	r3, r7, r0
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	197a      	adds	r2, r7, r5
 80042d4:	7812      	ldrb	r2, [r2, #0]
 80042d6:	4914      	ldr	r1, [pc, #80]	; (8004328 <UARTEx_SetNbDataToProcess+0xb4>)
 80042d8:	5c8a      	ldrb	r2, [r1, r2]
 80042da:	435a      	muls	r2, r3
 80042dc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80042de:	197b      	adds	r3, r7, r5
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	4a12      	ldr	r2, [pc, #72]	; (800432c <UARTEx_SetNbDataToProcess+0xb8>)
 80042e4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80042e6:	0019      	movs	r1, r3
 80042e8:	f7fb ff94 	bl	8000214 <__divsi3>
 80042ec:	0003      	movs	r3, r0
 80042ee:	b299      	uxth	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	226a      	movs	r2, #106	; 0x6a
 80042f4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80042f6:	19bb      	adds	r3, r7, r6
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	193a      	adds	r2, r7, r4
 80042fc:	7812      	ldrb	r2, [r2, #0]
 80042fe:	490a      	ldr	r1, [pc, #40]	; (8004328 <UARTEx_SetNbDataToProcess+0xb4>)
 8004300:	5c8a      	ldrb	r2, [r1, r2]
 8004302:	435a      	muls	r2, r3
 8004304:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004306:	193b      	adds	r3, r7, r4
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	4a08      	ldr	r2, [pc, #32]	; (800432c <UARTEx_SetNbDataToProcess+0xb8>)
 800430c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800430e:	0019      	movs	r1, r3
 8004310:	f7fb ff80 	bl	8000214 <__divsi3>
 8004314:	0003      	movs	r3, r0
 8004316:	b299      	uxth	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2268      	movs	r2, #104	; 0x68
 800431c:	5299      	strh	r1, [r3, r2]
}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	46bd      	mov	sp, r7
 8004322:	b005      	add	sp, #20
 8004324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	08004430 	.word	0x08004430
 800432c:	08004438 	.word	0x08004438

08004330 <__libc_init_array>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	2600      	movs	r6, #0
 8004334:	4d0c      	ldr	r5, [pc, #48]	; (8004368 <__libc_init_array+0x38>)
 8004336:	4c0d      	ldr	r4, [pc, #52]	; (800436c <__libc_init_array+0x3c>)
 8004338:	1b64      	subs	r4, r4, r5
 800433a:	10a4      	asrs	r4, r4, #2
 800433c:	42a6      	cmp	r6, r4
 800433e:	d109      	bne.n	8004354 <__libc_init_array+0x24>
 8004340:	2600      	movs	r6, #0
 8004342:	f000 f821 	bl	8004388 <_init>
 8004346:	4d0a      	ldr	r5, [pc, #40]	; (8004370 <__libc_init_array+0x40>)
 8004348:	4c0a      	ldr	r4, [pc, #40]	; (8004374 <__libc_init_array+0x44>)
 800434a:	1b64      	subs	r4, r4, r5
 800434c:	10a4      	asrs	r4, r4, #2
 800434e:	42a6      	cmp	r6, r4
 8004350:	d105      	bne.n	800435e <__libc_init_array+0x2e>
 8004352:	bd70      	pop	{r4, r5, r6, pc}
 8004354:	00b3      	lsls	r3, r6, #2
 8004356:	58eb      	ldr	r3, [r5, r3]
 8004358:	4798      	blx	r3
 800435a:	3601      	adds	r6, #1
 800435c:	e7ee      	b.n	800433c <__libc_init_array+0xc>
 800435e:	00b3      	lsls	r3, r6, #2
 8004360:	58eb      	ldr	r3, [r5, r3]
 8004362:	4798      	blx	r3
 8004364:	3601      	adds	r6, #1
 8004366:	e7f2      	b.n	800434e <__libc_init_array+0x1e>
 8004368:	08004440 	.word	0x08004440
 800436c:	08004440 	.word	0x08004440
 8004370:	08004440 	.word	0x08004440
 8004374:	08004444 	.word	0x08004444

08004378 <memset>:
 8004378:	0003      	movs	r3, r0
 800437a:	1882      	adds	r2, r0, r2
 800437c:	4293      	cmp	r3, r2
 800437e:	d100      	bne.n	8004382 <memset+0xa>
 8004380:	4770      	bx	lr
 8004382:	7019      	strb	r1, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	e7f9      	b.n	800437c <memset+0x4>

08004388 <_init>:
 8004388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800438e:	bc08      	pop	{r3}
 8004390:	469e      	mov	lr, r3
 8004392:	4770      	bx	lr

08004394 <_fini>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	46c0      	nop			; (mov r8, r8)
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr
