
C1V1-Konwerter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001bb4  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001c6c  08001c6c  00011c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001cac  08001cac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001cac  08001cac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001cac  08001cac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cac  08001cac  00011cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cb0  08001cb0  00011cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  08001cc0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08001cc0  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008936  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cab  00000000  00000000  0002896a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008e0  00000000  00000000  0002a618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007d8  00000000  00000000  0002aef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002077  00000000  00000000  0002b6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c783  00000000  00000000  0002d747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007eae5  00000000  00000000  00039eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b89af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dcc  00000000  00000000  000b8a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001c54 	.word	0x08001c54

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001c54 	.word	0x08001c54

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <MX_GPIO_Init+0x28>)
 8000220:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000222:	4b07      	ldr	r3, [pc, #28]	; (8000240 <MX_GPIO_Init+0x28>)
 8000224:	2101      	movs	r1, #1
 8000226:	430a      	orrs	r2, r1
 8000228:	635a      	str	r2, [r3, #52]	; 0x34
 800022a:	4b05      	ldr	r3, [pc, #20]	; (8000240 <MX_GPIO_Init+0x28>)
 800022c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800022e:	2201      	movs	r2, #1
 8000230:	4013      	ands	r3, r2
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]

}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	46bd      	mov	sp, r7
 800023a:	b002      	add	sp, #8
 800023c:	bd80      	pop	{r7, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	40021000 	.word	0x40021000

08000244 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <MX_I2C2_Init+0x74>)
 800024a:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <MX_I2C2_Init+0x78>)
 800024c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <MX_I2C2_Init+0x74>)
 8000250:	4a1b      	ldr	r2, [pc, #108]	; (80002c0 <MX_I2C2_Init+0x7c>)
 8000252:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <MX_I2C2_Init+0x74>)
 8000256:	2200      	movs	r2, #0
 8000258:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <MX_I2C2_Init+0x74>)
 800025c:	2201      	movs	r2, #1
 800025e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <MX_I2C2_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <MX_I2C2_Init+0x74>)
 8000268:	2200      	movs	r2, #0
 800026a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <MX_I2C2_Init+0x74>)
 800026e:	2200      	movs	r2, #0
 8000270:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <MX_I2C2_Init+0x74>)
 8000274:	2200      	movs	r2, #0
 8000276:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <MX_I2C2_Init+0x74>)
 800027a:	2200      	movs	r2, #0
 800027c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <MX_I2C2_Init+0x74>)
 8000280:	0018      	movs	r0, r3
 8000282:	f000 fc3d 	bl	8000b00 <HAL_I2C_Init>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d001      	beq.n	800028e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800028a:	f000 f8c0 	bl	800040e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800028e:	4b0a      	ldr	r3, [pc, #40]	; (80002b8 <MX_I2C2_Init+0x74>)
 8000290:	2100      	movs	r1, #0
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fcca 	bl	8000c2c <HAL_I2CEx_ConfigAnalogFilter>
 8000298:	1e03      	subs	r3, r0, #0
 800029a:	d001      	beq.n	80002a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800029c:	f000 f8b7 	bl	800040e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <MX_I2C2_Init+0x74>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fd0d 	bl	8000cc4 <HAL_I2CEx_ConfigDigitalFilter>
 80002aa:	1e03      	subs	r3, r0, #0
 80002ac:	d001      	beq.n	80002b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80002ae:	f000 f8ae 	bl	800040e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000028 	.word	0x20000028
 80002bc:	40005800 	.word	0x40005800
 80002c0:	00303d5b 	.word	0x00303d5b

080002c4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b08b      	sub	sp, #44	; 0x2c
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002cc:	2414      	movs	r4, #20
 80002ce:	193b      	adds	r3, r7, r4
 80002d0:	0018      	movs	r0, r3
 80002d2:	2314      	movs	r3, #20
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f001 fcb4 	bl	8001c44 <memset>
  if(i2cHandle->Instance==I2C2)
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a1c      	ldr	r2, [pc, #112]	; (8000354 <HAL_I2C_MspInit+0x90>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d131      	bne.n	800034a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e6:	4b1c      	ldr	r3, [pc, #112]	; (8000358 <HAL_I2C_MspInit+0x94>)
 80002e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80002ea:	4b1b      	ldr	r3, [pc, #108]	; (8000358 <HAL_I2C_MspInit+0x94>)
 80002ec:	2101      	movs	r1, #1
 80002ee:	430a      	orrs	r2, r1
 80002f0:	635a      	str	r2, [r3, #52]	; 0x34
 80002f2:	4b19      	ldr	r3, [pc, #100]	; (8000358 <HAL_I2C_MspInit+0x94>)
 80002f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002f6:	2201      	movs	r2, #1
 80002f8:	4013      	ands	r3, r2
 80002fa:	613b      	str	r3, [r7, #16]
 80002fc:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80002fe:	193b      	adds	r3, r7, r4
 8000300:	22c0      	movs	r2, #192	; 0xc0
 8000302:	0152      	lsls	r2, r2, #5
 8000304:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000306:	0021      	movs	r1, r4
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2212      	movs	r2, #18
 800030c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030e:	187b      	adds	r3, r7, r1
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	187b      	adds	r3, r7, r1
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800031a:	187b      	adds	r3, r7, r1
 800031c:	2206      	movs	r2, #6
 800031e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000320:	187a      	adds	r2, r7, r1
 8000322:	23a0      	movs	r3, #160	; 0xa0
 8000324:	05db      	lsls	r3, r3, #23
 8000326:	0011      	movs	r1, r2
 8000328:	0018      	movs	r0, r3
 800032a:	f000 fa85 	bl	8000838 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800032e:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <HAL_I2C_MspInit+0x94>)
 8000330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000332:	4b09      	ldr	r3, [pc, #36]	; (8000358 <HAL_I2C_MspInit+0x94>)
 8000334:	2180      	movs	r1, #128	; 0x80
 8000336:	03c9      	lsls	r1, r1, #15
 8000338:	430a      	orrs	r2, r1
 800033a:	63da      	str	r2, [r3, #60]	; 0x3c
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <HAL_I2C_MspInit+0x94>)
 800033e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	03db      	lsls	r3, r3, #15
 8000344:	4013      	ands	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	b00b      	add	sp, #44	; 0x2c
 8000350:	bd90      	pop	{r4, r7, pc}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	40005800 	.word	0x40005800
 8000358:	40021000 	.word	0x40021000

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000360:	f000 f930 	bl	80005c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000364:	f000 f807 	bl	8000376 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000368:	f7ff ff56 	bl	8000218 <MX_GPIO_Init>
  MX_I2C2_Init();
 800036c:	f7ff ff6a 	bl	8000244 <MX_I2C2_Init>
  MX_RTC_Init();
 8000370:	f000 f852 	bl	8000418 <MX_RTC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000374:	e7fe      	b.n	8000374 <main+0x18>

08000376 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000376:	b590      	push	{r4, r7, lr}
 8000378:	b093      	sub	sp, #76	; 0x4c
 800037a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037c:	2414      	movs	r4, #20
 800037e:	193b      	adds	r3, r7, r4
 8000380:	0018      	movs	r0, r3
 8000382:	2334      	movs	r3, #52	; 0x34
 8000384:	001a      	movs	r2, r3
 8000386:	2100      	movs	r1, #0
 8000388:	f001 fc5c 	bl	8001c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	0018      	movs	r0, r3
 8000390:	2310      	movs	r3, #16
 8000392:	001a      	movs	r2, r3
 8000394:	2100      	movs	r1, #0
 8000396:	f001 fc55 	bl	8001c44 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800039a:	2380      	movs	r3, #128	; 0x80
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	0018      	movs	r0, r3
 80003a0:	f000 fcdc 	bl	8000d5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80003a4:	193b      	adds	r3, r7, r4
 80003a6:	220a      	movs	r2, #10
 80003a8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	2280      	movs	r2, #128	; 0x80
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003b2:	0021      	movs	r1, r4
 80003b4:	187b      	adds	r3, r7, r1
 80003b6:	2200      	movs	r2, #0
 80003b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2240      	movs	r2, #64	; 0x40
 80003be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2201      	movs	r2, #1
 80003c4:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2200      	movs	r2, #0
 80003ca:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 fd04 	bl	8000ddc <HAL_RCC_OscConfig>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d001      	beq.n	80003dc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003d8:	f000 f819 	bl	800040e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2207      	movs	r2, #7
 80003e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003e8:	1d3b      	adds	r3, r7, #4
 80003ea:	2200      	movs	r2, #0
 80003ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003f4:	1d3b      	adds	r3, r7, #4
 80003f6:	2100      	movs	r1, #0
 80003f8:	0018      	movs	r0, r3
 80003fa:	f000 ffff 	bl	80013fc <HAL_RCC_ClockConfig>
 80003fe:	1e03      	subs	r3, r0, #0
 8000400:	d001      	beq.n	8000406 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000402:	f000 f804 	bl	800040e <Error_Handler>
  }
}
 8000406:	46c0      	nop			; (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b013      	add	sp, #76	; 0x4c
 800040c:	bd90      	pop	{r4, r7, pc}

0800040e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000412:	b672      	cpsid	i
}
 8000414:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000416:	e7fe      	b.n	8000416 <Error_Handler+0x8>

08000418 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800041c:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_RTC_Init+0x54>)
 800041e:	4a14      	ldr	r2, [pc, #80]	; (8000470 <MX_RTC_Init+0x58>)
 8000420:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000422:	4b12      	ldr	r3, [pc, #72]	; (800046c <MX_RTC_Init+0x54>)
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000428:	4b10      	ldr	r3, [pc, #64]	; (800046c <MX_RTC_Init+0x54>)
 800042a:	227f      	movs	r2, #127	; 0x7f
 800042c:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <MX_RTC_Init+0x54>)
 8000430:	22ff      	movs	r2, #255	; 0xff
 8000432:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <MX_RTC_Init+0x54>)
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <MX_RTC_Init+0x54>)
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <MX_RTC_Init+0x54>)
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <MX_RTC_Init+0x54>)
 8000448:	2280      	movs	r2, #128	; 0x80
 800044a:	05d2      	lsls	r2, r2, #23
 800044c:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800044e:	4b07      	ldr	r3, [pc, #28]	; (800046c <MX_RTC_Init+0x54>)
 8000450:	2200      	movs	r2, #0
 8000452:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <MX_RTC_Init+0x54>)
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fa80 	bl	800195c <HAL_RTC_Init>
 800045c:	1e03      	subs	r3, r0, #0
 800045e:	d001      	beq.n	8000464 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8000460:	f7ff ffd5 	bl	800040e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000464:	46c0      	nop			; (mov r8, r8)
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			; (mov r8, r8)
 800046c:	2000007c 	.word	0x2000007c
 8000470:	40002800 	.word	0x40002800

08000474 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	b08b      	sub	sp, #44	; 0x2c
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800047c:	2410      	movs	r4, #16
 800047e:	193b      	adds	r3, r7, r4
 8000480:	0018      	movs	r0, r3
 8000482:	2318      	movs	r3, #24
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f001 fbdc 	bl	8001c44 <memset>
  if(rtcHandle->Instance==RTC)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <HAL_RTC_MspInit+0x74>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d124      	bne.n	80004e0 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000496:	193b      	adds	r3, r7, r4
 8000498:	2280      	movs	r2, #128	; 0x80
 800049a:	0292      	lsls	r2, r2, #10
 800049c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	615a      	str	r2, [r3, #20]

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 f931 	bl	8001710 <HAL_RCCEx_PeriphCLKConfig>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80004b2:	f7ff ffac 	bl	800040e <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <HAL_RTC_MspInit+0x78>)
 80004b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_RTC_MspInit+0x78>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0209      	lsls	r1, r1, #8
 80004c0:	430a      	orrs	r2, r1
 80004c2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_RTC_MspInit+0x78>)
 80004c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <HAL_RTC_MspInit+0x78>)
 80004ca:	2180      	movs	r1, #128	; 0x80
 80004cc:	00c9      	lsls	r1, r1, #3
 80004ce:	430a      	orrs	r2, r1
 80004d0:	63da      	str	r2, [r3, #60]	; 0x3c
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_RTC_MspInit+0x78>)
 80004d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	00db      	lsls	r3, r3, #3
 80004da:	4013      	ands	r3, r2
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b00b      	add	sp, #44	; 0x2c
 80004e6:	bd90      	pop	{r4, r7, pc}
 80004e8:	40002800 	.word	0x40002800
 80004ec:	40021000 	.word	0x40021000

080004f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f6:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <HAL_MspInit+0x44>)
 80004f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004fa:	4b0e      	ldr	r3, [pc, #56]	; (8000534 <HAL_MspInit+0x44>)
 80004fc:	2101      	movs	r1, #1
 80004fe:	430a      	orrs	r2, r1
 8000500:	641a      	str	r2, [r3, #64]	; 0x40
 8000502:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <HAL_MspInit+0x44>)
 8000504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000506:	2201      	movs	r2, #1
 8000508:	4013      	ands	r3, r2
 800050a:	607b      	str	r3, [r7, #4]
 800050c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800050e:	4b09      	ldr	r3, [pc, #36]	; (8000534 <HAL_MspInit+0x44>)
 8000510:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000512:	4b08      	ldr	r3, [pc, #32]	; (8000534 <HAL_MspInit+0x44>)
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	0549      	lsls	r1, r1, #21
 8000518:	430a      	orrs	r2, r1
 800051a:	63da      	str	r2, [r3, #60]	; 0x3c
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_MspInit+0x44>)
 800051e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000520:	2380      	movs	r3, #128	; 0x80
 8000522:	055b      	lsls	r3, r3, #21
 8000524:	4013      	ands	r3, r2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800053c:	e7fe      	b.n	800053c <NMI_Handler+0x4>

0800053e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <HardFault_Handler+0x4>

08000544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800055c:	f000 f89c 	bl	8000698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}

08000566 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000566:	b580      	push	{r7, lr}
 8000568:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}

08000570 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000570:	480d      	ldr	r0, [pc, #52]	; (80005a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000572:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000574:	f7ff fff7 	bl	8000566 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000578:	480c      	ldr	r0, [pc, #48]	; (80005ac <LoopForever+0x6>)
  ldr r1, =_edata
 800057a:	490d      	ldr	r1, [pc, #52]	; (80005b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800057c:	4a0d      	ldr	r2, [pc, #52]	; (80005b4 <LoopForever+0xe>)
  movs r3, #0
 800057e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000580:	e002      	b.n	8000588 <LoopCopyDataInit>

08000582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000586:	3304      	adds	r3, #4

08000588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800058c:	d3f9      	bcc.n	8000582 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800058e:	4a0a      	ldr	r2, [pc, #40]	; (80005b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000590:	4c0a      	ldr	r4, [pc, #40]	; (80005bc <LoopForever+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000594:	e001      	b.n	800059a <LoopFillZerobss>

08000596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000598:	3204      	adds	r2, #4

0800059a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800059c:	d3fb      	bcc.n	8000596 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800059e:	f001 fb2d 	bl	8001bfc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005a2:	f7ff fedb 	bl	800035c <main>

080005a6 <LoopForever>:

LoopForever:
  b LoopForever
 80005a6:	e7fe      	b.n	80005a6 <LoopForever>
  ldr   r0, =_estack
 80005a8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80005ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005b4:	08001cb4 	.word	0x08001cb4
  ldr r2, =_sbss
 80005b8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005bc:	200000ac 	.word	0x200000ac

080005c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005c0:	e7fe      	b.n	80005c0 <ADC1_IRQHandler>
	...

080005c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ca:	1dfb      	adds	r3, r7, #7
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x3c>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <HAL_Init+0x3c>)
 80005d6:	2180      	movs	r1, #128	; 0x80
 80005d8:	0049      	lsls	r1, r1, #1
 80005da:	430a      	orrs	r2, r1
 80005dc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005de:	2003      	movs	r0, #3
 80005e0:	f000 f810 	bl	8000604 <HAL_InitTick>
 80005e4:	1e03      	subs	r3, r0, #0
 80005e6:	d003      	beq.n	80005f0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80005e8:	1dfb      	adds	r3, r7, #7
 80005ea:	2201      	movs	r2, #1
 80005ec:	701a      	strb	r2, [r3, #0]
 80005ee:	e001      	b.n	80005f4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f7ff ff7e 	bl	80004f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781b      	ldrb	r3, [r3, #0]
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b590      	push	{r4, r7, lr}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800060c:	230f      	movs	r3, #15
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <HAL_InitTick+0x88>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d02b      	beq.n	8000674 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800061c:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <HAL_InitTick+0x8c>)
 800061e:	681c      	ldr	r4, [r3, #0]
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <HAL_InitTick+0x88>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	0019      	movs	r1, r3
 8000626:	23fa      	movs	r3, #250	; 0xfa
 8000628:	0098      	lsls	r0, r3, #2
 800062a:	f7ff fd69 	bl	8000100 <__udivsi3>
 800062e:	0003      	movs	r3, r0
 8000630:	0019      	movs	r1, r3
 8000632:	0020      	movs	r0, r4
 8000634:	f7ff fd64 	bl	8000100 <__udivsi3>
 8000638:	0003      	movs	r3, r0
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f8ef 	bl	800081e <HAL_SYSTICK_Config>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d112      	bne.n	800066a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d80a      	bhi.n	8000660 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064a:	6879      	ldr	r1, [r7, #4]
 800064c:	2301      	movs	r3, #1
 800064e:	425b      	negs	r3, r3
 8000650:	2200      	movs	r2, #0
 8000652:	0018      	movs	r0, r3
 8000654:	f000 f8ce 	bl	80007f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <HAL_InitTick+0x90>)
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	e00d      	b.n	800067c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000660:	230f      	movs	r3, #15
 8000662:	18fb      	adds	r3, r7, r3
 8000664:	2201      	movs	r2, #1
 8000666:	701a      	strb	r2, [r3, #0]
 8000668:	e008      	b.n	800067c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800066a:	230f      	movs	r3, #15
 800066c:	18fb      	adds	r3, r7, r3
 800066e:	2201      	movs	r2, #1
 8000670:	701a      	strb	r2, [r3, #0]
 8000672:	e003      	b.n	800067c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000674:	230f      	movs	r3, #15
 8000676:	18fb      	adds	r3, r7, r3
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800067c:	230f      	movs	r3, #15
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	781b      	ldrb	r3, [r3, #0]
}
 8000682:	0018      	movs	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	b005      	add	sp, #20
 8000688:	bd90      	pop	{r4, r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000008 	.word	0x20000008
 8000690:	20000000 	.word	0x20000000
 8000694:	20000004 	.word	0x20000004

08000698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x1c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	001a      	movs	r2, r3
 80006a2:	4b05      	ldr	r3, [pc, #20]	; (80006b8 <HAL_IncTick+0x20>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	18d2      	adds	r2, r2, r3
 80006a8:	4b03      	ldr	r3, [pc, #12]	; (80006b8 <HAL_IncTick+0x20>)
 80006aa:	601a      	str	r2, [r3, #0]
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	20000008 	.word	0x20000008
 80006b8:	200000a8 	.word	0x200000a8

080006bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  return uwTick;
 80006c0:	4b02      	ldr	r3, [pc, #8]	; (80006cc <HAL_GetTick+0x10>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	0018      	movs	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			; (mov r8, r8)
 80006cc:	200000a8 	.word	0x200000a8

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b590      	push	{r4, r7, lr}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	0002      	movs	r2, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b7f      	cmp	r3, #127	; 0x7f
 80006e4:	d828      	bhi.n	8000738 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006e6:	4a2f      	ldr	r2, [pc, #188]	; (80007a4 <__NVIC_SetPriority+0xd4>)
 80006e8:	1dfb      	adds	r3, r7, #7
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	089b      	lsrs	r3, r3, #2
 80006f0:	33c0      	adds	r3, #192	; 0xc0
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	589b      	ldr	r3, [r3, r2]
 80006f6:	1dfa      	adds	r2, r7, #7
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	0011      	movs	r1, r2
 80006fc:	2203      	movs	r2, #3
 80006fe:	400a      	ands	r2, r1
 8000700:	00d2      	lsls	r2, r2, #3
 8000702:	21ff      	movs	r1, #255	; 0xff
 8000704:	4091      	lsls	r1, r2
 8000706:	000a      	movs	r2, r1
 8000708:	43d2      	mvns	r2, r2
 800070a:	401a      	ands	r2, r3
 800070c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	019b      	lsls	r3, r3, #6
 8000712:	22ff      	movs	r2, #255	; 0xff
 8000714:	401a      	ands	r2, r3
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	0018      	movs	r0, r3
 800071c:	2303      	movs	r3, #3
 800071e:	4003      	ands	r3, r0
 8000720:	00db      	lsls	r3, r3, #3
 8000722:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000724:	481f      	ldr	r0, [pc, #124]	; (80007a4 <__NVIC_SetPriority+0xd4>)
 8000726:	1dfb      	adds	r3, r7, #7
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	b25b      	sxtb	r3, r3
 800072c:	089b      	lsrs	r3, r3, #2
 800072e:	430a      	orrs	r2, r1
 8000730:	33c0      	adds	r3, #192	; 0xc0
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000736:	e031      	b.n	800079c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000738:	4a1b      	ldr	r2, [pc, #108]	; (80007a8 <__NVIC_SetPriority+0xd8>)
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	0019      	movs	r1, r3
 8000740:	230f      	movs	r3, #15
 8000742:	400b      	ands	r3, r1
 8000744:	3b08      	subs	r3, #8
 8000746:	089b      	lsrs	r3, r3, #2
 8000748:	3306      	adds	r3, #6
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	18d3      	adds	r3, r2, r3
 800074e:	3304      	adds	r3, #4
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	1dfa      	adds	r2, r7, #7
 8000754:	7812      	ldrb	r2, [r2, #0]
 8000756:	0011      	movs	r1, r2
 8000758:	2203      	movs	r2, #3
 800075a:	400a      	ands	r2, r1
 800075c:	00d2      	lsls	r2, r2, #3
 800075e:	21ff      	movs	r1, #255	; 0xff
 8000760:	4091      	lsls	r1, r2
 8000762:	000a      	movs	r2, r1
 8000764:	43d2      	mvns	r2, r2
 8000766:	401a      	ands	r2, r3
 8000768:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	019b      	lsls	r3, r3, #6
 800076e:	22ff      	movs	r2, #255	; 0xff
 8000770:	401a      	ands	r2, r3
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	0018      	movs	r0, r3
 8000778:	2303      	movs	r3, #3
 800077a:	4003      	ands	r3, r0
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000780:	4809      	ldr	r0, [pc, #36]	; (80007a8 <__NVIC_SetPriority+0xd8>)
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	001c      	movs	r4, r3
 8000788:	230f      	movs	r3, #15
 800078a:	4023      	ands	r3, r4
 800078c:	3b08      	subs	r3, #8
 800078e:	089b      	lsrs	r3, r3, #2
 8000790:	430a      	orrs	r2, r1
 8000792:	3306      	adds	r3, #6
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	18c3      	adds	r3, r0, r3
 8000798:	3304      	adds	r3, #4
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	b003      	add	sp, #12
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	1e5a      	subs	r2, r3, #1
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	045b      	lsls	r3, r3, #17
 80007bc:	429a      	cmp	r2, r3
 80007be:	d301      	bcc.n	80007c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007c0:	2301      	movs	r3, #1
 80007c2:	e010      	b.n	80007e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <SysTick_Config+0x44>)
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	3a01      	subs	r2, #1
 80007ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007cc:	2301      	movs	r3, #1
 80007ce:	425b      	negs	r3, r3
 80007d0:	2103      	movs	r1, #3
 80007d2:	0018      	movs	r0, r3
 80007d4:	f7ff ff7c 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <SysTick_Config+0x44>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007de:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <SysTick_Config+0x44>)
 80007e0:	2207      	movs	r2, #7
 80007e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007e4:	2300      	movs	r3, #0
}
 80007e6:	0018      	movs	r0, r3
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b002      	add	sp, #8
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	e000e010 	.word	0xe000e010

080007f4 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	210f      	movs	r1, #15
 8000800:	187b      	adds	r3, r7, r1
 8000802:	1c02      	adds	r2, r0, #0
 8000804:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	187b      	adds	r3, r7, r1
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	b25b      	sxtb	r3, r3
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	46c0      	nop			; (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b004      	add	sp, #16
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff ffbf 	bl	80007ac <SysTick_Config>
 800082e:	0003      	movs	r3, r0
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}

08000838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
 8000840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000846:	e147      	b.n	8000ad8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2101      	movs	r1, #1
 800084e:	697a      	ldr	r2, [r7, #20]
 8000850:	4091      	lsls	r1, r2
 8000852:	000a      	movs	r2, r1
 8000854:	4013      	ands	r3, r2
 8000856:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d100      	bne.n	8000860 <HAL_GPIO_Init+0x28>
 800085e:	e138      	b.n	8000ad2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	2203      	movs	r2, #3
 8000866:	4013      	ands	r3, r2
 8000868:	2b01      	cmp	r3, #1
 800086a:	d005      	beq.n	8000878 <HAL_GPIO_Init+0x40>
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	2203      	movs	r2, #3
 8000872:	4013      	ands	r3, r2
 8000874:	2b02      	cmp	r3, #2
 8000876:	d130      	bne.n	80008da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	005b      	lsls	r3, r3, #1
 8000882:	2203      	movs	r2, #3
 8000884:	409a      	lsls	r2, r3
 8000886:	0013      	movs	r3, r2
 8000888:	43da      	mvns	r2, r3
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	68da      	ldr	r2, [r3, #12]
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	409a      	lsls	r2, r3
 800089a:	0013      	movs	r3, r2
 800089c:	693a      	ldr	r2, [r7, #16]
 800089e:	4313      	orrs	r3, r2
 80008a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008ae:	2201      	movs	r2, #1
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	409a      	lsls	r2, r3
 80008b4:	0013      	movs	r3, r2
 80008b6:	43da      	mvns	r2, r3
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	4013      	ands	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	091b      	lsrs	r3, r3, #4
 80008c4:	2201      	movs	r2, #1
 80008c6:	401a      	ands	r2, r3
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	409a      	lsls	r2, r3
 80008cc:	0013      	movs	r3, r2
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2203      	movs	r2, #3
 80008e0:	4013      	ands	r3, r2
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d017      	beq.n	8000916 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	2203      	movs	r2, #3
 80008f2:	409a      	lsls	r2, r3
 80008f4:	0013      	movs	r3, r2
 80008f6:	43da      	mvns	r2, r3
 80008f8:	693b      	ldr	r3, [r7, #16]
 80008fa:	4013      	ands	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	697b      	ldr	r3, [r7, #20]
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	409a      	lsls	r2, r3
 8000908:	0013      	movs	r3, r2
 800090a:	693a      	ldr	r2, [r7, #16]
 800090c:	4313      	orrs	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2203      	movs	r2, #3
 800091c:	4013      	ands	r3, r2
 800091e:	2b02      	cmp	r3, #2
 8000920:	d123      	bne.n	800096a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	08da      	lsrs	r2, r3, #3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3208      	adds	r2, #8
 800092a:	0092      	lsls	r2, r2, #2
 800092c:	58d3      	ldr	r3, [r2, r3]
 800092e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	2207      	movs	r2, #7
 8000934:	4013      	ands	r3, r2
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	220f      	movs	r2, #15
 800093a:	409a      	lsls	r2, r3
 800093c:	0013      	movs	r3, r2
 800093e:	43da      	mvns	r2, r3
 8000940:	693b      	ldr	r3, [r7, #16]
 8000942:	4013      	ands	r3, r2
 8000944:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	691a      	ldr	r2, [r3, #16]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	2107      	movs	r1, #7
 800094e:	400b      	ands	r3, r1
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	409a      	lsls	r2, r3
 8000954:	0013      	movs	r3, r2
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	08da      	lsrs	r2, r3, #3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3208      	adds	r2, #8
 8000964:	0092      	lsls	r2, r2, #2
 8000966:	6939      	ldr	r1, [r7, #16]
 8000968:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	2203      	movs	r2, #3
 8000976:	409a      	lsls	r2, r3
 8000978:	0013      	movs	r3, r2
 800097a:	43da      	mvns	r2, r3
 800097c:	693b      	ldr	r3, [r7, #16]
 800097e:	4013      	ands	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	2203      	movs	r2, #3
 8000988:	401a      	ands	r2, r3
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	409a      	lsls	r2, r3
 8000990:	0013      	movs	r3, r2
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4313      	orrs	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685a      	ldr	r2, [r3, #4]
 80009a2:	23c0      	movs	r3, #192	; 0xc0
 80009a4:	029b      	lsls	r3, r3, #10
 80009a6:	4013      	ands	r3, r2
 80009a8:	d100      	bne.n	80009ac <HAL_GPIO_Init+0x174>
 80009aa:	e092      	b.n	8000ad2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80009ac:	4a50      	ldr	r2, [pc, #320]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	089b      	lsrs	r3, r3, #2
 80009b2:	3318      	adds	r3, #24
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	589b      	ldr	r3, [r3, r2]
 80009b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80009ba:	697b      	ldr	r3, [r7, #20]
 80009bc:	2203      	movs	r2, #3
 80009be:	4013      	ands	r3, r2
 80009c0:	00db      	lsls	r3, r3, #3
 80009c2:	220f      	movs	r2, #15
 80009c4:	409a      	lsls	r2, r3
 80009c6:	0013      	movs	r3, r2
 80009c8:	43da      	mvns	r2, r3
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	4013      	ands	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	23a0      	movs	r3, #160	; 0xa0
 80009d4:	05db      	lsls	r3, r3, #23
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0x1ca>
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a45      	ldr	r2, [pc, #276]	; (8000af4 <HAL_GPIO_Init+0x2bc>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d00d      	beq.n	80009fe <HAL_GPIO_Init+0x1c6>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a44      	ldr	r2, [pc, #272]	; (8000af8 <HAL_GPIO_Init+0x2c0>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d007      	beq.n	80009fa <HAL_GPIO_Init+0x1c2>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4a43      	ldr	r2, [pc, #268]	; (8000afc <HAL_GPIO_Init+0x2c4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_GPIO_Init+0x1be>
 80009f2:	2303      	movs	r3, #3
 80009f4:	e006      	b.n	8000a04 <HAL_GPIO_Init+0x1cc>
 80009f6:	2305      	movs	r3, #5
 80009f8:	e004      	b.n	8000a04 <HAL_GPIO_Init+0x1cc>
 80009fa:	2302      	movs	r3, #2
 80009fc:	e002      	b.n	8000a04 <HAL_GPIO_Init+0x1cc>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <HAL_GPIO_Init+0x1cc>
 8000a02:	2300      	movs	r3, #0
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	2103      	movs	r1, #3
 8000a08:	400a      	ands	r2, r1
 8000a0a:	00d2      	lsls	r2, r2, #3
 8000a0c:	4093      	lsls	r3, r2
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000a14:	4936      	ldr	r1, [pc, #216]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	3318      	adds	r3, #24
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	43da      	mvns	r2, r3
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	4013      	ands	r3, r2
 8000a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685a      	ldr	r2, [r3, #4]
 8000a36:	2380      	movs	r3, #128	; 0x80
 8000a38:	035b      	lsls	r3, r3, #13
 8000a3a:	4013      	ands	r3, r2
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000a4c:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43da      	mvns	r2, r3
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	039b      	lsls	r3, r3, #14
 8000a64:	4013      	ands	r3, r2
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000a76:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000a78:	2384      	movs	r3, #132	; 0x84
 8000a7a:	58d3      	ldr	r3, [r2, r3]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	43da      	mvns	r2, r3
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685a      	ldr	r2, [r3, #4]
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	029b      	lsls	r3, r3, #10
 8000a90:	4013      	ands	r3, r2
 8000a92:	d003      	beq.n	8000a9c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000a9c:	4914      	ldr	r1, [pc, #80]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000a9e:	2284      	movs	r2, #132	; 0x84
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000aa4:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000aa6:	2380      	movs	r3, #128	; 0x80
 8000aa8:	58d3      	ldr	r3, [r2, r3]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685a      	ldr	r2, [r3, #4]
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	025b      	lsls	r3, r3, #9
 8000abe:	4013      	ands	r3, r2
 8000ac0:	d003      	beq.n	8000aca <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aca:	4909      	ldr	r1, [pc, #36]	; (8000af0 <HAL_GPIO_Init+0x2b8>)
 8000acc:	2280      	movs	r2, #128	; 0x80
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ad2:	697b      	ldr	r3, [r7, #20]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	40da      	lsrs	r2, r3
 8000ae0:	1e13      	subs	r3, r2, #0
 8000ae2:	d000      	beq.n	8000ae6 <HAL_GPIO_Init+0x2ae>
 8000ae4:	e6b0      	b.n	8000848 <HAL_GPIO_Init+0x10>
  }
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46c0      	nop			; (mov r8, r8)
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b006      	add	sp, #24
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40021800 	.word	0x40021800
 8000af4:	50000400 	.word	0x50000400
 8000af8:	50000800 	.word	0x50000800
 8000afc:	50000c00 	.word	0x50000c00

08000b00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e082      	b.n	8000c18 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2241      	movs	r2, #65	; 0x41
 8000b16:	5c9b      	ldrb	r3, [r3, r2]
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d107      	bne.n	8000b2e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2240      	movs	r2, #64	; 0x40
 8000b22:	2100      	movs	r1, #0
 8000b24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f7ff fbcb 	bl	80002c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2241      	movs	r2, #65	; 0x41
 8000b32:	2124      	movs	r1, #36	; 0x24
 8000b34:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2101      	movs	r1, #1
 8000b42:	438a      	bics	r2, r1
 8000b44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4934      	ldr	r1, [pc, #208]	; (8000c20 <HAL_I2C_Init+0x120>)
 8000b50:	400a      	ands	r2, r1
 8000b52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	689a      	ldr	r2, [r3, #8]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4931      	ldr	r1, [pc, #196]	; (8000c24 <HAL_I2C_Init+0x124>)
 8000b60:	400a      	ands	r2, r1
 8000b62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d108      	bne.n	8000b7e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	0209      	lsls	r1, r1, #8
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	e007      	b.n	8000b8e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2184      	movs	r1, #132	; 0x84
 8000b88:	0209      	lsls	r1, r1, #8
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d104      	bne.n	8000ba0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	685a      	ldr	r2, [r3, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	491f      	ldr	r1, [pc, #124]	; (8000c28 <HAL_I2C_Init+0x128>)
 8000bac:	430a      	orrs	r2, r1
 8000bae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	68da      	ldr	r2, [r3, #12]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	491a      	ldr	r1, [pc, #104]	; (8000c24 <HAL_I2C_Init+0x124>)
 8000bbc:	400a      	ands	r2, r1
 8000bbe:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	691a      	ldr	r2, [r3, #16]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	69d9      	ldr	r1, [r3, #28]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6a1a      	ldr	r2, [r3, #32]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	430a      	orrs	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2241      	movs	r2, #65	; 0x41
 8000c04:	2120      	movs	r1, #32
 8000c06:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2242      	movs	r2, #66	; 0x42
 8000c12:	2100      	movs	r1, #0
 8000c14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000c16:	2300      	movs	r3, #0
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b002      	add	sp, #8
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	f0ffffff 	.word	0xf0ffffff
 8000c24:	ffff7fff 	.word	0xffff7fff
 8000c28:	02008000 	.word	0x02008000

08000c2c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2241      	movs	r2, #65	; 0x41
 8000c3a:	5c9b      	ldrb	r3, [r3, r2]
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2b20      	cmp	r3, #32
 8000c40:	d138      	bne.n	8000cb4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2240      	movs	r2, #64	; 0x40
 8000c46:	5c9b      	ldrb	r3, [r3, r2]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d101      	bne.n	8000c50 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e032      	b.n	8000cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2240      	movs	r2, #64	; 0x40
 8000c54:	2101      	movs	r1, #1
 8000c56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2241      	movs	r2, #65	; 0x41
 8000c5c:	2124      	movs	r1, #36	; 0x24
 8000c5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2101      	movs	r1, #1
 8000c6c:	438a      	bics	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4911      	ldr	r1, [pc, #68]	; (8000cc0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	6819      	ldr	r1, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	683a      	ldr	r2, [r7, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2101      	movs	r1, #1
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2241      	movs	r2, #65	; 0x41
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2240      	movs	r2, #64	; 0x40
 8000cac:	2100      	movs	r1, #0
 8000cae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	e000      	b.n	8000cb6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000cb4:	2302      	movs	r3, #2
  }
}
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b002      	add	sp, #8
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	ffffefff 	.word	0xffffefff

08000cc4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2241      	movs	r2, #65	; 0x41
 8000cd2:	5c9b      	ldrb	r3, [r3, r2]
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b20      	cmp	r3, #32
 8000cd8:	d139      	bne.n	8000d4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2240      	movs	r2, #64	; 0x40
 8000cde:	5c9b      	ldrb	r3, [r3, r2]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d101      	bne.n	8000ce8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e033      	b.n	8000d50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2240      	movs	r2, #64	; 0x40
 8000cec:	2101      	movs	r1, #1
 8000cee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2241      	movs	r2, #65	; 0x41
 8000cf4:	2124      	movs	r1, #36	; 0x24
 8000cf6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2101      	movs	r1, #1
 8000d04:	438a      	bics	r2, r1
 8000d06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4a11      	ldr	r2, [pc, #68]	; (8000d58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8000d14:	4013      	ands	r3, r2
 8000d16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	021b      	lsls	r3, r3, #8
 8000d1c:	68fa      	ldr	r2, [r7, #12]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2101      	movs	r1, #1
 8000d36:	430a      	orrs	r2, r1
 8000d38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2241      	movs	r2, #65	; 0x41
 8000d3e:	2120      	movs	r1, #32
 8000d40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	2100      	movs	r1, #0
 8000d48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000d4e:	2302      	movs	r3, #2
  }
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b004      	add	sp, #16
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	fffff0ff 	.word	0xfffff0ff

08000d5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	0019      	movs	r1, r3
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	430a      	orrs	r2, r1
 8000d74:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	d11f      	bne.n	8000dc0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	0013      	movs	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	189b      	adds	r3, r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	4912      	ldr	r1, [pc, #72]	; (8000dd8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff f9b6 	bl	8000100 <__udivsi3>
 8000d94:	0003      	movs	r3, r0
 8000d96:	3301      	adds	r3, #1
 8000d98:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000d9a:	e008      	b.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3b01      	subs	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	e001      	b.n	8000dae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000daa:	2303      	movs	r3, #3
 8000dac:	e009      	b.n	8000dc2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000dae:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000db0:	695a      	ldr	r2, [r3, #20]
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	401a      	ands	r2, r3
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	00db      	lsls	r3, r3, #3
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d0ed      	beq.n	8000d9c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b004      	add	sp, #16
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	40007000 	.word	0x40007000
 8000dd0:	fffff9ff 	.word	0xfffff9ff
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	000f4240 	.word	0x000f4240

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e2f3      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	4013      	ands	r3, r2
 8000df6:	d100      	bne.n	8000dfa <HAL_RCC_OscConfig+0x1e>
 8000df8:	e07c      	b.n	8000ef4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dfa:	4bc3      	ldr	r3, [pc, #780]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	2238      	movs	r2, #56	; 0x38
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e04:	4bc0      	ldr	r3, [pc, #768]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	2203      	movs	r2, #3
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8000e0e:	69bb      	ldr	r3, [r7, #24]
 8000e10:	2b10      	cmp	r3, #16
 8000e12:	d102      	bne.n	8000e1a <HAL_RCC_OscConfig+0x3e>
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	2b03      	cmp	r3, #3
 8000e18:	d002      	beq.n	8000e20 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d10b      	bne.n	8000e38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e20:	4bb9      	ldr	r3, [pc, #740]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	029b      	lsls	r3, r3, #10
 8000e28:	4013      	ands	r3, r2
 8000e2a:	d062      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x116>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d15e      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e2ce      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	2380      	movs	r3, #128	; 0x80
 8000e3e:	025b      	lsls	r3, r3, #9
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d107      	bne.n	8000e54 <HAL_RCC_OscConfig+0x78>
 8000e44:	4bb0      	ldr	r3, [pc, #704]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4baf      	ldr	r3, [pc, #700]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0249      	lsls	r1, r1, #9
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e020      	b.n	8000e96 <HAL_RCC_OscConfig+0xba>
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685a      	ldr	r2, [r3, #4]
 8000e58:	23a0      	movs	r3, #160	; 0xa0
 8000e5a:	02db      	lsls	r3, r3, #11
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d10e      	bne.n	8000e7e <HAL_RCC_OscConfig+0xa2>
 8000e60:	4ba9      	ldr	r3, [pc, #676]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4ba8      	ldr	r3, [pc, #672]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e66:	2180      	movs	r1, #128	; 0x80
 8000e68:	02c9      	lsls	r1, r1, #11
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	4ba6      	ldr	r3, [pc, #664]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4ba5      	ldr	r3, [pc, #660]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0249      	lsls	r1, r1, #9
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e00b      	b.n	8000e96 <HAL_RCC_OscConfig+0xba>
 8000e7e:	4ba2      	ldr	r3, [pc, #648]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4ba1      	ldr	r3, [pc, #644]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e84:	49a1      	ldr	r1, [pc, #644]	; (800110c <HAL_RCC_OscConfig+0x330>)
 8000e86:	400a      	ands	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	4b9f      	ldr	r3, [pc, #636]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	4b9e      	ldr	r3, [pc, #632]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000e90:	499f      	ldr	r1, [pc, #636]	; (8001110 <HAL_RCC_OscConfig+0x334>)
 8000e92:	400a      	ands	r2, r1
 8000e94:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d014      	beq.n	8000ec8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fc0d 	bl	80006bc <HAL_GetTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fc08 	bl	80006bc <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	; 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e28d      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000eba:	4b93      	ldr	r3, [pc, #588]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	029b      	lsls	r3, r3, #10
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	d0f0      	beq.n	8000ea8 <HAL_RCC_OscConfig+0xcc>
 8000ec6:	e015      	b.n	8000ef4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec8:	f7ff fbf8 	bl	80006bc <HAL_GetTick>
 8000ecc:	0003      	movs	r3, r0
 8000ece:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ed2:	f7ff fbf3 	bl	80006bc <HAL_GetTick>
 8000ed6:	0002      	movs	r2, r0
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b64      	cmp	r3, #100	; 0x64
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e278      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000ee4:	4b88      	ldr	r3, [pc, #544]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	4013      	ands	r3, r2
 8000eee:	d1f0      	bne.n	8000ed2 <HAL_RCC_OscConfig+0xf6>
 8000ef0:	e000      	b.n	8000ef4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2202      	movs	r2, #2
 8000efa:	4013      	ands	r3, r2
 8000efc:	d100      	bne.n	8000f00 <HAL_RCC_OscConfig+0x124>
 8000efe:	e099      	b.n	8001034 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f00:	4b81      	ldr	r3, [pc, #516]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2238      	movs	r2, #56	; 0x38
 8000f06:	4013      	ands	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f0a:	4b7f      	ldr	r3, [pc, #508]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	2203      	movs	r2, #3
 8000f10:	4013      	ands	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	2b10      	cmp	r3, #16
 8000f18:	d102      	bne.n	8000f20 <HAL_RCC_OscConfig+0x144>
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d002      	beq.n	8000f26 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d135      	bne.n	8000f92 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f26:	4b78      	ldr	r3, [pc, #480]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	2380      	movs	r3, #128	; 0x80
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	4013      	ands	r3, r2
 8000f30:	d005      	beq.n	8000f3e <HAL_RCC_OscConfig+0x162>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e24b      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3e:	4b72      	ldr	r3, [pc, #456]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	4a74      	ldr	r2, [pc, #464]	; (8001114 <HAL_RCC_OscConfig+0x338>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	0019      	movs	r1, r3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	021a      	lsls	r2, r3, #8
 8000f4e:	4b6e      	ldr	r3, [pc, #440]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f50:	430a      	orrs	r2, r1
 8000f52:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d112      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f5a:	4b6b      	ldr	r3, [pc, #428]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a6e      	ldr	r2, [pc, #440]	; (8001118 <HAL_RCC_OscConfig+0x33c>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	0019      	movs	r1, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	4b67      	ldr	r3, [pc, #412]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000f6e:	4b66      	ldr	r3, [pc, #408]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	0adb      	lsrs	r3, r3, #11
 8000f74:	2207      	movs	r2, #7
 8000f76:	4013      	ands	r3, r2
 8000f78:	4a68      	ldr	r2, [pc, #416]	; (800111c <HAL_RCC_OscConfig+0x340>)
 8000f7a:	40da      	lsrs	r2, r3
 8000f7c:	4b68      	ldr	r3, [pc, #416]	; (8001120 <HAL_RCC_OscConfig+0x344>)
 8000f7e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f80:	4b68      	ldr	r3, [pc, #416]	; (8001124 <HAL_RCC_OscConfig+0x348>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	0018      	movs	r0, r3
 8000f86:	f7ff fb3d 	bl	8000604 <HAL_InitTick>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d051      	beq.n	8001032 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e221      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d030      	beq.n	8000ffc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f9a:	4b5b      	ldr	r3, [pc, #364]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a5e      	ldr	r2, [pc, #376]	; (8001118 <HAL_RCC_OscConfig+0x33c>)
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	691a      	ldr	r2, [r3, #16]
 8000fa8:	4b57      	ldr	r3, [pc, #348]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000faa:	430a      	orrs	r2, r1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8000fae:	4b56      	ldr	r3, [pc, #344]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	4b55      	ldr	r3, [pc, #340]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	0049      	lsls	r1, r1, #1
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fb7e 	bl	80006bc <HAL_GetTick>
 8000fc0:	0003      	movs	r3, r0
 8000fc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc6:	f7ff fb79 	bl	80006bc <HAL_GetTick>
 8000fca:	0002      	movs	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e1fe      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd8:	4b4b      	ldr	r3, [pc, #300]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	2380      	movs	r3, #128	; 0x80
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fe4:	4b48      	ldr	r3, [pc, #288]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <HAL_RCC_OscConfig+0x338>)
 8000fea:	4013      	ands	r3, r2
 8000fec:	0019      	movs	r1, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	021a      	lsls	r2, r3, #8
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	e01b      	b.n	8001034 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001002:	4949      	ldr	r1, [pc, #292]	; (8001128 <HAL_RCC_OscConfig+0x34c>)
 8001004:	400a      	ands	r2, r1
 8001006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001008:	f7ff fb58 	bl	80006bc <HAL_GetTick>
 800100c:	0003      	movs	r3, r0
 800100e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001012:	f7ff fb53 	bl	80006bc <HAL_GetTick>
 8001016:	0002      	movs	r2, r0
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e1d8      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001024:	4b38      	ldr	r3, [pc, #224]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4013      	ands	r3, r2
 800102e:	d1f0      	bne.n	8001012 <HAL_RCC_OscConfig+0x236>
 8001030:	e000      	b.n	8001034 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001032:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2208      	movs	r2, #8
 800103a:	4013      	ands	r3, r2
 800103c:	d047      	beq.n	80010ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	2238      	movs	r2, #56	; 0x38
 8001044:	4013      	ands	r3, r2
 8001046:	2b18      	cmp	r3, #24
 8001048:	d10a      	bne.n	8001060 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800104a:	4b2f      	ldr	r3, [pc, #188]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 800104c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104e:	2202      	movs	r2, #2
 8001050:	4013      	ands	r3, r2
 8001052:	d03c      	beq.n	80010ce <HAL_RCC_OscConfig+0x2f2>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d138      	bne.n	80010ce <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e1ba      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d019      	beq.n	800109c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001068:	4b27      	ldr	r3, [pc, #156]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 800106a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800106c:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 800106e:	2101      	movs	r1, #1
 8001070:	430a      	orrs	r2, r1
 8001072:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001074:	f7ff fb22 	bl	80006bc <HAL_GetTick>
 8001078:	0003      	movs	r3, r0
 800107a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800107c:	e008      	b.n	8001090 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800107e:	f7ff fb1d 	bl	80006bc <HAL_GetTick>
 8001082:	0002      	movs	r2, r0
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b02      	cmp	r3, #2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e1a2      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001090:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 8001092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001094:	2202      	movs	r2, #2
 8001096:	4013      	ands	r3, r2
 8001098:	d0f1      	beq.n	800107e <HAL_RCC_OscConfig+0x2a2>
 800109a:	e018      	b.n	80010ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 800109e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	438a      	bics	r2, r1
 80010a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a8:	f7ff fb08 	bl	80006bc <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010b2:	f7ff fb03 	bl	80006bc <HAL_GetTick>
 80010b6:	0002      	movs	r2, r0
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e188      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 80010c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010c8:	2202      	movs	r2, #2
 80010ca:	4013      	ands	r3, r2
 80010cc:	d1f1      	bne.n	80010b2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2204      	movs	r2, #4
 80010d4:	4013      	ands	r3, r2
 80010d6:	d100      	bne.n	80010da <HAL_RCC_OscConfig+0x2fe>
 80010d8:	e0c6      	b.n	8001268 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010da:	231f      	movs	r3, #31
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80010e2:	4b09      	ldr	r3, [pc, #36]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	2238      	movs	r2, #56	; 0x38
 80010e8:	4013      	ands	r3, r2
 80010ea:	2b20      	cmp	r3, #32
 80010ec:	d11e      	bne.n	800112c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80010ee:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_RCC_OscConfig+0x32c>)
 80010f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f2:	2202      	movs	r2, #2
 80010f4:	4013      	ands	r3, r2
 80010f6:	d100      	bne.n	80010fa <HAL_RCC_OscConfig+0x31e>
 80010f8:	e0b6      	b.n	8001268 <HAL_RCC_OscConfig+0x48c>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d000      	beq.n	8001104 <HAL_RCC_OscConfig+0x328>
 8001102:	e0b1      	b.n	8001268 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e166      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
 8001108:	40021000 	.word	0x40021000
 800110c:	fffeffff 	.word	0xfffeffff
 8001110:	fffbffff 	.word	0xfffbffff
 8001114:	ffff80ff 	.word	0xffff80ff
 8001118:	ffffc7ff 	.word	0xffffc7ff
 800111c:	00f42400 	.word	0x00f42400
 8001120:	20000000 	.word	0x20000000
 8001124:	20000004 	.word	0x20000004
 8001128:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800112c:	4bac      	ldr	r3, [pc, #688]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 800112e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	055b      	lsls	r3, r3, #21
 8001134:	4013      	ands	r3, r2
 8001136:	d101      	bne.n	800113c <HAL_RCC_OscConfig+0x360>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_RCC_OscConfig+0x362>
 800113c:	2300      	movs	r3, #0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d011      	beq.n	8001166 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001142:	4ba7      	ldr	r3, [pc, #668]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001146:	4ba6      	ldr	r3, [pc, #664]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	0549      	lsls	r1, r1, #21
 800114c:	430a      	orrs	r2, r1
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001150:	4ba3      	ldr	r3, [pc, #652]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	055b      	lsls	r3, r3, #21
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800115e:	231f      	movs	r3, #31
 8001160:	18fb      	adds	r3, r7, r3
 8001162:	2201      	movs	r2, #1
 8001164:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001166:	4b9f      	ldr	r3, [pc, #636]	; (80013e4 <HAL_RCC_OscConfig+0x608>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4013      	ands	r3, r2
 8001170:	d11a      	bne.n	80011a8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001172:	4b9c      	ldr	r3, [pc, #624]	; (80013e4 <HAL_RCC_OscConfig+0x608>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b9b      	ldr	r3, [pc, #620]	; (80013e4 <HAL_RCC_OscConfig+0x608>)
 8001178:	2180      	movs	r1, #128	; 0x80
 800117a:	0049      	lsls	r1, r1, #1
 800117c:	430a      	orrs	r2, r1
 800117e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001180:	f7ff fa9c 	bl	80006bc <HAL_GetTick>
 8001184:	0003      	movs	r3, r0
 8001186:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001188:	e008      	b.n	800119c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800118a:	f7ff fa97 	bl	80006bc <HAL_GetTick>
 800118e:	0002      	movs	r2, r0
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	2b02      	cmp	r3, #2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e11c      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800119c:	4b91      	ldr	r3, [pc, #580]	; (80013e4 <HAL_RCC_OscConfig+0x608>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	2380      	movs	r3, #128	; 0x80
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4013      	ands	r3, r2
 80011a6:	d0f0      	beq.n	800118a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d106      	bne.n	80011be <HAL_RCC_OscConfig+0x3e2>
 80011b0:	4b8b      	ldr	r3, [pc, #556]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011b4:	4b8a      	ldr	r3, [pc, #552]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80011bc:	e01c      	b.n	80011f8 <HAL_RCC_OscConfig+0x41c>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d10c      	bne.n	80011e0 <HAL_RCC_OscConfig+0x404>
 80011c6:	4b86      	ldr	r3, [pc, #536]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011ca:	4b85      	ldr	r3, [pc, #532]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011cc:	2104      	movs	r1, #4
 80011ce:	430a      	orrs	r2, r1
 80011d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80011d2:	4b83      	ldr	r3, [pc, #524]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011d6:	4b82      	ldr	r3, [pc, #520]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011d8:	2101      	movs	r1, #1
 80011da:	430a      	orrs	r2, r1
 80011dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0x41c>
 80011e0:	4b7f      	ldr	r3, [pc, #508]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011e4:	4b7e      	ldr	r3, [pc, #504]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011e6:	2101      	movs	r1, #1
 80011e8:	438a      	bics	r2, r1
 80011ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80011ec:	4b7c      	ldr	r3, [pc, #496]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80011f0:	4b7b      	ldr	r3, [pc, #492]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80011f2:	2104      	movs	r1, #4
 80011f4:	438a      	bics	r2, r1
 80011f6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d014      	beq.n	800122a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fa5c 	bl	80006bc <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001208:	e009      	b.n	800121e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800120a:	f7ff fa57 	bl	80006bc <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	4a74      	ldr	r2, [pc, #464]	; (80013e8 <HAL_RCC_OscConfig+0x60c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e0db      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800121e:	4b70      	ldr	r3, [pc, #448]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001222:	2202      	movs	r2, #2
 8001224:	4013      	ands	r3, r2
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x42e>
 8001228:	e013      	b.n	8001252 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff fa47 	bl	80006bc <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001232:	e009      	b.n	8001248 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001234:	f7ff fa42 	bl	80006bc <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	4a6a      	ldr	r2, [pc, #424]	; (80013e8 <HAL_RCC_OscConfig+0x60c>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e0c6      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001248:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	2202      	movs	r2, #2
 800124e:	4013      	ands	r3, r2
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001252:	231f      	movs	r3, #31
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d105      	bne.n	8001268 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800125c:	4b60      	ldr	r3, [pc, #384]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 800125e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001260:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001262:	4962      	ldr	r1, [pc, #392]	; (80013ec <HAL_RCC_OscConfig+0x610>)
 8001264:	400a      	ands	r2, r1
 8001266:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d100      	bne.n	8001272 <HAL_RCC_OscConfig+0x496>
 8001270:	e0b0      	b.n	80013d4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001272:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2238      	movs	r2, #56	; 0x38
 8001278:	4013      	ands	r3, r2
 800127a:	2b10      	cmp	r3, #16
 800127c:	d100      	bne.n	8001280 <HAL_RCC_OscConfig+0x4a4>
 800127e:	e078      	b.n	8001372 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	69db      	ldr	r3, [r3, #28]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d153      	bne.n	8001330 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b55      	ldr	r3, [pc, #340]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b54      	ldr	r3, [pc, #336]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 800128e:	4958      	ldr	r1, [pc, #352]	; (80013f0 <HAL_RCC_OscConfig+0x614>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001294:	f7ff fa12 	bl	80006bc <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fa0d 	bl	80006bc <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e092      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80012b0:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2380      	movs	r3, #128	; 0x80
 80012b6:	049b      	lsls	r3, r3, #18
 80012b8:	4013      	ands	r3, r2
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012bc:	4b48      	ldr	r3, [pc, #288]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	4a4c      	ldr	r2, [pc, #304]	; (80013f4 <HAL_RCC_OscConfig+0x618>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	0019      	movs	r1, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a1a      	ldr	r2, [r3, #32]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	431a      	orrs	r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d4:	021b      	lsls	r3, r3, #8
 80012d6:	431a      	orrs	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	431a      	orrs	r2, r3
 80012e4:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80012e6:	430a      	orrs	r2, r1
 80012e8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	4b3c      	ldr	r3, [pc, #240]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80012f0:	2180      	movs	r1, #128	; 0x80
 80012f2:	0449      	lsls	r1, r1, #17
 80012f4:	430a      	orrs	r2, r1
 80012f6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	4b38      	ldr	r3, [pc, #224]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	0549      	lsls	r1, r1, #21
 8001302:	430a      	orrs	r2, r1
 8001304:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001306:	f7ff f9d9 	bl	80006bc <HAL_GetTick>
 800130a:	0003      	movs	r3, r0
 800130c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff f9d4 	bl	80006bc <HAL_GetTick>
 8001314:	0002      	movs	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e059      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	2380      	movs	r3, #128	; 0x80
 8001328:	049b      	lsls	r3, r3, #18
 800132a:	4013      	ands	r3, r2
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x534>
 800132e:	e051      	b.n	80013d4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001330:	4b2b      	ldr	r3, [pc, #172]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001336:	492e      	ldr	r1, [pc, #184]	; (80013f0 <HAL_RCC_OscConfig+0x614>)
 8001338:	400a      	ands	r2, r1
 800133a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133c:	f7ff f9be 	bl	80006bc <HAL_GetTick>
 8001340:	0003      	movs	r3, r0
 8001342:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff f9b9 	bl	80006bc <HAL_GetTick>
 800134a:	0002      	movs	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e03e      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	049b      	lsls	r3, r3, #18
 8001360:	4013      	ands	r3, r2
 8001362:	d1f0      	bne.n	8001346 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 800136a:	4923      	ldr	r1, [pc, #140]	; (80013f8 <HAL_RCC_OscConfig+0x61c>)
 800136c:	400a      	ands	r2, r1
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	e030      	b.n	80013d4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d101      	bne.n	800137e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e02b      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800137e:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_RCC_OscConfig+0x604>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	2203      	movs	r2, #3
 8001388:	401a      	ands	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a1b      	ldr	r3, [r3, #32]
 800138e:	429a      	cmp	r2, r3
 8001390:	d11e      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2270      	movs	r2, #112	; 0x70
 8001396:	401a      	ands	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800139c:	429a      	cmp	r2, r3
 800139e:	d117      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	23fe      	movs	r3, #254	; 0xfe
 80013a4:	01db      	lsls	r3, r3, #7
 80013a6:	401a      	ands	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d10e      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	23f8      	movs	r3, #248	; 0xf8
 80013b6:	039b      	lsls	r3, r3, #14
 80013b8:	401a      	ands	r2, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80013be:	429a      	cmp	r2, r3
 80013c0:	d106      	bne.n	80013d0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	0f5b      	lsrs	r3, r3, #29
 80013c6:	075a      	lsls	r2, r3, #29
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d001      	beq.n	80013d4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e000      	b.n	80013d6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	0018      	movs	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	b008      	add	sp, #32
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40007000 	.word	0x40007000
 80013e8:	00001388 	.word	0x00001388
 80013ec:	efffffff 	.word	0xefffffff
 80013f0:	feffffff 	.word	0xfeffffff
 80013f4:	1fc1808c 	.word	0x1fc1808c
 80013f8:	effefffc 	.word	0xeffefffc

080013fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e0e9      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001410:	4b76      	ldr	r3, [pc, #472]	; (80015ec <HAL_RCC_ClockConfig+0x1f0>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2207      	movs	r2, #7
 8001416:	4013      	ands	r3, r2
 8001418:	683a      	ldr	r2, [r7, #0]
 800141a:	429a      	cmp	r2, r3
 800141c:	d91e      	bls.n	800145c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141e:	4b73      	ldr	r3, [pc, #460]	; (80015ec <HAL_RCC_ClockConfig+0x1f0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2207      	movs	r2, #7
 8001424:	4393      	bics	r3, r2
 8001426:	0019      	movs	r1, r3
 8001428:	4b70      	ldr	r3, [pc, #448]	; (80015ec <HAL_RCC_ClockConfig+0x1f0>)
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001430:	f7ff f944 	bl	80006bc <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001438:	e009      	b.n	800144e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800143a:	f7ff f93f 	bl	80006bc <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	4a6a      	ldr	r2, [pc, #424]	; (80015f0 <HAL_RCC_ClockConfig+0x1f4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0ca      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800144e:	4b67      	ldr	r3, [pc, #412]	; (80015ec <HAL_RCC_ClockConfig+0x1f0>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2207      	movs	r2, #7
 8001454:	4013      	ands	r3, r2
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	429a      	cmp	r2, r3
 800145a:	d1ee      	bne.n	800143a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2202      	movs	r2, #2
 8001462:	4013      	ands	r3, r2
 8001464:	d015      	beq.n	8001492 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2204      	movs	r2, #4
 800146c:	4013      	ands	r3, r2
 800146e:	d006      	beq.n	800147e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001470:	4b60      	ldr	r3, [pc, #384]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	4b5f      	ldr	r3, [pc, #380]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001476:	21e0      	movs	r1, #224	; 0xe0
 8001478:	01c9      	lsls	r1, r1, #7
 800147a:	430a      	orrs	r2, r1
 800147c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147e:	4b5d      	ldr	r3, [pc, #372]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	4a5d      	ldr	r2, [pc, #372]	; (80015f8 <HAL_RCC_ClockConfig+0x1fc>)
 8001484:	4013      	ands	r3, r2
 8001486:	0019      	movs	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	4b59      	ldr	r3, [pc, #356]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 800148e:	430a      	orrs	r2, r1
 8001490:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2201      	movs	r2, #1
 8001498:	4013      	ands	r3, r2
 800149a:	d057      	beq.n	800154c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d107      	bne.n	80014b4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014a4:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	029b      	lsls	r3, r3, #10
 80014ac:	4013      	ands	r3, r2
 80014ae:	d12b      	bne.n	8001508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e097      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d107      	bne.n	80014cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014bc:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	049b      	lsls	r3, r3, #18
 80014c4:	4013      	ands	r3, r2
 80014c6:	d11f      	bne.n	8001508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e08b      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d107      	bne.n	80014e4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d4:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	00db      	lsls	r3, r3, #3
 80014dc:	4013      	ands	r3, r2
 80014de:	d113      	bne.n	8001508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e07f      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d106      	bne.n	80014fa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80014ec:	4b41      	ldr	r3, [pc, #260]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 80014ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f0:	2202      	movs	r2, #2
 80014f2:	4013      	ands	r3, r2
 80014f4:	d108      	bne.n	8001508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e074      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d101      	bne.n	8001508 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e06d      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2207      	movs	r2, #7
 800150e:	4393      	bics	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	4b37      	ldr	r3, [pc, #220]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 8001518:	430a      	orrs	r2, r1
 800151a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800151c:	f7ff f8ce 	bl	80006bc <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001524:	e009      	b.n	800153a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001526:	f7ff f8c9 	bl	80006bc <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <HAL_RCC_ClockConfig+0x1f4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d901      	bls.n	800153a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e054      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800153a:	4b2e      	ldr	r3, [pc, #184]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2238      	movs	r2, #56	; 0x38
 8001540:	401a      	ands	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	429a      	cmp	r2, r3
 800154a:	d1ec      	bne.n	8001526 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <HAL_RCC_ClockConfig+0x1f0>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2207      	movs	r2, #7
 8001552:	4013      	ands	r3, r2
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d21e      	bcs.n	8001598 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <HAL_RCC_ClockConfig+0x1f0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2207      	movs	r2, #7
 8001560:	4393      	bics	r3, r2
 8001562:	0019      	movs	r1, r3
 8001564:	4b21      	ldr	r3, [pc, #132]	; (80015ec <HAL_RCC_ClockConfig+0x1f0>)
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800156c:	f7ff f8a6 	bl	80006bc <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001574:	e009      	b.n	800158a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001576:	f7ff f8a1 	bl	80006bc <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <HAL_RCC_ClockConfig+0x1f4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e02c      	b.n	80015e4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <HAL_RCC_ClockConfig+0x1f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2207      	movs	r2, #7
 8001590:	4013      	ands	r3, r2
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d1ee      	bne.n	8001576 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2204      	movs	r2, #4
 800159e:	4013      	ands	r3, r2
 80015a0:	d009      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	4a15      	ldr	r2, [pc, #84]	; (80015fc <HAL_RCC_ClockConfig+0x200>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	0019      	movs	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80015b6:	f000 f829 	bl	800160c <HAL_RCC_GetSysClockFreq>
 80015ba:	0001      	movs	r1, r0
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <HAL_RCC_ClockConfig+0x1f8>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	220f      	movs	r2, #15
 80015c4:	401a      	ands	r2, r3
 80015c6:	4b0e      	ldr	r3, [pc, #56]	; (8001600 <HAL_RCC_ClockConfig+0x204>)
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	58d3      	ldr	r3, [r2, r3]
 80015cc:	221f      	movs	r2, #31
 80015ce:	4013      	ands	r3, r2
 80015d0:	000a      	movs	r2, r1
 80015d2:	40da      	lsrs	r2, r3
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_RCC_ClockConfig+0x208>)
 80015d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80015d8:	4b0b      	ldr	r3, [pc, #44]	; (8001608 <HAL_RCC_ClockConfig+0x20c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff f811 	bl	8000604 <HAL_InitTick>
 80015e2:	0003      	movs	r3, r0
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b004      	add	sp, #16
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40022000 	.word	0x40022000
 80015f0:	00001388 	.word	0x00001388
 80015f4:	40021000 	.word	0x40021000
 80015f8:	fffff0ff 	.word	0xfffff0ff
 80015fc:	ffff8fff 	.word	0xffff8fff
 8001600:	08001c6c 	.word	0x08001c6c
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004

0800160c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001612:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	2238      	movs	r2, #56	; 0x38
 8001618:	4013      	ands	r3, r2
 800161a:	d10f      	bne.n	800163c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800161c:	4b39      	ldr	r3, [pc, #228]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0adb      	lsrs	r3, r3, #11
 8001622:	2207      	movs	r2, #7
 8001624:	4013      	ands	r3, r2
 8001626:	2201      	movs	r2, #1
 8001628:	409a      	lsls	r2, r3
 800162a:	0013      	movs	r3, r2
 800162c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800162e:	6839      	ldr	r1, [r7, #0]
 8001630:	4835      	ldr	r0, [pc, #212]	; (8001708 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001632:	f7fe fd65 	bl	8000100 <__udivsi3>
 8001636:	0003      	movs	r3, r0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	e05d      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800163c:	4b31      	ldr	r3, [pc, #196]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	2238      	movs	r2, #56	; 0x38
 8001642:	4013      	ands	r3, r2
 8001644:	2b08      	cmp	r3, #8
 8001646:	d102      	bne.n	800164e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001648:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_RCC_GetSysClockFreq+0x100>)
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	e054      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800164e:	4b2d      	ldr	r3, [pc, #180]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2238      	movs	r2, #56	; 0x38
 8001654:	4013      	ands	r3, r2
 8001656:	2b10      	cmp	r3, #16
 8001658:	d138      	bne.n	80016cc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800165a:	4b2a      	ldr	r3, [pc, #168]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2203      	movs	r2, #3
 8001660:	4013      	ands	r3, r2
 8001662:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001664:	4b27      	ldr	r3, [pc, #156]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	091b      	lsrs	r3, r3, #4
 800166a:	2207      	movs	r2, #7
 800166c:	4013      	ands	r3, r2
 800166e:	3301      	adds	r3, #1
 8001670:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b03      	cmp	r3, #3
 8001676:	d10d      	bne.n	8001694 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	4824      	ldr	r0, [pc, #144]	; (800170c <HAL_RCC_GetSysClockFreq+0x100>)
 800167c:	f7fe fd40 	bl	8000100 <__udivsi3>
 8001680:	0003      	movs	r3, r0
 8001682:	0019      	movs	r1, r3
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	227f      	movs	r2, #127	; 0x7f
 800168c:	4013      	ands	r3, r2
 800168e:	434b      	muls	r3, r1
 8001690:	617b      	str	r3, [r7, #20]
        break;
 8001692:	e00d      	b.n	80016b0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001694:	68b9      	ldr	r1, [r7, #8]
 8001696:	481c      	ldr	r0, [pc, #112]	; (8001708 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001698:	f7fe fd32 	bl	8000100 <__udivsi3>
 800169c:	0003      	movs	r3, r0
 800169e:	0019      	movs	r1, r3
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	227f      	movs	r2, #127	; 0x7f
 80016a8:	4013      	ands	r3, r2
 80016aa:	434b      	muls	r3, r1
 80016ac:	617b      	str	r3, [r7, #20]
        break;
 80016ae:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0f5b      	lsrs	r3, r3, #29
 80016b6:	2207      	movs	r2, #7
 80016b8:	4013      	ands	r3, r2
 80016ba:	3301      	adds	r3, #1
 80016bc:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7fe fd1d 	bl	8000100 <__udivsi3>
 80016c6:	0003      	movs	r3, r0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	e015      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80016cc:	4b0d      	ldr	r3, [pc, #52]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	2238      	movs	r2, #56	; 0x38
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d103      	bne.n	80016e0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	e00b      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_RCC_GetSysClockFreq+0xf8>)
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2238      	movs	r2, #56	; 0x38
 80016e6:	4013      	ands	r3, r2
 80016e8:	2b18      	cmp	r3, #24
 80016ea:	d103      	bne.n	80016f4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80016ec:	23fa      	movs	r3, #250	; 0xfa
 80016ee:	01db      	lsls	r3, r3, #7
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	e001      	b.n	80016f8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80016f8:	693b      	ldr	r3, [r7, #16]
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	b006      	add	sp, #24
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	40021000 	.word	0x40021000
 8001708:	00f42400 	.word	0x00f42400
 800170c:	007a1200 	.word	0x007a1200

08001710 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001718:	2313      	movs	r3, #19
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2200      	movs	r2, #0
 800171e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001720:	2312      	movs	r3, #18
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	029b      	lsls	r3, r3, #10
 8001730:	4013      	ands	r3, r2
 8001732:	d100      	bne.n	8001736 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001734:	e0a3      	b.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001736:	2011      	movs	r0, #17
 8001738:	183b      	adds	r3, r7, r0
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800173e:	4b7f      	ldr	r3, [pc, #508]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001740:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	055b      	lsls	r3, r3, #21
 8001746:	4013      	ands	r3, r2
 8001748:	d110      	bne.n	800176c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	4b7c      	ldr	r3, [pc, #496]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800174c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800174e:	4b7b      	ldr	r3, [pc, #492]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	0549      	lsls	r1, r1, #21
 8001754:	430a      	orrs	r2, r1
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c
 8001758:	4b78      	ldr	r3, [pc, #480]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800175a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	055b      	lsls	r3, r3, #21
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001766:	183b      	adds	r3, r7, r0
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800176c:	4b74      	ldr	r3, [pc, #464]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b73      	ldr	r3, [pc, #460]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001772:	2180      	movs	r1, #128	; 0x80
 8001774:	0049      	lsls	r1, r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800177a:	f7fe ff9f 	bl	80006bc <HAL_GetTick>
 800177e:	0003      	movs	r3, r0
 8001780:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001782:	e00b      	b.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7fe ff9a 	bl	80006bc <HAL_GetTick>
 8001788:	0002      	movs	r2, r0
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d904      	bls.n	800179c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001792:	2313      	movs	r3, #19
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	2203      	movs	r2, #3
 8001798:	701a      	strb	r2, [r3, #0]
        break;
 800179a:	e005      	b.n	80017a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800179c:	4b68      	ldr	r3, [pc, #416]	; (8001940 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4013      	ands	r3, r2
 80017a6:	d0ed      	beq.n	8001784 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80017a8:	2313      	movs	r3, #19
 80017aa:	18fb      	adds	r3, r7, r3
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d154      	bne.n	800185c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80017b2:	4b62      	ldr	r3, [pc, #392]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017b6:	23c0      	movs	r3, #192	; 0xc0
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d019      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d014      	beq.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80017ce:	4b5b      	ldr	r3, [pc, #364]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d2:	4a5c      	ldr	r2, [pc, #368]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80017d8:	4b58      	ldr	r3, [pc, #352]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017dc:	4b57      	ldr	r3, [pc, #348]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017de:	2180      	movs	r1, #128	; 0x80
 80017e0:	0249      	lsls	r1, r1, #9
 80017e2:	430a      	orrs	r2, r1
 80017e4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80017e6:	4b55      	ldr	r3, [pc, #340]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017ea:	4b54      	ldr	r3, [pc, #336]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017ec:	4956      	ldr	r1, [pc, #344]	; (8001948 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80017ee:	400a      	ands	r2, r1
 80017f0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80017f2:	4b52      	ldr	r3, [pc, #328]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2201      	movs	r2, #1
 80017fc:	4013      	ands	r3, r2
 80017fe:	d016      	beq.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7fe ff5c 	bl	80006bc <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001808:	e00c      	b.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800180a:	f7fe ff57 	bl	80006bc <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	4a4d      	ldr	r2, [pc, #308]	; (800194c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d904      	bls.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800181a:	2313      	movs	r3, #19
 800181c:	18fb      	adds	r3, r7, r3
 800181e:	2203      	movs	r2, #3
 8001820:	701a      	strb	r2, [r3, #0]
            break;
 8001822:	e004      	b.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001824:	4b45      	ldr	r3, [pc, #276]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d0ed      	beq.n	800180a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800182e:	2313      	movs	r3, #19
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d10a      	bne.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001838:	4b40      	ldr	r3, [pc, #256]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	4a41      	ldr	r2, [pc, #260]	; (8001944 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800183e:	4013      	ands	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001848:	430a      	orrs	r2, r1
 800184a:	65da      	str	r2, [r3, #92]	; 0x5c
 800184c:	e00c      	b.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800184e:	2312      	movs	r3, #18
 8001850:	18fb      	adds	r3, r7, r3
 8001852:	2213      	movs	r2, #19
 8001854:	18ba      	adds	r2, r7, r2
 8001856:	7812      	ldrb	r2, [r2, #0]
 8001858:	701a      	strb	r2, [r3, #0]
 800185a:	e005      	b.n	8001868 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800185c:	2312      	movs	r3, #18
 800185e:	18fb      	adds	r3, r7, r3
 8001860:	2213      	movs	r2, #19
 8001862:	18ba      	adds	r2, r7, r2
 8001864:	7812      	ldrb	r2, [r2, #0]
 8001866:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001868:	2311      	movs	r3, #17
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d105      	bne.n	800187e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001872:	4b32      	ldr	r3, [pc, #200]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001874:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001876:	4b31      	ldr	r3, [pc, #196]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001878:	4935      	ldr	r1, [pc, #212]	; (8001950 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800187a:	400a      	ands	r2, r1
 800187c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	d009      	beq.n	800189c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001888:	4b2c      	ldr	r3, [pc, #176]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800188a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188c:	2203      	movs	r2, #3
 800188e:	4393      	bics	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001898:	430a      	orrs	r2, r1
 800189a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2220      	movs	r2, #32
 80018a2:	4013      	ands	r3, r2
 80018a4:	d009      	beq.n	80018ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018a6:	4b25      	ldr	r3, [pc, #148]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	4a2a      	ldr	r2, [pc, #168]	; (8001954 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80018ac:	4013      	ands	r3, r2
 80018ae:	0019      	movs	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	01db      	lsls	r3, r3, #7
 80018c2:	4013      	ands	r3, r2
 80018c4:	d015      	beq.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80018c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	0899      	lsrs	r1, r3, #2
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691a      	ldr	r2, [r3, #16]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	05db      	lsls	r3, r3, #23
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d106      	bne.n	80018f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80018ea:	2180      	movs	r1, #128	; 0x80
 80018ec:	0249      	lsls	r1, r1, #9
 80018ee:	430a      	orrs	r2, r1
 80018f0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	011b      	lsls	r3, r3, #4
 80018fa:	4013      	ands	r3, r2
 80018fc:	d016      	beq.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001902:	4a15      	ldr	r2, [pc, #84]	; (8001958 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800190e:	430a      	orrs	r2, r1
 8001910:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	2380      	movs	r3, #128	; 0x80
 8001918:	01db      	lsls	r3, r3, #7
 800191a:	429a      	cmp	r2, r3
 800191c:	d106      	bne.n	800192c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800191e:	4b07      	ldr	r3, [pc, #28]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001920:	68da      	ldr	r2, [r3, #12]
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001924:	2180      	movs	r1, #128	; 0x80
 8001926:	0249      	lsls	r1, r1, #9
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800192c:	2312      	movs	r3, #18
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	781b      	ldrb	r3, [r3, #0]
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b006      	add	sp, #24
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	40021000 	.word	0x40021000
 8001940:	40007000 	.word	0x40007000
 8001944:	fffffcff 	.word	0xfffffcff
 8001948:	fffeffff 	.word	0xfffeffff
 800194c:	00001388 	.word	0x00001388
 8001950:	efffffff 	.word	0xefffffff
 8001954:	ffffcfff 	.word	0xffffcfff
 8001958:	ffff3fff 	.word	0xffff3fff

0800195c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001964:	230f      	movs	r3, #15
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d100      	bne.n	8001974 <HAL_RTC_Init+0x18>
 8001972:	e08c      	b.n	8001a8e <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2229      	movs	r2, #41	; 0x29
 8001978:	5c9b      	ldrb	r3, [r3, r2]
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10b      	bne.n	8001998 <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2228      	movs	r2, #40	; 0x28
 8001984:	2100      	movs	r1, #0
 8001986:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2288      	movs	r2, #136	; 0x88
 800198c:	0212      	lsls	r2, r2, #8
 800198e:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	0018      	movs	r0, r3
 8001994:	f7fe fd6e 	bl	8000474 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2229      	movs	r2, #41	; 0x29
 800199c:	2102      	movs	r1, #2
 800199e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	2210      	movs	r2, #16
 80019a8:	4013      	ands	r3, r2
 80019aa:	2b10      	cmp	r3, #16
 80019ac:	d062      	beq.n	8001a74 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	22ca      	movs	r2, #202	; 0xca
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2253      	movs	r2, #83	; 0x53
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80019be:	250f      	movs	r5, #15
 80019c0:	197c      	adds	r4, r7, r5
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 f892 	bl	8001aee <RTC_EnterInitMode>
 80019ca:	0003      	movs	r3, r0
 80019cc:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 80019ce:	0028      	movs	r0, r5
 80019d0:	183b      	adds	r3, r7, r0
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d12c      	bne.n	8001a32 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	492e      	ldr	r1, [pc, #184]	; (8001a9c <HAL_RTC_Init+0x140>)
 80019e4:	400a      	ands	r2, r1
 80019e6:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6999      	ldr	r1, [r3, #24]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	431a      	orrs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
 80019fc:	431a      	orrs	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	430a      	orrs	r2, r1
 8001a04:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6912      	ldr	r2, [r2, #16]
 8001a0e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6919      	ldr	r1, [r3, #16]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	041a      	lsls	r2, r3, #16
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8001a24:	183c      	adds	r4, r7, r0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f000 f8a3 	bl	8001b74 <RTC_ExitInitMode>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8001a32:	230f      	movs	r3, #15
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d116      	bne.n	8001a6a <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699a      	ldr	r2, [r3, #24]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	00d2      	lsls	r2, r2, #3
 8001a48:	08d2      	lsrs	r2, r2, #3
 8001a4a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6999      	ldr	r1, [r3, #24]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	431a      	orrs	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	22ff      	movs	r2, #255	; 0xff
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
 8001a72:	e003      	b.n	8001a7c <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8001a74:	230f      	movs	r3, #15
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	18fb      	adds	r3, r7, r3
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d103      	bne.n	8001a8e <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2229      	movs	r2, #41	; 0x29
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8001a8e:	230f      	movs	r3, #15
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	781b      	ldrb	r3, [r3, #0]
}
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b004      	add	sp, #16
 8001a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9c:	fb8fffbf 	.word	0xfb8fffbf

08001aa0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	21a0      	movs	r1, #160	; 0xa0
 8001ab4:	438a      	bics	r2, r1
 8001ab6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001ab8:	f7fe fe00 	bl	80006bc <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8001ac2:	f7fe fdfb 	bl	80006bc <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad2      	subs	r2, r2, r3
 8001acc:	23fa      	movs	r3, #250	; 0xfa
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e006      	b.n	8001ae6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	2220      	movs	r2, #32
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d0ee      	beq.n	8001ac2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b004      	add	sp, #16
 8001aec:	bd80      	pop	{r7, pc}

08001aee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8001af6:	230f      	movs	r3, #15
 8001af8:	18fb      	adds	r3, r7, r3
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2240      	movs	r2, #64	; 0x40
 8001b06:	4013      	ands	r3, r2
 8001b08:	d12c      	bne.n	8001b64 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68da      	ldr	r2, [r3, #12]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2180      	movs	r1, #128	; 0x80
 8001b16:	430a      	orrs	r2, r1
 8001b18:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001b1a:	f7fe fdcf 	bl	80006bc <HAL_GetTick>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001b22:	e014      	b.n	8001b4e <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8001b24:	f7fe fdca 	bl	80006bc <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	200f      	movs	r0, #15
 8001b30:	183b      	adds	r3, r7, r0
 8001b32:	1839      	adds	r1, r7, r0
 8001b34:	7809      	ldrb	r1, [r1, #0]
 8001b36:	7019      	strb	r1, [r3, #0]
 8001b38:	23fa      	movs	r3, #250	; 0xfa
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d906      	bls.n	8001b4e <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8001b40:	183b      	adds	r3, r7, r0
 8001b42:	2203      	movs	r2, #3
 8001b44:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2229      	movs	r2, #41	; 0x29
 8001b4a:	2103      	movs	r1, #3
 8001b4c:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2240      	movs	r2, #64	; 0x40
 8001b56:	4013      	ands	r3, r2
 8001b58:	d104      	bne.n	8001b64 <RTC_EnterInitMode+0x76>
 8001b5a:	230f      	movs	r3, #15
 8001b5c:	18fb      	adds	r3, r7, r3
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d1df      	bne.n	8001b24 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8001b64:	230f      	movs	r3, #15
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	781b      	ldrb	r3, [r3, #0]
}
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	b004      	add	sp, #16
 8001b70:	bd80      	pop	{r7, pc}
	...

08001b74 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b7c:	240f      	movs	r4, #15
 8001b7e:	193b      	adds	r3, r7, r4
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <RTC_ExitInitMode+0x84>)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <RTC_ExitInitMode+0x84>)
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	438a      	bics	r2, r1
 8001b8e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <RTC_ExitInitMode+0x84>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	2220      	movs	r2, #32
 8001b96:	4013      	ands	r3, r2
 8001b98:	d10d      	bne.n	8001bb6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	f7ff ff7f 	bl	8001aa0 <HAL_RTC_WaitForSynchro>
 8001ba2:	1e03      	subs	r3, r0, #0
 8001ba4:	d021      	beq.n	8001bea <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2229      	movs	r2, #41	; 0x29
 8001baa:	2103      	movs	r1, #3
 8001bac:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	701a      	strb	r2, [r3, #0]
 8001bb4:	e019      	b.n	8001bea <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001bb6:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <RTC_ExitInitMode+0x84>)
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <RTC_ExitInitMode+0x84>)
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	438a      	bics	r2, r1
 8001bc0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff ff6b 	bl	8001aa0 <HAL_RTC_WaitForSynchro>
 8001bca:	1e03      	subs	r3, r0, #0
 8001bcc:	d007      	beq.n	8001bde <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2229      	movs	r2, #41	; 0x29
 8001bd2:	2103      	movs	r1, #3
 8001bd4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001bd6:	230f      	movs	r3, #15
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	2203      	movs	r2, #3
 8001bdc:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <RTC_ExitInitMode+0x84>)
 8001be0:	699a      	ldr	r2, [r3, #24]
 8001be2:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <RTC_ExitInitMode+0x84>)
 8001be4:	2120      	movs	r1, #32
 8001be6:	430a      	orrs	r2, r1
 8001be8:	619a      	str	r2, [r3, #24]
  }

  return status;
 8001bea:	230f      	movs	r3, #15
 8001bec:	18fb      	adds	r3, r7, r3
 8001bee:	781b      	ldrb	r3, [r3, #0]
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b005      	add	sp, #20
 8001bf6:	bd90      	pop	{r4, r7, pc}
 8001bf8:	40002800 	.word	0x40002800

08001bfc <__libc_init_array>:
 8001bfc:	b570      	push	{r4, r5, r6, lr}
 8001bfe:	2600      	movs	r6, #0
 8001c00:	4d0c      	ldr	r5, [pc, #48]	; (8001c34 <__libc_init_array+0x38>)
 8001c02:	4c0d      	ldr	r4, [pc, #52]	; (8001c38 <__libc_init_array+0x3c>)
 8001c04:	1b64      	subs	r4, r4, r5
 8001c06:	10a4      	asrs	r4, r4, #2
 8001c08:	42a6      	cmp	r6, r4
 8001c0a:	d109      	bne.n	8001c20 <__libc_init_array+0x24>
 8001c0c:	2600      	movs	r6, #0
 8001c0e:	f000 f821 	bl	8001c54 <_init>
 8001c12:	4d0a      	ldr	r5, [pc, #40]	; (8001c3c <__libc_init_array+0x40>)
 8001c14:	4c0a      	ldr	r4, [pc, #40]	; (8001c40 <__libc_init_array+0x44>)
 8001c16:	1b64      	subs	r4, r4, r5
 8001c18:	10a4      	asrs	r4, r4, #2
 8001c1a:	42a6      	cmp	r6, r4
 8001c1c:	d105      	bne.n	8001c2a <__libc_init_array+0x2e>
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}
 8001c20:	00b3      	lsls	r3, r6, #2
 8001c22:	58eb      	ldr	r3, [r5, r3]
 8001c24:	4798      	blx	r3
 8001c26:	3601      	adds	r6, #1
 8001c28:	e7ee      	b.n	8001c08 <__libc_init_array+0xc>
 8001c2a:	00b3      	lsls	r3, r6, #2
 8001c2c:	58eb      	ldr	r3, [r5, r3]
 8001c2e:	4798      	blx	r3
 8001c30:	3601      	adds	r6, #1
 8001c32:	e7f2      	b.n	8001c1a <__libc_init_array+0x1e>
 8001c34:	08001cac 	.word	0x08001cac
 8001c38:	08001cac 	.word	0x08001cac
 8001c3c:	08001cac 	.word	0x08001cac
 8001c40:	08001cb0 	.word	0x08001cb0

08001c44 <memset>:
 8001c44:	0003      	movs	r3, r0
 8001c46:	1882      	adds	r2, r0, r2
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d100      	bne.n	8001c4e <memset+0xa>
 8001c4c:	4770      	bx	lr
 8001c4e:	7019      	strb	r1, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	e7f9      	b.n	8001c48 <memset+0x4>

08001c54 <_init>:
 8001c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c5a:	bc08      	pop	{r3}
 8001c5c:	469e      	mov	lr, r3
 8001c5e:	4770      	bx	lr

08001c60 <_fini>:
 8001c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c66:	bc08      	pop	{r3}
 8001c68:	469e      	mov	lr, r3
 8001c6a:	4770      	bx	lr
